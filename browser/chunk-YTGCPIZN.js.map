{
  "version": 3,
  "sources": ["src/environments/environment.development.ts", "src/app/api-gateway/api-gateaway.service.ts"],
  "sourcesContent": ["import { Environment } from './environment.model';\n\nexport class environment extends Environment {\n  public override production: boolean = false;\n}\n\nexport const ENV: Environment = new environment();\n", "import { HttpClient, HttpHeaders, HttpContext, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLoading } from '../shared/Interceptor/loading-interceptor';\nimport { ENV } from 'src/environments/environment.development';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiGatewayService {\n  protected api = ENV.apiUrl;\n\n  constructor(private http: HttpClient) { }\n  private createHeaders(skipLoading: boolean): { headers: HttpHeaders; context: HttpContext } {\n    let headers = new HttpHeaders();\n    let context = new HttpContext().set(SkipLoading, skipLoading);\n\n    headers = headers.set('Access-Control-Allow-Origin', '*');\n    headers = headers.set('Access-Control-Allow-Methods', 'GET,POST,OPTIONS,DELETE,PUT');\n    headers = headers.set(\n      'Access-Control-Allow-Headers',\n      'Origin, X-Requested-With, Content-Type, Accept, x-client-key, x-client-token, x-client-secret, Authorization'\n    );\n\n    return { headers, context };\n  }\n\n  request(method: string, url: string, body: any = null, skipLoading: boolean = false): Observable<any> {\n    const { headers, context } = this.createHeaders(skipLoading);\n    url = this.api + url;\n\n    switch (method) {\n      case 'GET':\n        return this.http.get(url, { headers, context });\n      case 'POST':\n        return this.http.post(url, body, { headers, context });\n      case 'PUT':\n        return this.http.put(url, body, { headers, context });\n      case 'DELETE':\n        return this.http.delete(url, { headers, context });\n      default:\n        throw new Error('Unsupported request method');\n    }\n  }\n\n  get(url: string, skipLoading: boolean = false): Observable<any> {\n    return this.request('GET', url, null, skipLoading);\n  }\n\n  post(url: string, body: any, skipLoading: boolean = false): Observable<any> {\n    return this.request('POST', url, body, skipLoading);\n  }\n\n  put(url: string, body: any, skipLoading: boolean = false): Observable<any> {\n    return this.request('PUT', url, body, skipLoading);\n  }\n\n  delete(url: string, skipLoading: boolean = false): Observable<any> {\n    return this.request('DELETE', url, null, skipLoading);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AAEM,IAAO,cAAP,cAA2B,YAAW;EAA5C,cAAA;;AACkB,SAAA,aAAsB;EACxC;;AAEO,IAAM,MAAmB,IAAI,YAAW;;;ACGzC,IAAO,oBAAP,MAAO,mBAAiB;EAG5B,YAAoB,MAAgB;AAAhB,SAAA,OAAA;AAFV,SAAA,MAAM,IAAI;EAEoB;EAChC,cAAc,aAAoB;AACxC,QAAI,UAAU,IAAI,YAAW;AAC7B,QAAI,UAAU,IAAI,YAAW,EAAG,IAAI,aAAa,WAAW;AAE5D,cAAU,QAAQ,IAAI,+BAA+B,GAAG;AACxD,cAAU,QAAQ,IAAI,gCAAgC,6BAA6B;AACnF,cAAU,QAAQ,IAChB,gCACA,8GAA8G;AAGhH,WAAO,EAAE,SAAS,QAAO;EAC3B;EAEA,QAAQ,QAAgB,KAAa,OAAY,MAAM,cAAuB,OAAK;AACjF,UAAM,EAAE,SAAS,QAAO,IAAK,KAAK,cAAc,WAAW;AAC3D,UAAM,KAAK,MAAM;AAEjB,YAAQ,QAAQ;MACd,KAAK;AACH,eAAO,KAAK,KAAK,IAAI,KAAK,EAAE,SAAS,QAAO,CAAE;MAChD,KAAK;AACH,eAAO,KAAK,KAAK,KAAK,KAAK,MAAM,EAAE,SAAS,QAAO,CAAE;MACvD,KAAK;AACH,eAAO,KAAK,KAAK,IAAI,KAAK,MAAM,EAAE,SAAS,QAAO,CAAE;MACtD,KAAK;AACH,eAAO,KAAK,KAAK,OAAO,KAAK,EAAE,SAAS,QAAO,CAAE;MACnD;AACE,cAAM,IAAI,MAAM,4BAA4B;IAChD;EACF;EAEA,IAAI,KAAa,cAAuB,OAAK;AAC3C,WAAO,KAAK,QAAQ,OAAO,KAAK,MAAM,WAAW;EACnD;EAEA,KAAK,KAAa,MAAW,cAAuB,OAAK;AACvD,WAAO,KAAK,QAAQ,QAAQ,KAAK,MAAM,WAAW;EACpD;EAEA,IAAI,KAAa,MAAW,cAAuB,OAAK;AACtD,WAAO,KAAK,QAAQ,OAAO,KAAK,MAAM,WAAW;EACnD;EAEA,OAAO,KAAa,cAAuB,OAAK;AAC9C,WAAO,KAAK,QAAQ,UAAU,KAAK,MAAM,WAAW;EACtD;;;uCAlDW,oBAAiB,mBAAA,UAAA,CAAA;IAAA;EAAA;;4EAAjB,oBAAiB,SAAjB,mBAAiB,WAAA,YAFhB,OAAM,CAAA;EAAA;;",
  "names": []
}
