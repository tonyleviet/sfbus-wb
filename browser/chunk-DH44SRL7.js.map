{
  "version": 3,
  "sources": ["src/app/shared/directives/click-outside.directive.ts"],
  "sourcesContent": ["import { DOCUMENT } from '@angular/common';\nimport { AfterViewInit, Directive, ElementRef, EventEmitter, Inject, OnDestroy, Output } from '@angular/core';\nimport { filter, fromEvent, Subscription } from 'rxjs';\n\n@Directive({\n  selector: '[clickOutside]',\n  standalone: true,\n})\nexport class ClickOutsideDirective implements AfterViewInit, OnDestroy {\n  @Output() clickOutside = new EventEmitter<void>();\n\n  documentClickSubscription: Subscription | undefined;\n\n  constructor(private element: ElementRef, @Inject(DOCUMENT) private document: Document) { }\n\n  ngAfterViewInit(): void {\n    this.documentClickSubscription = fromEvent(this.document, 'click')\n      .pipe(\n        filter((event) => {\n          return !this.isInside(event.target as HTMLElement);\n        }),\n      )\n      .subscribe(() => {\n        this.clickOutside.emit();\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.documentClickSubscription?.unsubscribe();\n  }\n\n  isInside(elementToCheck: HTMLElement): boolean {\n    return elementToCheck === this.element.nativeElement || this.element.nativeElement.contains(elementToCheck);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;AAQM,IAAO,wBAAP,MAAO,uBAAqB;EAKhC,YAAoB,SAA+C,UAAkB;AAAjE,SAAA,UAAA;AAA+C,SAAA,WAAA;AAJzD,SAAA,eAAe,IAAI,aAAY;EAIgD;EAEzF,kBAAe;AACb,SAAK,4BAA4B,UAAU,KAAK,UAAU,OAAO,EAC9D,KACC,OAAO,CAAC,UAAS;AACf,aAAO,CAAC,KAAK,SAAS,MAAM,MAAqB;IACnD,CAAC,CAAC,EAEH,UAAU,MAAK;AACd,WAAK,aAAa,KAAI;IACxB,CAAC;EACL;EAEA,cAAW;AACT,SAAK,2BAA2B,YAAW;EAC7C;EAEA,SAAS,gBAA2B;AAClC,WAAO,mBAAmB,KAAK,QAAQ,iBAAiB,KAAK,QAAQ,cAAc,SAAS,cAAc;EAC5G;;;uCAzBW,wBAAqB,4BAAA,UAAA,GAAA,4BAKiB,QAAQ,CAAA;IAAA;EAAA;;yEAL9C,wBAAqB,WAAA,CAAA,CAAA,IAAA,gBAAA,EAAA,CAAA,GAAA,SAAA,EAAA,cAAA,eAAA,EAAA,CAAA;EAAA;;",
  "names": []
}
