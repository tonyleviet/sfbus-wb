import {
  A11yModule,
  BACKSPACE,
  BasePortalOutlet,
  CDK_TREE_NODE_OUTLET_NODE,
  CdkConnectedOverlay,
  CdkDrag,
  CdkDragHandle,
  CdkDropList,
  CdkFixedSizeVirtualScroll,
  CdkMonitorFocus,
  CdkOverlayOrigin,
  CdkPortalOutlet,
  CdkScrollable,
  CdkStepperModule,
  CdkTableModule,
  CdkTree,
  CdkTreeModule,
  CdkTreeNode,
  CdkTreeNodeDef,
  CdkTreeNodeOutlet,
  CdkTreeNodeOutletContext,
  CdkTreeNodePadding,
  CdkTreeNodeToggle,
  CdkVirtualForOf,
  CdkVirtualScrollViewport,
  ComponentPortal,
  ConnectionPositionPair,
  DOWN_ARROW,
  Directionality,
  DragDropModule,
  ENTER,
  ESCAPE,
  FocusKeyManager,
  FocusMonitor,
  FocusTrapFactory,
  LEFT_ARROW,
  MAT_DIALOG_DATA,
  MatAutocompleteModule,
  MatBadgeModule,
  MatBottomSheetModule,
  MatButton,
  MatButtonModule,
  MatButtonToggleModule,
  MatCardModule,
  MatCheckboxModule,
  MatChipsModule,
  MatDatepickerModule,
  MatDialog,
  MatDialogActions,
  MatDialogClose,
  MatDialogContent,
  MatDialogModule,
  MatDialogRef,
  MatDividerModule,
  MatExpansionModule,
  MatFormFieldModule,
  MatGridListModule,
  MatIconModule,
  MatInputModule,
  MatListModule,
  MatMenuModule,
  MatNativeDateModule,
  MatPaginatorModule,
  MatProgressBarModule,
  MatProgressSpinnerModule,
  MatRadioModule,
  MatRippleModule,
  MatSelectModule,
  MatSidenavModule,
  MatSlideToggleModule,
  MatSliderModule,
  MatSnackBarModule,
  MatSortModule,
  MatStepperModule,
  MatTableModule,
  MatTabsModule,
  MatToolbarModule,
  MatTooltip,
  MatTooltipModule,
  MatTreeModule,
  MediaMatcher,
  NzI18nService,
  Overlay,
  OverlayConfig,
  OverlayModule,
  OverlayRef,
  PREFIX,
  Platform,
  PortalModule,
  RIGHT_ARROW,
  SPACE,
  ScrollingModule,
  TAB,
  TemplatePortal,
  UP_ARROW,
  ViewportRuler,
  _defineProperty,
  _getEventTarget,
  canUseDom,
  coerceElement,
  coerceNumberProperty,
  environment,
  fromEventOutsideAngular,
  getElementOffset,
  getEventPosition,
  getStatusClassNames,
  hasModifierKey,
  isNotNil,
  isNumberFinite,
  isPromise,
  isTouchEvent,
  moveItemInArray,
  numberAttributeWithZeroFallback,
  scrollIntoView,
  sum,
  toBoolean,
  toDecimal,
  transferArrayItem,
  updateCSS,
  warn,
  wrapIntoObservable
} from "./chunk-3JP6AOEX.js";
import "./chunk-T2T4RLTU.js";
import {
  ClickOutsideDirective
} from "./chunk-DH44SRL7.js";
import {
  animate,
  query,
  stagger,
  state,
  style,
  transition,
  trigger
} from "./chunk-7WH35BIY.js";
import {
  AbstractControl,
  COMPOSITION_BUFFER_MODE,
  CheckboxControlValueAccessor,
  DefaultValueAccessor,
  FormArrayName,
  FormBuilder,
  FormControlDirective,
  FormControlName,
  FormGroupDirective,
  FormGroupName,
  FormsModule,
  MaxLengthValidator,
  NG_VALUE_ACCESSOR,
  NgControl,
  NgControlStatus,
  NgControlStatusGroup,
  NgForm,
  NgModel,
  NgSelectOption,
  NumberValueAccessor,
  ReactiveFormsModule,
  Validators,
  toast,
  ɵNgNoValidate,
  ɵNgSelectMultipleOption
} from "./chunk-PZA2EHSO.js";
import {
  ApiGatewayService
} from "./chunk-YTGCPIZN.js";
import "./chunk-RBZQD2EI.js";
import {
  AngularSvgIconModule,
  DomSanitizer,
  HttpBackend,
  HttpClient,
  NavigationEnd,
  Router,
  RouterLink,
  RouterModule,
  RouterOutlet,
  SvgIconComponent
} from "./chunk-DTK37CSC.js";
import {
  ANIMATION_MODULE_TYPE,
  BehaviorSubject,
  CSP_NONCE,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  CommonModule,
  Component,
  ComponentFactoryResolver$1,
  ContentChild,
  ContentChildren,
  DOCUMENT,
  DestroyRef,
  Directive,
  EMPTY,
  ElementRef,
  EventEmitter,
  Inject,
  Injectable,
  InjectionToken,
  Injector,
  Input,
  IterableDiffers,
  Location,
  NgClass,
  NgForOf,
  NgIf,
  NgModule,
  NgTemplateOutlet,
  NgZone,
  Observable,
  Optional,
  Output,
  PLATFORM_ID,
  Pipe,
  QueryList,
  Renderer2,
  RendererFactory2,
  ReplaySubject,
  RuntimeError,
  SecurityContext,
  Subject,
  Subscription,
  TemplateRef,
  Type,
  ViewChild,
  ViewChildren,
  ViewContainerRef,
  ViewEncapsulation,
  __async,
  __commonJS,
  __objRest,
  __spreadProps,
  __spreadValues,
  __toESM,
  afterNextRender,
  animationFrameScheduler,
  asapScheduler,
  assertInInjectionContext,
  assertNotInReactiveContext,
  auditTime,
  booleanAttribute,
  catchError,
  combineLatest,
  computed,
  defer,
  delay,
  distinctUntilChanged,
  effect,
  filter,
  finalize,
  first,
  forwardRef,
  from,
  fromEvent,
  inject,
  input,
  isDevMode,
  isPlatformBrowser,
  linkedSignal,
  makeEnvironmentProviders,
  map,
  mapTo,
  merge,
  mergeMap,
  numberAttribute,
  of,
  setClassMetadata,
  share,
  signal,
  startWith,
  switchMap,
  take,
  takeUntil,
  tap,
  withLatestFrom,
  ɵsetClassDebugInfo,
  ɵɵHostDirectivesFeature,
  ɵɵInheritDefinitionFeature,
  ɵɵInputTransformsFeature,
  ɵɵNgOnChangesFeature,
  ɵɵProvidersFeature,
  ɵɵadvance,
  ɵɵattribute,
  ɵɵclassMap,
  ɵɵclassMapInterpolate1,
  ɵɵclassProp,
  ɵɵconditional,
  ɵɵcontentQuery,
  ɵɵdefineComponent,
  ɵɵdefineDirective,
  ɵɵdefineInjectable,
  ɵɵdefineInjector,
  ɵɵdefineNgModule,
  ɵɵdefinePipe,
  ɵɵdirectiveInject,
  ɵɵelement,
  ɵɵelementContainer,
  ɵɵelementContainerEnd,
  ɵɵelementContainerStart,
  ɵɵelementEnd,
  ɵɵelementStart,
  ɵɵgetCurrentView,
  ɵɵgetInheritedFactory,
  ɵɵinject,
  ɵɵlistener,
  ɵɵloadQuery,
  ɵɵnamespaceHTML,
  ɵɵnamespaceSVG,
  ɵɵnextContext,
  ɵɵpipe,
  ɵɵpipeBind1,
  ɵɵprojection,
  ɵɵprojectionDef,
  ɵɵproperty,
  ɵɵpropertyInterpolate,
  ɵɵpropertyInterpolate1,
  ɵɵpropertyInterpolate2,
  ɵɵpureFunction0,
  ɵɵpureFunction1,
  ɵɵpureFunction2,
  ɵɵpureFunction3,
  ɵɵqueryRefresh,
  ɵɵreference,
  ɵɵrepeater,
  ɵɵrepeaterCreate,
  ɵɵrepeaterTrackByIdentity,
  ɵɵrepeaterTrackByIndex,
  ɵɵresetView,
  ɵɵrestoreView,
  ɵɵsanitizeHtml,
  ɵɵsanitizeUrl,
  ɵɵstyleMap,
  ɵɵstyleProp,
  ɵɵsyntheticHostListener,
  ɵɵsyntheticHostProperty,
  ɵɵtemplate,
  ɵɵtemplateRefExtractor,
  ɵɵtext,
  ɵɵtextInterpolate,
  ɵɵtextInterpolate1,
  ɵɵtextInterpolate2,
  ɵɵtextInterpolate3,
  ɵɵtwoWayBindingSet,
  ɵɵtwoWayListener,
  ɵɵtwoWayProperty,
  ɵɵviewQuery
} from "./chunk-NHZPFPRM.js";

// node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  "node_modules/lodash/lodash.js"(exports, module) {
    "use strict";
    (function() {
      var undefined2;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [["ary", WRAP_ARY_FLAG], ["bind", WRAP_BIND_FLAG], ["bindKey", WRAP_BIND_KEY_FLAG], ["curry", WRAP_CURRY_FLAG], ["curryRight", WRAP_CURRY_RIGHT_FLAG], ["flip", WRAP_FLIP_FLAG], ["partial", WRAP_PARTIAL_FLAG], ["partialRight", WRAP_PARTIAL_RIGHT_FLAG], ["rearg", WRAP_REARG_FLAG]];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")", rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")", rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower, rsUpper + "+" + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = ["Array", "Buffer", "DataView", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Map", "Math", "Object", "Promise", "RegExp", "Set", "String", "Symbol", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap", "_", "clearTimeout", "isFinite", "parseInt", "setTimeout"];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        // Latin Extended-A block.
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue3(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map2) {
        var index = -1, result = Array(map2.size);
        map2.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _3.defaults(root.Object(), context, _3.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        var Buffer = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap && new WeakMap();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = /* @__PURE__ */ function() {
          function object() {
          }
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "escape": reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "evaluate": reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "interpolate": reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          "variable": "",
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          "imports": {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer: while (length-- && resIndex < takeCount) {
            index += dir;
            var iterIndex = -1, value = array[index];
            while (++iterIndex < iterLength) {
              var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed2 = iteratee2(value);
              if (type == LAZY_MAP_FLAG) {
                value = computed2;
              } else if (!computed2) {
                if (type == LAZY_FILTER_FLAG) {
                  continue outer;
                } else {
                  break outer;
                }
              }
            }
            result2[resIndex++] = value;
          }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined2 : get(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined2) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined2 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer: while (++index < length) {
            var value = array[index], computed2 = iteratee2 == null ? value : iteratee2(value);
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed2 === computed2) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values2[valuesIndex] === computed2) {
                  continue outer;
                }
              }
              result2.push(value);
            } else if (!includes2(values2, computed2, comparator)) {
              result2.push(value);
            }
          }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1, length = array.length;
          while (++index < length) {
            var value = array[index], current = iteratee2(value);
            if (current != null && (computed2 === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed2))) {
              var computed2 = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }
        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0, length = path.length;
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
          }
          array = arrays[0];
          var index = -1, seen = caches[0];
          outer: while (++index < length && result2.length < maxLength) {
            var value = array[index], computed2 = iteratee2 ? iteratee2(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (!(seen ? cacheHas(seen, computed2) : includes2(result2, computed2, comparator))) {
              othIndex = othLength;
              while (--othIndex) {
                var cache = caches[othIndex];
                if (!(cache ? cacheHas(cache, computed2) : includes2(arrays[othIndex], computed2, comparator))) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed2);
              }
              result2.push(value);
            }
          }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get(object, path);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return {
              "criteria": criteria,
              "index": ++index,
              "value": value
            };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet(object, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed2 = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed2, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n) {
          var result2 = "";
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed2 = array[mid];
              if (computed2 !== null && !isSymbol(computed2) && (retHighest ? computed2 <= value : computed2 < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0, high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed2 = iteratee2(array[mid]), othIsDefined = computed2 !== undefined2, othIsNull = computed2 === null, othIsReflexive = computed2 === computed2, othIsSymbol = isSymbol(computed2);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed2 <= value : computed2 < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index], computed2 = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed2, seen)) {
              var seen = computed2;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer: while (++index < length) {
            var value = array[index], computed2 = iteratee2 ? iteratee2(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed2 === computed2) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed2) {
                  continue outer;
                }
              }
              if (iteratee2) {
                seen.push(computed2);
              }
              result2.push(value);
            } else if (!includes2(seen, computed2, comparator)) {
              if (seen !== result2) {
                seen.push(computed2);
              }
              result2.push(value);
            }
          }
          return result2;
        }
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
          }
          return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array(result2).set(new Uint8Array(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined2, args, holders, undefined2, undefined2, arity - length);
            }
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary2, arity - length);
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary2, arity];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && "constructor" in object && "constructor" in other && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map3, key) {
          var data = map3.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue3(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return {
            "start": start,
            "end": end
          };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array) {
          var length = array.length, result2 = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
        }
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1, length = array.length, lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array, index, index += size2);
          }
          return result2;
        }
        function compact(array) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined2;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined2;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
          return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
        }
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove2(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take2(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array && array.length ? baseUniq(array, undefined2, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap2(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined2);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return {
            "done": done,
            "value": value
          };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter2(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map2(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map2(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map2(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map2(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined2 : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer2 = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay2 = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(/* @__PURE__ */ function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge2 = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath(path, object);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index < length) {
            var value = object == null ? undefined2 : object[toKey(path[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
            return iteratee2(accumulator, value, index, object2);
          });
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }
        function replace() {
          var args = arguments, string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({
                    "func": func,
                    "args": arguments,
                    "thisArg": object
                  });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop() {
        }
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined2 : baseGet(object, path);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array) {
          return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean(array) {
          return baseMean(array, identity);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round2 = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum2(array) {
          return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer2;
        lodash.delay = delay2;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter2;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map2;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge2;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove2;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take2;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap2;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round2;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum2;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), {
          "chain": false
        });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({
                "func": thru,
                "args": [interceptor],
                "thisArg": undefined2
              });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({
              "name": methodName,
              "func": lodashFunc
            });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _3 = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _3;
        define(function() {
          return _3;
        });
      } else if (freeModule) {
        (freeModule.exports = _3)._ = _3;
        freeExports._ = _3;
      } else {
        root._ = _3;
      }
    }).call(exports);
  }
});

// src/app/modules/management/components/table-header/table-header.component.ts
var _c0 = ["app-table-header", ""];
var TableHeaderComponent = class _TableHeaderComponent {
  constructor() {
    this.onCheck = new EventEmitter();
  }
  toggle(event2) {
    const value = event2.target.checked;
    this.onCheck.emit(value);
  }
  static {
    this.\u0275fac = function TableHeaderComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _TableHeaderComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _TableHeaderComponent, selectors: [["", "app-table-header", ""]], outputs: { onCheck: "onCheck" }, standalone: false, attrs: _c0, decls: 14, vars: 0, consts: [[1, "w-[50px]"], ["data-datatable-check", "true", "type", "checkbox", 1, "checkbox", "checkbox-sm", 3, "change"], [1, "min-w-[300px]"], [1, "min-w-[180px]"], [1, "min-w-[150px]"], [1, "w-[60px]"]], template: function TableHeaderComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementContainerStart(0);
        \u0275\u0275elementStart(1, "th", 0)(2, "input", 1);
        \u0275\u0275listener("change", function TableHeaderComponent_Template_input_change_2_listener($event) {
          return ctx.toggle($event);
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(3, "th", 2);
        \u0275\u0275text(4, "Member");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "th", 3);
        \u0275\u0275text(6, "Username");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(7, "th", 3);
        \u0275\u0275text(8, "Hobbies");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(9, "th", 3);
        \u0275\u0275text(10, "Occupation");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(11, "th", 4);
        \u0275\u0275text(12, "Phone");
        \u0275\u0275elementEnd();
        \u0275\u0275element(13, "th", 5);
        \u0275\u0275elementContainerEnd();
      }
    }, styles: ["\n\nth[_ngcontent-%COMP%] {\n  font-weight: 500;\n  padding: 0.625rem 1rem;\n  font-weight: 500;\n  font-size: 0.8125rem;\n  line-height: 1.125rem;\n  vertical-align: middle;\n  @apply border-r border-b;\n}\n/*# sourceMappingURL=table-header.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(TableHeaderComponent, { className: "TableHeaderComponent", filePath: "src/app/modules/management/components/table-header/table-header.component.ts", lineNumber: 10 });
})();

// src/app/modules/management/components/table-footer/table-footer.component.ts
var _c02 = (a0) => ({ "disabled:opacity-50": a0 });
var _c1 = (a0) => ({ "bg-muted-foreground/10": a0 });
function TableFooterComponent_option_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 11);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const perPage_r1 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("value", perPage_r1.value)("selected", perPage_r1.value == ctx_r1.pageSize)("disabled", perPage_r1.disabled);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", perPage_r1.value, " ");
  }
}
function TableFooterComponent_ng_container_14_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "button", 12);
    \u0275\u0275listener("click", function TableFooterComponent_ng_container_14_Template_button_click_1_listener() {
      const pagPage_r4 = \u0275\u0275restoreView(_r3).$implicit;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.goToPage(pagPage_r4));
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const pagPage_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(2, _c1, pagPage_r4 === ctx_r1.pageIdx));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", pagPage_r4, " ");
  }
}
var TableFooterComponent = class _TableFooterComponent {
  constructor() {
    this.pageIdx = 1;
    this.pageSize = 5;
    this.totalItem = 0;
    this.totalPage = 0;
    this.isLoading = false;
    this.reloadDataAndPageEvent = new EventEmitter();
    this.perPages = [
      { id: 0, value: 5 },
      { id: 1, value: 10 },
      { id: 2, value: 20 },
      { id: 3, value: 30 },
      { id: 4, value: 50 },
      { id: 5, value: 60, disabled: true }
    ];
    this.startItems = 0;
    this.endItems = 0;
    this.pagination = [];
  }
  ngOnChanges() {
    this.createPagination();
  }
  /**
   * Creates the pagination array and calculates start and end items
   */
  createPagination() {
    this.startItems = (this.pageIdx - 1) * this.pageSize + 1;
    this.endItems = Math.min(this.pageIdx * this.pageSize, this.totalItem);
    const beforePage = this.pageIdx === this.totalPage ? this.pageIdx - 2 : this.pageIdx - 1;
    const afterPage = this.pageIdx === 1 ? this.pageIdx + 2 : this.pageIdx + 1;
    this.pagination = [];
    for (let page = Math.max(1, beforePage); page <= Math.min(afterPage, this.totalPage); page++) {
      this.pagination.push(page);
    }
  }
  /**
   * Moves to the next page if possible
   */
  nextPage() {
    if (this.pageIdx < this.totalPage && !this.isLoading) {
      this.pageIdx++;
      this.reloadDataAndPage();
    }
  }
  /**
   * Moves to the previous page if possible
   */
  previousPage() {
    if (this.pageIdx > 1 && !this.isLoading) {
      this.pageIdx--;
      this.reloadDataAndPage();
    }
  }
  /**
   * Goes to a specific page
   * @param page The page number to go to
   */
  goToPage(page) {
    if (this.pageIdx !== page && !this.isLoading) {
      this.pageIdx = page;
      this.reloadDataAndPage();
    }
  }
  /**
   * Change PerPage
   */
  changePerPage($event) {
    this.pageSize = $event.target.value;
    this.reloadDataAndPage();
  }
  /**
   * Reloads products and updates pagination
   */
  reloadDataAndPage() {
    this.reloadDataAndPageEvent.emit({ pageIdx: this.pageIdx, pageSize: this.pageSize });
    this.createPagination();
  }
  static {
    this.\u0275fac = function TableFooterComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _TableFooterComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _TableFooterComponent, selectors: [["app-table-footer"]], inputs: { pageIdx: "pageIdx", pageSize: "pageSize", totalItem: "totalItem", totalPage: "totalPage", isLoading: "isLoading" }, outputs: { reloadDataAndPageEvent: "reloadDataAndPageEvent" }, standalone: false, features: [\u0275\u0275NgOnChangesFeature], decls: 17, vars: 15, consts: [[1, "flex", "flex-wrap", "items-center", "justify-between", "gap-2", "px-5", "py-3", "text-xs", "text-muted-foreground"], [1, "order-2", "flex", "items-center", "gap-2", "md:order-1"], [1, "!w-16", "p-2", 3, "change"], [3, "value", "selected", "disabled", 4, "ngFor", "ngForOf"], [1, "order-1", "flex", "items-center", "gap-4", "md:order-2"], [1, "inline-flex", "items-center", "gap-1"], ["disabled", "", 1, "inline-flex", "h-7", "w-7", "flex-shrink-0", "items-center", "justify-center", "rounded-md", "text-sm", "disabled:opacity-50", 3, "click", "ngClass", "disabled"], ["src", "./assets/icons/heroicons/outline/arrow-long-left.svg", 3, "svgClass"], [4, "ngFor", "ngForOf"], [1, "inline-flex", "h-7", "w-7", "flex-shrink-0", "items-center", "justify-center", "rounded-md", "text-sm", "hover:bg-muted-foreground/10", 3, "click", "ngClass", "disabled"], ["src", "./assets/icons/heroicons/outline/arrow-long-right.svg", 3, "svgClass"], [3, "value", "selected", "disabled"], [1, "inline-flex", "h-7", "w-7", "flex-shrink-0", "items-center", "justify-center", "rounded-md", "text-sm", "hover:bg-muted-foreground/10", 3, "click", "ngClass"]], template: function TableFooterComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "span");
        \u0275\u0275text(3, "Show");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(4, "select", 2);
        \u0275\u0275listener("change", function TableFooterComponent_Template_select_change_4_listener($event) {
          return ctx.changePerPage($event);
        });
        \u0275\u0275template(5, TableFooterComponent_option_5_Template, 2, 4, "option", 3);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(6, "span");
        \u0275\u0275text(7, "per page");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(8, "div", 4)(9, "span");
        \u0275\u0275text(10);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(11, "div", 5)(12, "button", 6);
        \u0275\u0275listener("click", function TableFooterComponent_Template_button_click_12_listener() {
          return ctx.previousPage();
        });
        \u0275\u0275element(13, "svg-icon", 7);
        \u0275\u0275elementEnd();
        \u0275\u0275template(14, TableFooterComponent_ng_container_14_Template, 3, 4, "ng-container", 8);
        \u0275\u0275elementStart(15, "button", 9);
        \u0275\u0275listener("click", function TableFooterComponent_Template_button_click_15_listener() {
          return ctx.nextPage();
        });
        \u0275\u0275element(16, "svg-icon", 10);
        \u0275\u0275elementEnd()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(5);
        \u0275\u0275property("ngForOf", ctx.perPages);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate3(" ", ctx.startItems, "-", ctx.endItems, " of ", ctx.totalItem, " ");
        \u0275\u0275advance(2);
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(11, _c02, ctx.pageIdx <= 1))("disabled", ctx.pageIdx <= 1);
        \u0275\u0275advance();
        \u0275\u0275property("svgClass", "h-4 w-4");
        \u0275\u0275advance();
        \u0275\u0275property("ngForOf", ctx.pagination);
        \u0275\u0275advance();
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(13, _c02, ctx.pageIdx >= ctx.totalPage))("disabled", ctx.pageIdx >= ctx.totalPage);
        \u0275\u0275advance();
        \u0275\u0275property("svgClass", "h-4 w-4");
      }
    }, dependencies: [NgClass, NgForOf, NgSelectOption, \u0275NgSelectMultipleOption, SvgIconComponent], encapsulation: 2 });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(TableFooterComponent, { className: "TableFooterComponent", filePath: "src/app/modules/management/components/table-footer/table-footer.component.ts", lineNumber: 15 });
})();

// src/app/modules/management/components/table-action/table-action.component.ts
var TableActionComponent = class _TableActionComponent {
  ngOnInit() {
  }
  constructor() {
    this.title = "";
    this.totalItem = 0;
    this.searchDataEvent = new EventEmitter();
    this.sortDataEvent = new EventEmitter();
  }
  onEnter($event) {
    const keyword = $event.target.value;
    this.searchDataEvent.emit(keyword);
  }
  changeSortBy($event) {
    const sortBy = $event.target.value;
    this.sortDataEvent.emit(sortBy);
  }
  static {
    this.\u0275fac = function TableActionComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _TableActionComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _TableActionComponent, selectors: [["app-table-action"]], inputs: { title: "title", totalItem: "totalItem" }, outputs: { searchDataEvent: "searchDataEvent", sortDataEvent: "sortDataEvent" }, standalone: false, decls: 21, vars: 6, consts: [[1, "flex", "flex-wrap", "items-center", "justify-between", "gap-2", "px-5", "py-3"], [1, "inline-block"], [1, "text-foreground"], [1, "space-x-1", "text-xs", "font-medium", "text-muted-foreground"], ["href", "", 1, "hover:text-primary"], [1, "flex", "flex-wrap", "gap-2"], [1, "flex"], [1, "relative", "text-muted-foreground"], [1, "absolute", "left-2.5", "top-2.5"], ["src", "./assets/icons/heroicons/outline/magnifying-glass.svg", 3, "svgClass"], ["type", "text", 1, "w-full", "py-2", "pl-8", "pr-2", "text-sm", "text-muted-foreground", 3, "keyup.enter", "placeholder"], [1, "flex", "flex-wrap", "gap-2.5"], [1, "!w-28", "p-2", "text-sm", "text-muted-foreground", 3, "change"], ["value", "desc"], ["value", "asc"]], template: function TableActionComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "h3", 2);
        \u0275\u0275text(3);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(4, "div", 3)(5, "a", 4);
        \u0275\u0275text(6);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(7, "span", 2);
        \u0275\u0275text(8);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(9, "div", 5)(10, "div", 6)(11, "label", 7)(12, "div", 8);
        \u0275\u0275element(13, "svg-icon", 9);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(14, "input", 10);
        \u0275\u0275listener("keyup.enter", function TableActionComponent_Template_input_keyup_enter_14_listener($event) {
          return ctx.onEnter($event);
        });
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(15, "div", 11)(16, "select", 12);
        \u0275\u0275listener("change", function TableActionComponent_Template_select_change_16_listener($event) {
          return ctx.changeSortBy($event);
        });
        \u0275\u0275elementStart(17, "option", 13);
        \u0275\u0275text(18, "Latest");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(19, "option", 14);
        \u0275\u0275text(20, "Oldest");
        \u0275\u0275elementEnd()()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.title);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1("All ", ctx.title, ":");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.totalItem);
        \u0275\u0275advance(5);
        \u0275\u0275property("svgClass", "h-4 w-4");
        \u0275\u0275advance();
        \u0275\u0275propertyInterpolate1("placeholder", "Search ", ctx.title, "");
      }
    }, dependencies: [NgSelectOption, \u0275NgSelectMultipleOption, SvgIconComponent], encapsulation: 2 });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(TableActionComponent, { className: "TableActionComponent", filePath: "src/app/modules/management/components/table-action/table-action.component.ts", lineNumber: 10 });
})();

// src/app/shared/components/material-dialog/material-dialog.component.ts
var _c03 = (a0, a1, a2) => ({ "bg-red-100": a0, "bg-yellow-100": a1, "bg-green-100": a2 });
function MaterialDialogComponent_Conditional_2_Case_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(0, "svg", 8);
    \u0275\u0275element(1, "path", 11);
    \u0275\u0275elementEnd();
  }
}
function MaterialDialogComponent_Conditional_2_Case_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(0, "svg", 9);
    \u0275\u0275element(1, "path", 12);
    \u0275\u0275elementEnd();
  }
}
function MaterialDialogComponent_Conditional_2_Case_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(0, "svg", 10);
    \u0275\u0275element(1, "path", 13);
    \u0275\u0275elementEnd();
  }
}
function MaterialDialogComponent_Conditional_2_Case_4_Template(rf, ctx) {
}
function MaterialDialogComponent_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 2);
    \u0275\u0275template(1, MaterialDialogComponent_Conditional_2_Case_1_Template, 2, 0, ":svg:svg", 8)(2, MaterialDialogComponent_Conditional_2_Case_2_Template, 2, 0, ":svg:svg", 9)(3, MaterialDialogComponent_Conditional_2_Case_3_Template, 2, 0, ":svg:svg", 10)(4, MaterialDialogComponent_Conditional_2_Case_4_Template, 0, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_2_0;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction3(2, _c03, ctx_r0.data.icon.type == "dangerous", ctx_r0.data.icon.type == "warning", ctx_r0.data.icon.type == "success"));
    \u0275\u0275advance();
    \u0275\u0275conditional((tmp_2_0 = ctx_r0.data.icon.type) === "dangerous" ? 1 : tmp_2_0 === "warning" ? 2 : tmp_2_0 === "success" ? 3 : 4);
  }
}
function MaterialDialogComponent_Conditional_9_For_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "button", 14);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const btn_r2 = ctx.$implicit;
    \u0275\u0275property("matDialogClose", btn_r2.type == "cancel" ? false : true);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", btn_r2.label, " ");
  }
}
function MaterialDialogComponent_Conditional_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-dialog-actions", 7);
    \u0275\u0275repeaterCreate(1, MaterialDialogComponent_Conditional_9_For_2_Template, 2, 2, "button", 14, \u0275\u0275repeaterTrackByIndex);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx_r0.data.btn);
  }
}
var MaterialDialogComponent = class _MaterialDialogComponent {
  constructor() {
    this.dialogRef = inject(MatDialogRef);
    this.data = inject(MAT_DIALOG_DATA);
  }
  ngOnInit() {
  }
  onButtonClick() {
  }
  closeDialog() {
    this.dialogRef.close();
  }
  static {
    this.\u0275fac = function MaterialDialogComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MaterialDialogComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _MaterialDialogComponent, selectors: [["app-material-dialog"]], decls: 10, vars: 4, consts: [[1, "pb-5", "pt-3"], [1, "sm:flex", "sm:items-start"], [1, "mx-auto", "flex", "h-12", "w-12", "flex-shrink-0", "items-center", "justify-center", "rounded-full", "sm:mx-0", "sm:h-10", "sm:w-10", 3, "ngClass"], [1, "mt-3", "text-center", "sm:ml-4", "sm:mt-0", "sm:text-left"], ["id", "modal-title", 1, "text-base", "font-semibold", "leading-6", "text-gray-900"], [1, "mt-2"], [1, "text-sm", "text-gray-500"], [1, "line-block", "space-x-4", "text-center"], ["xmlns", "http://www.w3.org/2000/svg", "fill", "none", "viewBox", "0 0 24 24", "stroke-width", "1.5", "stroke", "currentColor", 1, "h-6", "w-6", "text-red-600"], ["xmlns", "http://www.w3.org/2000/svg", "fill", "none", "viewBox", "0 0 24 24", "stroke-width", "1.5", "stroke", "currentColor", 1, "h-6", "w-6", "text-yellow-600"], ["xmlns", "http://www.w3.org/2000/svg", "fill", "none", "viewBox", "0 0 24 24", "stroke-width", "1.5", "stroke", "currentColor", 1, "h-6", "w-6", "text-green-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "d", "M12 9v3.75m0-10.036A11.959 11.959 0 0 1 3.598 6 11.99 11.99 0 0 0 3 9.75c0 5.592 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.57-.598-3.75h-.152c-3.196 0-6.1-1.25-8.25-3.286Zm0 13.036h.008v.008H12v-.008Z"], ["stroke-linecap", "round", "stroke-linejoin", "round", "d", "M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z"], ["stroke-linecap", "round", "stroke-linejoin", "round", "d", "M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"], [1, "flex-none", "rounded-md", "bg-muted", "px-4", "py-2.5", "text-xs", "font-semibold", "hover:text-foreground", 3, "matDialogClose"]], template: function MaterialDialogComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "mat-dialog-content", 0)(1, "div", 1);
        \u0275\u0275template(2, MaterialDialogComponent_Conditional_2_Template, 5, 6, "div", 2);
        \u0275\u0275elementStart(3, "div", 3)(4, "h3", 4);
        \u0275\u0275text(5);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(6, "div", 5)(7, "p", 6);
        \u0275\u0275text(8);
        \u0275\u0275elementEnd()()()()();
        \u0275\u0275template(9, MaterialDialogComponent_Conditional_9_Template, 3, 0, "mat-dialog-actions", 7);
      }
      if (rf & 2) {
        \u0275\u0275advance(2);
        \u0275\u0275conditional(ctx.data.icon ? 2 : -1);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.data.title);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.data.content);
        \u0275\u0275advance();
        \u0275\u0275conditional(ctx.data.btn && ctx.data.btn.length > 0 ? 9 : -1);
      }
    }, dependencies: [MatFormFieldModule, MatInputModule, FormsModule, MatButtonModule, MatDialogClose, CommonModule, NgClass], encapsulation: 2 });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(MaterialDialogComponent, { className: "MaterialDialogComponent", filePath: "src/app/shared/components/material-dialog/material-dialog.component.ts", lineNumber: 24 });
})();

// src/app/modules/management/pages/options/model/options.model.ts
var SearchOptions = class {
  constructor() {
    this.options = [];
    this.pageIdx = 0;
    this.totalItem = 0;
    this.totalPage = 0;
  }
};
var Options2Create = class {
  constructor() {
    this.name = "";
    this.description = "";
  }
};

// src/app/modules/management/pages/options/component/create-edit-option-dialog/create-edit-option-dialog.component.ts
var _c04 = () => ({ standalone: true });
var CreateEditOptionDialogComponent = class _CreateEditOptionDialogComponent {
  constructor() {
    this.dialogRef = inject(MatDialogRef);
    this.data = inject(MAT_DIALOG_DATA);
    this.option = this.data.option ?? new Options2Create();
  }
  ngOnInit() {
  }
  onButtonClick() {
  }
  closeDialog() {
    this.dialogRef.close();
  }
  static {
    this.\u0275fac = function CreateEditOptionDialogComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _CreateEditOptionDialogComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _CreateEditOptionDialogComponent, selectors: [["app-create-edit-option-dialog"]], standalone: false, decls: 19, vars: 8, consts: [[1, "text-center"], [1, "text-xl", "font-bold"], [1, "absolute", "right-3", 3, "matDialogClose"], ["xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 24 24", "fill", "currentColor", 1, "size-6"], ["fill-rule", "evenodd", "d", "M5.47 5.47a.75.75 0 0 1 1.06 0L12 10.94l5.47-5.47a.75.75 0 1 1 1.06 1.06L13.06 12l5.47 5.47a.75.75 0 1 1-1.06 1.06L12 13.06l-5.47 5.47a.75.75 0 0 1-1.06-1.06L10.94 12 5.47 6.53a.75.75 0 0 1 0-1.06Z", "clip-rule", "evenodd"], [1, "pb-5", "pt-3"], [1, "mx-auto", "sm:min-w-36", "md:min-w-96"], [1, "mb-5"], ["for", "base-input", 1, "mb-2", "block", "text-sm", "font-medium", "text-gray-900", "dark:text-white"], ["type", "text", "id", "option-name", 1, "block", "w-full", "rounded-lg", "border", "border-gray-300", "bg-gray-50", "p-2.5", "text-sm", "text-gray-900", "focus:border-blue-500", "focus:ring-blue-500", "dark:border-gray-600", "dark:bg-gray-700", "dark:text-white", "dark:placeholder-gray-400", "dark:focus:border-blue-500", "dark:focus:ring-blue-500", 3, "ngModelChange", "ngModel", "ngModelOptions"], ["id", "message", "rows", "4", "placeholder", "Write your thoughts here...", 1, "block", "w-full", "rounded-lg", "border", "border-gray-300", "bg-gray-50", "p-2.5", "text-sm", "text-gray-900", "focus:border-blue-500", "focus:ring-blue-500", "dark:border-gray-600", "dark:bg-gray-700", "dark:text-white", "dark:placeholder-gray-400", "dark:focus:border-blue-500", "dark:focus:ring-blue-500", 3, "ngModelChange", "ngModel", "ngModelOptions"], [1, "line-block", "space-x-4", "text-center"], [1, "flex-none", "rounded-md", "bg-primary", "px-4", "py-2.5", "text-xs", "font-semibold", "text-primary-foreground", 3, "matDialogClose"]], template: function CreateEditOptionDialogComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "mat-dialog-title", 0)(1, "span", 1);
        \u0275\u0275text(2);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(3, "button", 2);
        \u0275\u0275namespaceSVG();
        \u0275\u0275elementStart(4, "svg", 3);
        \u0275\u0275element(5, "path", 4);
        \u0275\u0275elementEnd()()();
        \u0275\u0275namespaceHTML();
        \u0275\u0275elementStart(6, "mat-dialog-content", 5)(7, "form", 6)(8, "div", 7)(9, "label", 8);
        \u0275\u0275text(10, "NAME");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(11, "input", 9);
        \u0275\u0275twoWayListener("ngModelChange", function CreateEditOptionDialogComponent_Template_input_ngModelChange_11_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.option.name, $event) || (ctx.option.name = $event);
          return $event;
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(12, "div", 7)(13, "label", 8);
        \u0275\u0275text(14, "DESCRIPTIONS");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(15, "textarea", 10);
        \u0275\u0275twoWayListener("ngModelChange", function CreateEditOptionDialogComponent_Template_textarea_ngModelChange_15_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.option.description, $event) || (ctx.option.description = $event);
          return $event;
        });
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(16, "mat-dialog-actions", 11)(17, "button", 12);
        \u0275\u0275text(18, " SAVE ");
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.data.title);
        \u0275\u0275advance(9);
        \u0275\u0275twoWayProperty("ngModel", ctx.option.name);
        \u0275\u0275property("ngModelOptions", \u0275\u0275pureFunction0(6, _c04));
        \u0275\u0275advance(4);
        \u0275\u0275twoWayProperty("ngModel", ctx.option.description);
        \u0275\u0275property("ngModelOptions", \u0275\u0275pureFunction0(7, _c04));
        \u0275\u0275advance(2);
        \u0275\u0275property("matDialogClose", ctx.option);
      }
    }, dependencies: [\u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, NgModel, NgForm, MatDialogClose, MatDialogActions, MatDialogContent], encapsulation: 2 });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(CreateEditOptionDialogComponent, { className: "CreateEditOptionDialogComponent", filePath: "src/app/modules/management/pages/options/component/create-edit-option-dialog/create-edit-option-dialog.component.ts", lineNumber: 16 });
})();

// src/app/modules/management/pages/options/service/options.servive.ts
var OptionsService = class _OptionsService {
  constructor(apiGatewayService) {
    this.apiGatewayService = apiGatewayService;
    this.url = "options";
  }
  searchOptions(pageIdx = 0, pageSize = 999, keyword = "", sortBy = "") {
    const url = `${this.url}?pageIdx=${pageIdx}&pageSize=${pageSize}&keyword=${keyword}&sortBy=${sortBy}`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  createOption(option) {
    const updateOptionOptionUrl = this.url;
    return this.apiGatewayService.post(updateOptionOptionUrl, option).pipe(tap((res) => {
      console.log("\u{1F680} ~ OptionsService ~ tap ~ res:", res);
    }), catchError((error2) => {
      console.log("\u{1F680} ~ OptionsService ~ getOptions ~ error:", error2);
      return of([]);
    }));
  }
  updateOption(option) {
    const updateOptionOptionUrl = this.url;
    return this.apiGatewayService.put(updateOptionOptionUrl, option).pipe(tap((res) => {
      console.log("\u{1F680} ~ OptionsService ~ tap ~ res:", res);
    }), catchError((error2) => {
      console.log("\u{1F680} ~ OptionsService ~ getOptions ~ error:", error2);
      return of([]);
    }));
  }
  deleteOption(id) {
    const deleteOptionUrl = this.url + `/${id}`;
    return this.apiGatewayService.delete(deleteOptionUrl).pipe(tap((res) => {
      console.log("\u{1F680} ~ OptionsService ~ tap ~ res:", res);
    }), catchError((error2) => {
      console.log("\u{1F680} ~ OptionsService ~ getOptions ~ error:", error2);
      return of([]);
    }));
  }
  static {
    this.\u0275fac = function OptionsService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _OptionsService)(\u0275\u0275inject(ApiGatewayService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _OptionsService, factory: _OptionsService.\u0275fac, providedIn: "root" });
  }
};

// src/app/shared/utils/utils.ts
var Utils = class _Utils {
  constructor(componentFactoryResolver) {
    this.componentFactoryResolver = componentFactoryResolver;
  }
  createComponent(component, emlement, params) {
    const factory = this.componentFactoryResolver.resolveComponentFactory(component);
    this.ref && this.ref.destroy();
    this.ref = emlement.createComponent(factory, 0);
    if (params && this.ref) {
      this.ref.instance.params = params;
    }
  }
  clearComponent() {
    this.ref && this.ref.destroy();
  }
  createRange(number) {
    return new Array(number).fill(0).map((n, index) => index + 1);
  }
  // Mark all controls in a form group as touched
  markFormGroupTouched(formGroup) {
    Object.values(formGroup.controls).forEach((control) => {
      control.markAsTouched();
      control.markAsDirty();
      control.updateValueAndValidity({ onlySelf: true });
      if (control.controls) {
        this.markFormGroupTouched(control);
      }
    });
  }
  handleRequestError(error2) {
    const msg = "An error occurred while processing your request";
    toast.error(msg, {
      position: "bottom-right",
      description: error2.message || "Please try again later",
      action: {
        label: "Dismiss",
        onClick: () => {
        }
      },
      actionButtonStyle: "background-color:#DC2626; color:white;"
    });
  }
  isValidObjectId(id) {
    const objectIdPattern = /^[0-9a-fA-F]{24}$/;
    return objectIdPattern.test(id);
  }
  static {
    this.\u0275fac = function Utils_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _Utils)(\u0275\u0275inject(ComponentFactoryResolver$1));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _Utils, factory: _Utils.\u0275fac, providedIn: "root" });
  }
};

// src/app/modules/management/pages/options/pages/options/options.component.ts
var _forTrack0 = ($index, $item) => $item.id;
function OptionsComponent_For_22_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr", 14)(1, "td", 16)(2, "input", 17);
    \u0275\u0275twoWayListener("ngModelChange", function OptionsComponent_For_22_Template_input_ngModelChange_2_listener($event) {
      const option_r2 = \u0275\u0275restoreView(_r1).$implicit;
      \u0275\u0275twoWayBindingSet(option_r2.selected, $event) || (option_r2.selected = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function OptionsComponent_For_22_Template_input_change_2_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.checkSelectAll());
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(3, "td");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "td");
    \u0275\u0275text(6);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "td", 16)(8, "button", 18);
    \u0275\u0275listener("click", function OptionsComponent_For_22_Template_button_click_8_listener() {
      const option_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.editOption(option_r2));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(9, "svg", 19);
    \u0275\u0275element(10, "path", 20);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(11, "button", 21);
    \u0275\u0275listener("click", function OptionsComponent_For_22_Template_button_click_11_listener() {
      const option_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.deleteOption(option_r2.id));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(12, "svg", 19);
    \u0275\u0275element(13, "path", 22);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const option_r2 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", option_r2.selected);
    \u0275\u0275attribute("aria-label", "Select " + option_r2.name);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(option_r2.name);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(option_r2.description);
  }
}
function OptionsComponent_ForEmpty_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr")(1, "td", 23);
    \u0275\u0275text(2, "No options found");
    \u0275\u0275elementEnd()();
  }
}
var OptionsComponent = class _OptionsComponent {
  constructor(optionsService, dialog, utils) {
    this.optionsService = optionsService;
    this.dialog = dialog;
    this.utils = utils;
    this.searchOptions = new SearchOptions();
    this.selectAll = false;
    this.pageIdx = 1;
    this.pageSize = 5;
    this.totalPage = 0;
    this.totalItem = 0;
    this.keyword = "";
    this.sortBy = "";
    this.isLoadingOptions = false;
  }
  ngOnInit() {
    this.loadData();
  }
  loadData() {
    this.isLoadingOptions = true;
    this.optionsService.searchOptions(this.pageIdx, this.pageSize, this.keyword, this.sortBy).subscribe({
      next: (res) => {
        if (res) {
          this.searchOptions = res;
          this.totalItem = this.searchOptions.totalItem;
          this.totalPage = this.searchOptions.totalPage;
        }
        this.isLoadingOptions = false;
      },
      error: (error2) => {
        this.utils.handleRequestError(error2);
        this.isLoadingOptions = false;
      }
    });
  }
  toggleOptions(event2) {
    const checked = event2.target.checked;
    this.searchOptions.options = this.searchOptions.options.map((option) => __spreadProps(__spreadValues({}, option), {
      selected: checked
    }));
  }
  checkSelectAll() {
    this.selectAll = !this.searchOptions.options.some((option) => !option.selected);
  }
  deleteOption(id) {
    const dialogRef = this.dialog.open(MaterialDialogComponent, {
      data: {
        icon: {
          type: "dangerous"
        },
        title: "Delete Option",
        content: "Are you sure you want to delete this option? All of your data will be permanently removed. This action cannot be undone.",
        btn: [
          {
            label: "NO",
            type: "cancel"
          },
          {
            label: "YES",
            type: "submit"
          }
        ]
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        this.optionsService.deleteOption(id).subscribe({
          next: (res) => {
            if (res) {
              this.searchOptions.options = this.searchOptions.options.filter((option) => option.id !== id);
              toast.success("Option deleted successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  editOption(option) {
    const dialogRef = this.dialog.open(CreateEditOptionDialogComponent, {
      data: {
        title: "Edit Option",
        option: __spreadValues({}, option)
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        this.optionsService.updateOption(result).subscribe({
          next: (res) => {
            if (res) {
              this.searchOptions.options = this.searchOptions.options.map((opt) => opt.id === res.id ? __spreadValues(__spreadValues({}, opt), res) : opt);
              toast.success("Option updated successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  addOption() {
    const dialogRef = this.dialog.open(CreateEditOptionDialogComponent, {
      data: {
        title: "Add New Option"
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        this.optionsService.createOption(result).subscribe({
          next: (res) => {
            if (res) {
              this.loadData();
              toast.success("Option added successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  reloadOptionsPage(data) {
    this.pageIdx = data.pageIdx;
    this.pageSize = data.pageSize;
    this.loadData();
  }
  searchOptionsPage(keyword) {
    this.pageIdx = 1;
    this.keyword = keyword;
    this.loadData();
  }
  sortOptionsPage(sortBy) {
    this.sortBy = sortBy;
    this.loadData();
  }
  handleRequestError(error2) {
    const msg = "An error occurred while processing your request";
    toast.error(msg, {
      position: "bottom-right",
      description: error2.message || "Please try again later",
      action: {
        label: "Dismiss",
        onClick: () => {
        }
      },
      actionButtonStyle: "background-color:#DC2626; color:white;"
    });
  }
  static {
    this.\u0275fac = function OptionsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _OptionsComponent)(\u0275\u0275directiveInject(OptionsService), \u0275\u0275directiveInject(MatDialog), \u0275\u0275directiveInject(Utils));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _OptionsComponent, selectors: [["app-options"]], standalone: false, decls: 25, vars: 9, consts: [[1, "mb-4", "flex", "justify-end"], [1, "inline-block", "space-x-4"], ["aria-label", "Import CSV", 1, "rounded-md", "bg-muted", "px-4", "py-2.5", "text-xs", "font-semibold", "text-muted-foreground", "hover:text-foreground"], ["aria-label", "Add Option", 1, "rounded-md", "bg-primary", "px-4", "py-2.5", "text-xs", "font-semibold", "text-primary-foreground", 3, "click"], [1, "flex", "min-w-full", "flex-col", "rounded-xl", "border", "border-muted/20", "bg-background", "p-2"], [3, "sortDataEvent", "searchDataEvent", "title", "totalItem"], [1, "overflow-x-auto"], [1, "w-full", "table-auto", "border-collapse", "text-left", "align-middle", "leading-5", "text-muted-foreground"], [1, "border", "border-muted/20", "text-xs", "text-muted-foreground"], [1, "w-[50px]"], ["type", "checkbox", "aria-label", "Select all options", 1, "checkbox", "checkbox-sm", 3, "change", "ngModelChange", "ngModel"], [1, "min-w-[200px]"], [1, "min-w-[300px]"], [1, "min-w-[100px]", "text-center"], [1, "hover:bg-card/50"], [3, "reloadDataAndPageEvent", "pageIdx", "pageSize", "totalItem", "isLoading", "totalPage"], [1, "text-center"], ["type", "checkbox", 1, "checkbox", "checkbox-sm", 3, "ngModelChange", "change", "ngModel"], ["aria-label", "Edit option", 1, "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", "text-muted-foreground", "hover:bg-card", "hover:text-foreground", 3, "click"], ["viewBox", "0 0 20 20", "fill", "currentColor", 1, "size-5"], ["d", "m2.695 14.762-1.262 3.155a.5.5 0 0 0 .65.65l3.155-1.262a4 4 0 0 0 1.343-.886L17.5 5.501a2.121 2.121 0 0 0-3-3L3.58 13.419a4 4 0 0 0-.885 1.343Z"], ["aria-label", "Delete option", 1, "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", "text-muted-foreground", "hover:bg-card", "hover:text-foreground", 3, "click"], ["fill-rule", "evenodd", "d", "M8.75 1A2.75 2.75 0 0 0 6 3.75v.443c-.795.077-1.584.176-2.365.298a.75.75 0 1 0 .23 1.482l.149-.022.841 10.518A2.75 2.75 0 0 0 7.596 19h4.807a2.75 2.75 0 0 0 2.742-2.53l.841-10.52.149.023a.75.75 0 0 0 .23-1.482A41.03 41.03 0 0 0 14 4.193V3.75A2.75 2.75 0 0 0 11.25 1h-2.5ZM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25v.325C8.327 4.025 9.16 4 10 4ZM8.58 7.72a.75.75 0 0 0-1.5.06l.3 7.5a.75.75 0 1 0 1.5-.06l-.3-7.5Zm4.34.06a.75.75 0 1 0-1.5-.06l-.3 7.5a.75.75 0 1 0 1.5.06l.3-7.5Z", "clip-rule", "evenodd"], ["colspan", "4", 1, "py-4", "text-center", "text-sm"]], template: function OptionsComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "button", 2);
        \u0275\u0275text(3, " Import CSV ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(4, "button", 3);
        \u0275\u0275listener("click", function OptionsComponent_Template_button_click_4_listener() {
          return ctx.addOption();
        });
        \u0275\u0275text(5, " Add Option ");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(6, "div", 4)(7, "app-table-action", 5);
        \u0275\u0275listener("sortDataEvent", function OptionsComponent_Template_app_table_action_sortDataEvent_7_listener($event) {
          return ctx.sortOptionsPage($event);
        })("searchDataEvent", function OptionsComponent_Template_app_table_action_searchDataEvent_7_listener($event) {
          return ctx.searchOptionsPage($event);
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "div", 6)(9, "table", 7)(10, "thead", 8)(11, "tr")(12, "th", 9)(13, "input", 10);
        \u0275\u0275listener("change", function OptionsComponent_Template_input_change_13_listener($event) {
          return ctx.toggleOptions($event);
        });
        \u0275\u0275twoWayListener("ngModelChange", function OptionsComponent_Template_input_ngModelChange_13_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.selectAll, $event) || (ctx.selectAll = $event);
          return $event;
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(14, "th", 11);
        \u0275\u0275text(15, "Name");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(16, "th", 12);
        \u0275\u0275text(17, "Description");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(18, "th", 13);
        \u0275\u0275text(19, "Actions");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(20, "tbody");
        \u0275\u0275repeaterCreate(21, OptionsComponent_For_22_Template, 14, 4, "tr", 14, _forTrack0, false, OptionsComponent_ForEmpty_23_Template, 3, 0, "tr");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(24, "app-table-footer", 15);
        \u0275\u0275listener("reloadDataAndPageEvent", function OptionsComponent_Template_app_table_footer_reloadDataAndPageEvent_24_listener($event) {
          return ctx.reloadOptionsPage($event);
        });
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(7);
        \u0275\u0275property("title", "Options")("totalItem", ctx.totalItem);
        \u0275\u0275advance(6);
        \u0275\u0275twoWayProperty("ngModel", ctx.selectAll);
        \u0275\u0275advance(8);
        \u0275\u0275repeater(ctx.searchOptions.options);
        \u0275\u0275advance(3);
        \u0275\u0275property("pageIdx", ctx.pageIdx)("pageSize", ctx.pageSize)("totalItem", ctx.totalItem)("isLoading", ctx.isLoadingOptions)("totalPage", ctx.totalPage);
      }
    }, dependencies: [CheckboxControlValueAccessor, NgControlStatus, NgModel, TableFooterComponent, TableActionComponent], styles: ["\n\ntd[_ngcontent-%COMP%] {\n  padding: 0.75rem 1rem;\n  font-size: 0.85rem;\n}\nth[_ngcontent-%COMP%] {\n  font-weight: 500;\n  padding: 0.625rem 1rem;\n  font-weight: 500;\n  font-size: 0.8125rem;\n  line-height: 1.125rem;\n  vertical-align: middle;\n  @apply border-b border-r;\n}\n/*# sourceMappingURL=options.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(OptionsComponent, { className: "OptionsComponent", filePath: "src/app/modules/management/pages/options/pages/options/options.component.ts", lineNumber: 16 });
})();

// src/app/modules/management/pages/options/pages/options-value/options-value.component.ts
var _c05 = ["cellInput"];
var _c12 = (a0) => ({ "show-icon": a0 });
function OptionsValueComponent_button_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 8);
    \u0275\u0275listener("click", function OptionsValueComponent_button_3_Template_button_click_0_listener() {
      const type_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.selectType(type_r2.value));
    });
    \u0275\u0275element(1, "svg-icon", 9);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const type_r2 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate1("src", "assets/icons/", type_r2.icon, "");
    \u0275\u0275property("svgClass", "h-5 w-5");
  }
}
function OptionsValueComponent_div_9_div_1_ng_container_2_div_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 18);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r7 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", cell_r7.name, " ");
  }
}
function OptionsValueComponent_div_9_div_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "svg-icon", 16);
    \u0275\u0275template(2, OptionsValueComponent_div_9_div_1_ng_container_2_div_2_Template, 2, 1, "div", 17);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const cell_r7 = \u0275\u0275nextContext().$implicit;
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("src", ctx_r2.getIconByType(cell_r7.type, cell_r7.status))("svgClass", "h-16 w-16")("ngClass", \u0275\u0275pureFunction1(4, _c12, cell_r7.isSelected));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", cell_r7.allowAutoNameEdit && !cell_r7.isEditing);
  }
}
function OptionsValueComponent_div_9_div_1_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 19)(1, "input", 20, 0);
    \u0275\u0275twoWayListener("ngModelChange", function OptionsValueComponent_div_9_div_1_div_3_Template_input_ngModelChange_1_listener($event) {
      \u0275\u0275restoreView(_r8);
      const cell_r7 = \u0275\u0275nextContext().$implicit;
      \u0275\u0275twoWayBindingSet(cell_r7.name, $event) || (cell_r7.name = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("keydown.enter", function OptionsValueComponent_div_9_div_1_div_3_Template_input_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r8);
      const j_r5 = \u0275\u0275nextContext().index;
      const i_r6 = \u0275\u0275nextContext().index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.saveEdit(i_r6, j_r5));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const cell_r7 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275classProp("has-error", cell_r7.hasError);
    \u0275\u0275twoWayProperty("ngModel", cell_r7.name);
  }
}
function OptionsValueComponent_div_9_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 12)(1, "div", 13);
    \u0275\u0275listener("mousedown", function OptionsValueComponent_div_9_div_1_Template_div_mousedown_1_listener($event) {
      const j_r5 = \u0275\u0275restoreView(_r4).index;
      const i_r6 = \u0275\u0275nextContext().index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onMouseDown(i_r6, j_r5, $event));
    })("mouseup", function OptionsValueComponent_div_9_div_1_Template_div_mouseup_1_listener($event) {
      const j_r5 = \u0275\u0275restoreView(_r4).index;
      const i_r6 = \u0275\u0275nextContext().index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onMouseUp(i_r6, j_r5, $event));
    })("mouseleave", function OptionsValueComponent_div_9_div_1_Template_div_mouseleave_1_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onMouseLeave($event));
    })("contextmenu", function OptionsValueComponent_div_9_div_1_Template_div_contextmenu_1_listener($event) {
      const j_r5 = \u0275\u0275restoreView(_r4).index;
      const i_r6 = \u0275\u0275nextContext().index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.startEdit(i_r6, j_r5, $event));
    })("click", function OptionsValueComponent_div_9_div_1_Template_div_click_1_listener($event) {
      const j_r5 = \u0275\u0275restoreView(_r4).index;
      const i_r6 = \u0275\u0275nextContext().index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onClick(i_r6, j_r5, $event));
    });
    \u0275\u0275template(2, OptionsValueComponent_div_9_div_1_ng_container_2_Template, 3, 6, "ng-container", 14);
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, OptionsValueComponent_div_9_div_1_div_3_Template, 3, 3, "div", 15);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r7 = ctx.$implicit;
    const j_r5 = ctx.index;
    const i_r6 = \u0275\u0275nextContext().index;
    \u0275\u0275propertyInterpolate2("id", "cell-", i_r6, "-", j_r5, "");
    \u0275\u0275advance();
    \u0275\u0275classProp("cell", !cell_r7.isSelected)("selected", cell_r7.isSelected)("editing", cell_r7.isEditing)("has-error", cell_r7.hasError);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", cell_r7.type > 0);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", cell_r7.allowAutoNameEdit && cell_r7.isEditing);
  }
}
function OptionsValueComponent_div_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 10);
    \u0275\u0275template(1, OptionsValueComponent_div_9_div_1_Template, 4, 13, "div", 11);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r9 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", row_r9);
  }
}
function OptionsValueComponent_div_13_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 22);
    \u0275\u0275element(1, "svg-icon", 9);
    \u0275\u0275elementStart(2, "div", 18);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const cell_r10 = ctx.$implicit;
    const j_r11 = ctx.index;
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275styleProp("display", ctx_r2.visibleColumns[j_r11] ? "flex" : "none")("visibility", cell_r10.type > 0 ? "visible" : "hidden");
    \u0275\u0275advance();
    \u0275\u0275property("src", ctx_r2.getIconByType(cell_r10.type, cell_r10.status))("svgClass", "h-16 w-16");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(cell_r10.name);
  }
}
function OptionsValueComponent_div_13_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 10);
    \u0275\u0275template(1, OptionsValueComponent_div_13_div_1_Template, 4, 7, "div", 21);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r12 = ctx.$implicit;
    const i_r13 = ctx.index;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275styleProp("display", ctx_r2.displayRows[i_r13] ? "flex" : "none");
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", row_r12);
  }
}
var OptionsValueComponent = class _OptionsValueComponent {
  constructor(el, renderer) {
    this.el = el;
    this.renderer = renderer;
    this.rows = 11;
    this.cols = 7;
    this.matrix = [];
    this.currentType = 1;
    this.usedNames = /* @__PURE__ */ new Set();
    this.selectedMatrix = [];
    this.originalName = "";
    this.types = [
      {
        value: 1,
        name: "Gh\u1EBF",
        allowAutoNameEdit: true,
        icon: "seat-available.svg",
        blockIcon: "seat-block.svg",
        selectedIcon: "seat-select"
      },
      { value: 2, name: "H\xE0nh lang", allowAutoNameEdit: false, icon: "street.svg" },
      { value: 3, name: "T\xE0i x\u1EBF", allowAutoNameEdit: false, icon: "driver.svg" }
    ];
    this.displayRows = [];
    this.visibleColumns = [];
    this.selectedColumns = [];
    this.initializeMatrix();
    this.selectedMatrix = Array.from({ length: this.rows }, (_3, i) => Array.from({ length: this.cols }, (_4, j) => ({
      id: "",
      value: i * this.cols + j + 1,
      type: 0,
      name: "",
      icon: "",
      status: ""
    })));
  }
  // Khởi tạo ma trận và trạng thái chọn
  // Khởi tạo ma trận và trạng thái chọn
  initializeMatrix() {
    this.matrix = Array.from({ length: this.rows }, (_3, i) => Array.from({ length: this.cols }, (_4, j) => ({
      id: "",
      value: i * this.cols + j + 1,
      type: 0,
      isEditing: false,
      isSelected: false,
      name: "",
      icon: "",
      errorName: "",
      status: "available",
      hasError: false,
      allowAutoNameEdit: false,
      // Thêm thuộc tính allowAutoNameEdit
      isDisappearing: false
      // Thêm thuộc tính isDisappearing
    })));
  }
  // Chọn kiểu (type)
  selectType(type) {
    this.currentType = type;
  }
  // Áp dụng kiểu vào ô được chọn, không cho phép bỏ chọn khi đang chỉnh sửa
  applyType(row, col) {
    const cell = this.matrix[row][col];
    const selectedType = this.types.find((type) => type.value === this.currentType);
    this.matrix.forEach((matrixRow, i) => matrixRow.forEach((cell2, j) => cell2.isEditing && this.saveEdit(i, j)));
    if (cell.isEditing || this.hasError())
      return;
    if (cell.isSelected && cell.type === this.currentType) {
      cell.isSelected = false;
      this.usedNames.delete(parseInt(cell.name.slice(1)));
      cell.type = 0;
      cell.name = "";
      cell.allowAutoNameEdit = false;
      return;
    }
    if (cell.isSelected && cell.type !== this.currentType) {
      this.updateCellType(cell, selectedType);
      return;
    }
    if (cell.type === 1 && [2, 3].includes(this.currentType)) {
      this.usedNames.delete(parseInt(cell.name.slice(1)));
    }
    this.matrix.forEach((matrixRow, i) => matrixRow.forEach((cell2, j) => cell2.isEditing && this.saveEdit(i, j)));
    if (this.currentType > 0) {
      this.updateCellType(cell, selectedType);
    }
  }
  updateCellType(cell, selectedType) {
    cell.type = this.currentType;
    cell.isSelected = true;
    cell.allowAutoNameEdit = selectedType?.allowAutoNameEdit || false;
    if ([2, 3].includes(this.currentType)) {
      cell.name = "";
    } else if (selectedType?.allowAutoNameEdit) {
      const maxNames = this.rows * this.cols;
      for (let i = 1; i <= maxNames; i++) {
        if (!this.usedNames.has(i)) {
          cell.name = `A${i.toString().padStart(2, "0")}`;
          this.usedNames.add(i);
          break;
        }
      }
    }
    cell.icon = this.getIconByType(cell.type, cell.status);
  }
  // Hàm focus vào ô đang chỉnh sửa
  focusCell() {
    console.log("\u{1F680} ~ OptionsValueComponent ~ focusCell ~ focusCell:");
    setTimeout(() => {
      if (this.cellInput) {
        this.cellInput.nativeElement.focus();
      }
    }, 0);
  }
  // Bắt đầu nhấn chuột
  onMouseDown(row, col, event2) {
    if (event2.button !== 0)
      return;
    event2.preventDefault();
    this.holdTimeout = setTimeout(() => {
      this.toggleStatus(row, col, event2);
      this.holdTimeout = null;
    }, 1e3);
  }
  // Nhả chuột
  onMouseUp(row, col, event2) {
    if (event2.button !== 0)
      return;
    if (this.holdTimeout) {
      clearTimeout(this.holdTimeout);
      this.applyType(row, col);
    }
    this.holdTimeout = null;
  }
  // Di chuột ra khỏi ô
  onMouseLeave(event2) {
    if (this.holdTimeout) {
      clearTimeout(this.holdTimeout);
      this.holdTimeout = null;
    }
  }
  // Nhấn chuột
  onClick(row, col, event2) {
    if (event2.button !== 0)
      return;
    if (this.holdTimeout) {
      clearTimeout(this.holdTimeout);
      this.holdTimeout = null;
      this.applyType(row, col);
    }
  }
  getIconByType(type, status = "available") {
    const selectedType = this.types.find((t) => t.value === type);
    if (type === 1 && status === "block" && selectedType?.blockIcon) {
      return `assets/icons/${selectedType.blockIcon}`;
    }
    return selectedType?.icon ? `assets/icons/${selectedType.icon}` : "";
  }
  // Kiểm tra xem ô có đang ở chế độ chỉnh sửa
  isEditing(row, col) {
    return this.matrix[row][col].isEditing;
  }
  // Bắt đầu chỉnh sửa ô khi nhấn chuột phải
  startEdit(row, col, event2) {
    event2.preventDefault();
    const cell = this.matrix[row][col];
    if (cell.type > 0 && cell.type !== 2 && cell.type !== 3) {
      this.originalName = cell.name;
      cell.isEditing = true;
      this.focusCell();
    }
  }
  saveEdit(row, col) {
    const cell = this.matrix[row][col];
    const newName = cell.name;
    const nameFormat = /^A\d{2}$/;
    if (!nameFormat.test(newName)) {
      toast.error("T\xEAn kh\xF4ng h\u1EE3p l\u1EC7. T\xEAn ph\u1EA3i c\xF3 \u0111\u1ECBnh d\u1EA1ng A01, A02, ..., A99.");
      cell.hasError = true;
      cell.isEditing = true;
      this.focusCell();
      return;
    }
    if (newName !== this.originalName && this.usedNames.has(parseInt(newName.slice(1)))) {
      toast.error("T\xEAn n\xE0y \u0111\xE3 \u0111\u01B0\u1EE3c s\u1EED d\u1EE5ng. Vui l\xF2ng ch\u1ECDn t\xEAn kh\xE1c.");
      cell.hasError = true;
      cell.isEditing = true;
      this.focusCell();
      return;
    }
    this.usedNames.delete(parseInt(this.originalName.slice(1)));
    this.usedNames.add(parseInt(newName.slice(1)));
    cell.hasError = false;
    cell.isEditing = false;
  }
  saveSelected() {
    const selectedCells = this.matrix.flat().filter((cell) => cell.isSelected);
    selectedCells.forEach((cell) => {
      const row = Math.floor((cell.value - 1) / this.cols);
      const col = (cell.value - 1) % this.cols;
      if (!cell.id) {
        cell.id = "1";
      }
      this.selectedMatrix[row][col] = {
        id: cell.id,
        value: cell.value,
        type: cell.type,
        name: cell.name,
        status: cell.status
      };
    });
    this.updateDisplayMatrix();
    console.log("Selected Cells:", selectedCells);
    toast.success("D\u1EEF li\u1EC7u \u0111\xE3 \u0111\u01B0\u1EE3c l\u01B0u th\xE0nh c\xF4ng!");
  }
  resetSelected() {
    this.initializeMatrix();
    this.usedNames.clear();
  }
  // Phương thức thay đổi trạng thái của ô trong ma trận thứ hai
  toggleStatus(row, col, event2) {
    event2.preventDefault();
    const cell = this.matrix[row][col];
    if (cell.type === 2 || cell.type === 3) {
      return;
    }
    const cellElement = this.el.nativeElement.querySelector(`#cell-${row}-${col}`);
    this.renderer.removeClass(cellElement, `status-${cell.status}`);
    setTimeout(() => {
      if (cell.status === "available") {
        cell.status = "block";
      } else if (cell.status === "block") {
        cell.status = "available";
      }
      this.renderer.addClass(cellElement, `status-${cell.status}`);
    }, 300);
  }
  hasError() {
    return this.matrix.some((row) => row.some((cell) => cell.hasError));
  }
  ngOnInit() {
    this.updateDisplayMatrix();
  }
  // Phương thức cập nhật displayRows và visibleColumns
  updateDisplayMatrix() {
    const rows = this.selectedMatrix.length;
    const cols = this.selectedMatrix[0].length;
    this.displayRows = Array(rows).fill(false);
    this.visibleColumns = Array(cols).fill(false);
    this.selectedColumns = [];
    const selectedRows = /* @__PURE__ */ new Set();
    this.selectedMatrix.forEach((row, i) => {
      row.forEach((cell, j) => {
        if (cell.type > 0) {
          this.displayRows[i] = true;
          this.selectedColumns.push(j);
          selectedRows.add(i);
        }
      });
    });
    const selectedRowsArray = Array.from(selectedRows).sort((a, b) => a - b);
    const firstSelectedRow = selectedRowsArray[0];
    const lastSelectedRow = selectedRowsArray[selectedRowsArray.length - 1];
    for (let i = firstSelectedRow; i <= lastSelectedRow; i++) {
      this.displayRows[i] = true;
    }
    this.selectedColumns.sort((a, b) => a - b);
    if (this.selectedColumns.length > 0) {
      const firstCol = this.selectedColumns[0];
      const lastCol = this.selectedColumns[this.selectedColumns.length - 1];
      for (let j = firstCol; j <= lastCol; j++) {
        this.visibleColumns[j] = true;
      }
    }
  }
  static {
    this.\u0275fac = function OptionsValueComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _OptionsValueComponent)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _OptionsValueComponent, selectors: [["app-options-value"]], viewQuery: function OptionsValueComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(_c05, 5);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.cellInput = _t.first);
      }
    }, standalone: false, decls: 14, vars: 3, consts: [["cellInput", ""], [1, "toolbar"], ["for", "type-select"], ["class", "btn btn-type", 3, "click", 4, "ngFor", "ngForOf"], [1, "btn", "btn-save", 3, "click"], [1, "matrix"], ["class", "row", 4, "ngFor", "ngForOf"], ["class", "row", 3, "display", 4, "ngFor", "ngForOf"], [1, "btn", "btn-type", 3, "click"], [3, "src", "svgClass"], [1, "row"], ["class", "relative flex items-center justify-center", 3, "id", 4, "ngFor", "ngForOf"], [1, "relative", "flex", "items-center", "justify-center", 3, "id"], [3, "mousedown", "mouseup", "mouseleave", "contextmenu", "click"], [4, "ngIf"], ["class", "absolute", 4, "ngIf"], [3, "src", "svgClass", "ngClass"], ["class", "cell-name", 4, "ngIf"], [1, "cell-name"], [1, "absolute"], [1, "cell-input", 3, "ngModelChange", "keydown.enter", "ngModel"], ["class", "selected", 3, "display", "visibility", 4, "ngFor", "ngForOf"], [1, "selected"]], template: function OptionsValueComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 1)(1, "label", 2);
        \u0275\u0275text(2, "Ch\u1ECDn Ki\u1EC3u:");
        \u0275\u0275elementEnd();
        \u0275\u0275template(3, OptionsValueComponent_button_3_Template, 2, 3, "button", 3);
        \u0275\u0275elementStart(4, "button", 4);
        \u0275\u0275listener("click", function OptionsValueComponent_Template_button_click_4_listener() {
          return ctx.saveSelected();
        });
        \u0275\u0275text(5, "L\u01B0u");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(6, "button", 4);
        \u0275\u0275listener("click", function OptionsValueComponent_Template_button_click_6_listener() {
          return ctx.resetSelected();
        });
        \u0275\u0275text(7, "Reset");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(8, "div", 5);
        \u0275\u0275template(9, OptionsValueComponent_div_9_Template, 2, 1, "div", 6);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(10, "h3");
        \u0275\u0275text(11, "Ma tr\u1EADn th\u1EE9 hai");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(12, "div", 5);
        \u0275\u0275template(13, OptionsValueComponent_div_13_Template, 2, 3, "div", 7);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275advance(3);
        \u0275\u0275property("ngForOf", ctx.types);
        \u0275\u0275advance(6);
        \u0275\u0275property("ngForOf", ctx.matrix);
        \u0275\u0275advance(4);
        \u0275\u0275property("ngForOf", ctx.selectedMatrix);
      }
    }, dependencies: [NgClass, NgForOf, NgIf, DefaultValueAccessor, NgControlStatus, NgModel, SvgIconComponent], styles: ['@charset "UTF-8";\n\n\n\n.toolbar[_ngcontent-%COMP%] {\n  margin-bottom: 10px;\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n.toolbar[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%] {\n  padding: 10px 20px;\n  margin: 5px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n  transition: background-color 0.3s, transform 0.3s;\n}\n.toolbar[_ngcontent-%COMP%]   .btn-type[_ngcontent-%COMP%] {\n  background-color: #302f2f;\n  color: white;\n}\n.toolbar[_ngcontent-%COMP%]   .btn-type[_ngcontent-%COMP%]:hover {\n  background-color: #302f2f;\n  transform: scale(1.05);\n}\n.toolbar[_ngcontent-%COMP%]   .btn-save[_ngcontent-%COMP%] {\n  background-color: #28a745;\n  color: white;\n}\n.toolbar[_ngcontent-%COMP%]   .btn-save[_ngcontent-%COMP%]:hover {\n  background-color: #218838;\n  transform: scale(1.05);\n}\n#type-select[_ngcontent-%COMP%] {\n  padding: 5px;\n  font-size: 14px;\n}\n.matrix[_ngcontent-%COMP%] {\n  display: grid;\n  gap: 5px;\n}\n.row[_ngcontent-%COMP%] {\n  display: flex;\n}\n.cell[_ngcontent-%COMP%] {\n  width: 80px;\n  height: 80px;\n  border: 1px solid #ccc;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #f9f9f9;\n  cursor: pointer;\n  position: relative;\n  text-align: center;\n}\n.selected[_ngcontent-%COMP%] {\n  width: 80px;\n  height: 80px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  cursor: pointer;\n  text-align: center;\n}\n.cell-name[_ngcontent-%COMP%] {\n  position: absolute;\n}\n.cell-input[_ngcontent-%COMP%] {\n  width: 40px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  padding: 0 2px;\n}\n.cell.editing[_ngcontent-%COMP%] {\n  background-color: #fff3cd;\n  border-color: #ffc107;\n}\n.cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 100%;\n  border: none;\n  text-align: center;\n  font-size: 14px;\n  background-color: transparent;\n}\n.cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus {\n  outline: none;\n}\n.hidden[_ngcontent-%COMP%] {\n  visibility: hidden;\n}\n.has-error[_ngcontent-%COMP%] {\n  border: 2px solid red;\n}\n.icon[_ngcontent-%COMP%] {\n  width: 20px;\n  height: 20px;\n  margin-right: 5px;\n}\n@keyframes _ngcontent-%COMP%_showIcon {\n  from {\n    filter: blur(10px);\n    opacity: 0;\n  }\n  to {\n    filter: blur(0);\n    opacity: 1;\n  }\n}\n.show-icon[_ngcontent-%COMP%] {\n  animation: _ngcontent-%COMP%_showIcon 0.3s forwards;\n}\n@keyframes _ngcontent-%COMP%_statusChange {\n  from {\n    filter: blur(10px);\n    opacity: 0;\n  }\n  to {\n    filter: blur(0);\n    opacity: 1;\n  }\n}\n@keyframes _ngcontent-%COMP%_statusRevert {\n  from {\n    filter: blur(10px);\n    opacity: 0;\n  }\n  to {\n    filter: blur(0);\n    opacity: 1;\n  }\n}\n.status-available[_ngcontent-%COMP%] {\n  animation: _ngcontent-%COMP%_statusChange 0.3s forwards;\n}\n.status-block[_ngcontent-%COMP%] {\n  animation: _ngcontent-%COMP%_statusChange 0.3s forwards;\n}\n.status-reverting[_ngcontent-%COMP%] {\n  animation: _ngcontent-%COMP%_statusRevert 0.3s forwards;\n}\n/*# sourceMappingURL=options-value.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(OptionsValueComponent, { className: "OptionsValueComponent", filePath: "src/app/modules/management/pages/options/pages/options-value/options-value.component.ts", lineNumber: 10 });
})();

// src/app/modules/management/management.component.ts
var ManagementComponent = class _ManagementComponent {
  static {
    this.\u0275fac = function ManagementComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ManagementComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ManagementComponent, selectors: [["app-management"]], decls: 1, vars: 0, template: function ManagementComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275element(0, "router-outlet");
      }
    }, dependencies: [RouterOutlet], encapsulation: 2 });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ManagementComponent, { className: "ManagementComponent", filePath: "src/app/modules/management/management.component.ts", lineNumber: 11 });
})();

// src/app/modules/management/pages/bus-types/model/bus-type.model.ts
var SearchBusType = class {
  constructor() {
    this.busTypes = [];
    this.pageIdx = 0;
    this.totalItem = 0;
    this.totalPage = 0;
  }
};
var BusType2Create = class {
  constructor() {
    this.name = "";
  }
};

// src/app/modules/management/pages/bus-types/component/create-edit-bus-type-dialog/create-bus-type-dialog.component.ts
var _c06 = () => ({ standalone: true });
var CreateEditBusTypeDialogComponent = class _CreateEditBusTypeDialogComponent {
  constructor() {
    this.dialogRef = inject(MatDialogRef);
    this.data = inject(MAT_DIALOG_DATA);
    this.busType = this.data.busType ?? new BusType2Create();
  }
  ngOnInit() {
  }
  onButtonClick() {
  }
  closeDialog() {
    this.dialogRef.close();
  }
  static {
    this.\u0275fac = function CreateEditBusTypeDialogComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _CreateEditBusTypeDialogComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _CreateEditBusTypeDialogComponent, selectors: [["app-create-bus-type-dialog"]], standalone: false, decls: 15, vars: 5, consts: [[1, "text-center"], [1, "text-xl", "font-bold"], [1, "absolute", "right-3", 3, "matDialogClose"], ["xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 24 24", "fill", "currentColor", 1, "size-6"], ["fill-rule", "evenodd", "d", "M5.47 5.47a.75.75 0 0 1 1.06 0L12 10.94l5.47-5.47a.75.75 0 1 1 1.06 1.06L13.06 12l5.47 5.47a.75.75 0 1 1-1.06 1.06L12 13.06l-5.47 5.47a.75.75 0 0 1-1.06-1.06L10.94 12 5.47 6.53a.75.75 0 0 1 0-1.06Z", "clip-rule", "evenodd"], [1, "pb-5", "pt-3"], [1, "sm:min-w-36", "md:min-w-96", "mx-auto"], [1, "mb-5"], ["for", "base-input", 1, "mb-2", "block", "text-sm", "font-medium", "text-gray-900", "dark:text-white"], ["type", "text", "id", "busType-name", 1, "block", "w-full", "rounded-lg", "border", "border-gray-300", "bg-gray-50", "p-2.5", "text-sm", "text-gray-900", "focus:border-blue-500", "focus:ring-blue-500", "dark:border-gray-600", "dark:bg-gray-700", "dark:text-white", "dark:placeholder-gray-400", "dark:focus:border-blue-500", "dark:focus:ring-blue-500", 3, "ngModelChange", "ngModel", "ngModelOptions"], [1, "line-block", "space-x-4", "text-center"], [1, "bg-primary", "text-primary-foreground", "flex-none", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold", 3, "matDialogClose"]], template: function CreateEditBusTypeDialogComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "mat-dialog-title", 0)(1, "span", 1);
        \u0275\u0275text(2);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(3, "button", 2);
        \u0275\u0275namespaceSVG();
        \u0275\u0275elementStart(4, "svg", 3);
        \u0275\u0275element(5, "path", 4);
        \u0275\u0275elementEnd()()();
        \u0275\u0275namespaceHTML();
        \u0275\u0275elementStart(6, "mat-dialog-content", 5)(7, "form", 6)(8, "div", 7)(9, "label", 8);
        \u0275\u0275text(10, "NAME");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(11, "input", 9);
        \u0275\u0275twoWayListener("ngModelChange", function CreateEditBusTypeDialogComponent_Template_input_ngModelChange_11_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.busType.name, $event) || (ctx.busType.name = $event);
          return $event;
        });
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(12, "mat-dialog-actions", 10)(13, "button", 11);
        \u0275\u0275text(14, " SAVE ");
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.data.title);
        \u0275\u0275advance(9);
        \u0275\u0275twoWayProperty("ngModel", ctx.busType.name);
        \u0275\u0275property("ngModelOptions", \u0275\u0275pureFunction0(4, _c06));
        \u0275\u0275advance(2);
        \u0275\u0275property("matDialogClose", ctx.busType);
      }
    }, dependencies: [\u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, NgModel, NgForm, MatDialogClose, MatDialogActions, MatDialogContent], encapsulation: 2 });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(CreateEditBusTypeDialogComponent, { className: "CreateEditBusTypeDialogComponent", filePath: "src/app/modules/management/pages/bus-types/component/create-edit-bus-type-dialog/create-bus-type-dialog.component.ts", lineNumber: 16 });
})();

// src/app/modules/management/pages/bus-types/service/bus-types.servive.ts
var BusTypesService = class _BusTypesService {
  constructor(apiGatewayService) {
    this.apiGatewayService = apiGatewayService;
    this.url = "/bus-type";
  }
  findAll() {
    const url = `${this.url}/findAll`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  searchBusType(pageIdx = 0, pageSize = 999, keyword = "", sortBy = "") {
    const url = `${this.url}/search?pageIdx=${pageIdx}&pageSize=${pageSize}&keyword=${keyword}&sortBy=${sortBy}`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  createBusType(busType2Create) {
    const url = this.url;
    return this.apiGatewayService.post(url, busType2Create).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  updateBusType(busType2Update) {
    const url = this.url;
    return this.apiGatewayService.put(url, busType2Update).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  deleteBusType(id) {
    const deleteOptionUrl = this.url + `/${id}`;
    return this.apiGatewayService.delete(deleteOptionUrl).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  static {
    this.\u0275fac = function BusTypesService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusTypesService)(\u0275\u0275inject(ApiGatewayService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _BusTypesService, factory: _BusTypesService.\u0275fac, providedIn: "root" });
  }
};

// src/app/modules/management/pages/bus-types/bus-types.component.ts
var _forTrack02 = ($index, $item) => $item._id;
function BusTypesComponent_For_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr", 13)(1, "td", 15)(2, "input", 16);
    \u0275\u0275twoWayListener("ngModelChange", function BusTypesComponent_For_20_Template_input_ngModelChange_2_listener($event) {
      const busType_r2 = \u0275\u0275restoreView(_r1).$implicit;
      \u0275\u0275twoWayBindingSet(busType_r2.selected, $event) || (busType_r2.selected = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function BusTypesComponent_For_20_Template_input_change_2_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.checkSelectAll());
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(3, "td");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "td", 15)(6, "button", 17);
    \u0275\u0275listener("click", function BusTypesComponent_For_20_Template_button_click_6_listener() {
      const busType_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.editBusType(busType_r2));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(7, "svg", 18);
    \u0275\u0275element(8, "path", 19);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(9, "button", 20);
    \u0275\u0275listener("click", function BusTypesComponent_For_20_Template_button_click_9_listener() {
      const busType_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.deleteBusType(busType_r2._id));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(10, "svg", 18);
    \u0275\u0275element(11, "path", 21);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const busType_r2 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", busType_r2.selected);
    \u0275\u0275attribute("aria-label", "Select " + busType_r2.name);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(busType_r2.name);
  }
}
function BusTypesComponent_ForEmpty_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr")(1, "td", 22);
    \u0275\u0275text(2, "No busTypes found");
    \u0275\u0275elementEnd()();
  }
}
var BusTypesComponent = class _BusTypesComponent {
  constructor(busTypesService, dialog, utils) {
    this.busTypesService = busTypesService;
    this.dialog = dialog;
    this.utils = utils;
    this.searchBusType = new SearchBusType();
    this.selectAll = false;
    this.pageIdx = 1;
    this.pageSize = 5;
    this.totalPage = 0;
    this.totalItem = 0;
    this.keyword = "";
    this.sortBy = "";
    this.isLoadingBusType = false;
  }
  ngOnInit() {
    this.loadData();
  }
  loadData() {
    this.isLoadingBusType = true;
    this.busTypesService.searchBusType(this.pageIdx, this.pageSize, this.keyword, this.sortBy).subscribe({
      next: (res) => {
        if (res) {
          this.searchBusType = res;
          this.totalItem = this.searchBusType.totalItem;
          this.totalPage = this.searchBusType.totalPage;
        }
        this.isLoadingBusType = false;
      },
      error: (error2) => {
        this.utils.handleRequestError(error2);
        this.isLoadingBusType = false;
      }
    });
  }
  toggleBusType(event2) {
    const checked = event2.target.checked;
    this.searchBusType.busTypes = this.searchBusType.busTypes.map((busType) => __spreadProps(__spreadValues({}, busType), {
      selected: checked
    }));
  }
  checkSelectAll() {
    this.selectAll = !this.searchBusType.busTypes.some((busType) => !busType.selected);
  }
  deleteBusType(id) {
    const dialogRef = this.dialog.open(MaterialDialogComponent, {
      data: {
        icon: {
          type: "dangerous"
        },
        title: "Delete BusType",
        content: "Are you sure you want to delete this busType? All of your data will be permanently removed. This action cannot be undone.",
        btn: [
          {
            label: "NO",
            type: "cancel"
          },
          {
            label: "YES",
            type: "submit"
          }
        ]
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        this.busTypesService.deleteBusType(id).subscribe({
          next: (res) => {
            if (res) {
              this.searchBusType.busTypes = this.searchBusType.busTypes.filter((busType) => busType._id !== id);
              toast.success("BusType deleted successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  editBusType(busType) {
    const dialogRef = this.dialog.open(CreateEditBusTypeDialogComponent, {
      data: {
        title: "Edit BusType",
        busType: __spreadValues({}, busType)
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        this.busTypesService.updateBusType(result).subscribe({
          next: (res) => {
            if (res) {
              this.searchBusType.busTypes = this.searchBusType.busTypes.map((busType2) => busType2._id === res._id ? __spreadValues(__spreadValues({}, busType2), res) : busType2);
              toast.success("BusType updated successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  addBusType() {
    const dialogRef = this.dialog.open(CreateEditBusTypeDialogComponent, {
      data: {
        title: "Add New BusType"
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        this.busTypesService.createBusType(result).subscribe({
          next: (res) => {
            if (res) {
              this.loadData();
              toast.success("BusType added successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  reloadBusTypePage(data) {
    this.pageIdx = data.pageIdx;
    this.pageSize = data.pageSize;
    this.loadData();
  }
  searchBusTypePage(keyword) {
    this.pageIdx = 1;
    this.keyword = keyword;
    this.loadData();
  }
  sortBusTypePage(sortBy) {
    this.sortBy = sortBy;
    this.loadData();
  }
  handleRequestError(error2) {
    const msg = "An error occurred while processing your request";
    toast.error(msg, {
      position: "bottom-right",
      description: error2.message || "Please try again later",
      action: {
        label: "Dismiss",
        onClick: () => {
        }
      },
      actionButtonStyle: "background-color:#DC2626; color:white;"
    });
  }
  static {
    this.\u0275fac = function BusTypesComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusTypesComponent)(\u0275\u0275directiveInject(BusTypesService), \u0275\u0275directiveInject(MatDialog), \u0275\u0275directiveInject(Utils));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _BusTypesComponent, selectors: [["app-bus-types"]], standalone: false, decls: 23, vars: 9, consts: [[1, "mb-4", "flex", "justify-end"], [1, "inline-block", "space-x-4"], ["aria-label", "Import CSV", 1, "bg-muted", "text-muted-foreground", "hover:text-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold"], ["aria-label", "Add BusType", 1, "bg-primary", "text-primary-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold", 3, "click"], [1, "border-muted/20", "bg-background", "flex", "min-w-full", "flex-col", "rounded-xl", "border", "p-2"], [3, "sortDataEvent", "searchDataEvent", "title", "totalItem"], [1, "overflow-x-auto"], [1, "text-muted-foreground", "w-full", "table-auto", "border-collapse", "text-left", "align-middle", "leading-5"], [1, "border-muted/20", "text-muted-foreground", "border", "text-xs"], [1, "w-[50px]"], ["type", "checkbox", "aria-label", "Select all busTypes", 1, "checkbox", "checkbox-sm", 3, "change", "ngModelChange", "ngModel"], [1, "min-w-[200px]"], [1, "w-[100px]", "text-center"], [1, "hover:bg-card/50"], [3, "reloadDataAndPageEvent", "pageIdx", "pageSize", "totalItem", "isLoading", "totalPage"], [1, "text-center"], ["type", "checkbox", 1, "checkbox", "checkbox-sm", 3, "ngModelChange", "change", "ngModel"], ["aria-label", "Edit busType", 1, "text-muted-foreground", "hover:bg-card", "hover:text-foreground", "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", 3, "click"], ["viewBox", "0 0 20 20", "fill", "currentColor", 1, "size-5"], ["d", "m2.695 14.762-1.262 3.155a.5.5 0 0 0 .65.65l3.155-1.262a4 4 0 0 0 1.343-.886L17.5 5.501a2.121 2.121 0 0 0-3-3L3.58 13.419a4 4 0 0 0-.885 1.343Z"], ["aria-label", "Delete busType", 1, "text-muted-foreground", "hover:bg-card", "hover:text-foreground", "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", 3, "click"], ["fill-rule", "evenodd", "d", "M8.75 1A2.75 2.75 0 0 0 6 3.75v.443c-.795.077-1.584.176-2.365.298a.75.75 0 1 0 .23 1.482l.149-.022.841 10.518A2.75 2.75 0 0 0 7.596 19h4.807a2.75 2.75 0 0 0 2.742-2.53l.841-10.52.149.023a.75.75 0 0 0 .23-1.482A41.03 41.03 0 0 0 14 4.193V3.75A2.75 2.75 0 0 0 11.25 1h-2.5ZM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25v.325C8.327 4.025 9.16 4 10 4ZM8.58 7.72a.75.75 0 0 0-1.5.06l.3 7.5a.75.75 0 1 0 1.5-.06l-.3-7.5Zm4.34.06a.75.75 0 1 0-1.5-.06l-.3 7.5a.75.75 0 1 0 1.5.06l.3-7.5Z", "clip-rule", "evenodd"], ["colspan", "4", 1, "py-4", "text-center", "text-sm"]], template: function BusTypesComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "button", 2);
        \u0275\u0275text(3, " Import CSV ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(4, "button", 3);
        \u0275\u0275listener("click", function BusTypesComponent_Template_button_click_4_listener() {
          return ctx.addBusType();
        });
        \u0275\u0275text(5, " Add BusType ");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(6, "div", 4)(7, "app-table-action", 5);
        \u0275\u0275listener("sortDataEvent", function BusTypesComponent_Template_app_table_action_sortDataEvent_7_listener($event) {
          return ctx.sortBusTypePage($event);
        })("searchDataEvent", function BusTypesComponent_Template_app_table_action_searchDataEvent_7_listener($event) {
          return ctx.searchBusTypePage($event);
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "div", 6)(9, "table", 7)(10, "thead", 8)(11, "tr")(12, "th", 9)(13, "input", 10);
        \u0275\u0275listener("change", function BusTypesComponent_Template_input_change_13_listener($event) {
          return ctx.toggleBusType($event);
        });
        \u0275\u0275twoWayListener("ngModelChange", function BusTypesComponent_Template_input_ngModelChange_13_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.selectAll, $event) || (ctx.selectAll = $event);
          return $event;
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(14, "th", 11);
        \u0275\u0275text(15, "Name");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(16, "th", 12);
        \u0275\u0275text(17, "Actions");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(18, "tbody");
        \u0275\u0275repeaterCreate(19, BusTypesComponent_For_20_Template, 12, 3, "tr", 13, _forTrack02, false, BusTypesComponent_ForEmpty_21_Template, 3, 0, "tr");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(22, "app-table-footer", 14);
        \u0275\u0275listener("reloadDataAndPageEvent", function BusTypesComponent_Template_app_table_footer_reloadDataAndPageEvent_22_listener($event) {
          return ctx.reloadBusTypePage($event);
        });
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(7);
        \u0275\u0275property("title", "BusType")("totalItem", ctx.totalItem);
        \u0275\u0275advance(6);
        \u0275\u0275twoWayProperty("ngModel", ctx.selectAll);
        \u0275\u0275advance(6);
        \u0275\u0275repeater(ctx.searchBusType.busTypes);
        \u0275\u0275advance(3);
        \u0275\u0275property("pageIdx", ctx.pageIdx)("pageSize", ctx.pageSize)("totalItem", ctx.totalItem)("isLoading", ctx.isLoadingBusType)("totalPage", ctx.totalPage);
      }
    }, dependencies: [CheckboxControlValueAccessor, NgControlStatus, NgModel, TableFooterComponent, TableActionComponent], styles: ["\n\ntd[_ngcontent-%COMP%] {\n  padding: 0.75rem 1rem;\n  font-size: 0.85rem;\n}\nth[_ngcontent-%COMP%] {\n  font-weight: 500;\n  padding: 0.625rem 1rem;\n  font-weight: 500;\n  font-size: 0.8125rem;\n  line-height: 1.125rem;\n  vertical-align: middle;\n  @apply border-b border-r;\n}\n/*# sourceMappingURL=bus-types.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(BusTypesComponent, { className: "BusTypesComponent", filePath: "src/app/modules/management/pages/bus-types/bus-types.component.ts", lineNumber: 16 });
})();

// src/app/modules/management/pages/bus-services/model/bus-service.model.ts
var SearchBusService = class {
  constructor() {
    this.busServices = [];
    this.pageIdx = 0;
    this.totalItem = 0;
    this.totalPage = 0;
  }
};
var BusService2Create = class {
  constructor() {
    this.name = "";
  }
};

// src/app/modules/management/pages/files-center/files-center.component.ts
var import_lodash = __toESM(require_lodash());

// src/app/modules/management/pages/files-center/model/file-center.model.ts
var SearchFile = class {
  constructor() {
    this.files = [];
    this.pageIdx = 0;
    this.totalItem = 0;
    this.totalPage = 0;
  }
};

// src/app/modules/management/pages/files-center/components/view-image-dialog/view-image-dialog.component.ts
function ViewImageDialogComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275element(0, "img", 1);
    \u0275\u0275elementStart(1, "div", 2)(2, "button", 3);
    \u0275\u0275listener("click", function ViewImageDialogComponent_Conditional_1_Template_button_click_2_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.downloadFile(ctx_r1.data.file.link));
    });
    \u0275\u0275element(3, "svg-icon", 4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "button", 3);
    \u0275\u0275listener("click", function ViewImageDialogComponent_Conditional_1_Template_button_click_4_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.closeDialog());
    });
    \u0275\u0275element(5, "svg-icon", 5);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("src", ctx_r1.data.file.link, \u0275\u0275sanitizeUrl);
    \u0275\u0275advance(3);
    \u0275\u0275property("svgClass", "h-8 w-8 cursor-pointer");
    \u0275\u0275advance(2);
    \u0275\u0275property("svgClass", "h-8 w-8 cursor-pointer ");
  }
}
var ViewImageDialogComponent = class _ViewImageDialogComponent {
  constructor() {
    this.dialogRef = inject(MatDialogRef);
    this.data = inject(MAT_DIALOG_DATA);
  }
  ngOnInit() {
  }
  onButtonClick() {
  }
  downloadFile(link) {
  }
  closeDialog() {
    this.dialogRef.close();
  }
  static {
    this.\u0275fac = function ViewImageDialogComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ViewImageDialogComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ViewImageDialogComponent, selectors: [["app-view-image-dialog"]], decls: 2, vars: 1, consts: [[1, "flex", "h-full", "w-full", "justify-center", "rounded-xl", "border", "border-white"], [1, "cursor-pointer", "object-contain", "p-2", 3, "src"], [1, "fixed", "right-[15px]", "top-[15px]", "flex"], [1, "m-0", "rounded-lg", "p-2", "hover:bg-gray-700", 3, "click"], ["src", "./assets/icons/download-outline-white.svg", 3, "svgClass"], ["src", "./assets/icons/close-white.svg", 3, "svgClass"]], template: function ViewImageDialogComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "mat-dialog-content", 0);
        \u0275\u0275template(1, ViewImageDialogComponent_Conditional_1_Template, 6, 3);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275advance();
        \u0275\u0275conditional(ctx.data ? 1 : -1);
      }
    }, dependencies: [MatFormFieldModule, MatInputModule, FormsModule, MatButtonModule, CommonModule, AngularSvgIconModule, SvgIconComponent], encapsulation: 2 });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ViewImageDialogComponent, { className: "ViewImageDialogComponent", filePath: "src/app/modules/management/pages/files-center/components/view-image-dialog/view-image-dialog.component.ts", lineNumber: 23 });
})();

// src/app/modules/management/pages/files-center/service/files-center.servive.ts
var FilesService = class _FilesService {
  constructor(apiGatewayService) {
    this.apiGatewayService = apiGatewayService;
    this.url = "";
  }
  searchFile(pageIdx = 0, pageSize = 999, keyword = "", sortBy = "", filter2 = "", fileFolderId = "") {
    const url = `/file/search?pageIdx=${pageIdx}&pageSize=${pageSize}&keyword=${keyword}&sortBy=${sortBy}&&filter=${filter2}&fileFolderId=${fileFolderId}`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of(null);
    }));
  }
  uploadFiles(filesList, folderId) {
    const formData = new FormData();
    const formDataPromise = Promise.all(Array.from(filesList).map((file) => {
      return new Promise((resolve) => {
        formData.append("files", file);
        resolve(null);
      });
    })).then(() => formData);
    const url = `/file/upload-file/${folderId}`;
    return from(formDataPromise).pipe(switchMap((formData2) => {
      return this.apiGatewayService.post(url, formData2);
    }));
  }
  updateFile(file2Update) {
    const url = "/file";
    return this.apiGatewayService.put(url, file2Update).pipe(tap((res) => {
    }), catchError((error2) => {
      return of(null);
    }));
  }
  updateFiles2Folder(files2Update, folderId) {
    const url = `/file/update-files-folder/${folderId}`;
    return this.apiGatewayService.put(url, files2Update).pipe(tap((res) => {
    }), catchError((error2) => {
      return of(null);
    }));
  }
  deleteFile(id) {
    const url = `/file/${id}`;
    return this.apiGatewayService.delete(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of(null);
    }));
  }
  deleteFiles(ids) {
    const url = `/file/delete-files`;
    return this.apiGatewayService.post(url, ids).pipe(tap((res) => {
    }), catchError((error2) => {
      return of(null);
    }));
  }
  getFileFolder() {
    const url = `/file-folder`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of(null);
    }));
  }
  createFileFolder(fileFolder2Create) {
    const url = `/file-folder`;
    return this.apiGatewayService.post(url, fileFolder2Create).pipe(tap((res) => {
    }), catchError((error2) => {
      return of(null);
    }));
  }
  updateFileFolder(fileFolder2Update) {
    const url = `/file-folder`;
    return this.apiGatewayService.put(url, fileFolder2Update).pipe(tap((res) => {
    }), catchError((error2) => {
      return of(null);
    }));
  }
  deleteFileFolder(_id) {
    const url = `/file-folder/${_id}`;
    return this.apiGatewayService.delete(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of(null);
    }));
  }
  static {
    this.\u0275fac = function FilesService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _FilesService)(\u0275\u0275inject(ApiGatewayService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _FilesService, factory: _FilesService.\u0275fac, providedIn: "root" });
  }
};

// src/app/shared/utils/utils-modal.ts
var UtilsModal = class _UtilsModal {
  constructor(dialog) {
    this.dialog = dialog;
  }
  openModalConfirm(title, content, type, btns) {
    const dialogRef = this.dialog.open(MaterialDialogComponent, {
      data: {
        icon: {
          type: type || "success"
        },
        title,
        content,
        btn: btns || [
          {
            label: "NO",
            type: "cancel"
          },
          {
            label: "YES",
            type: "submit"
          }
        ]
      }
    });
    return dialogRef.afterClosed();
  }
  openModal(component, data, size = "small") {
    let height = "";
    let width = "";
    if (size == "medium") {
      height = width = "60%";
    } else if (size == "large") {
      height = width = "80%";
    } else if (size == "full") {
      height = width = "100%";
    }
    const dialogRef = this.dialog.open(component, {
      height,
      width,
      maxWidth: width,
      panelClass: "custom-dialog",
      data
    });
    return dialogRef.afterClosed();
  }
  static {
    this.\u0275fac = function UtilsModal_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _UtilsModal)(\u0275\u0275inject(MatDialog));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _UtilsModal, factory: _UtilsModal.\u0275fac, providedIn: "root" });
  }
};

// src/app/modules/management/components/trigger-modal/trigger-modal.component.ts
var _c07 = ["*", [["", "triggerModalContent", ""]]];
var _c13 = ["*", "[triggerModalContent]"];
var _c2 = (a0) => ({ "cursor-pointer": a0 });
function TriggerModalComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 3)(1, "div", 4)(2, "div", 5);
    \u0275\u0275listener("clickOutside", function TriggerModalComponent_div_3_Template_div_clickOutside_2_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.hide());
    });
    \u0275\u0275projection(3, 1);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275styleProp("top", ctx_r1.position.top)("right", ctx_r1.position.right);
  }
}
var TriggerModalComponent = class _TriggerModalComponent {
  constructor() {
    this.disable = false;
    this.isVisible = false;
    this.position = { top: "30px", right: "-90%" };
    this.isModalShown = false;
  }
  show() {
    this.isModalShown = false;
    this.isVisible = true;
    setTimeout(() => {
      this.isModalShown = true;
    }, 300);
  }
  hide() {
    if (this.isModalShown) {
      this.isModalShown = false;
      this.isVisible = false;
    }
  }
  static {
    this.\u0275fac = function TriggerModalComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _TriggerModalComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _TriggerModalComponent, selectors: [["app-trigger-modal"]], inputs: { disable: "disable" }, standalone: false, ngContentSelectors: _c13, decls: 4, vars: 4, consts: [[1, "relative", "inline-block", "w-full", 3, "click"], [3, "ngClass"], ["class", "animate-fade-in-up absolute z-10 h-32 w-full", 3, "top", "right", 4, "ngIf"], [1, "animate-fade-in-up", "absolute", "z-10", "h-32", "w-full"], [1, "trigger-modal-content", "h-max", "w-48", "rounded-lg", "bg-white", "shadow-round"], ["clickOutside", "", 1, "p-1", 3, "clickOutside"]], template: function TriggerModalComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275projectionDef(_c07);
        \u0275\u0275elementStart(0, "div", 0);
        \u0275\u0275listener("click", function TriggerModalComponent_Template_div_click_0_listener() {
          return ctx.show();
        });
        \u0275\u0275elementStart(1, "span", 1);
        \u0275\u0275projection(2);
        \u0275\u0275elementEnd();
        \u0275\u0275template(3, TriggerModalComponent_div_3_Template, 4, 4, "div", 2);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275advance();
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(2, _c2, !ctx.disable));
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.isVisible && !ctx.disable);
      }
    }, dependencies: [NgClass, NgIf, ClickOutsideDirective], styles: ["\n\n[_nghost-%COMP%] {\n  display: flex;\n}\n/*# sourceMappingURL=trigger-modal.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(TriggerModalComponent, { className: "TriggerModalComponent", filePath: "src/app/modules/management/components/trigger-modal/trigger-modal.component.ts", lineNumber: 9 });
})();

// src/app/modules/management/components/trigger-mask/trigger-mask.component.ts
var _c08 = ["*", [["", "triggerMaskContent", ""]]];
var _c14 = ["*", "[triggerMaskContent]"];
var _c22 = (a0) => ({ "cursor-pointer": a0 });
function TriggerMaskComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 3);
    \u0275\u0275projection(1, 1);
    \u0275\u0275elementEnd();
  }
}
var TriggerMaskComponent = class _TriggerMaskComponent {
  constructor() {
    this.disable = false;
    this.isVisible = false;
    this.position = { top: "30px", right: "-90%" };
  }
  show() {
    this.isVisible = true;
  }
  hide() {
    this.isVisible = false;
  }
  static {
    this.\u0275fac = function TriggerMaskComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _TriggerMaskComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _TriggerMaskComponent, selectors: [["app-trigger-mask"]], inputs: { disable: "disable" }, standalone: false, ngContentSelectors: _c14, decls: 4, vars: 4, consts: [[1, "relative", "flex", 3, "mouseenter", "mouseleave"], [3, "ngClass"], ["class", "action-preview-img absolute bottom-0 z-10 h-max w-full items-end justify-center opacity-0", 4, "ngIf"], [1, "action-preview-img", "absolute", "bottom-0", "z-10", "h-max", "w-full", "items-end", "justify-center", "opacity-0"]], template: function TriggerMaskComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275projectionDef(_c08);
        \u0275\u0275elementStart(0, "div", 0);
        \u0275\u0275listener("mouseenter", function TriggerMaskComponent_Template_div_mouseenter_0_listener() {
          return ctx.show();
        })("mouseleave", function TriggerMaskComponent_Template_div_mouseleave_0_listener() {
          return ctx.hide();
        });
        \u0275\u0275elementStart(1, "span", 1);
        \u0275\u0275projection(2);
        \u0275\u0275elementEnd();
        \u0275\u0275template(3, TriggerMaskComponent_div_3_Template, 2, 0, "div", 2);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275advance();
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(2, _c22, !ctx.disable));
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.isVisible && !ctx.disable);
      }
    }, dependencies: [NgClass, NgIf], styles: ["\n\n.action-preview-img[_ngcontent-%COMP%] {\n  opacity: 1;\n}\n/*# sourceMappingURL=trigger-mask.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(TriggerMaskComponent, { className: "TriggerMaskComponent", filePath: "src/app/modules/management/components/trigger-mask/trigger-mask.component.ts", lineNumber: 9 });
})();

// src/app/modules/management/pages/files-center/files-center.component.ts
var _c09 = ["inputFileFolder"];
var _c15 = (a0) => [a0];
var _c23 = (a0, a1) => ({ "hover:bg-card hover:text-foreground": a0, "not-drop": a1 });
var _c3 = (a0) => ({ "text-primary font-semibold": a0 });
var _c4 = (a0) => ({ selected: a0 });
function FilesComponent_div_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 32)(1, "svg-icon", 33);
    \u0275\u0275listener("click", function FilesComponent_div_5_Template_svg_icon_click_1_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.deleteFileSelected());
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2, "div", 34)(3, "label", 35);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "svg-icon", 36);
    \u0275\u0275listener("click", function FilesComponent_div_5_Template_svg_icon_click_5_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.unSelectAllfile());
    });
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("svgClass", "h-6 w-6 cursor-pointer");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1("\u0110\xE3 ch\u1ECDn ", ctx_r2.selectedFiles.length, " t\u1EC7p");
    \u0275\u0275advance();
    \u0275\u0275property("svgClass", "h-4 w-4 cursor-pointer ml-2");
  }
}
function FilesComponent_li_17_div_2_svg_icon_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "svg-icon", 45);
  }
  if (rf & 2) {
    const item_r5 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275propertyInterpolate1("src", "./assets/icons/", item_r5.icon, "");
  }
}
function FilesComponent_li_17_div_2_div_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "div", 46);
  }
}
function FilesComponent_li_17_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 41);
    \u0275\u0275listener("click", function FilesComponent_li_17_div_2_Template_div_click_0_listener() {
      \u0275\u0275restoreView(_r4);
      const item_r5 = \u0275\u0275nextContext().$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.selectFileFolder(item_r5));
    });
    \u0275\u0275template(1, FilesComponent_li_17_div_2_svg_icon_1_Template, 1, 2, "svg-icon", 42)(2, FilesComponent_li_17_div_2_div_2_Template, 1, 0, "div", 43);
    \u0275\u0275elementStart(3, "label", 44);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const item_r5 = \u0275\u0275nextContext().$implicit;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r2.utils.isValidObjectId(item_r5._id));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.utils.isValidObjectId(item_r5._id));
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(4, _c3, item_r5.selected));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", item_r5.name, " ");
  }
}
function FilesComponent_li_17_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div")(1, "input", 47, 1);
    \u0275\u0275twoWayListener("ngModelChange", function FilesComponent_li_17_div_3_Template_input_ngModelChange_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const item_r5 = \u0275\u0275nextContext().$implicit;
      \u0275\u0275twoWayBindingSet(item_r5.name, $event) || (item_r5.name = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("keydown.enter", function FilesComponent_li_17_div_3_Template_input_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r6);
      const item_r5 = \u0275\u0275nextContext().$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.handleActoinFolderInput(item_r5));
    })("blur", function FilesComponent_li_17_div_3_Template_input_blur_1_listener() {
      \u0275\u0275restoreView(_r6);
      const item_r5 = \u0275\u0275nextContext().$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.handleActoinFolderInput(item_r5));
    })("keydown.esc", function FilesComponent_li_17_div_3_Template_input_keydown_esc_1_listener() {
      \u0275\u0275restoreView(_r6);
      const item_r5 = \u0275\u0275nextContext().$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.cancelEditFileFolder(item_r5));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const item_r5 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275twoWayProperty("ngModel", item_r5.name);
  }
}
function FilesComponent_li_17_app_trigger_modal_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-trigger-modal");
    \u0275\u0275element(1, "svg-icon", 48);
    \u0275\u0275elementStart(2, "div", 49)(3, "ul")(4, "li")(5, "button", 50);
    \u0275\u0275listener("click", function FilesComponent_li_17_app_trigger_modal_4_Template_button_click_5_listener() {
      \u0275\u0275restoreView(_r7);
      const item_r5 = \u0275\u0275nextContext().$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.setIsEditFileFolder(item_r5));
    });
    \u0275\u0275elementStart(6, "div", 51);
    \u0275\u0275element(7, "svg-icon", 52);
    \u0275\u0275elementStart(8, "label", 53);
    \u0275\u0275text(9, "S\u1EEDa t\xEAn");
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(10, "li")(11, "button", 50);
    \u0275\u0275listener("click", function FilesComponent_li_17_app_trigger_modal_4_Template_button_click_11_listener() {
      \u0275\u0275restoreView(_r7);
      const item_r5 = \u0275\u0275nextContext().$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.deleteFileFolder(item_r5));
    });
    \u0275\u0275elementStart(12, "div", 51);
    \u0275\u0275element(13, "svg-icon", 54);
    \u0275\u0275elementStart(14, "label", 53);
    \u0275\u0275text(15, "X\xF3a th\u01B0 m\u1EE5c");
    \u0275\u0275elementEnd()()()()()()();
  }
}
function FilesComponent_li_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "li", 37)(1, "div", 38);
    \u0275\u0275template(2, FilesComponent_li_17_div_2_Template, 5, 6, "div", 39)(3, FilesComponent_li_17_div_3_Template, 3, 1, "div", 40)(4, FilesComponent_li_17_app_trigger_modal_4_Template, 16, 0, "app-trigger-modal", 40);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const item_r5 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275property("cdkDragData", item_r5)("cdkDragDisabled", true)("id", item_r5._id)("ngClass", \u0275\u0275pureFunction2(7, _c23, !item_r5.isEditing, !ctx_r2.utils.isValidObjectId(item_r5._id)));
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", !item_r5.isEditing);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", item_r5.isEditing);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.utils.isValidObjectId(item_r5._id) && !item_r5.isEditing);
  }
}
function FilesComponent_Conditional_34_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 29);
    \u0275\u0275element(1, "img", 55);
    \u0275\u0275elementStart(2, "label", 56);
    \u0275\u0275text(3, "\u0110\u1ED3ng b\u1ED9 v\u1EDBi b\u1ED9 nh\u1EDB \u0111\xE1m m\xE2y");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "label", 57);
    \u0275\u0275text(5, "Tr\xE1nh l\u1EB7p l\u1EA1i qu\xE1 tr\xECnh t\u1EA3i l\xEAn v\xE0 n\xE2ng cao hi\u1EC7u qu\u1EA3 t\xE1i s\u1EED d\u1EE5ng t\xE0i li\u1EC7u.");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "div", 58)(7, "input", 59);
    \u0275\u0275listener("change", function FilesComponent_Conditional_34_Template_input_change_7_listener($event) {
      \u0275\u0275restoreView(_r8);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onFileChange($event));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(8, "button", 60);
    \u0275\u0275text(9, " T\u1EA3i \u1EA3nh l\xEAn ");
    \u0275\u0275elementEnd()()();
  }
}
function FilesComponent_Conditional_35_div_2_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 75)(1, "label", 76);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const file_r11 = \u0275\u0275nextContext().$implicit;
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.getIndexSelectedFile(file_r11));
  }
}
function FilesComponent_Conditional_35_div_2_div_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 77)(1, "div", 78);
    \u0275\u0275element(2, "svg-icon", 79);
    \u0275\u0275elementEnd()();
  }
}
function FilesComponent_Conditional_35_div_2_ng_container_13_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 80);
    \u0275\u0275element(2, "img", 66);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const selectedFile_r12 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275property("src", selectedFile_r12.link, \u0275\u0275sanitizeUrl);
  }
}
function FilesComponent_Conditional_35_div_2_ng_container_13_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FilesComponent_Conditional_35_div_2_ng_container_13_ng_container_1_Template, 3, 1, "ng-container", 40);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const selectedFile_r12 = ctx.$implicit;
    const idx_r13 = ctx.index;
    const file_r11 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", idx_r13 < 5 && selectedFile_r12._id !== file_r11._id);
  }
}
function FilesComponent_Conditional_35_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 63);
    \u0275\u0275listener("cdkDragStarted", function FilesComponent_Conditional_35_div_2_Template_div_cdkDragStarted_0_listener() {
      const file_r11 = \u0275\u0275restoreView(_r10).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onDragStarted(file_r11));
    })("cdkDragEnded", function FilesComponent_Conditional_35_div_2_Template_div_cdkDragEnded_0_listener() {
      const file_r11 = \u0275\u0275restoreView(_r10).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onDragEnded(file_r11));
    });
    \u0275\u0275elementStart(1, "div", 64);
    \u0275\u0275listener("click", function FilesComponent_Conditional_35_div_2_Template_div_click_1_listener() {
      const file_r11 = \u0275\u0275restoreView(_r10).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.toggleFile(file_r11));
    })("dblclick", function FilesComponent_Conditional_35_div_2_Template_div_dblclick_1_listener($event) {
      const file_r11 = \u0275\u0275restoreView(_r10).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onDbClickFile($event, file_r11));
    });
    \u0275\u0275elementStart(2, "app-trigger-mask");
    \u0275\u0275template(3, FilesComponent_Conditional_35_div_2_div_3_Template, 3, 1, "div", 65);
    \u0275\u0275element(4, "img", 66);
    \u0275\u0275template(5, FilesComponent_Conditional_35_div_2_div_5_Template, 3, 0, "div", 67);
    \u0275\u0275elementStart(6, "div", 68)(7, "button", 69);
    \u0275\u0275listener("click", function FilesComponent_Conditional_35_div_2_Template_button_click_7_listener($event) {
      const file_r11 = \u0275\u0275restoreView(_r10).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.setFavoriteFile($event, file_r11));
    });
    \u0275\u0275element(8, "svg-icon", 70);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "button", 69);
    \u0275\u0275listener("click", function FilesComponent_Conditional_35_div_2_Template_button_click_9_listener($event) {
      const file_r11 = \u0275\u0275restoreView(_r10).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.zoomFile($event, file_r11));
    });
    \u0275\u0275element(10, "svg-icon", 71);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "button", 69);
    \u0275\u0275listener("click", function FilesComponent_Conditional_35_div_2_Template_button_click_11_listener($event) {
      const file_r11 = \u0275\u0275restoreView(_r10).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.deleteFile($event, file_r11));
    });
    \u0275\u0275element(12, "svg-icon", 72);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275template(13, FilesComponent_Conditional_35_div_2_ng_container_13_Template, 2, 1, "ng-container", 73);
    \u0275\u0275elementStart(14, "input", 74);
    \u0275\u0275twoWayListener("ngModelChange", function FilesComponent_Conditional_35_div_2_Template_input_ngModelChange_14_listener($event) {
      const file_r11 = \u0275\u0275restoreView(_r10).$implicit;
      \u0275\u0275twoWayBindingSet(file_r11.filename, $event) || (file_r11.filename = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("click", function FilesComponent_Conditional_35_div_2_Template_input_click_14_listener() {
      const file_r11 = \u0275\u0275restoreView(_r10).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.setEditFile(file_r11));
    })("focus", function FilesComponent_Conditional_35_div_2_Template_input_focus_14_listener() {
      const file_r11 = \u0275\u0275restoreView(_r10).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.setEditFile(file_r11));
    })("blur", function FilesComponent_Conditional_35_div_2_Template_input_blur_14_listener() {
      const file_r11 = \u0275\u0275restoreView(_r10).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.handleUpdateFile(file_r11));
    })("keydown.enter", function FilesComponent_Conditional_35_div_2_Template_input_keydown_enter_14_listener($event) {
      \u0275\u0275restoreView(_r10);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onEnterFile($event));
    })("keydown.esc", function FilesComponent_Conditional_35_div_2_Template_input_keydown_esc_14_listener($event) {
      const file_r11 = \u0275\u0275restoreView(_r10).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onEscFile(file_r11, $event));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const file_r11 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275classMapInterpolate1("file col-span-2 ", ctx_r2.selectedFiles.length <= 5 ? "file-p-" + ctx_r2.selectedFiles.length : "file-p-5", "");
    \u0275\u0275property("cdkDragData", file_r11)("ngClass", \u0275\u0275pureFunction1(13, _c4, ctx_r2.isSelected(file_r11)));
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", ctx_r2.isSelected(file_r11) && ctx_r2.isChooseMultiple);
    \u0275\u0275advance();
    \u0275\u0275property("src", file_r11.link, \u0275\u0275sanitizeUrl);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", file_r11.isFavorite);
    \u0275\u0275advance(3);
    \u0275\u0275property("src", file_r11.isFavorite ? "./assets/icons/favorite-white.svg" : "./assets/icons/favorite-outline-white.svg");
    \u0275\u0275advance(5);
    \u0275\u0275property("ngForOf", ctx_r2.selectedFiles);
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate("matTooltip", file_r11.filename);
    \u0275\u0275property("value", file_r11.filename);
    \u0275\u0275twoWayProperty("ngModel", file_r11.filename);
  }
}
function FilesComponent_Conditional_35_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 61, 2);
    \u0275\u0275listener("cdkDropListExited", function FilesComponent_Conditional_35_Template_div_cdkDropListExited_0_listener($event) {
      \u0275\u0275restoreView(_r9);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onSourceListExited($event));
    });
    \u0275\u0275template(2, FilesComponent_Conditional_35_div_2_Template, 15, 15, "div", 62);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    const fileFoldersList_r14 = \u0275\u0275reference(16);
    \u0275\u0275property("cdkDropListData", ctx_r2.searchFile.files)("cdkDropListConnectedTo", \u0275\u0275pureFunction1(4, _c15, fileFoldersList_r14))("cdkDropListEnterPredicate", ctx_r2.noReturnPredicate);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", ctx_r2.searchFile.files);
  }
}
function FilesComponent_Conditional_36_Template(rf, ctx) {
  if (rf & 1) {
    const _r15 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div")(1, "app-table-footer", 81);
    \u0275\u0275listener("reloadDataAndPageEvent", function FilesComponent_Conditional_36_Template_app_table_footer_reloadDataAndPageEvent_1_listener($event) {
      \u0275\u0275restoreView(_r15);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.reloadFilePage($event));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("pageIdx", ctx_r2.pageIdx)("pageSize", ctx_r2.pageSize)("totalItem", ctx_r2.totalItem)("isLoading", ctx_r2.isLoadingFile)("totalPage", ctx_r2.totalPage);
  }
}
function FilesComponent_div_37_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 82)(1, "button", 83);
    \u0275\u0275listener("click", function FilesComponent_div_37_Template_button_click_1_listener() {
      \u0275\u0275restoreView(_r16);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.chooseFile());
    });
    \u0275\u0275text(2, " Ch\u1ECDn ");
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("disabled", ctx_r2.selectedFiles.length <= 0);
  }
}
var FilesComponent = class _FilesComponent {
  constructor(fileService, dialog, utilsModal, utils) {
    this.fileService = fileService;
    this.dialog = dialog;
    this.utilsModal = utilsModal;
    this.utils = utils;
    this.isDialog = false;
    this.isChooseMultiple = true;
    this.chooseFileEvent = new EventEmitter();
    this.fileFolders = [
      {
        _id: "all-media",
        name: "T\u1EA5t c\u1EA3 \u1EA3nh",
        icon: "multi-folder.svg",
        selected: true
      },
      {
        _id: "favorite",
        name: "Y\xEAu th\xEDch",
        icon: "favorite.svg",
        selected: false
      }
    ];
    this.originalFileFolders = [];
    this.searchFile = new SearchFile();
    this.selectAll = false;
    this.selectedFiles = [];
    this.pageIdx = 1;
    this.pageSize = 30;
    this.totalPage = 0;
    this.totalItem = 0;
    this.keyword = "";
    this.sortBy = "";
    this.filter = "";
    this.isLoadingFile = false;
  }
  ngOnInit() {
    this.loadData();
  }
  loadData() {
    this.isLoadingFile = true;
    this.loadFileFolders();
    this.loadFiles();
  }
  loadFileFolders() {
    this.fileService.getFileFolder().subscribe((res) => {
      if (res) {
        this.fileFolders.push(...res);
        this.originalFileFolders = [...this.fileFolders];
      }
    });
  }
  loadFiles() {
    const fileFolderId = this.getActiveFolderId();
    this.filter = this.getFilter();
    this.fileService.searchFile(this.pageIdx, this.pageSize, this.keyword, this.sortBy, this.filter, fileFolderId).subscribe({
      next: (res) => {
        if (res) {
          this.searchFile = res;
          this.totalItem = this.searchFile.totalItem;
          this.totalPage = this.searchFile.totalPage;
        }
        this.isLoadingFile = false;
      },
      error: (error2) => {
        this.utils.handleRequestError(error2);
        this.isLoadingFile = false;
      }
    });
  }
  resetFileData() {
    this.searchFile = new SearchFile();
    this.selectedFiles = [];
    this.pageIdx = 1;
    this.pageSize = 30;
    this.totalPage = 0;
    this.totalItem = 0;
    this.keyword = "";
    this.sortBy = "";
    this.isLoadingFile = false;
    this.loadFiles();
  }
  toggleFile(file) {
    if (!this.isChooseMultiple && this.selectedFiles.length > 0 && !this.isSelected(file)) {
      this.selectedFiles = [];
      this.selectedFiles.push(file);
      return;
    }
    const index = this.selectedFiles.findIndex((f) => f._id === file._id);
    if (index >= 0) {
      this.selectedFiles.splice(index, 1);
    } else {
      this.selectedFiles.push(file);
    }
  }
  isSelected(file) {
    return this.selectedFiles.some((f) => f._id === file._id);
  }
  getIndexSelectedFile(file) {
    const index = this.selectedFiles.findIndex((f) => f._id === file._id);
    return index !== -1 ? (index + 1).toString() : "";
  }
  checkSelectAll() {
    this.selectAll = !this.searchFile.files.some((file) => !file.selected);
  }
  unSelectAllfile() {
    this.selectedFiles = [];
  }
  deleteFileSelected() {
    this.utilsModal.openModalConfirm("X\xF3a file", `Are you sure you want to delete this file? All of your data will be permanently removed. This action cannot be undone.`, "dangerous").subscribe((result) => {
      if (result) {
        const ids = this.selectedFiles.map((file) => file._id);
        this.fileService.deleteFiles(ids).subscribe({
          next: (res) => {
            if (res) {
              this.loadFiles();
              toast.success("X\xF3a file th\xE0nh c\xF4ng");
              this.selectedFiles = [];
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  setFavoriteFile($event, file) {
    $event.stopPropagation();
    file.isFavorite = !file.isFavorite;
    this.updateFile(file);
  }
  deleteFile($event, file) {
    $event.stopPropagation();
    const dialogRef = this.utilsModal.openModalConfirm("X\xF3a file", `Are you sure you want to delete this file "${file.filename}? All of your data will be permanently removed. This action cannot be undone.`, "dangerous");
    dialogRef.subscribe((result) => {
      if (result) {
        this.fileService.deleteFile(file._id).subscribe({
          next: (res) => {
            if (res) {
              this.loadFiles();
              toast.success("X\xF3a file th\xE0nh c\xF4ng");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  zoomFile($event, file) {
    $event.stopPropagation();
    const dialogRef = this.dialog.open(ViewImageDialogComponent, {
      height: "max-content",
      width: "max-content",
      maxWidth: "max-content",
      panelClass: "custom-dialog-view-image",
      backdropClass: "custom-back-drop-view-image",
      data: {
        file
      }
    });
  }
  uploadFile(files2Upload) {
    const folderId = this.getActiveFolderId();
    this.fileService.uploadFiles(files2Upload, folderId).subscribe({
      next: (res) => {
        if (res) {
          this.loadFiles();
          toast.success("File added successfully");
        }
      },
      error: (error2) => this.utils.handleRequestError(error2)
    });
  }
  updateFile(item) {
    this.fileService.updateFile(item).subscribe((res) => {
      if (!res) {
        toast.error("C\u1EADp nh\u1EADp th\u01B0 m\u1EE5c kh\xF4ng th\xE0nh c\xF4ng");
        return;
      }
      toast.success("C\u1EADp nh\u1EADp th\u01B0 m\u1EE5c th\xE0nh c\xF4ng");
    });
  }
  updateFiles2Folder(files, fileFolderId) {
    this.fileService.updateFiles2Folder(files, fileFolderId).subscribe((res) => {
      if (!res) {
        toast.error("C\u1EADp nh\u1EADp th\u01B0 m\u1EE5c kh\xF4ng th\xE0nh c\xF4ng");
        return;
      }
      const isNotFolder = this.getActiveFolderId() === "";
      if (!isNotFolder) {
        this.loadFiles();
      }
      toast.success("C\u1EADp nh\u1EADp th\u01B0 m\u1EE5c th\xE0nh c\xF4ng");
    });
  }
  setEditFile(item) {
    item.oldValue = item.filename;
  }
  onEnterFile($event) {
    const inputElement = $event.target;
    inputElement.blur();
  }
  onEscFile(item, $event) {
    item.filename = item.oldValue;
    const inputElement = $event.target;
    inputElement.blur();
  }
  handleUpdateFile(item, $event) {
    const trimmedName = item.filename.trim();
    if (trimmedName != "" && item.filename !== item.oldValue) {
      this.updateFile(item);
    } else {
      item.filename = item.oldValue;
    }
  }
  reloadFilePage(data) {
    this.pageIdx = data.pageIdx;
    this.pageSize = data.pageSize;
    this.loadFiles();
  }
  searchFileData($event) {
    this.pageIdx = 1;
    this.keyword = $event.target.value;
    ;
    this.loadFiles();
  }
  sortFilePage(sortBy) {
    this.sortBy = sortBy;
    this.loadFiles();
  }
  getActiveFolderId() {
    const id = this.fileFolders.find((item) => item.selected && this.utils.isValidObjectId(item._id))?._id ?? "";
    return id;
  }
  getFilter() {
    return this.fileFolders.find((item) => item.selected && !this.utils.isValidObjectId(item._id))?._id ?? "";
  }
  selectFileFolder(item) {
    if (item.selected) {
      return;
    }
    this.fileFolders = this.fileFolders.map((folder) => __spreadProps(__spreadValues({}, folder), {
      selected: folder._id === item._id
    }));
    this.selectedFiles = [];
    this.loadFiles();
  }
  searchFolder($event) {
    const keyword = $event.target.value.toLowerCase();
    this.fileFolders = this.originalFileFolders.filter((folder) => folder.name.toLowerCase().includes(keyword));
  }
  addFileFolderInput() {
    const isCreatingFileFolder = this.fileFolders.find((item) => item._id === "create-new");
    if (isCreatingFileFolder) {
      return;
    }
    const fileFolderInputCreate = {
      _id: "create-new",
      name: ""
    };
    this.fileFolders.push(fileFolderInputCreate);
    this.setIsEditFileFolder(fileFolderInputCreate);
    this.setAutoFocusFileInput();
  }
  setAutoFocusFileInput() {
    setTimeout(() => {
      this.inputFileFolder.nativeElement.focus();
    }, 50);
  }
  setIsEditFileFolder(item) {
    this.fileFolders = this.fileFolders.map((file) => __spreadProps(__spreadValues({}, file), {
      isEditing: file === item,
      oldValue: item.name
    }));
    this.setAutoFocusFileInput();
  }
  cancelEditFileFolder(item) {
    if (item._id === "create-new") {
      import_lodash.default.remove(this.fileFolders, { _id: item._id });
      return;
    }
    item.isEditing = false;
    item.name = item.oldValue ?? item.name;
  }
  handleActoinFolderInput(item) {
    const trimmedName = item.name.trim();
    item._id === "create-new" ? this.handleCreateNewFileFolder(item, trimmedName) : this.handleUpdateFileFolder(item, trimmedName);
  }
  handleCreateNewFileFolder(item, trimmedName) {
    if (trimmedName === "") {
      this.cancelEditFileFolder(item);
    } else {
      this.createFileFolder(item);
    }
  }
  handleUpdateFileFolder(item, trimmedName) {
    if (trimmedName === "" || item.name === item.oldValue) {
      this.cancelEditFileFolder(item);
    } else {
      item.isEditing = false;
      this.updateFileFolder(item);
    }
  }
  createFileFolder(item) {
    const fileFolder2Create = {
      name: item.name
    };
    this.fileService.createFileFolder(fileFolder2Create).subscribe((res) => {
      if (!res) {
        toast.error("T\u1EA1o th\u01B0 m\u1EE5c kh\xF4ng th\xE0nh c\xF4ng");
        import_lodash.default.remove(this.fileFolders, { _id: item._id });
        return;
      }
      item._id = res._id;
      toast.success("T\u1EA1o th\u01B0 m\u1EE5c th\xE0nh c\xF4ng");
      item.isEditing = false;
      this.originalFileFolders = this.fileFolders;
    });
  }
  updateFileFolder(item) {
    this.fileService.updateFileFolder(item).subscribe((res) => {
      if (!res) {
        toast.error("C\u1EADp nh\u1EADp th\u01B0 m\u1EE5c kh\xF4ng th\xE0nh c\xF4ng");
        return;
      }
      this.originalFileFolders = this.fileFolders;
      toast.success("C\u1EADp nh\u1EADp th\u01B0 m\u1EE5c th\xE0nh c\xF4ng");
    });
  }
  deleteFileFolder(item) {
    this.utilsModal.openModalConfirm("X\xF3a th\u01B0 m\u1EE5c", `B\u1EA1n c\xF3 ch\u1EAFc ch\u1EAFn mu\u1ED1n x\xF3a th\u01B0 m\u1EE5c '${item.name}' n\xE0y kh\xF4ng? T\u1EA5t c\u1EA3 d\u1EEF li\u1EC7u c\u1EE7a b\u1EA1n s\u1EBD b\u1ECB x\xF3a v\u0129nh vi\u1EC5n. Kh\xF4ng th\u1EC3 ho\xE0n t\xE1c h\xE0nh \u0111\u1ED9ng n\xE0y`, "dangerous").subscribe((res) => {
      if (res) {
        this.fileService.deleteFileFolder(item._id).subscribe((res2) => {
          if (!res2) {
            toast.success("X\xF3a th\u01B0 m\u1EF1c kh\xF4ng th\xE0nh c\xF4ng");
            return;
          }
          import_lodash.default.remove(this.fileFolders, { _id: item._id });
          this.originalFileFolders = this.fileFolders;
          toast.success("X\xF3a th\u01B0 m\u1EF1c th\xE0nh c\xF4ng");
        }, (error2) => {
          console.log("\u{1F680} ~ FileComponent ~ ).subscribe ~ error:", error2);
        });
      }
    });
  }
  onFileChange($event) {
    const files = $event.target.files;
    this.uploadFile(files);
  }
  drop(event2) {
    console.log("\u{1F680} ~ FilesComponent ~ drop ~ drop:");
    (0, import_lodash.remove)(this.searchFile.files, { temp: true });
    const droppedElement = event2.event.target;
    const parentDrop = this.getParentDrop(droppedElement);
    if (!parentDrop) {
      return;
    }
    const fileFolderId = parentDrop.id;
    const fileDrop = event2.item.data;
    if (!this.utils.isValidObjectId(fileFolderId) || fileDrop.folderId === fileFolderId) {
      return;
    }
    const listFile2MoveFolder = [];
    listFile2MoveFolder.push(fileDrop);
    const fileSelected = this.selectedFiles.filter((file) => file !== fileDrop);
    listFile2MoveFolder.push(...fileSelected);
    this.updateFiles2Folder(listFile2MoveFolder, fileFolderId);
  }
  noReturnPredicate() {
    return false;
  }
  onDragStarted(file) {
    console.log("\u{1F680} ~ FilesComponent ~ onDragStarted ~ onDragStarted:");
    const itemIdx = this.searchFile.files.findIndex((f) => f._id == file._id);
    this.searchFile.files.splice(itemIdx + 1, 0, __spreadProps(__spreadValues({}, file), { temp: true }));
  }
  onDragEnded(file) {
    console.log("\u{1F680} ~ FilesComponent ~ onDragEnded ~ onDragEnded:");
    import_lodash.default.remove(this.searchFile.files, { temp: true });
  }
  onSourceListExited(event2) {
    console.log("\u{1F680} ~ FilesComponent ~ onSourceListExited ~ onSourceListExited:");
    const itemIdx = this.searchFile.files.findIndex((file) => file._id == event2.item.data._id);
    const fileWithTemp = this.searchFile.files.find((file) => file.temp === true);
    if (fileWithTemp) {
      return;
    }
    this.searchFile.files.splice(itemIdx + 1, 0, __spreadProps(__spreadValues({}, event2.item.data), { temp: true }));
  }
  onSourceListEntered(event2) {
    import_lodash.default.remove(this.searchFile.files, { temp: true });
  }
  getParentDrop(element) {
    while (element && element.nodeName !== "LI") {
      element = element.parentElement;
    }
    return element && element.nodeName === "LI" ? element : null;
  }
  onDbClickFile($event, file) {
    $event.stopPropagation();
    if (!this.isDialog) {
      return;
    }
    this.selectedFiles = [];
    this.selectedFiles.push(file);
    this.chooseFile();
  }
  chooseFile() {
    this.chooseFileEvent.emit(this.selectedFiles);
  }
  static {
    this.\u0275fac = function FilesComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _FilesComponent)(\u0275\u0275directiveInject(FilesService), \u0275\u0275directiveInject(MatDialog), \u0275\u0275directiveInject(UtilsModal), \u0275\u0275directiveInject(Utils));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _FilesComponent, selectors: [["app-files-center"]], viewQuery: function FilesComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(_c09, 5);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.inputFileFolder = _t.first);
      }
    }, inputs: { isDialog: "isDialog", isChooseMultiple: "isChooseMultiple" }, outputs: { chooseFileEvent: "chooseFileEvent" }, standalone: false, decls: 38, vars: 10, consts: [["fileFoldersList", "cdkDropList"], ["inputFileFolder", ""], ["fileList", "cdkDropList"], [1, "border-muted/20", "bg-background", "flex", "min-w-full", "flex-col", "rounded-xl", "px-4", "py-4"], [1, "flex", "min-h-[44px]", "pb-4"], [1, "flex", "w-3/12"], [1, "text-base", "font-medium"], ["class", "flex w-9/12 items-center justify-start pl-4", 4, "ngIf"], [1, "flex", "h-full"], [1, "flex", "w-3/12", "flex-col", "border-r-[1px]", "border-gray-300", "pb-5", "pr-4"], [1, "flex"], [1, "text-muted-foreground", "relative", "w-full"], [1, "absolute", "left-2.5", "top-2.5"], ["src", "./assets/icons/heroicons/outline/magnifying-glass.svg", 3, "svgClass"], ["placeholder", "T\xECm ki\u1EBFm th\u01B0 m\u1EE5c", "type", "text", 1, "text-muted-foreground", "w-full", "py-2.5", "pl-8", "pr-2", "text-sm", 3, "keyup"], ["mat-raised-button", "", 1, "ml-2", "!h-[36px]", "!rounded-sm", "!bg-blue-100", 3, "click"], ["svgClass", "w-6 h-6", "src", "./assets/icons/add-folder.svg"], ["cdkDropList", "", "cdkDropListSortingDisabled", "", 1, "file-folders", "flex", "flex-col", "space-y-1", "pl-2", "pt-5", 3, "cdkDropListDropped", "cdkDropListData"], ["cdkDrag", "", "class", "disabled min-h-[34px] rounded-sm", 3, "cdkDragData", "cdkDragDisabled", "id", "ngClass", 4, "ngFor", "ngForOf"], [1, "flex", "w-9/12", "flex-col", "justify-between", "pb-5", "pl-4"], [1, "flex", "flex-col"], [1, "flex", "flex-row", "gap-4"], [1, "flex", "w-8/12"], [1, "flex", "w-4/12", "justify-end"], [1, "cursor-pointer", "flex-wrap", "items-center", "justify-center"], ["aria-label", "T\u1EA3i \u1EA3nh l\xEAn", 1, "bg-muted", "text-foreground", "w-22", "rounded-md", "py-2.5", "text-xs", "font-medium", 3, "click"], [1, "relative", "flex", "cursor-pointer", "flex-wrap", "items-center", "justify-center", "px-2"], ["type", "file", "multiple", "", 1, "w-22", "z-50", "block", "h-full", "cursor-pointer", "opacity-0", 3, "change"], ["aria-label", "T\u1EA3i \u1EA3nh l\xEAn", 1, "bg-primary", "text-primary-foreground", "w-22", "absolute", "top-0", "right-0", "rounded-md", "py-2.5", "text-xs", "font-medium"], [1, "flex", "flex-col", "items-center", "justify-between"], ["cdkDropList", "", "cdkDropListSortingDisabled", "", 1, "grid", "grid-cols-12", "gap-4", "py-6", 3, "cdkDropListData", "cdkDropListConnectedTo", "cdkDropListEnterPredicate"], ["class", "flex justify-end", 4, "ngIf"], [1, "flex", "w-9/12", "items-center", "justify-start", "pl-4"], ["src", "./assets/icons/trash-red-outline.svg", 3, "click", "svgClass"], [1, "ml-4", "flex", "items-center", "rounded-xl", "bg-gray-200", "px-3", "py-1"], [1, "text-muted-foreground", "text-sm"], ["src", "./assets/icons/close.svg", 3, "click", "svgClass"], ["cdkDrag", "", 1, "disabled", "min-h-[34px]", "rounded-sm", 3, "cdkDragData", "cdkDragDisabled", "id", "ngClass"], [1, "text-muted-foreground", "flex", "h-8", "items-center", "justify-between", "px-2"], ["class", "flex w-full cursor-pointer items-center", 3, "click", 4, "ngIf"], [4, "ngIf"], [1, "flex", "w-full", "cursor-pointer", "items-center", 3, "click"], ["svgClass", "w-6 h-6", 3, "src", 4, "ngIf"], ["class", "bg-icon", 4, "ngIf"], [1, "w-full", "cursor-pointer", "truncate", "pl-2", "text-xs", "font-medium", "tracking-wide", "focus:outline-hidden", 3, "ngClass"], ["svgClass", "w-6 h-6", 3, "src"], [1, "bg-icon"], ["type", "text", "placeholder", "Nh\u1EADp t\xEAn th\u01B0 m\u1EE5c", 1, "w-full", "rounded-sm", "border", "focus:outline-none", "focus:ring-2", "focus:ring-blue-500", 3, "ngModelChange", "keydown.enter", "blur", "keydown.esc", "ngModel"], ["svgClass", "w-4 h-4 cursor-pointer", "src", "./assets/icons/more-horizontal.svg"], ["triggerModalContent", ""], ["mat-button", "", 1, "w-full", "!justify-start", "!rounded-none", 3, "click"], [1, "flex", "items-center"], ["svgClass", "w-6 h-6", "src", "./assets/icons/edit.svg"], [1, "pl-2", "text-sm"], ["svgClass", "w-6 h-6", "src", "./assets/icons/trash.svg"], ["src", "assets/images/upload-media.png", 1, "h-64", "w-64", "object-contain"], [1, "mb-2", "text-lg", "font-medium"], [1, "mb-5", "text-sm", "text-gray-500"], [1, "relative", "flex", "h-12", "cursor-pointer", "flex-wrap", "items-center", "justify-center", "px-2"], ["type", "file", 1, "z-50", "block", "h-full", "w-full", "cursor-pointer", "opacity-0", 3, "change"], ["aria-label", "T\u1EA3i \u1EA3nh l\xEAn", 1, "bg-primary", "text-primary-foreground", "w-22", "absolute", "cursor-pointer", "rounded-md", "py-2.5", "text-xs", "font-medium"], ["cdkDropList", "", "cdkDropListSortingDisabled", "", 1, "grid", "grid-cols-12", "gap-4", "py-6", 3, "cdkDropListExited", "cdkDropListData", "cdkDropListConnectedTo", "cdkDropListEnterPredicate"], ["cdkDrag", "", 3, "class", "cdkDragData", "ngClass", "cdkDragStarted", "cdkDragEnded", 4, "ngFor", "ngForOf"], ["cdkDrag", "", 3, "cdkDragStarted", "cdkDragEnded", "cdkDragData", "ngClass"], [1, "box-img", "rounded-sm", "border", "border-gray-300", 3, "click", "dblclick"], ["class", "absolute top-[5px] left-[5px] z-10 flex h-[24px] w-[24px] items-center justify-center rounded-xl border border-gray-300 bg-blue-500", 4, "ngIf"], [1, "cursor-pointer", "object-contain", "p-2", 3, "src"], ["class", "file-favorite absolute bottom-0 z-10 w-full bg-black pb-2 pt-4", 4, "ngIf"], ["triggerMaskContent", "", 1, "trigger-mask-content", "flex", "justify-between", "px-2", "pb-2", "pt-4", "text-white"], [3, "click"], ["svgClass", "w-5 h-5", 3, "src"], ["svgClass", "w-5 h-5", "src", "./assets/icons/zoom-outline-white.svg"], ["svgClass", "w-5 h-5", "src", "./assets/icons/trash-outline-white.svg"], [4, "ngFor", "ngForOf"], [1, "file-input", "text-foreground", "mt-1", "w-full", "truncate", "rounded-sm", "border-none", "bg-transparent", "p-1", "text-center", "text-sm", "focus:outline-none", "focus:ring-2", "focus:ring-blue-500", 3, "ngModelChange", "click", "focus", "blur", "keydown.enter", "keydown.esc", "value", "matTooltip", "ngModel"], [1, "absolute", "top-[5px]", "left-[5px]", "z-10", "flex", "h-[24px]", "w-[24px]", "items-center", "justify-center", "rounded-xl", "border", "border-gray-300", "bg-blue-500"], [1, "text-sm", "text-white"], [1, "file-favorite", "absolute", "bottom-0", "z-10", "w-full", "bg-black", "pb-2", "pt-4"], [1, "flex", "justify-between", "px-2", "text-white"], ["svgClass", "w-5 h-5", "src", "./assets/icons/favorite-white.svg"], [1, "selected-file", "rounded-sm"], [3, "reloadDataAndPageEvent", "pageIdx", "pageSize", "totalItem", "isLoading", "totalPage"], [1, "flex", "justify-end"], ["aria-label", "T\u1EA3i \u1EA3nh l\xEAn", 1, "bg-primary", "text-primary-foreground", "w-22", "rounded-md", "py-2.5", "text-xs", "font-medium", "disabled:bg-gray-200", "disabled:text-gray-500", 3, "click", "disabled"]], template: function FilesComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 3)(1, "div", 4)(2, "div", 5)(3, "label", 6);
        \u0275\u0275text(4, "Trung t\xE2m ph\u01B0\u01A1ng ti\u1EC7n");
        \u0275\u0275elementEnd()();
        \u0275\u0275template(5, FilesComponent_div_5_Template, 6, 3, "div", 7);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(6, "div", 8)(7, "div", 9)(8, "div", 10)(9, "label", 11)(10, "div", 12);
        \u0275\u0275element(11, "svg-icon", 13);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(12, "input", 14);
        \u0275\u0275listener("keyup", function FilesComponent_Template_input_keyup_12_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.searchFolder($event));
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(13, "button", 15);
        \u0275\u0275listener("click", function FilesComponent_Template_button_click_13_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.addFileFolderInput());
        });
        \u0275\u0275element(14, "svg-icon", 16);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(15, "ul", 17, 0);
        \u0275\u0275listener("cdkDropListDropped", function FilesComponent_Template_ul_cdkDropListDropped_15_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.drop($event));
        });
        \u0275\u0275template(17, FilesComponent_li_17_Template, 5, 10, "li", 18);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(18, "div", 19)(19, "div", 20)(20, "div", 21)(21, "div", 22)(22, "label", 11)(23, "div", 12);
        \u0275\u0275element(24, "svg-icon", 13);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(25, "input", 14);
        \u0275\u0275listener("keyup", function FilesComponent_Template_input_keyup_25_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.searchFileData($event));
        });
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(26, "div", 23)(27, "div", 24)(28, "button", 25);
        \u0275\u0275listener("click", function FilesComponent_Template_button_click_28_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.resetFileData());
        });
        \u0275\u0275text(29, " \u0110\u1EB7t l\u1EA1i ");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(30, "div", 26)(31, "input", 27);
        \u0275\u0275listener("change", function FilesComponent_Template_input_change_31_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onFileChange($event));
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(32, "button", 28);
        \u0275\u0275text(33, " T\u1EA3i \u1EA3nh l\xEAn ");
        \u0275\u0275elementEnd()()()();
        \u0275\u0275template(34, FilesComponent_Conditional_34_Template, 10, 0, "div", 29)(35, FilesComponent_Conditional_35_Template, 3, 6, "div", 30);
        \u0275\u0275elementEnd();
        \u0275\u0275template(36, FilesComponent_Conditional_36_Template, 2, 5, "div");
        \u0275\u0275elementEnd()();
        \u0275\u0275template(37, FilesComponent_div_37_Template, 3, 1, "div", 31);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275advance(5);
        \u0275\u0275property("ngIf", ctx.selectedFiles.length > 0 && ctx.isChooseMultiple);
        \u0275\u0275advance(6);
        \u0275\u0275property("svgClass", "h-4 w-4");
        \u0275\u0275advance(4);
        \u0275\u0275property("cdkDropListData", \u0275\u0275pureFunction1(8, _c15, ctx.fileFolders));
        \u0275\u0275advance(2);
        \u0275\u0275property("ngForOf", ctx.fileFolders);
        \u0275\u0275advance(7);
        \u0275\u0275property("svgClass", "h-4 w-4");
        \u0275\u0275advance(10);
        \u0275\u0275conditional(!ctx.searchFile || ctx.searchFile.files.length <= 0 ? 34 : 35);
        \u0275\u0275advance(2);
        \u0275\u0275conditional(ctx.searchFile && ctx.searchFile.files.length > 0 ? 36 : -1);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isDialog);
      }
    }, dependencies: [NgClass, NgForOf, NgIf, DefaultValueAccessor, NgControlStatus, NgModel, SvgIconComponent, CdkDropList, CdkDrag, MatButton, MatTooltip, TableFooterComponent, TriggerModalComponent, TriggerMaskComponent], styles: ['\n\ntd[_ngcontent-%COMP%] {\n  padding: 0.75rem 1rem;\n  font-size: 0.85rem;\n}\nth[_ngcontent-%COMP%] {\n  font-weight: 500;\n  padding: 0.625rem 1rem;\n  font-size: 0.8125rem;\n  line-height: 1.125rem;\n  vertical-align: middle;\n  @apply border-b border-r;\n}\n.trigger-mask-content[_ngcontent-%COMP%] {\n  background:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.7),\n      rgba(0, 0, 0, 0));\n}\n.bg-icon[_ngcontent-%COMP%] {\n  background-image: url("./media/folder.svg");\n  background-size: 25px;\n  width: 27px;\n  height: 27px;\n  background-repeat: no-repeat;\n}\n.box-img[_ngcontent-%COMP%]:hover   .file-favorite[_ngcontent-%COMP%] {\n  display: none;\n}\n.box-img[_ngcontent-%COMP%]   .file-favorite[_ngcontent-%COMP%] {\n  opacity: 1;\n  background:\n    linear-gradient(\n      to top,\n      rgba(0, 0, 0, 0.7),\n      rgba(0, 0, 0, 0));\n}\n.file.selected[_ngcontent-%COMP%]   .box-img[_ngcontent-%COMP%] {\n  border-color: blue;\n}\n.selected-file[_ngcontent-%COMP%] {\n  display: none;\n}\n.cdk-drop-list-dragging[_ngcontent-%COMP%]   .selected[_ngcontent-%COMP%]   .box-img[_ngcontent-%COMP%], \n.cdk-drop-list-dragging[_ngcontent-%COMP%]   .selected[_ngcontent-%COMP%]   .file-input[_ngcontent-%COMP%] {\n  display: block !important;\n}\n.cdk-drag-preview.file-p-2[_ngcontent-%COMP%] {\n  z-index: -2 !important;\n  padding-right: 10px;\n  padding-bottom: 10px;\n}\n.cdk-drag-preview.file-p-3[_ngcontent-%COMP%] {\n  z-index: -3 !important;\n  padding-right: 15px;\n  padding-bottom: 15px;\n}\n.cdk-drag-preview.file-p-4[_ngcontent-%COMP%] {\n  z-index: -4 !important;\n  padding-right: 20px;\n  padding-bottom: 20px;\n}\n.cdk-drag-preview.file-p-5[_ngcontent-%COMP%] {\n  z-index: -5 !important;\n  padding-right: 25px;\n  padding-bottom: 25px;\n}\n.cdk-drag-preview.file-p-6[_ngcontent-%COMP%] {\n  z-index: -6 !important;\n  padding-right: 30px;\n  padding-bottom: 30px;\n}\n.cdk-drag-preview[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  border-radius: 4px;\n  overflow: hidden;\n  height: auto !important;\n  width: max-content !important;\n  max-width: 456px;\n  flex-wrap: wrap;\n  display: flex !important;\n  padding: 5px;\n}\n.cdk-drag-preview[_ngcontent-%COMP%]   .file-input[_ngcontent-%COMP%], \n.cdk-drag-preview[_ngcontent-%COMP%]   .trigger-mask-content[_ngcontent-%COMP%] {\n  display: none !important;\n}\n.cdk-drag-preview[_ngcontent-%COMP%]   .box-img[_ngcontent-%COMP%], \n.cdk-drag-preview[_ngcontent-%COMP%]   .selected-file[_ngcontent-%COMP%] {\n  display: flex !important;\n  background-color: white;\n  border: none !important;\n  box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\n}\n.cdk-drag-preview[_ngcontent-%COMP%]   .box-img[_ngcontent-%COMP%]   img[_ngcontent-%COMP%], \n.cdk-drag-preview[_ngcontent-%COMP%]   .selected-file[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  width: 100px !important;\n}\n.cdk-drag-preview[_ngcontent-%COMP%]   .box-img[_ngcontent-%COMP%] {\n  z-index: 999;\n}\n.cdk-drag-preview[_ngcontent-%COMP%]   .selected-file[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: -20;\n}\n.cdk-drag-preview[_ngcontent-%COMP%]   .selected-file[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  width: 100px !important;\n}\n.cdk-drag-preview[_ngcontent-%COMP%]   .selected-file[_ngcontent-%COMP%]:nth-child(2) {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  z-index: -2 !important;\n}\n.cdk-drag-preview[_ngcontent-%COMP%]   .selected-file[_ngcontent-%COMP%]:nth-child(3) {\n  position: absolute;\n  top: 15px;\n  left: 15px;\n  z-index: -3 !important;\n}\n.cdk-drag-preview[_ngcontent-%COMP%]   .selected-file[_ngcontent-%COMP%]:nth-child(4) {\n  position: absolute;\n  top: 20px;\n  left: 20px;\n  z-index: -4 !important;\n}\n.cdk-drag-preview[_ngcontent-%COMP%]   .selected-file[_ngcontent-%COMP%]:nth-child(5) {\n  position: absolute;\n  top: 25px;\n  left: 25px;\n  z-index: -5 !important;\n}\n.cdk-drag-preview[_ngcontent-%COMP%]   .selected-file[_ngcontent-%COMP%]:nth-child(6) {\n  position: absolute;\n  top: 30px;\n  left: 30px;\n  z-index: -6 !important;\n}\n.cdk-drop-list-dragging.file-folders[_ngcontent-%COMP%]   .cdk-drag[_ngcontent-%COMP%]:hover:not(.not-drop) {\n  background-color: #c3e0ff;\n  border: 1px solid #0054ad;\n  border-style: dashed;\n  transition: transform 0.2s ease-in-out, background-color 0.2s ease-in-out;\n}\n.cdk-drop-list-dragging.file-folders[_ngcontent-%COMP%]   .cdk-drag[_ngcontent-%COMP%]:hover:not(.not-drop)   .bg-icon[_ngcontent-%COMP%] {\n  background-image: url("./media/file-drop.svg");\n}\n.cdk-drop-list-dragging.file-folders[_ngcontent-%COMP%]   .not-drop[_ngcontent-%COMP%] {\n  background: transparent;\n}\n.cdk-drop-list-dragging.file-folders[_ngcontent-%COMP%]   .cdk-drag-placeholder[_ngcontent-%COMP%] {\n  display: none;\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  opacity: 0;\n  display: none;\n}\n.cdk-drag-animating[_ngcontent-%COMP%] {\n  display: none !important;\n}\n.file.dragging[_ngcontent-%COMP%] {\n  opacity: 0.5;\n}\n/*# sourceMappingURL=files-center.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(FilesComponent, { className: "FilesComponent", filePath: "src/app/modules/management/pages/files-center/files-center.component.ts", lineNumber: 18 });
})();

// src/app/modules/management/pages/files-center/components/files-center-dialog/files-center-dialog.component.ts
var FilesCenterDialogComponent = class _FilesCenterDialogComponent {
  constructor() {
    this.dialogRef = inject(MatDialogRef);
    this.data = inject(MAT_DIALOG_DATA);
  }
  ngOnInit() {
  }
  onButtonClick() {
  }
  downloadFile(link) {
  }
  chooseFiles(file) {
    console.log("\u{1F680} ~ FilesCenterDialogComponent ~ chooseFiles ~ File:", file);
    this.closeDialog(file);
  }
  closeDialog(file) {
    this.dialogRef.close(file);
  }
  static {
    this.\u0275fac = function FilesCenterDialogComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _FilesCenterDialogComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _FilesCenterDialogComponent, selectors: [["app-files-center-dialog"]], standalone: false, decls: 5, vars: 3, consts: [[1, "flex", "h-full", "!max-h-full", "w-full", "justify-center", "rounded-xl", "bg-white", "!p-4"], [1, "flex", "h-full", "w-full", 3, "chooseFileEvent", "isChooseMultiple", "isDialog"], [1, "absolute", "right-[15px]", "top-[15px]", "flex"], [1, "m-0", "rounded-lg", "p-2", "hover:bg-gray-700"], ["src", "./assets/icons/close.svg", 3, "click", "svgClass"]], template: function FilesCenterDialogComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "mat-dialog-content", 0)(1, "app-files-center", 1);
        \u0275\u0275listener("chooseFileEvent", function FilesCenterDialogComponent_Template_app_files_center_chooseFileEvent_1_listener($event) {
          return ctx.chooseFiles($event);
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(2, "div", 2)(3, "button", 3)(4, "svg-icon", 4);
        \u0275\u0275listener("click", function FilesCenterDialogComponent_Template_svg_icon_click_4_listener() {
          return ctx.closeDialog();
        });
        \u0275\u0275elementEnd()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance();
        \u0275\u0275property("isChooseMultiple", false)("isDialog", true);
        \u0275\u0275advance(3);
        \u0275\u0275property("svgClass", "h-6 w-6 cursor-pointer ");
      }
    }, dependencies: [SvgIconComponent, MatDialogContent, FilesComponent], encapsulation: 2 });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(FilesCenterDialogComponent, { className: "FilesCenterDialogComponent", filePath: "src/app/modules/management/pages/files-center/components/files-center-dialog/files-center-dialog.component.ts", lineNumber: 15 });
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-core-transition-patch.mjs
var NzTransitionPatchDirective = class _NzTransitionPatchDirective {
  setHiddenAttribute() {
    if (this.hidden) {
      if (typeof this.hidden === "string") {
        this.renderer.setAttribute(this.elementRef.nativeElement, "hidden", this.hidden);
      } else {
        this.renderer.setAttribute(this.elementRef.nativeElement, "hidden", "");
      }
    } else {
      this.renderer.removeAttribute(this.elementRef.nativeElement, "hidden");
    }
  }
  constructor(elementRef, renderer) {
    this.elementRef = elementRef;
    this.renderer = renderer;
    this.hidden = null;
    this.renderer.setAttribute(this.elementRef.nativeElement, "hidden", "");
  }
  ngOnChanges() {
    this.setHiddenAttribute();
  }
  ngAfterViewInit() {
    this.setHiddenAttribute();
  }
  static {
    this.\u0275fac = function NzTransitionPatchDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTransitionPatchDirective)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTransitionPatchDirective,
      selectors: [["", "nz-button", ""], ["nz-button-group"], ["", "nz-icon", ""], ["nz-icon"], ["", "nz-menu-item", ""], ["", "nz-submenu", ""], ["nz-select-top-control"], ["nz-select-placeholder"], ["nz-input-group"]],
      inputs: {
        hidden: "hidden"
      },
      features: [\u0275\u0275NgOnChangesFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTransitionPatchDirective, [{
    type: Directive,
    args: [{
      selector: "[nz-button], nz-button-group, [nz-icon], nz-icon, [nz-menu-item], [nz-submenu], nz-select-top-control, nz-select-placeholder, nz-input-group"
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: Renderer2
  }], {
    hidden: [{
      type: Input
    }]
  });
})();
var NzTransitionPatchModule = class _NzTransitionPatchModule {
  static {
    this.\u0275fac = function NzTransitionPatchModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTransitionPatchModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzTransitionPatchModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTransitionPatchModule, [{
    type: NgModule,
    args: [{
      imports: [NzTransitionPatchDirective],
      exports: [NzTransitionPatchDirective]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-core-polyfill.mjs
var availablePrefixes = ["moz", "ms", "webkit"];
function requestAnimationFramePolyfill() {
  let lastTime = 0;
  return function(callback) {
    const currTime = (/* @__PURE__ */ new Date()).getTime();
    const timeToCall = Math.max(0, 16 - (currTime - lastTime));
    const id = window.setTimeout(() => {
      callback(currTime + timeToCall);
    }, timeToCall);
    lastTime = currTime + timeToCall;
    return id;
  };
}
function getRequestAnimationFrame() {
  if (typeof window === "undefined") {
    return () => 0;
  }
  if (window.requestAnimationFrame) {
    return window.requestAnimationFrame.bind(window);
  }
  const prefix = availablePrefixes.filter((key) => `${key}RequestAnimationFrame` in window)[0];
  return prefix ? window[`${prefix}RequestAnimationFrame`] : requestAnimationFramePolyfill();
}
function cancelRequestAnimationFrame(id) {
  if (typeof window === "undefined") {
    return null;
  }
  if (window.cancelAnimationFrame) {
    return window.cancelAnimationFrame(id);
  }
  const prefix = availablePrefixes.filter((key) => `${key}CancelAnimationFrame` in window || `${key}CancelRequestAnimationFrame` in window)[0];
  return prefix ? (window[`${prefix}CancelAnimationFrame`] || window[`${prefix}CancelRequestAnimationFrame`]).call(this, id) : clearTimeout(id);
}
var reqAnimFrame = getRequestAnimationFrame();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-core-services.mjs
var NOOP = () => {
};
var NzResizeService = class _NzResizeService {
  constructor(ngZone, rendererFactory2) {
    this.ngZone = ngZone;
    this.rendererFactory2 = rendererFactory2;
    this.resizeSource$ = new Subject();
    this.listeners = 0;
    this.disposeHandle = NOOP;
    this.handler = () => {
      this.ngZone.run(() => {
        this.resizeSource$.next();
      });
    };
    this.renderer = this.rendererFactory2.createRenderer(null, null);
  }
  ngOnDestroy() {
    this.handler = NOOP;
  }
  subscribe() {
    this.registerListener();
    return this.resizeSource$.pipe(auditTime(16), finalize(() => this.unregisterListener()));
  }
  unsubscribe() {
    this.unregisterListener();
  }
  registerListener() {
    if (this.listeners === 0) {
      this.ngZone.runOutsideAngular(() => {
        this.disposeHandle = this.renderer.listen("window", "resize", this.handler);
      });
    }
    this.listeners += 1;
  }
  unregisterListener() {
    this.listeners -= 1;
    if (this.listeners === 0) {
      this.disposeHandle();
      this.disposeHandle = NOOP;
    }
  }
  static {
    this.\u0275fac = function NzResizeService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzResizeService)(\u0275\u0275inject(NgZone), \u0275\u0275inject(RendererFactory2));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _NzResizeService,
      factory: _NzResizeService.\u0275fac,
      providedIn: "root"
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzResizeService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: NgZone
  }, {
    type: RendererFactory2
  }], null);
})();
var testSingleRegistry = /* @__PURE__ */ new Map();
var NzSingletonService = class _NzSingletonService {
  constructor() {
    this._singletonRegistry = /* @__PURE__ */ new Map();
  }
  get singletonRegistry() {
    return environment.isTestMode ? testSingleRegistry : this._singletonRegistry;
  }
  registerSingletonWithKey(key, target) {
    const alreadyHave = this.singletonRegistry.has(key);
    const item = alreadyHave ? this.singletonRegistry.get(key) : this.withNewTarget(target);
    if (!alreadyHave) {
      this.singletonRegistry.set(key, item);
    }
  }
  unregisterSingletonWithKey(key) {
    if (this.singletonRegistry.has(key)) {
      this.singletonRegistry.delete(key);
    }
  }
  getSingletonWithKey(key) {
    return this.singletonRegistry.has(key) ? this.singletonRegistry.get(key).target : null;
  }
  withNewTarget(target) {
    return {
      target
    };
  }
  static {
    this.\u0275fac = function NzSingletonService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSingletonService)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _NzSingletonService,
      factory: _NzSingletonService.\u0275fac,
      providedIn: "root"
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSingletonService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
function getPagePosition(event2) {
  const e = getEventPosition(event2);
  return {
    x: e.pageX,
    y: e.pageY
  };
}
var NzDragService = class _NzDragService {
  constructor(rendererFactory2) {
    this.draggingThreshold = 5;
    this.currentDraggingSequence = null;
    this.currentStartingPoint = null;
    this.handleRegistry = /* @__PURE__ */ new Set();
    this.renderer = rendererFactory2.createRenderer(null, null);
  }
  requestDraggingSequence(event2) {
    if (!this.handleRegistry.size) {
      this.registerDraggingHandler(isTouchEvent(event2));
    }
    if (this.currentDraggingSequence) {
      this.currentDraggingSequence.complete();
    }
    this.currentStartingPoint = getPagePosition(event2);
    this.currentDraggingSequence = new Subject();
    return this.currentDraggingSequence.pipe(map((e) => ({
      x: e.pageX - this.currentStartingPoint.x,
      y: e.pageY - this.currentStartingPoint.y
    })), filter((e) => Math.abs(e.x) > this.draggingThreshold || Math.abs(e.y) > this.draggingThreshold), finalize(() => this.teardownDraggingSequence()));
  }
  registerDraggingHandler(isTouch) {
    if (isTouch) {
      this.handleRegistry.add({
        teardown: this.renderer.listen("document", "touchmove", (e) => {
          if (this.currentDraggingSequence) {
            this.currentDraggingSequence.next(e.touches[0] || e.changedTouches[0]);
          }
        })
      });
      this.handleRegistry.add({
        teardown: this.renderer.listen("document", "touchend", () => {
          if (this.currentDraggingSequence) {
            this.currentDraggingSequence.complete();
          }
        })
      });
    } else {
      this.handleRegistry.add({
        teardown: this.renderer.listen("document", "mousemove", (e) => {
          if (this.currentDraggingSequence) {
            this.currentDraggingSequence.next(e);
          }
        })
      });
      this.handleRegistry.add({
        teardown: this.renderer.listen("document", "mouseup", () => {
          if (this.currentDraggingSequence) {
            this.currentDraggingSequence.complete();
          }
        })
      });
    }
  }
  teardownDraggingSequence() {
    this.currentDraggingSequence = null;
  }
  static {
    this.\u0275fac = function NzDragService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzDragService)(\u0275\u0275inject(RendererFactory2));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _NzDragService,
      factory: _NzDragService.\u0275fac,
      providedIn: "root"
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzDragService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: RendererFactory2
  }], null);
})();
function easeInOutCubic(t, b, c, d) {
  const cc = c - b;
  let tt = t / (d / 2);
  if (tt < 1) {
    return cc / 2 * tt * tt * tt + b;
  } else {
    return cc / 2 * ((tt -= 2) * tt * tt + 2) + b;
  }
}
var NzScrollService = class _NzScrollService {
  constructor(ngZone) {
    this.ngZone = ngZone;
    this.doc = inject(DOCUMENT);
  }
  /** Set the position of the scroll bar of `el`. */
  setScrollTop(el, topValue = 0) {
    if (el === window) {
      this.doc.body.scrollTop = topValue;
      this.doc.documentElement.scrollTop = topValue;
    } else {
      el.scrollTop = topValue;
    }
  }
  /** Get position of `el` against window. */
  getOffset(el) {
    const ret = {
      top: 0,
      left: 0
    };
    if (!el || !el.getClientRects().length) {
      return ret;
    }
    const rect = el.getBoundingClientRect();
    if (rect.width || rect.height) {
      const doc = el.ownerDocument.documentElement;
      ret.top = rect.top - doc.clientTop;
      ret.left = rect.left - doc.clientLeft;
    } else {
      ret.top = rect.top;
      ret.left = rect.left;
    }
    return ret;
  }
  /** Get the position of the scoll bar of `el`. */
  // TODO: remove '| Window' as the fallback already happens here
  getScroll(target, top = true) {
    if (typeof window === "undefined") {
      return 0;
    }
    const method = top ? "scrollTop" : "scrollLeft";
    let result = 0;
    if (this.isWindow(target)) {
      result = target[top ? "pageYOffset" : "pageXOffset"];
    } else if (target instanceof Document) {
      result = target.documentElement[method];
    } else if (target) {
      result = target[method];
    }
    if (target && !this.isWindow(target) && typeof result !== "number") {
      result = (target.ownerDocument || target).documentElement[method];
    }
    return result;
  }
  isWindow(obj) {
    return obj !== null && obj !== void 0 && obj === obj.window;
  }
  /**
   * Scroll `el` to some position with animation.
   *
   * @param containerEl container, `window` by default
   * @param y Scroll to `top`, 0 by default
   */
  scrollTo(containerEl, y = 0, options = {}) {
    const target = containerEl ? containerEl : window;
    const scrollTop = this.getScroll(target);
    const startTime = Date.now();
    const {
      easing,
      callback,
      duration = 450
    } = options;
    const frameFunc = () => {
      const timestamp = Date.now();
      const time = timestamp - startTime;
      const nextScrollTop = (easing || easeInOutCubic)(time > duration ? duration : time, scrollTop, y, duration);
      if (this.isWindow(target)) {
        target.scrollTo(window.pageXOffset, nextScrollTop);
      } else if (target instanceof HTMLDocument || target.constructor.name === "HTMLDocument") {
        target.documentElement.scrollTop = nextScrollTop;
      } else {
        target.scrollTop = nextScrollTop;
      }
      if (time < duration) {
        reqAnimFrame(frameFunc);
      } else if (typeof callback === "function") {
        this.ngZone.run(callback);
      }
    };
    this.ngZone.runOutsideAngular(() => reqAnimFrame(frameFunc));
  }
  static {
    this.\u0275fac = function NzScrollService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzScrollService)(\u0275\u0275inject(NgZone));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _NzScrollService,
      factory: _NzScrollService.\u0275fac,
      providedIn: "root"
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzScrollService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: NgZone
  }], null);
})();
var NzBreakpointEnum;
(function(NzBreakpointEnum2) {
  NzBreakpointEnum2["xxl"] = "xxl";
  NzBreakpointEnum2["xl"] = "xl";
  NzBreakpointEnum2["lg"] = "lg";
  NzBreakpointEnum2["md"] = "md";
  NzBreakpointEnum2["sm"] = "sm";
  NzBreakpointEnum2["xs"] = "xs";
})(NzBreakpointEnum || (NzBreakpointEnum = {}));
var gridResponsiveMap = {
  xs: "(max-width: 575px)",
  sm: "(min-width: 576px)",
  md: "(min-width: 768px)",
  lg: "(min-width: 992px)",
  xl: "(min-width: 1200px)",
  xxl: "(min-width: 1600px)"
};
var NzBreakpointService = class _NzBreakpointService {
  constructor(resizeService, mediaMatcher) {
    this.resizeService = resizeService;
    this.mediaMatcher = mediaMatcher;
    this.destroy$ = new Subject();
    this.resizeService.subscribe().pipe(takeUntil(this.destroy$)).subscribe(() => {
    });
  }
  ngOnDestroy() {
    this.destroy$.next();
  }
  subscribe(breakpointMap, fullMap) {
    if (fullMap) {
      const get = () => this.matchMedia(breakpointMap, true);
      return this.resizeService.subscribe().pipe(map(get), startWith(get()), distinctUntilChanged((x, y) => x[0] === y[0]), map((x) => x[1]));
    } else {
      const get = () => this.matchMedia(breakpointMap);
      return this.resizeService.subscribe().pipe(map(get), startWith(get()), distinctUntilChanged());
    }
  }
  matchMedia(breakpointMap, fullMap) {
    let bp = NzBreakpointEnum.md;
    const breakpointBooleanMap = {};
    Object.keys(breakpointMap).map((breakpoint) => {
      const castBP = breakpoint;
      const matched = this.mediaMatcher.matchMedia(gridResponsiveMap[castBP]).matches;
      breakpointBooleanMap[breakpoint] = matched;
      if (matched) {
        bp = castBP;
      }
    });
    if (fullMap) {
      return [bp, breakpointBooleanMap];
    } else {
      return bp;
    }
  }
  static {
    this.\u0275fac = function NzBreakpointService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzBreakpointService)(\u0275\u0275inject(NzResizeService), \u0275\u0275inject(MediaMatcher));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _NzBreakpointService,
      factory: _NzBreakpointService.\u0275fac,
      providedIn: "root"
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzBreakpointService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: NzResizeService
  }, {
    type: MediaMatcher
  }], null);
})();
var NzDestroyService = class _NzDestroyService extends Subject {
  ngOnDestroy() {
    this.next();
    this.complete();
  }
  static {
    this.\u0275fac = /* @__PURE__ */ (() => {
      let \u0275NzDestroyService_BaseFactory;
      return function NzDestroyService_Factory(__ngFactoryType__) {
        return (\u0275NzDestroyService_BaseFactory || (\u0275NzDestroyService_BaseFactory = \u0275\u0275getInheritedFactory(_NzDestroyService)))(__ngFactoryType__ || _NzDestroyService);
      };
    })();
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _NzDestroyService,
      factory: _NzDestroyService.\u0275fac
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzDestroyService, [{
    type: Injectable
  }], null, null);
})();
var ImagePreloadService = class _ImagePreloadService {
  constructor(platform) {
    this.platform = platform;
    this.counter = /* @__PURE__ */ new Map();
    this.linkRefs = /* @__PURE__ */ new Map();
    this.document = inject(DOCUMENT);
  }
  addPreload(option) {
    if (this.platform.isBrowser) {
      return () => void 0;
    }
    const uniqueKey = `${option.src}${option.srcset}`;
    let currentCount = this.counter.get(uniqueKey) || 0;
    currentCount++;
    this.counter.set(uniqueKey, currentCount);
    if (!this.linkRefs.has(uniqueKey)) {
      const linkNode = this.appendPreloadLink(option);
      this.linkRefs.set(uniqueKey, linkNode);
    }
    return () => {
      if (this.counter.has(uniqueKey)) {
        let count = this.counter.get(uniqueKey);
        count--;
        if (count === 0) {
          const linkNode = this.linkRefs.get(uniqueKey);
          this.removePreloadLink(linkNode);
          this.counter.delete(uniqueKey);
          this.linkRefs.delete(uniqueKey);
        } else {
          this.counter.set(uniqueKey, count);
        }
      }
    };
  }
  appendPreloadLink(option) {
    const linkNode = this.document.createElement("link");
    linkNode.setAttribute("rel", "preload");
    linkNode.setAttribute("as", "image");
    linkNode.setAttribute("href", option.src);
    if (option.srcset) {
      linkNode.setAttribute("imagesrcset", option.srcset);
    }
    this.document.head.appendChild(linkNode);
    return linkNode;
  }
  removePreloadLink(linkNode) {
    if (this.document.head.contains(linkNode)) {
      this.document.head.removeChild(linkNode);
    }
  }
  static {
    this.\u0275fac = function ImagePreloadService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ImagePreloadService)(\u0275\u0275inject(Platform));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _ImagePreloadService,
      factory: _ImagePreloadService.\u0275fac,
      providedIn: "root"
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ImagePreloadService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Platform
  }], null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-core-outlet.mjs
var NzStringTemplateOutletDirective = class _NzStringTemplateOutletDirective {
  static ngTemplateContextGuard(_dir, _ctx) {
    return true;
  }
  recreateView() {
    this.viewContainer.clear();
    const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;
    const templateRef = isTemplateRef ? this.nzStringTemplateOutlet : this.templateRef;
    this.embeddedViewRef = this.viewContainer.createEmbeddedView(templateRef, isTemplateRef ? this.nzStringTemplateOutletContext : this.context);
  }
  updateContext() {
    const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;
    const newCtx = isTemplateRef ? this.nzStringTemplateOutletContext : this.context;
    const oldCtx = this.embeddedViewRef.context;
    if (newCtx) {
      for (const propName of Object.keys(newCtx)) {
        oldCtx[propName] = newCtx[propName];
      }
    }
  }
  constructor(viewContainer, templateRef) {
    this.viewContainer = viewContainer;
    this.templateRef = templateRef;
    this.embeddedViewRef = null;
    this.context = new NzStringTemplateOutletContext();
    this.nzStringTemplateOutletContext = null;
    this.nzStringTemplateOutlet = null;
  }
  ngOnChanges(changes) {
    const {
      nzStringTemplateOutletContext,
      nzStringTemplateOutlet
    } = changes;
    const shouldRecreateView = () => {
      let shouldOutletRecreate = false;
      if (nzStringTemplateOutlet) {
        if (nzStringTemplateOutlet.firstChange) {
          shouldOutletRecreate = true;
        } else {
          const isPreviousOutletTemplate = nzStringTemplateOutlet.previousValue instanceof TemplateRef;
          const isCurrentOutletTemplate = nzStringTemplateOutlet.currentValue instanceof TemplateRef;
          shouldOutletRecreate = isPreviousOutletTemplate || isCurrentOutletTemplate;
        }
      }
      const hasContextShapeChanged = (ctxChange) => {
        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});
        const currCtxKeys = Object.keys(ctxChange.currentValue || {});
        if (prevCtxKeys.length === currCtxKeys.length) {
          for (const propName of currCtxKeys) {
            if (prevCtxKeys.indexOf(propName) === -1) {
              return true;
            }
          }
          return false;
        } else {
          return true;
        }
      };
      const shouldContextRecreate = nzStringTemplateOutletContext && hasContextShapeChanged(nzStringTemplateOutletContext);
      return shouldContextRecreate || shouldOutletRecreate;
    };
    if (nzStringTemplateOutlet) {
      this.context.$implicit = nzStringTemplateOutlet.currentValue;
    }
    const recreateView = shouldRecreateView();
    if (recreateView) {
      this.recreateView();
    } else {
      this.updateContext();
    }
  }
  static {
    this.\u0275fac = function NzStringTemplateOutletDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzStringTemplateOutletDirective)(\u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(TemplateRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzStringTemplateOutletDirective,
      selectors: [["", "nzStringTemplateOutlet", ""]],
      inputs: {
        nzStringTemplateOutletContext: "nzStringTemplateOutletContext",
        nzStringTemplateOutlet: "nzStringTemplateOutlet"
      },
      exportAs: ["nzStringTemplateOutlet"],
      features: [\u0275\u0275NgOnChangesFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzStringTemplateOutletDirective, [{
    type: Directive,
    args: [{
      selector: "[nzStringTemplateOutlet]",
      exportAs: "nzStringTemplateOutlet"
    }]
  }], () => [{
    type: ViewContainerRef
  }, {
    type: TemplateRef
  }], {
    nzStringTemplateOutletContext: [{
      type: Input
    }],
    nzStringTemplateOutlet: [{
      type: Input
    }]
  });
})();
var NzStringTemplateOutletContext = class {
};
var NzOutletModule = class _NzOutletModule {
  static {
    this.\u0275fac = function NzOutletModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzOutletModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzOutletModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzOutletModule, [{
    type: NgModule,
    args: [{
      imports: [NzStringTemplateOutletDirective],
      exports: [NzStringTemplateOutletDirective]
    }]
  }], null, null);
})();

// node_modules/@ant-design/fast-color/es/FastColor.js
var round = Math.round;
function splitColorStr(str, parseNum) {
  const match = str.replace(/^[^(]*\((.*)/, "$1").replace(/\).*/, "").match(/\d*\.?\d+%?/g) || [];
  const numList = match.map((item) => parseFloat(item));
  for (let i = 0; i < 3; i += 1) {
    numList[i] = parseNum(numList[i] || 0, match[i] || "", i);
  }
  if (match[3]) {
    numList[3] = match[3].includes("%") ? numList[3] / 100 : numList[3];
  } else {
    numList[3] = 1;
  }
  return numList;
}
var parseHSVorHSL = (num, _3, index) => index === 0 ? num : num / 100;
function limitRange(value, max) {
  const mergedMax = max || 255;
  if (value > mergedMax) {
    return mergedMax;
  }
  if (value < 0) {
    return 0;
  }
  return value;
}
var FastColor = class _FastColor {
  constructor(input2) {
    _defineProperty(this, "isValid", true);
    _defineProperty(this, "r", 0);
    _defineProperty(this, "g", 0);
    _defineProperty(this, "b", 0);
    _defineProperty(this, "a", 1);
    _defineProperty(this, "_h", void 0);
    _defineProperty(this, "_s", void 0);
    _defineProperty(this, "_l", void 0);
    _defineProperty(this, "_v", void 0);
    _defineProperty(this, "_max", void 0);
    _defineProperty(this, "_min", void 0);
    _defineProperty(this, "_brightness", void 0);
    function matchFormat(str) {
      return str[0] in input2 && str[1] in input2 && str[2] in input2;
    }
    if (!input2) {
    } else if (typeof input2 === "string") {
      let matchPrefix2 = function(prefix) {
        return trimStr.startsWith(prefix);
      };
      var matchPrefix = matchPrefix2;
      const trimStr = input2.trim();
      if (/^#?[A-F\d]{3,8}$/i.test(trimStr)) {
        this.fromHexString(trimStr);
      } else if (matchPrefix2("rgb")) {
        this.fromRgbString(trimStr);
      } else if (matchPrefix2("hsl")) {
        this.fromHslString(trimStr);
      } else if (matchPrefix2("hsv") || matchPrefix2("hsb")) {
        this.fromHsvString(trimStr);
      }
    } else if (input2 instanceof _FastColor) {
      this.r = input2.r;
      this.g = input2.g;
      this.b = input2.b;
      this.a = input2.a;
      this._h = input2._h;
      this._s = input2._s;
      this._l = input2._l;
      this._v = input2._v;
    } else if (matchFormat("rgb")) {
      this.r = limitRange(input2.r);
      this.g = limitRange(input2.g);
      this.b = limitRange(input2.b);
      this.a = typeof input2.a === "number" ? limitRange(input2.a, 1) : 1;
    } else if (matchFormat("hsl")) {
      this.fromHsl(input2);
    } else if (matchFormat("hsv")) {
      this.fromHsv(input2);
    } else {
      throw new Error("@ant-design/fast-color: unsupported input " + JSON.stringify(input2));
    }
  }
  // ======================= Setter =======================
  setR(value) {
    return this._sc("r", value);
  }
  setG(value) {
    return this._sc("g", value);
  }
  setB(value) {
    return this._sc("b", value);
  }
  setA(value) {
    return this._sc("a", value, 1);
  }
  setHue(value) {
    const hsv = this.toHsv();
    hsv.h = value;
    return this._c(hsv);
  }
  // ======================= Getter =======================
  /**
   * Returns the perceived luminance of a color, from 0-1.
   * @see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
   */
  getLuminance() {
    function adjustGamma(raw) {
      const val = raw / 255;
      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
    }
    const R = adjustGamma(this.r);
    const G = adjustGamma(this.g);
    const B = adjustGamma(this.b);
    return 0.2126 * R + 0.7152 * G + 0.0722 * B;
  }
  getHue() {
    if (typeof this._h === "undefined") {
      const delta = this.getMax() - this.getMin();
      if (delta === 0) {
        this._h = 0;
      } else {
        this._h = round(60 * (this.r === this.getMax() ? (this.g - this.b) / delta + (this.g < this.b ? 6 : 0) : this.g === this.getMax() ? (this.b - this.r) / delta + 2 : (this.r - this.g) / delta + 4));
      }
    }
    return this._h;
  }
  getSaturation() {
    if (typeof this._s === "undefined") {
      const delta = this.getMax() - this.getMin();
      if (delta === 0) {
        this._s = 0;
      } else {
        this._s = delta / this.getMax();
      }
    }
    return this._s;
  }
  getLightness() {
    if (typeof this._l === "undefined") {
      this._l = (this.getMax() + this.getMin()) / 510;
    }
    return this._l;
  }
  getValue() {
    if (typeof this._v === "undefined") {
      this._v = this.getMax() / 255;
    }
    return this._v;
  }
  /**
   * Returns the perceived brightness of the color, from 0-255.
   * Note: this is not the b of HSB
   * @see http://www.w3.org/TR/AERT#color-contrast
   */
  getBrightness() {
    if (typeof this._brightness === "undefined") {
      this._brightness = (this.r * 299 + this.g * 587 + this.b * 114) / 1e3;
    }
    return this._brightness;
  }
  // ======================== Func ========================
  darken(amount = 10) {
    const h = this.getHue();
    const s = this.getSaturation();
    let l = this.getLightness() - amount / 100;
    if (l < 0) {
      l = 0;
    }
    return this._c({
      h,
      s,
      l,
      a: this.a
    });
  }
  lighten(amount = 10) {
    const h = this.getHue();
    const s = this.getSaturation();
    let l = this.getLightness() + amount / 100;
    if (l > 1) {
      l = 1;
    }
    return this._c({
      h,
      s,
      l,
      a: this.a
    });
  }
  /**
   * Mix the current color a given amount with another color, from 0 to 100.
   * 0 means no mixing (return current color).
   */
  mix(input2, amount = 50) {
    const color = this._c(input2);
    const p = amount / 100;
    const calc = (key) => (color[key] - this[key]) * p + this[key];
    const rgba = {
      r: round(calc("r")),
      g: round(calc("g")),
      b: round(calc("b")),
      a: round(calc("a") * 100) / 100
    };
    return this._c(rgba);
  }
  /**
   * Mix the color with pure white, from 0 to 100.
   * Providing 0 will do nothing, providing 100 will always return white.
   */
  tint(amount = 10) {
    return this.mix({
      r: 255,
      g: 255,
      b: 255,
      a: 1
    }, amount);
  }
  /**
   * Mix the color with pure black, from 0 to 100.
   * Providing 0 will do nothing, providing 100 will always return black.
   */
  shade(amount = 10) {
    return this.mix({
      r: 0,
      g: 0,
      b: 0,
      a: 1
    }, amount);
  }
  onBackground(background) {
    const bg = this._c(background);
    const alpha = this.a + bg.a * (1 - this.a);
    const calc = (key) => {
      return round((this[key] * this.a + bg[key] * bg.a * (1 - this.a)) / alpha);
    };
    return this._c({
      r: calc("r"),
      g: calc("g"),
      b: calc("b"),
      a: alpha
    });
  }
  // ======================= Status =======================
  isDark() {
    return this.getBrightness() < 128;
  }
  isLight() {
    return this.getBrightness() >= 128;
  }
  // ======================== MISC ========================
  equals(other) {
    return this.r === other.r && this.g === other.g && this.b === other.b && this.a === other.a;
  }
  clone() {
    return this._c(this);
  }
  // ======================= Format =======================
  toHexString() {
    let hex = "#";
    const rHex = (this.r || 0).toString(16);
    hex += rHex.length === 2 ? rHex : "0" + rHex;
    const gHex = (this.g || 0).toString(16);
    hex += gHex.length === 2 ? gHex : "0" + gHex;
    const bHex = (this.b || 0).toString(16);
    hex += bHex.length === 2 ? bHex : "0" + bHex;
    if (typeof this.a === "number" && this.a >= 0 && this.a < 1) {
      const aHex = round(this.a * 255).toString(16);
      hex += aHex.length === 2 ? aHex : "0" + aHex;
    }
    return hex;
  }
  /** CSS support color pattern */
  toHsl() {
    return {
      h: this.getHue(),
      s: this.getSaturation(),
      l: this.getLightness(),
      a: this.a
    };
  }
  /** CSS support color pattern */
  toHslString() {
    const h = this.getHue();
    const s = round(this.getSaturation() * 100);
    const l = round(this.getLightness() * 100);
    return this.a !== 1 ? `hsla(${h},${s}%,${l}%,${this.a})` : `hsl(${h},${s}%,${l}%)`;
  }
  /** Same as toHsb */
  toHsv() {
    return {
      h: this.getHue(),
      s: this.getSaturation(),
      v: this.getValue(),
      a: this.a
    };
  }
  toRgb() {
    return {
      r: this.r,
      g: this.g,
      b: this.b,
      a: this.a
    };
  }
  toRgbString() {
    return this.a !== 1 ? `rgba(${this.r},${this.g},${this.b},${this.a})` : `rgb(${this.r},${this.g},${this.b})`;
  }
  toString() {
    return this.toRgbString();
  }
  // ====================== Privates ======================
  /** Return a new FastColor object with one channel changed */
  _sc(rgb, value, max) {
    const clone = this.clone();
    clone[rgb] = limitRange(value, max);
    return clone;
  }
  _c(input2) {
    return new this.constructor(input2);
  }
  getMax() {
    if (typeof this._max === "undefined") {
      this._max = Math.max(this.r, this.g, this.b);
    }
    return this._max;
  }
  getMin() {
    if (typeof this._min === "undefined") {
      this._min = Math.min(this.r, this.g, this.b);
    }
    return this._min;
  }
  fromHexString(trimStr) {
    const withoutPrefix = trimStr.replace("#", "");
    function connectNum(index1, index2) {
      return parseInt(withoutPrefix[index1] + withoutPrefix[index2 || index1], 16);
    }
    if (withoutPrefix.length < 6) {
      this.r = connectNum(0);
      this.g = connectNum(1);
      this.b = connectNum(2);
      this.a = withoutPrefix[3] ? connectNum(3) / 255 : 1;
    } else {
      this.r = connectNum(0, 1);
      this.g = connectNum(2, 3);
      this.b = connectNum(4, 5);
      this.a = withoutPrefix[6] ? connectNum(6, 7) / 255 : 1;
    }
  }
  fromHsl({
    h,
    s,
    l,
    a
  }) {
    this._h = h % 360;
    this._s = s;
    this._l = l;
    this.a = typeof a === "number" ? a : 1;
    if (s <= 0) {
      const rgb = round(l * 255);
      this.r = rgb;
      this.g = rgb;
      this.b = rgb;
    }
    let r = 0, g = 0, b = 0;
    const huePrime = h / 60;
    const chroma = (1 - Math.abs(2 * l - 1)) * s;
    const secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));
    if (huePrime >= 0 && huePrime < 1) {
      r = chroma;
      g = secondComponent;
    } else if (huePrime >= 1 && huePrime < 2) {
      r = secondComponent;
      g = chroma;
    } else if (huePrime >= 2 && huePrime < 3) {
      g = chroma;
      b = secondComponent;
    } else if (huePrime >= 3 && huePrime < 4) {
      g = secondComponent;
      b = chroma;
    } else if (huePrime >= 4 && huePrime < 5) {
      r = secondComponent;
      b = chroma;
    } else if (huePrime >= 5 && huePrime < 6) {
      r = chroma;
      b = secondComponent;
    }
    const lightnessModification = l - chroma / 2;
    this.r = round((r + lightnessModification) * 255);
    this.g = round((g + lightnessModification) * 255);
    this.b = round((b + lightnessModification) * 255);
  }
  fromHsv({
    h,
    s,
    v,
    a
  }) {
    this._h = h % 360;
    this._s = s;
    this._v = v;
    this.a = typeof a === "number" ? a : 1;
    const vv = round(v * 255);
    this.r = vv;
    this.g = vv;
    this.b = vv;
    if (s <= 0) {
      return;
    }
    const hh = h / 60;
    const i = Math.floor(hh);
    const ff = hh - i;
    const p = round(v * (1 - s) * 255);
    const q = round(v * (1 - s * ff) * 255);
    const t = round(v * (1 - s * (1 - ff)) * 255);
    switch (i) {
      case 0:
        this.g = t;
        this.b = p;
        break;
      case 1:
        this.r = q;
        this.b = p;
        break;
      case 2:
        this.r = p;
        this.b = t;
        break;
      case 3:
        this.r = p;
        this.g = q;
        break;
      case 4:
        this.r = t;
        this.g = p;
        break;
      case 5:
      default:
        this.g = p;
        this.b = q;
        break;
    }
  }
  fromHsvString(trimStr) {
    const cells = splitColorStr(trimStr, parseHSVorHSL);
    this.fromHsv({
      h: cells[0],
      s: cells[1],
      v: cells[2],
      a: cells[3]
    });
  }
  fromHslString(trimStr) {
    const cells = splitColorStr(trimStr, parseHSVorHSL);
    this.fromHsl({
      h: cells[0],
      s: cells[1],
      l: cells[2],
      a: cells[3]
    });
  }
  fromRgbString(trimStr) {
    const cells = splitColorStr(trimStr, (num, txt) => (
      // Convert percentage to number. e.g. 50% -> 128
      txt.includes("%") ? round(num / 100 * 255) : num
    ));
    this.r = cells[0];
    this.g = cells[1];
    this.b = cells[2];
    this.a = cells[3];
  }
};

// node_modules/@ant-design/colors/es/generate.js
var hueStep = 2;
var saturationStep = 0.16;
var saturationStep2 = 0.05;
var brightnessStep1 = 0.05;
var brightnessStep2 = 0.15;
var lightColorCount = 5;
var darkColorCount = 4;
var darkColorMap = [{
  index: 7,
  amount: 15
}, {
  index: 6,
  amount: 25
}, {
  index: 5,
  amount: 30
}, {
  index: 5,
  amount: 45
}, {
  index: 5,
  amount: 65
}, {
  index: 5,
  amount: 85
}, {
  index: 4,
  amount: 90
}, {
  index: 3,
  amount: 95
}, {
  index: 2,
  amount: 97
}, {
  index: 1,
  amount: 98
}];
function getHue(hsv, i, light) {
  var hue;
  if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {
    hue = light ? Math.round(hsv.h) - hueStep * i : Math.round(hsv.h) + hueStep * i;
  } else {
    hue = light ? Math.round(hsv.h) + hueStep * i : Math.round(hsv.h) - hueStep * i;
  }
  if (hue < 0) {
    hue += 360;
  } else if (hue >= 360) {
    hue -= 360;
  }
  return hue;
}
function getSaturation(hsv, i, light) {
  if (hsv.h === 0 && hsv.s === 0) {
    return hsv.s;
  }
  var saturation;
  if (light) {
    saturation = hsv.s - saturationStep * i;
  } else if (i === darkColorCount) {
    saturation = hsv.s + saturationStep;
  } else {
    saturation = hsv.s + saturationStep2 * i;
  }
  if (saturation > 1) {
    saturation = 1;
  }
  if (light && i === lightColorCount && saturation > 0.1) {
    saturation = 0.1;
  }
  if (saturation < 0.06) {
    saturation = 0.06;
  }
  return Math.round(saturation * 100) / 100;
}
function getValue(hsv, i, light) {
  var value;
  if (light) {
    value = hsv.v + brightnessStep1 * i;
  } else {
    value = hsv.v - brightnessStep2 * i;
  }
  value = Math.max(0, Math.min(1, value));
  return Math.round(value * 100) / 100;
}
function generate(color) {
  var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var patterns = [];
  var pColor = new FastColor(color);
  var hsv = pColor.toHsv();
  for (var i = lightColorCount; i > 0; i -= 1) {
    var c = new FastColor({
      h: getHue(hsv, i, true),
      s: getSaturation(hsv, i, true),
      v: getValue(hsv, i, true)
    });
    patterns.push(c);
  }
  patterns.push(pColor);
  for (var _i = 1; _i <= darkColorCount; _i += 1) {
    var _c = new FastColor({
      h: getHue(hsv, _i),
      s: getSaturation(hsv, _i),
      v: getValue(hsv, _i)
    });
    patterns.push(_c);
  }
  if (opts.theme === "dark") {
    return darkColorMap.map(function(_ref) {
      var index = _ref.index, amount = _ref.amount;
      return new FastColor(opts.backgroundColor || "#141414").mix(patterns[index], amount).toHexString();
    });
  }
  return patterns.map(function(c2) {
    return c2.toHexString();
  });
}

// node_modules/@ant-design/colors/es/presets.js
var red = ["#fff1f0", "#ffccc7", "#ffa39e", "#ff7875", "#ff4d4f", "#f5222d", "#cf1322", "#a8071a", "#820014", "#5c0011"];
red.primary = red[5];
var volcano = ["#fff2e8", "#ffd8bf", "#ffbb96", "#ff9c6e", "#ff7a45", "#fa541c", "#d4380d", "#ad2102", "#871400", "#610b00"];
volcano.primary = volcano[5];
var orange = ["#fff7e6", "#ffe7ba", "#ffd591", "#ffc069", "#ffa940", "#fa8c16", "#d46b08", "#ad4e00", "#873800", "#612500"];
orange.primary = orange[5];
var gold = ["#fffbe6", "#fff1b8", "#ffe58f", "#ffd666", "#ffc53d", "#faad14", "#d48806", "#ad6800", "#874d00", "#613400"];
gold.primary = gold[5];
var yellow = ["#feffe6", "#ffffb8", "#fffb8f", "#fff566", "#ffec3d", "#fadb14", "#d4b106", "#ad8b00", "#876800", "#614700"];
yellow.primary = yellow[5];
var lime = ["#fcffe6", "#f4ffb8", "#eaff8f", "#d3f261", "#bae637", "#a0d911", "#7cb305", "#5b8c00", "#3f6600", "#254000"];
lime.primary = lime[5];
var green = ["#f6ffed", "#d9f7be", "#b7eb8f", "#95de64", "#73d13d", "#52c41a", "#389e0d", "#237804", "#135200", "#092b00"];
green.primary = green[5];
var cyan = ["#e6fffb", "#b5f5ec", "#87e8de", "#5cdbd3", "#36cfc9", "#13c2c2", "#08979c", "#006d75", "#00474f", "#002329"];
cyan.primary = cyan[5];
var blue = ["#e6f4ff", "#bae0ff", "#91caff", "#69b1ff", "#4096ff", "#1677ff", "#0958d9", "#003eb3", "#002c8c", "#001d66"];
blue.primary = blue[5];
var geekblue = ["#f0f5ff", "#d6e4ff", "#adc6ff", "#85a5ff", "#597ef7", "#2f54eb", "#1d39c4", "#10239e", "#061178", "#030852"];
geekblue.primary = geekblue[5];
var purple = ["#f9f0ff", "#efdbff", "#d3adf7", "#b37feb", "#9254de", "#722ed1", "#531dab", "#391085", "#22075e", "#120338"];
purple.primary = purple[5];
var magenta = ["#fff0f6", "#ffd6e7", "#ffadd2", "#ff85c0", "#f759ab", "#eb2f96", "#c41d7f", "#9e1068", "#780650", "#520339"];
magenta.primary = magenta[5];
var grey = ["#a6a6a6", "#999999", "#8c8c8c", "#808080", "#737373", "#666666", "#404040", "#1a1a1a", "#000000", "#000000"];
grey.primary = grey[5];
var redDark = ["#2a1215", "#431418", "#58181c", "#791a1f", "#a61d24", "#d32029", "#e84749", "#f37370", "#f89f9a", "#fac8c3"];
redDark.primary = redDark[5];
var volcanoDark = ["#2b1611", "#441d12", "#592716", "#7c3118", "#aa3e19", "#d84a1b", "#e87040", "#f3956a", "#f8b692", "#fad4bc"];
volcanoDark.primary = volcanoDark[5];
var orangeDark = ["#2b1d11", "#442a11", "#593815", "#7c4a15", "#aa6215", "#d87a16", "#e89a3c", "#f3b765", "#f8cf8d", "#fae3b7"];
orangeDark.primary = orangeDark[5];
var goldDark = ["#2b2111", "#443111", "#594214", "#7c5914", "#aa7714", "#d89614", "#e8b339", "#f3cc62", "#f8df8b", "#faedb5"];
goldDark.primary = goldDark[5];
var yellowDark = ["#2b2611", "#443b11", "#595014", "#7c6e14", "#aa9514", "#d8bd14", "#e8d639", "#f3ea62", "#f8f48b", "#fafab5"];
yellowDark.primary = yellowDark[5];
var limeDark = ["#1f2611", "#2e3c10", "#3e4f13", "#536d13", "#6f9412", "#8bbb11", "#a9d134", "#c9e75d", "#e4f88b", "#f0fab5"];
limeDark.primary = limeDark[5];
var greenDark = ["#162312", "#1d3712", "#274916", "#306317", "#3c8618", "#49aa19", "#6abe39", "#8fd460", "#b2e58b", "#d5f2bb"];
greenDark.primary = greenDark[5];
var cyanDark = ["#112123", "#113536", "#144848", "#146262", "#138585", "#13a8a8", "#33bcb7", "#58d1c9", "#84e2d8", "#b2f1e8"];
cyanDark.primary = cyanDark[5];
var blueDark = ["#111a2c", "#112545", "#15325b", "#15417e", "#1554ad", "#1668dc", "#3c89e8", "#65a9f3", "#8dc5f8", "#b7dcfa"];
blueDark.primary = blueDark[5];
var geekblueDark = ["#131629", "#161d40", "#1c2755", "#203175", "#263ea0", "#2b4acb", "#5273e0", "#7f9ef3", "#a8c1f8", "#d2e0fa"];
geekblueDark.primary = geekblueDark[5];
var purpleDark = ["#1a1325", "#24163a", "#301c4d", "#3e2069", "#51258f", "#642ab5", "#854eca", "#ab7ae0", "#cda8f0", "#ebd7fa"];
purpleDark.primary = purpleDark[5];
var magentaDark = ["#291321", "#40162f", "#551c3b", "#75204f", "#a02669", "#cb2b83", "#e0529c", "#f37fb7", "#f8a8cc", "#fad2e3"];
magentaDark.primary = magentaDark[5];
var greyDark = ["#151515", "#1f1f1f", "#2d2d2d", "#393939", "#494949", "#5a5a5a", "#6a6a6a", "#7b7b7b", "#888888", "#969696"];
greyDark.primary = greyDark[5];

// node_modules/@ant-design/icons-angular/fesm2022/ant-design-icons-angular.mjs
var ANT_ICON_ANGULAR_CONSOLE_PREFIX = "[@ant-design/icons-angular]:";
function error(message) {
  console.error(`${ANT_ICON_ANGULAR_CONSOLE_PREFIX} ${message}.`);
}
function warn2(message) {
  if (isDevMode()) {
    console.warn(`${ANT_ICON_ANGULAR_CONSOLE_PREFIX} ${message}.`);
  }
}
function getSecondaryColor(primaryColor) {
  return generate(primaryColor)[0];
}
function withSuffix(name2, theme) {
  switch (theme) {
    case "fill":
      return `${name2}-fill`;
    case "outline":
      return `${name2}-o`;
    case "twotone":
      return `${name2}-twotone`;
    case void 0:
      return name2;
    default:
      throw new Error(`${ANT_ICON_ANGULAR_CONSOLE_PREFIX}Theme "${theme}" is not a recognized theme!`);
  }
}
function withSuffixAndColor(name2, theme, pri, sec) {
  return `${withSuffix(name2, theme)}-${pri}-${sec}`;
}
function mapAbbrToTheme(abbr) {
  return abbr === "o" ? "outline" : abbr;
}
function alreadyHasAThemeSuffix(name2) {
  return name2.endsWith("-fill") || name2.endsWith("-o") || name2.endsWith("-twotone");
}
function isIconDefinition(target) {
  return typeof target === "object" && typeof target.name === "string" && (typeof target.theme === "string" || target.theme === void 0) && typeof target.icon === "string";
}
function getIconDefinitionFromAbbr(str) {
  const arr = str.split("-");
  const theme = mapAbbrToTheme(arr.splice(arr.length - 1, 1)[0]);
  const name2 = arr.join("-");
  return {
    name: name2,
    theme,
    icon: ""
  };
}
function cloneSVG(svg) {
  return svg.cloneNode(true);
}
function replaceFillColor(raw) {
  return raw.replace(/['"]#333['"]/g, '"primaryColor"').replace(/['"]#E6E6E6['"]/g, '"secondaryColor"').replace(/['"]#D9D9D9['"]/g, '"secondaryColor"').replace(/['"]#D8D8D8['"]/g, '"secondaryColor"');
}
function getNameAndNamespace(type) {
  const split = type.split(":");
  switch (split.length) {
    case 1:
      return [type, ""];
    case 2:
      return [split[1], split[0]];
    default:
      throw new Error(`${ANT_ICON_ANGULAR_CONSOLE_PREFIX}The icon type ${type} is not valid!`);
  }
}
function hasNamespace(type) {
  return getNameAndNamespace(type)[1] !== "";
}
function NameSpaceIsNotSpecifyError() {
  return new Error(`${ANT_ICON_ANGULAR_CONSOLE_PREFIX}Type should have a namespace. Try "namespace:${name}".`);
}
function IconNotFoundError(icon) {
  return new Error(`${ANT_ICON_ANGULAR_CONSOLE_PREFIX}the icon ${icon} does not exist or is not registered.`);
}
function HttpModuleNotImport() {
  error(`you need to import "HttpClientModule" to use dynamic importing.`);
  return null;
}
function UrlNotSafeError(url) {
  return new Error(`${ANT_ICON_ANGULAR_CONSOLE_PREFIX}The url "${url}" is unsafe.`);
}
function SVGTagNotFoundError() {
  return new Error(`${ANT_ICON_ANGULAR_CONSOLE_PREFIX}<svg> tag not found.`);
}
function DynamicLoadingTimeoutError() {
  return new Error(`${ANT_ICON_ANGULAR_CONSOLE_PREFIX}Importing timeout error.`);
}
var JSONP_HANDLER_NAME = "__ant_icon_load";
var ANT_ICONS = new InjectionToken("ant_icons");
var IconService = class _IconService {
  set twoToneColor({
    primaryColor,
    secondaryColor
  }) {
    this._twoToneColorPalette.primaryColor = primaryColor;
    this._twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);
  }
  get twoToneColor() {
    return __spreadValues({}, this._twoToneColorPalette);
  }
  /**
   * Disable dynamic loading (support static loading only).
   */
  get _disableDynamicLoading() {
    return false;
  }
  constructor(_rendererFactory, _handler, _document, sanitizer, _antIcons) {
    this._rendererFactory = _rendererFactory;
    this._handler = _handler;
    this._document = _document;
    this.sanitizer = sanitizer;
    this._antIcons = _antIcons;
    this.defaultTheme = "outline";
    this._svgDefinitions = /* @__PURE__ */ new Map();
    this._svgRenderedDefinitions = /* @__PURE__ */ new Map();
    this._inProgressFetches = /* @__PURE__ */ new Map();
    this._assetsUrlRoot = "";
    this._twoToneColorPalette = {
      primaryColor: "#333333",
      secondaryColor: "#E6E6E6"
    };
    this._enableJsonpLoading = false;
    this._jsonpIconLoad$ = new Subject();
    this._renderer = this._rendererFactory.createRenderer(null, null);
    if (this._handler) {
      this._http = new HttpClient(this._handler);
    }
    if (this._antIcons) {
      this.addIcon(...this._antIcons);
    }
  }
  /**
   * Call this method to switch to jsonp like loading.
   */
  useJsonpLoading() {
    if (!this._enableJsonpLoading) {
      this._enableJsonpLoading = true;
      window[JSONP_HANDLER_NAME] = (icon) => {
        this._jsonpIconLoad$.next(icon);
      };
    } else {
      warn2("You are already using jsonp loading.");
    }
  }
  /**
   * Change the prefix of the inline svg resources, so they could be deployed elsewhere, like CDN.
   * @param prefix
   */
  changeAssetsSource(prefix) {
    this._assetsUrlRoot = prefix.endsWith("/") ? prefix : prefix + "/";
  }
  /**
   * Add icons provided by ant design.
   * @param icons
   */
  addIcon(...icons) {
    icons.forEach((icon) => {
      this._svgDefinitions.set(withSuffix(icon.name, icon.theme), icon);
    });
  }
  /**
   * Register an icon. Namespace is required.
   * @param type
   * @param literal
   */
  addIconLiteral(type, literal) {
    const [_3, namespace] = getNameAndNamespace(type);
    if (!namespace) {
      throw NameSpaceIsNotSpecifyError();
    }
    this.addIcon({
      name: type,
      icon: literal
    });
  }
  /**
   * Remove all cache.
   */
  clear() {
    this._svgDefinitions.clear();
    this._svgRenderedDefinitions.clear();
  }
  /**
   * Get a rendered `SVGElement`.
   * @param icon
   * @param twoToneColor
   */
  getRenderedContent(icon, twoToneColor) {
    const definition = isIconDefinition(icon) ? icon : this._svgDefinitions.get(icon) || null;
    if (!definition && this._disableDynamicLoading) {
      throw IconNotFoundError(icon);
    }
    const $iconDefinition = definition ? of(definition) : this._loadIconDynamically(icon);
    return $iconDefinition.pipe(map((i) => {
      if (!i) {
        throw IconNotFoundError(icon);
      }
      return this._loadSVGFromCacheOrCreateNew(i, twoToneColor);
    }));
  }
  getCachedIcons() {
    return this._svgDefinitions;
  }
  /**
   * Get raw svg and assemble a `IconDefinition` object.
   * @param type
   */
  _loadIconDynamically(type) {
    if (!this._http && !this._enableJsonpLoading) {
      return of(HttpModuleNotImport());
    }
    let inProgress = this._inProgressFetches.get(type);
    if (!inProgress) {
      const [name2, namespace] = getNameAndNamespace(type);
      const icon = namespace ? {
        name: type,
        icon: ""
      } : getIconDefinitionFromAbbr(name2);
      const suffix = this._enableJsonpLoading ? ".js" : ".svg";
      const url = (namespace ? `${this._assetsUrlRoot}assets/${namespace}/${name2}` : `${this._assetsUrlRoot}assets/${icon.theme}/${icon.name}`) + suffix;
      const safeUrl = this.sanitizer.sanitize(SecurityContext.URL, url);
      if (!safeUrl) {
        throw UrlNotSafeError(url);
      }
      const source = !this._enableJsonpLoading ? this._http.get(safeUrl, {
        responseType: "text"
      }).pipe(map((literal) => __spreadProps(__spreadValues({}, icon), {
        icon: literal
      }))) : this._loadIconDynamicallyWithJsonp(icon, safeUrl);
      inProgress = source.pipe(tap((definition) => this.addIcon(definition)), finalize(() => this._inProgressFetches.delete(type)), catchError(() => of(null)), share());
      this._inProgressFetches.set(type, inProgress);
    }
    return inProgress;
  }
  _loadIconDynamicallyWithJsonp(icon, url) {
    return new Observable((subscriber) => {
      const loader = this._document.createElement("script");
      const timer = setTimeout(() => {
        clean();
        subscriber.error(DynamicLoadingTimeoutError());
      }, 6e3);
      loader.src = url;
      function clean() {
        loader.parentNode.removeChild(loader);
        clearTimeout(timer);
      }
      this._document.body.appendChild(loader);
      this._jsonpIconLoad$.pipe(filter((i) => i.name === icon.name && i.theme === icon.theme), take(1)).subscribe((i) => {
        subscriber.next(i);
        clean();
      });
    });
  }
  /**
   * Render a new `SVGElement` for a given `IconDefinition`, or make a copy from cache.
   * @param icon
   * @param twoToneColor
   */
  _loadSVGFromCacheOrCreateNew(icon, twoToneColor) {
    let svg;
    const pri = twoToneColor || this._twoToneColorPalette.primaryColor;
    const sec = getSecondaryColor(pri) || this._twoToneColorPalette.secondaryColor;
    const key = icon.theme === "twotone" ? withSuffixAndColor(icon.name, icon.theme, pri, sec) : icon.theme === void 0 ? icon.name : withSuffix(icon.name, icon.theme);
    const cached = this._svgRenderedDefinitions.get(key);
    if (cached) {
      svg = cached.icon;
    } else {
      svg = this._setSVGAttribute(this._colorizeSVGIcon(
        // Icons provided by ant design should be refined to remove preset colors.
        this._createSVGElementFromString(hasNamespace(icon.name) ? icon.icon : replaceFillColor(icon.icon)),
        icon.theme === "twotone",
        pri,
        sec
      ));
      this._svgRenderedDefinitions.set(key, __spreadProps(__spreadValues({}, icon), {
        icon: svg
      }));
    }
    return cloneSVG(svg);
  }
  _createSVGElementFromString(str) {
    const div = this._document.createElement("div");
    div.innerHTML = str;
    const svg = div.querySelector("svg");
    if (!svg) {
      throw SVGTagNotFoundError;
    }
    return svg;
  }
  _setSVGAttribute(svg) {
    this._renderer.setAttribute(svg, "width", "1em");
    this._renderer.setAttribute(svg, "height", "1em");
    return svg;
  }
  _colorizeSVGIcon(svg, twotone, pri, sec) {
    if (twotone) {
      const children = svg.childNodes;
      const length = children.length;
      for (let i = 0; i < length; i++) {
        const child = children[i];
        if (child.getAttribute("fill") === "secondaryColor") {
          this._renderer.setAttribute(child, "fill", sec);
        } else {
          this._renderer.setAttribute(child, "fill", pri);
        }
      }
    }
    this._renderer.setAttribute(svg, "fill", "currentColor");
    return svg;
  }
  static {
    this.\u0275fac = function IconService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _IconService)(\u0275\u0275inject(RendererFactory2), \u0275\u0275inject(HttpBackend, 8), \u0275\u0275inject(DOCUMENT, 8), \u0275\u0275inject(DomSanitizer), \u0275\u0275inject(ANT_ICONS, 8));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _IconService,
      factory: _IconService.\u0275fac,
      providedIn: "root"
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IconService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: RendererFactory2
  }, {
    type: HttpBackend,
    decorators: [{
      type: Optional
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: DomSanitizer
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [ANT_ICONS]
    }]
  }], null);
})();
function checkMeta(prev, after) {
  return prev.type === after.type && prev.theme === after.theme && prev.twoToneColor === after.twoToneColor;
}
var IconDirective = class _IconDirective {
  constructor(_iconService) {
    this._iconService = _iconService;
    this._elementRef = inject(ElementRef);
    this._renderer = inject(Renderer2);
  }
  ngOnChanges(changes) {
    if (changes.type || changes.theme || changes.twoToneColor) {
      this._changeIcon();
    }
  }
  /**
   * Render a new icon in the current element. Remove the icon when `type` is falsy.
   */
  _changeIcon() {
    return new Promise((resolve) => {
      if (!this.type) {
        this._clearSVGElement();
        resolve(null);
        return;
      }
      const beforeMeta = this._getSelfRenderMeta();
      this._iconService.getRenderedContent(this._parseIconType(this.type, this.theme), this.twoToneColor).subscribe((svg) => {
        const afterMeta = this._getSelfRenderMeta();
        if (checkMeta(beforeMeta, afterMeta)) {
          this._setSVGElement(svg);
          resolve(svg);
        } else {
          resolve(null);
        }
      });
    });
  }
  _getSelfRenderMeta() {
    return {
      type: this.type,
      theme: this.theme,
      twoToneColor: this.twoToneColor
    };
  }
  /**
   * Parse a icon to the standard form, an `IconDefinition` or a string like 'account-book-fill` (with a theme suffixed).
   * If namespace is specified, ignore theme because it meaningless for users' icons.
   *
   * @param type
   * @param theme
   */
  _parseIconType(type, theme) {
    if (isIconDefinition(type)) {
      return type;
    } else {
      const [name2, namespace] = getNameAndNamespace(type);
      if (namespace) {
        return type;
      }
      if (alreadyHasAThemeSuffix(name2)) {
        if (!!theme) {
          warn2(`'type' ${name2} already gets a theme inside so 'theme' ${theme} would be ignored`);
        }
        return name2;
      } else {
        return withSuffix(name2, theme || this._iconService.defaultTheme);
      }
    }
  }
  _setSVGElement(svg) {
    this._clearSVGElement();
    this._renderer.appendChild(this._elementRef.nativeElement, svg);
  }
  _clearSVGElement() {
    const el = this._elementRef.nativeElement;
    const children = el.childNodes;
    const length = children.length;
    for (let i = length - 1; i >= 0; i--) {
      const child = children[i];
      if (child.tagName?.toLowerCase() === "svg") {
        this._renderer.removeChild(el, child);
      }
    }
  }
  static {
    this.\u0275fac = function IconDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _IconDirective)(\u0275\u0275directiveInject(IconService));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _IconDirective,
      selectors: [["", "antIcon", ""]],
      inputs: {
        type: "type",
        theme: "theme",
        twoToneColor: "twoToneColor"
      },
      features: [\u0275\u0275NgOnChangesFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IconDirective, [{
    type: Directive,
    args: [{
      selector: "[antIcon]"
    }]
  }], () => [{
    type: IconService
  }], {
    type: [{
      type: Input
    }],
    theme: [{
      type: Input
    }],
    twoToneColor: [{
      type: Input
    }]
  });
})();
var IconModule = class _IconModule {
  static {
    this.\u0275fac = function IconModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _IconModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _IconModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IconModule, [{
    type: NgModule,
    args: [{
      imports: [IconDirective],
      exports: [IconDirective]
    }]
  }], null, null);
})();

// node_modules/@ant-design/icons-angular/fesm2022/ant-design-icons-angular-icons.mjs
var BarsOutline = {
  name: "bars",
  theme: "outline",
  icon: '<svg viewBox="0 0 1024 1024" focusable="false"><path d="M912 192H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM104 228a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0z" /></svg>'
};
var CalendarOutline = {
  name: "calendar",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z" /></svg>'
};
var CaretDownFill = {
  name: "caret-down",
  theme: "fill",
  icon: '<svg viewBox="0 0 1024 1024" focusable="false"><path d="M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z" /></svg>'
};
var CaretUpFill = {
  name: "caret-up",
  theme: "fill",
  icon: '<svg viewBox="0 0 1024 1024" focusable="false"><path d="M858.9 689L530.5 308.2c-9.4-10.9-27.5-10.9-37 0L165.1 689c-12.2 14.2-1.2 35 18.5 35h656.8c19.7 0 30.7-20.8 18.5-35z" /></svg>'
};
var CaretDownOutline = {
  name: "caret-down",
  theme: "outline",
  icon: '<svg viewBox="0 0 1024 1024" focusable="false"><path d="M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z" /></svg>'
};
var CheckOutline = {
  name: "check",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z" /></svg>'
};
var CaretUpOutline = {
  name: "caret-up",
  theme: "outline",
  icon: '<svg viewBox="0 0 1024 1024" focusable="false"><path d="M858.9 689L530.5 308.2c-9.4-10.9-27.5-10.9-37 0L165.1 689c-12.2 14.2-1.2 35 18.5 35h656.8c19.7 0 30.7-20.8 18.5-35z" /></svg>'
};
var ClockCircleOutline = {
  name: "clock-circle",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" /><path d="M686.7 638.6L544.1 535.5V288c0-4.4-3.6-8-8-8H488c-4.4 0-8 3.6-8 8v275.4c0 2.6 1.2 5 3.3 6.5l165.4 120.6c3.6 2.6 8.6 1.8 11.2-1.7l28.6-39c2.6-3.7 1.8-8.7-1.8-11.2z" /></svg>'
};
var CloseCircleFill = {
  name: "close-circle",
  theme: "fill",
  icon: '<svg fill-rule="evenodd" viewBox="64 64 896 896" focusable="false"><path d="M512 64c247.4 0 448 200.6 448 448S759.4 960 512 960 64 759.4 64 512 264.6 64 512 64zm127.98 274.82h-.04l-.08.06L512 466.75 384.14 338.88c-.04-.05-.06-.06-.08-.06a.12.12 0 00-.07 0c-.03 0-.05.01-.09.05l-45.02 45.02a.2.2 0 00-.05.09.12.12 0 000 .07v.02a.27.27 0 00.06.06L466.75 512 338.88 639.86c-.05.04-.06.06-.06.08a.12.12 0 000 .07c0 .03.01.05.05.09l45.02 45.02a.2.2 0 00.09.05.12.12 0 00.07 0c.02 0 .04-.01.08-.05L512 557.25l127.86 127.87c.04.04.06.05.08.05a.12.12 0 00.07 0c.03 0 .05-.01.09-.05l45.02-45.02a.2.2 0 00.05-.09.12.12 0 000-.07v-.02a.27.27 0 00-.05-.06L557.25 512l127.87-127.86c.04-.04.05-.06.05-.08a.12.12 0 000-.07c0-.03-.01-.05-.05-.09l-45.02-45.02a.2.2 0 00-.09-.05.12.12 0 00-.07 0z" /></svg>'
};
var CloseOutline = {
  name: "close",
  theme: "outline",
  icon: '<svg fill-rule="evenodd" viewBox="64 64 896 896" focusable="false"><path d="M799.86 166.31c.02 0 .04.02.08.06l57.69 57.7c.04.03.05.05.06.08a.12.12 0 010 .06c0 .03-.02.05-.06.09L569.93 512l287.7 287.7c.04.04.05.06.06.09a.12.12 0 010 .07c0 .02-.02.04-.06.08l-57.7 57.69c-.03.04-.05.05-.07.06a.12.12 0 01-.07 0c-.03 0-.05-.02-.09-.06L512 569.93l-287.7 287.7c-.04.04-.06.05-.09.06a.12.12 0 01-.07 0c-.02 0-.04-.02-.08-.06l-57.69-57.7c-.04-.03-.05-.05-.06-.07a.12.12 0 010-.07c0-.03.02-.05.06-.09L454.07 512l-287.7-287.7c-.04-.04-.05-.06-.06-.09a.12.12 0 010-.07c0-.02.02-.04.06-.08l57.7-57.69c.03-.04.05-.05.07-.06a.12.12 0 01.07 0c.03 0 .05.02.09.06L512 454.07l287.7-287.7c.04-.04.06-.05.09-.06a.12.12 0 01.07 0z" /></svg>'
};
var CloseCircleOutline = {
  name: "close-circle",
  theme: "outline",
  icon: '<svg fill-rule="evenodd" viewBox="64 64 896 896" focusable="false"><path d="M512 64c247.4 0 448 200.6 448 448S759.4 960 512 960 64 759.4 64 512 264.6 64 512 64zm0 76c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm128.01 198.83c.03 0 .05.01.09.06l45.02 45.01a.2.2 0 01.05.09.12.12 0 010 .07c0 .02-.01.04-.05.08L557.25 512l127.87 127.86a.27.27 0 01.05.06v.02a.12.12 0 010 .07c0 .03-.01.05-.05.09l-45.02 45.02a.2.2 0 01-.09.05.12.12 0 01-.07 0c-.02 0-.04-.01-.08-.05L512 557.25 384.14 685.12c-.04.04-.06.05-.08.05a.12.12 0 01-.07 0c-.03 0-.05-.01-.09-.05l-45.02-45.02a.2.2 0 01-.05-.09.12.12 0 010-.07c0-.02.01-.04.06-.08L466.75 512 338.88 384.14a.27.27 0 01-.05-.06l-.01-.02a.12.12 0 010-.07c0-.03.01-.05.05-.09l45.02-45.02a.2.2 0 01.09-.05.12.12 0 01.07 0c.02 0 .04.01.08.06L512 466.75l127.86-127.86c.04-.05.06-.06.08-.06a.12.12 0 01.07 0z" /></svg>'
};
var CheckCircleOutline = {
  name: "check-circle",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z" /><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" /></svg>'
};
var CheckCircleFill = {
  name: "check-circle",
  theme: "fill",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z" /></svg>'
};
var CopyOutline = {
  name: "copy",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z" /></svg>'
};
var DeleteOutline = {
  name: "delete",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z" /></svg>'
};
var DoubleLeftOutline = {
  name: "double-left",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M272.9 512l265.4-339.1c4.1-5.2.4-12.9-6.3-12.9h-77.3c-4.9 0-9.6 2.3-12.6 6.1L186.8 492.3a31.99 31.99 0 000 39.5l255.3 326.1c3 3.9 7.7 6.1 12.6 6.1H532c6.7 0 10.4-7.7 6.3-12.9L272.9 512zm304 0l265.4-339.1c4.1-5.2.4-12.9-6.3-12.9h-77.3c-4.9 0-9.6 2.3-12.6 6.1L490.8 492.3a31.99 31.99 0 000 39.5l255.3 326.1c3 3.9 7.7 6.1 12.6 6.1H836c6.7 0 10.4-7.7 6.3-12.9L576.9 512z" /></svg>'
};
var DoubleRightOutline = {
  name: "double-right",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M533.2 492.3L277.9 166.1c-3-3.9-7.7-6.1-12.6-6.1H188c-6.7 0-10.4 7.7-6.3 12.9L447.1 512 181.7 851.1A7.98 7.98 0 00188 864h77.3c4.9 0 9.6-2.3 12.6-6.1l255.3-326.1c9.1-11.7 9.1-27.9 0-39.5zm304 0L581.9 166.1c-3-3.9-7.7-6.1-12.6-6.1H492c-6.7 0-10.4 7.7-6.3 12.9L751.1 512 485.7 851.1A7.98 7.98 0 00492 864h77.3c4.9 0 9.6-2.3 12.6-6.1l255.3-326.1c9.1-11.7 9.1-27.9 0-39.5z" /></svg>'
};
var DownOutline = {
  name: "down",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z" /></svg>'
};
var EllipsisOutline = {
  name: "ellipsis",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M176 511a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0z" /></svg>'
};
var ExclamationCircleOutline = {
  name: "exclamation-circle",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" /><path d="M464 688a48 48 0 1096 0 48 48 0 10-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z" /></svg>'
};
var ExclamationCircleFill = {
  name: "exclamation-circle",
  theme: "fill",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z" /></svg>'
};
var EyeOutline = {
  name: "eye",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z" /></svg>'
};
var FileFill = {
  name: "file",
  theme: "fill",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M854.6 288.7c6 6 9.4 14.1 9.4 22.6V928c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32V96c0-17.7 14.3-32 32-32h424.7c8.5 0 16.7 3.4 22.7 9.4l215.2 215.3zM790.2 326L602 137.8V326h188.2z" /></svg>'
};
var FileOutline = {
  name: "file",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0042 42h216v494z" /></svg>'
};
var FilterFill = {
  name: "filter",
  theme: "fill",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M349 838c0 17.7 14.2 32 31.8 32h262.4c17.6 0 31.8-14.3 31.8-32V642H349v196zm531.1-684H143.9c-24.5 0-39.8 26.7-27.5 48l221.3 376h348.8l221.3-376c12.1-21.3-3.2-48-27.7-48z" /></svg>'
};
var EditOutline = {
  name: "edit",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M257.7 752c2 0 4-.2 6-.5L431.9 722c2-.4 3.9-1.3 5.3-2.8l423.9-423.9a9.96 9.96 0 000-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2a33.5 33.5 0 009.4 29.8c6.6 6.4 14.9 9.9 23.8 9.9zm67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z" /></svg>'
};
var InfoCircleOutline = {
  name: "info-circle",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" /><path d="M464 336a48 48 0 1096 0 48 48 0 10-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z" /></svg>'
};
var LoadingOutline = {
  name: "loading",
  theme: "outline",
  icon: '<svg viewBox="0 0 1024 1024" focusable="false"><path d="M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z" /></svg>'
};
var LeftOutline = {
  name: "left",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 000 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z" /></svg>'
};
var PaperClipOutline = {
  name: "paper-clip",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M779.3 196.6c-94.2-94.2-247.6-94.2-341.7 0l-261 260.8c-1.7 1.7-2.6 4-2.6 6.4s.9 4.7 2.6 6.4l36.9 36.9a9 9 0 0012.7 0l261-260.8c32.4-32.4 75.5-50.2 121.3-50.2s88.9 17.8 121.2 50.2c32.4 32.4 50.2 75.5 50.2 121.2 0 45.8-17.8 88.8-50.2 121.2l-266 265.9-43.1 43.1c-40.3 40.3-105.8 40.3-146.1 0-19.5-19.5-30.2-45.4-30.2-73s10.7-53.5 30.2-73l263.9-263.8c6.7-6.6 15.5-10.3 24.9-10.3h.1c9.4 0 18.1 3.7 24.7 10.3 6.7 6.7 10.3 15.5 10.3 24.9 0 9.3-3.7 18.1-10.3 24.7L372.4 653c-1.7 1.7-2.6 4-2.6 6.4s.9 4.7 2.6 6.4l36.9 36.9a9 9 0 0012.7 0l215.6-215.6c19.9-19.9 30.8-46.3 30.8-74.4s-11-54.6-30.8-74.4c-41.1-41.1-107.9-41-149 0L463 364 224.8 602.1A172.22 172.22 0 00174 724.8c0 46.3 18.1 89.8 50.8 122.5 33.9 33.8 78.3 50.7 122.7 50.7 44.4 0 88.8-16.9 122.6-50.7l309.2-309C824.8 492.7 850 432 850 367.5c.1-64.6-25.1-125.3-70.7-170.9z" /></svg>'
};
var QuestionCircleOutline = {
  name: "question-circle",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" /><path d="M623.6 316.7C593.6 290.4 554 276 512 276s-81.6 14.5-111.6 40.7C369.2 344 352 380.7 352 420v7.6c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V420c0-44.1 43.1-80 96-80s96 35.9 96 80c0 31.1-22 59.6-56.1 72.7-21.2 8.1-39.2 22.3-52.1 40.9-13.1 19-19.9 41.8-19.9 64.9V620c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-22.7a48.3 48.3 0 0130.9-44.8c59-22.7 97.1-74.7 97.1-132.5.1-39.3-17.1-76-48.3-103.3zM472 732a40 40 0 1080 0 40 40 0 10-80 0z" /></svg>'
};
var RightOutline = {
  name: "right",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M765.7 486.8L314.9 134.7A7.97 7.97 0 00302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 000-50.4z" /></svg>'
};
var RotateRightOutline = {
  name: "rotate-right",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><defs><style /></defs><path d="M480.5 251.2c13-1.6 25.9-2.4 38.8-2.5v63.9c0 6.5 7.5 10.1 12.6 6.1L660 217.6c4-3.2 4-9.2 0-12.3l-128-101c-5.1-4-12.6-.4-12.6 6.1l-.2 64c-118.6.5-235.8 53.4-314.6 154.2A399.75 399.75 0 00123.5 631h74.9c-.9-5.3-1.7-10.7-2.4-16.1-5.1-42.1-2.1-84.1 8.9-124.8 11.4-42.2 31-81.1 58.1-115.8 27.2-34.7 60.3-63.2 98.4-84.3 37-20.6 76.9-33.6 119.1-38.8z" /><path d="M880 418H352c-17.7 0-32 14.3-32 32v414c0 17.7 14.3 32 32 32h528c17.7 0 32-14.3 32-32V450c0-17.7-14.3-32-32-32zm-44 402H396V494h440v326z" /></svg>'
};
var RotateLeftOutline = {
  name: "rotate-left",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><defs><style /></defs><path d="M672 418H144c-17.7 0-32 14.3-32 32v414c0 17.7 14.3 32 32 32h528c17.7 0 32-14.3 32-32V450c0-17.7-14.3-32-32-32zm-44 402H188V494h440v326z" /><path d="M819.3 328.5c-78.8-100.7-196-153.6-314.6-154.2l-.2-64c0-6.5-7.6-10.1-12.6-6.1l-128 101c-4 3.1-3.9 9.1 0 12.3L492 318.6c5.1 4 12.7.4 12.6-6.1v-63.9c12.9.1 25.9.9 38.8 2.5 42.1 5.2 82.1 18.2 119 38.7 38.1 21.2 71.2 49.7 98.4 84.3 27.1 34.7 46.7 73.7 58.1 115.8a325.95 325.95 0 016.5 140.9h74.9c14.8-103.6-11.3-213-81-302.3z" /></svg>'
};
var SearchOutline = {
  name: "search",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z" /></svg>'
};
var StarFill = {
  name: "star",
  theme: "fill",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M908.1 353.1l-253.9-36.9L540.7 86.1c-3.1-6.3-8.2-11.4-14.5-14.5-15.8-7.8-35-1.3-42.9 14.5L369.8 316.2l-253.9 36.9c-7 1-13.4 4.3-18.3 9.3a32.05 32.05 0 00.6 45.3l183.7 179.1-43.4 252.9a31.95 31.95 0 0046.4 33.7L512 754l227.1 119.4c6.2 3.3 13.4 4.4 20.3 3.2 17.4-3 29.1-19.5 26.1-36.9l-43.4-252.9 183.7-179.1c5-4.9 8.3-11.3 9.3-18.3 2.7-17.5-9.5-33.7-27-36.3z" /></svg>'
};
var SwapOutline = {
  name: "swap",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M847.9 592H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h605.2L612.9 851c-4.1 5.2-.4 13 6.3 13h72.5c4.9 0 9.5-2.2 12.6-6.1l168.8-214.1c16.5-21 1.6-51.8-25.2-51.8zM872 356H266.8l144.3-183c4.1-5.2.4-13-6.3-13h-72.5c-4.9 0-9.5 2.2-12.6 6.1L150.9 380.2c-16.5 21-1.6 51.8 25.1 51.8h696c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z" /></svg>'
};
var InfoCircleFill = {
  name: "info-circle",
  theme: "fill",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z" /></svg>'
};
var SwapRightOutline = {
  name: "swap-right",
  theme: "outline",
  icon: '<svg viewBox="0 0 1024 1024" focusable="false"><path d="M873.1 596.2l-164-208A32 32 0 00684 376h-64.8c-6.7 0-10.4 7.7-6.3 13l144.3 183H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h695.9c26.8 0 41.7-30.8 25.2-51.8z" /></svg>'
};
var UpOutline = {
  name: "up",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M890.5 755.3L537.9 269.2c-12.8-17.6-39-17.6-51.7 0L133.5 755.3A8 8 0 00140 768h75c5.1 0 9.9-2.5 12.9-6.6L512 369.8l284.1 391.6c3 4.1 7.8 6.6 12.9 6.6h75c6.5 0 10.3-7.4 6.5-12.7z" /></svg>'
};
var UploadOutline = {
  name: "upload",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M400 317.7h73.9V656c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V317.7H624c6.7 0 10.4-7.7 6.3-12.9L518.3 163a8 8 0 00-12.6 0l-112 141.7c-4.1 5.3-.4 13 6.3 13zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z" /></svg>'
};
var VerticalAlignTopOutline = {
  name: "vertical-align-top",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M859.9 168H164.1c-4.5 0-8.1 3.6-8.1 8v60c0 4.4 3.6 8 8.1 8h695.8c4.5 0 8.1-3.6 8.1-8v-60c0-4.4-3.6-8-8.1-8zM518.3 355a8 8 0 00-12.6 0l-112 141.7a7.98 7.98 0 006.3 12.9h73.9V848c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V509.7H624c6.7 0 10.4-7.7 6.3-12.9L518.3 355z" /></svg>'
};
var ZoomOutOutline = {
  name: "zoom-out",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M637 443H325c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h312c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zm284 424L775 721c122.1-148.9 113.6-369.5-26-509-148-148.1-388.4-148.1-537 0-148.1 148.6-148.1 389 0 537 139.5 139.6 360.1 148.1 509 26l146 146c3.2 2.8 8.3 2.8 11 0l43-43c2.8-2.7 2.8-7.8 0-11zM696 696c-118.8 118.7-311.2 118.7-430 0-118.7-118.8-118.7-311.2 0-430 118.8-118.7 311.2-118.7 430 0 118.7 118.8 118.7 311.2 0 430z" /></svg>'
};
var ZoomInOutline = {
  name: "zoom-in",
  theme: "outline",
  icon: '<svg viewBox="64 64 896 896" focusable="false"><path d="M637 443H519V309c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v134H325c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h118v134c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V519h118c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zm284 424L775 721c122.1-148.9 113.6-369.5-26-509-148-148.1-388.4-148.1-537 0-148.1 148.6-148.1 389 0 537 139.5 139.6 360.1 148.1 509 26l146 146c3.2 2.8 8.3 2.8 11 0l43-43c2.8-2.7 2.8-7.8 0-11zM696 696c-118.8 118.7-311.2 118.7-430 0-118.7-118.8-118.7-311.2 0-430 118.8-118.7 311.2-118.7 430 0 118.7 118.8 118.7 311.2 0 430z" /></svg>'
};

// node_modules/@ctrl/tinycolor/dist/module/util.js
function bound01(n, max) {
  if (isOnePointZero(n)) {
    n = "100%";
  }
  var isPercent = isPercentage(n);
  n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));
  if (isPercent) {
    n = parseInt(String(n * max), 10) / 100;
  }
  if (Math.abs(n - max) < 1e-6) {
    return 1;
  }
  if (max === 360) {
    n = (n < 0 ? n % max + max : n % max) / parseFloat(String(max));
  } else {
    n = n % max / parseFloat(String(max));
  }
  return n;
}
function clamp01(val) {
  return Math.min(1, Math.max(0, val));
}
function isOnePointZero(n) {
  return typeof n === "string" && n.indexOf(".") !== -1 && parseFloat(n) === 1;
}
function isPercentage(n) {
  return typeof n === "string" && n.indexOf("%") !== -1;
}
function boundAlpha(a) {
  a = parseFloat(a);
  if (isNaN(a) || a < 0 || a > 1) {
    a = 1;
  }
  return a;
}
function convertToPercentage(n) {
  if (n <= 1) {
    return "".concat(Number(n) * 100, "%");
  }
  return n;
}
function pad2(c) {
  return c.length === 1 ? "0" + c : String(c);
}

// node_modules/@ctrl/tinycolor/dist/module/conversion.js
function rgbToRgb(r, g, b) {
  return {
    r: bound01(r, 255) * 255,
    g: bound01(g, 255) * 255,
    b: bound01(b, 255) * 255
  };
}
function rgbToHsl(r, g, b) {
  r = bound01(r, 255);
  g = bound01(g, 255);
  b = bound01(b, 255);
  var max = Math.max(r, g, b);
  var min = Math.min(r, g, b);
  var h = 0;
  var s = 0;
  var l = (max + min) / 2;
  if (max === min) {
    s = 0;
    h = 0;
  } else {
    var d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
      default:
        break;
    }
    h /= 6;
  }
  return {
    h,
    s,
    l
  };
}
function hue2rgb(p, q, t) {
  if (t < 0) {
    t += 1;
  }
  if (t > 1) {
    t -= 1;
  }
  if (t < 1 / 6) {
    return p + (q - p) * (6 * t);
  }
  if (t < 1 / 2) {
    return q;
  }
  if (t < 2 / 3) {
    return p + (q - p) * (2 / 3 - t) * 6;
  }
  return p;
}
function hslToRgb(h, s, l) {
  var r;
  var g;
  var b;
  h = bound01(h, 360);
  s = bound01(s, 100);
  l = bound01(l, 100);
  if (s === 0) {
    g = l;
    b = l;
    r = l;
  } else {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r = hue2rgb(p, q, h + 1 / 3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1 / 3);
  }
  return {
    r: r * 255,
    g: g * 255,
    b: b * 255
  };
}
function rgbToHsv(r, g, b) {
  r = bound01(r, 255);
  g = bound01(g, 255);
  b = bound01(b, 255);
  var max = Math.max(r, g, b);
  var min = Math.min(r, g, b);
  var h = 0;
  var v = max;
  var d = max - min;
  var s = max === 0 ? 0 : d / max;
  if (max === min) {
    h = 0;
  } else {
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
      default:
        break;
    }
    h /= 6;
  }
  return {
    h,
    s,
    v
  };
}
function hsvToRgb(h, s, v) {
  h = bound01(h, 360) * 6;
  s = bound01(s, 100);
  v = bound01(v, 100);
  var i = Math.floor(h);
  var f = h - i;
  var p = v * (1 - s);
  var q = v * (1 - f * s);
  var t = v * (1 - (1 - f) * s);
  var mod = i % 6;
  var r = [v, q, p, p, t, v][mod];
  var g = [t, v, v, q, p, p][mod];
  var b = [p, p, t, v, v, q][mod];
  return {
    r: r * 255,
    g: g * 255,
    b: b * 255
  };
}
function rgbToHex(r, g, b, allow3Char) {
  var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
  if (allow3Char && hex[0].startsWith(hex[0].charAt(1)) && hex[1].startsWith(hex[1].charAt(1)) && hex[2].startsWith(hex[2].charAt(1))) {
    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
  }
  return hex.join("");
}
function rgbaToHex(r, g, b, a, allow4Char) {
  var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))];
  if (allow4Char && hex[0].startsWith(hex[0].charAt(1)) && hex[1].startsWith(hex[1].charAt(1)) && hex[2].startsWith(hex[2].charAt(1)) && hex[3].startsWith(hex[3].charAt(1))) {
    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
  }
  return hex.join("");
}
function convertDecimalToHex(d) {
  return Math.round(parseFloat(d) * 255).toString(16);
}
function convertHexToDecimal(h) {
  return parseIntFromHex(h) / 255;
}
function parseIntFromHex(val) {
  return parseInt(val, 16);
}
function numberInputToObject(color) {
  return {
    r: color >> 16,
    g: (color & 65280) >> 8,
    b: color & 255
  };
}

// node_modules/@ctrl/tinycolor/dist/module/css-color-names.js
var names = {
  aliceblue: "#f0f8ff",
  antiquewhite: "#faebd7",
  aqua: "#00ffff",
  aquamarine: "#7fffd4",
  azure: "#f0ffff",
  beige: "#f5f5dc",
  bisque: "#ffe4c4",
  black: "#000000",
  blanchedalmond: "#ffebcd",
  blue: "#0000ff",
  blueviolet: "#8a2be2",
  brown: "#a52a2a",
  burlywood: "#deb887",
  cadetblue: "#5f9ea0",
  chartreuse: "#7fff00",
  chocolate: "#d2691e",
  coral: "#ff7f50",
  cornflowerblue: "#6495ed",
  cornsilk: "#fff8dc",
  crimson: "#dc143c",
  cyan: "#00ffff",
  darkblue: "#00008b",
  darkcyan: "#008b8b",
  darkgoldenrod: "#b8860b",
  darkgray: "#a9a9a9",
  darkgreen: "#006400",
  darkgrey: "#a9a9a9",
  darkkhaki: "#bdb76b",
  darkmagenta: "#8b008b",
  darkolivegreen: "#556b2f",
  darkorange: "#ff8c00",
  darkorchid: "#9932cc",
  darkred: "#8b0000",
  darksalmon: "#e9967a",
  darkseagreen: "#8fbc8f",
  darkslateblue: "#483d8b",
  darkslategray: "#2f4f4f",
  darkslategrey: "#2f4f4f",
  darkturquoise: "#00ced1",
  darkviolet: "#9400d3",
  deeppink: "#ff1493",
  deepskyblue: "#00bfff",
  dimgray: "#696969",
  dimgrey: "#696969",
  dodgerblue: "#1e90ff",
  firebrick: "#b22222",
  floralwhite: "#fffaf0",
  forestgreen: "#228b22",
  fuchsia: "#ff00ff",
  gainsboro: "#dcdcdc",
  ghostwhite: "#f8f8ff",
  goldenrod: "#daa520",
  gold: "#ffd700",
  gray: "#808080",
  green: "#008000",
  greenyellow: "#adff2f",
  grey: "#808080",
  honeydew: "#f0fff0",
  hotpink: "#ff69b4",
  indianred: "#cd5c5c",
  indigo: "#4b0082",
  ivory: "#fffff0",
  khaki: "#f0e68c",
  lavenderblush: "#fff0f5",
  lavender: "#e6e6fa",
  lawngreen: "#7cfc00",
  lemonchiffon: "#fffacd",
  lightblue: "#add8e6",
  lightcoral: "#f08080",
  lightcyan: "#e0ffff",
  lightgoldenrodyellow: "#fafad2",
  lightgray: "#d3d3d3",
  lightgreen: "#90ee90",
  lightgrey: "#d3d3d3",
  lightpink: "#ffb6c1",
  lightsalmon: "#ffa07a",
  lightseagreen: "#20b2aa",
  lightskyblue: "#87cefa",
  lightslategray: "#778899",
  lightslategrey: "#778899",
  lightsteelblue: "#b0c4de",
  lightyellow: "#ffffe0",
  lime: "#00ff00",
  limegreen: "#32cd32",
  linen: "#faf0e6",
  magenta: "#ff00ff",
  maroon: "#800000",
  mediumaquamarine: "#66cdaa",
  mediumblue: "#0000cd",
  mediumorchid: "#ba55d3",
  mediumpurple: "#9370db",
  mediumseagreen: "#3cb371",
  mediumslateblue: "#7b68ee",
  mediumspringgreen: "#00fa9a",
  mediumturquoise: "#48d1cc",
  mediumvioletred: "#c71585",
  midnightblue: "#191970",
  mintcream: "#f5fffa",
  mistyrose: "#ffe4e1",
  moccasin: "#ffe4b5",
  navajowhite: "#ffdead",
  navy: "#000080",
  oldlace: "#fdf5e6",
  olive: "#808000",
  olivedrab: "#6b8e23",
  orange: "#ffa500",
  orangered: "#ff4500",
  orchid: "#da70d6",
  palegoldenrod: "#eee8aa",
  palegreen: "#98fb98",
  paleturquoise: "#afeeee",
  palevioletred: "#db7093",
  papayawhip: "#ffefd5",
  peachpuff: "#ffdab9",
  peru: "#cd853f",
  pink: "#ffc0cb",
  plum: "#dda0dd",
  powderblue: "#b0e0e6",
  purple: "#800080",
  rebeccapurple: "#663399",
  red: "#ff0000",
  rosybrown: "#bc8f8f",
  royalblue: "#4169e1",
  saddlebrown: "#8b4513",
  salmon: "#fa8072",
  sandybrown: "#f4a460",
  seagreen: "#2e8b57",
  seashell: "#fff5ee",
  sienna: "#a0522d",
  silver: "#c0c0c0",
  skyblue: "#87ceeb",
  slateblue: "#6a5acd",
  slategray: "#708090",
  slategrey: "#708090",
  snow: "#fffafa",
  springgreen: "#00ff7f",
  steelblue: "#4682b4",
  tan: "#d2b48c",
  teal: "#008080",
  thistle: "#d8bfd8",
  tomato: "#ff6347",
  turquoise: "#40e0d0",
  violet: "#ee82ee",
  wheat: "#f5deb3",
  white: "#ffffff",
  whitesmoke: "#f5f5f5",
  yellow: "#ffff00",
  yellowgreen: "#9acd32"
};

// node_modules/@ctrl/tinycolor/dist/module/format-input.js
function inputToRGB(color) {
  var rgb = {
    r: 0,
    g: 0,
    b: 0
  };
  var a = 1;
  var s = null;
  var v = null;
  var l = null;
  var ok = false;
  var format = false;
  if (typeof color === "string") {
    color = stringInputToObject(color);
  }
  if (typeof color === "object") {
    if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
      rgb = rgbToRgb(color.r, color.g, color.b);
      ok = true;
      format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
      s = convertToPercentage(color.s);
      v = convertToPercentage(color.v);
      rgb = hsvToRgb(color.h, s, v);
      ok = true;
      format = "hsv";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
      s = convertToPercentage(color.s);
      l = convertToPercentage(color.l);
      rgb = hslToRgb(color.h, s, l);
      ok = true;
      format = "hsl";
    }
    if (Object.prototype.hasOwnProperty.call(color, "a")) {
      a = color.a;
    }
  }
  a = boundAlpha(a);
  return {
    ok,
    format: color.format || format,
    r: Math.min(255, Math.max(rgb.r, 0)),
    g: Math.min(255, Math.max(rgb.g, 0)),
    b: Math.min(255, Math.max(rgb.b, 0)),
    a
  };
}
var CSS_INTEGER = "[-\\+]?\\d+%?";
var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
var CSS_UNIT = "(?:".concat(CSS_NUMBER, ")|(?:").concat(CSS_INTEGER, ")");
var PERMISSIVE_MATCH3 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
var PERMISSIVE_MATCH4 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
var matchers = {
  CSS_UNIT: new RegExp(CSS_UNIT),
  rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
  rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
  hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
  hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
  hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
  hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
  hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
  hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
};
function stringInputToObject(color) {
  color = color.trim().toLowerCase();
  if (color.length === 0) {
    return false;
  }
  var named = false;
  if (names[color]) {
    color = names[color];
    named = true;
  } else if (color === "transparent") {
    return {
      r: 0,
      g: 0,
      b: 0,
      a: 0,
      format: "name"
    };
  }
  var match = matchers.rgb.exec(color);
  if (match) {
    return {
      r: match[1],
      g: match[2],
      b: match[3]
    };
  }
  match = matchers.rgba.exec(color);
  if (match) {
    return {
      r: match[1],
      g: match[2],
      b: match[3],
      a: match[4]
    };
  }
  match = matchers.hsl.exec(color);
  if (match) {
    return {
      h: match[1],
      s: match[2],
      l: match[3]
    };
  }
  match = matchers.hsla.exec(color);
  if (match) {
    return {
      h: match[1],
      s: match[2],
      l: match[3],
      a: match[4]
    };
  }
  match = matchers.hsv.exec(color);
  if (match) {
    return {
      h: match[1],
      s: match[2],
      v: match[3]
    };
  }
  match = matchers.hsva.exec(color);
  if (match) {
    return {
      h: match[1],
      s: match[2],
      v: match[3],
      a: match[4]
    };
  }
  match = matchers.hex8.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      a: convertHexToDecimal(match[4]),
      format: named ? "name" : "hex8"
    };
  }
  match = matchers.hex6.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      format: named ? "name" : "hex"
    };
  }
  match = matchers.hex4.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1] + match[1]),
      g: parseIntFromHex(match[2] + match[2]),
      b: parseIntFromHex(match[3] + match[3]),
      a: convertHexToDecimal(match[4] + match[4]),
      format: named ? "name" : "hex8"
    };
  }
  match = matchers.hex3.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1] + match[1]),
      g: parseIntFromHex(match[2] + match[2]),
      b: parseIntFromHex(match[3] + match[3]),
      format: named ? "name" : "hex"
    };
  }
  return false;
}
function isValidCSSUnit(color) {
  return Boolean(matchers.CSS_UNIT.exec(String(color)));
}

// node_modules/@ctrl/tinycolor/dist/module/index.js
var TinyColor = (
  /** @class */
  function() {
    function TinyColor2(color, opts) {
      if (color === void 0) {
        color = "";
      }
      if (opts === void 0) {
        opts = {};
      }
      var _a;
      if (color instanceof TinyColor2) {
        return color;
      }
      if (typeof color === "number") {
        color = numberInputToObject(color);
      }
      this.originalInput = color;
      var rgb = inputToRGB(color);
      this.originalInput = color;
      this.r = rgb.r;
      this.g = rgb.g;
      this.b = rgb.b;
      this.a = rgb.a;
      this.roundA = Math.round(100 * this.a) / 100;
      this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;
      this.gradientType = opts.gradientType;
      if (this.r < 1) {
        this.r = Math.round(this.r);
      }
      if (this.g < 1) {
        this.g = Math.round(this.g);
      }
      if (this.b < 1) {
        this.b = Math.round(this.b);
      }
      this.isValid = rgb.ok;
    }
    TinyColor2.prototype.isDark = function() {
      return this.getBrightness() < 128;
    };
    TinyColor2.prototype.isLight = function() {
      return !this.isDark();
    };
    TinyColor2.prototype.getBrightness = function() {
      var rgb = this.toRgb();
      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
    };
    TinyColor2.prototype.getLuminance = function() {
      var rgb = this.toRgb();
      var R;
      var G;
      var B;
      var RsRGB = rgb.r / 255;
      var GsRGB = rgb.g / 255;
      var BsRGB = rgb.b / 255;
      if (RsRGB <= 0.03928) {
        R = RsRGB / 12.92;
      } else {
        R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
      }
      if (GsRGB <= 0.03928) {
        G = GsRGB / 12.92;
      } else {
        G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
      }
      if (BsRGB <= 0.03928) {
        B = BsRGB / 12.92;
      } else {
        B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
      }
      return 0.2126 * R + 0.7152 * G + 0.0722 * B;
    };
    TinyColor2.prototype.getAlpha = function() {
      return this.a;
    };
    TinyColor2.prototype.setAlpha = function(alpha) {
      this.a = boundAlpha(alpha);
      this.roundA = Math.round(100 * this.a) / 100;
      return this;
    };
    TinyColor2.prototype.isMonochrome = function() {
      var s = this.toHsl().s;
      return s === 0;
    };
    TinyColor2.prototype.toHsv = function() {
      var hsv = rgbToHsv(this.r, this.g, this.b);
      return {
        h: hsv.h * 360,
        s: hsv.s,
        v: hsv.v,
        a: this.a
      };
    };
    TinyColor2.prototype.toHsvString = function() {
      var hsv = rgbToHsv(this.r, this.g, this.b);
      var h = Math.round(hsv.h * 360);
      var s = Math.round(hsv.s * 100);
      var v = Math.round(hsv.v * 100);
      return this.a === 1 ? "hsv(".concat(h, ", ").concat(s, "%, ").concat(v, "%)") : "hsva(".concat(h, ", ").concat(s, "%, ").concat(v, "%, ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toHsl = function() {
      var hsl = rgbToHsl(this.r, this.g, this.b);
      return {
        h: hsl.h * 360,
        s: hsl.s,
        l: hsl.l,
        a: this.a
      };
    };
    TinyColor2.prototype.toHslString = function() {
      var hsl = rgbToHsl(this.r, this.g, this.b);
      var h = Math.round(hsl.h * 360);
      var s = Math.round(hsl.s * 100);
      var l = Math.round(hsl.l * 100);
      return this.a === 1 ? "hsl(".concat(h, ", ").concat(s, "%, ").concat(l, "%)") : "hsla(".concat(h, ", ").concat(s, "%, ").concat(l, "%, ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toHex = function(allow3Char) {
      if (allow3Char === void 0) {
        allow3Char = false;
      }
      return rgbToHex(this.r, this.g, this.b, allow3Char);
    };
    TinyColor2.prototype.toHexString = function(allow3Char) {
      if (allow3Char === void 0) {
        allow3Char = false;
      }
      return "#" + this.toHex(allow3Char);
    };
    TinyColor2.prototype.toHex8 = function(allow4Char) {
      if (allow4Char === void 0) {
        allow4Char = false;
      }
      return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
    };
    TinyColor2.prototype.toHex8String = function(allow4Char) {
      if (allow4Char === void 0) {
        allow4Char = false;
      }
      return "#" + this.toHex8(allow4Char);
    };
    TinyColor2.prototype.toHexShortString = function(allowShortChar) {
      if (allowShortChar === void 0) {
        allowShortChar = false;
      }
      return this.a === 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);
    };
    TinyColor2.prototype.toRgb = function() {
      return {
        r: Math.round(this.r),
        g: Math.round(this.g),
        b: Math.round(this.b),
        a: this.a
      };
    };
    TinyColor2.prototype.toRgbString = function() {
      var r = Math.round(this.r);
      var g = Math.round(this.g);
      var b = Math.round(this.b);
      return this.a === 1 ? "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")") : "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toPercentageRgb = function() {
      var fmt = function(x) {
        return "".concat(Math.round(bound01(x, 255) * 100), "%");
      };
      return {
        r: fmt(this.r),
        g: fmt(this.g),
        b: fmt(this.b),
        a: this.a
      };
    };
    TinyColor2.prototype.toPercentageRgbString = function() {
      var rnd = function(x) {
        return Math.round(bound01(x, 255) * 100);
      };
      return this.a === 1 ? "rgb(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%)") : "rgba(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%, ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toName = function() {
      if (this.a === 0) {
        return "transparent";
      }
      if (this.a < 1) {
        return false;
      }
      var hex = "#" + rgbToHex(this.r, this.g, this.b, false);
      for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        if (hex === value) {
          return key;
        }
      }
      return false;
    };
    TinyColor2.prototype.toString = function(format) {
      var formatSet = Boolean(format);
      format = format !== null && format !== void 0 ? format : this.format;
      var formattedString = false;
      var hasAlpha = this.a < 1 && this.a >= 0;
      var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith("hex") || format === "name");
      if (needsAlphaFormat) {
        if (format === "name" && this.a === 0) {
          return this.toName();
        }
        return this.toRgbString();
      }
      if (format === "rgb") {
        formattedString = this.toRgbString();
      }
      if (format === "prgb") {
        formattedString = this.toPercentageRgbString();
      }
      if (format === "hex" || format === "hex6") {
        formattedString = this.toHexString();
      }
      if (format === "hex3") {
        formattedString = this.toHexString(true);
      }
      if (format === "hex4") {
        formattedString = this.toHex8String(true);
      }
      if (format === "hex8") {
        formattedString = this.toHex8String();
      }
      if (format === "name") {
        formattedString = this.toName();
      }
      if (format === "hsl") {
        formattedString = this.toHslString();
      }
      if (format === "hsv") {
        formattedString = this.toHsvString();
      }
      return formattedString || this.toHexString();
    };
    TinyColor2.prototype.toNumber = function() {
      return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
    };
    TinyColor2.prototype.clone = function() {
      return new TinyColor2(this.toString());
    };
    TinyColor2.prototype.lighten = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.l += amount / 100;
      hsl.l = clamp01(hsl.l);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.brighten = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var rgb = this.toRgb();
      rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
      rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
      rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
      return new TinyColor2(rgb);
    };
    TinyColor2.prototype.darken = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.l -= amount / 100;
      hsl.l = clamp01(hsl.l);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.tint = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      return this.mix("white", amount);
    };
    TinyColor2.prototype.shade = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      return this.mix("black", amount);
    };
    TinyColor2.prototype.desaturate = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.s -= amount / 100;
      hsl.s = clamp01(hsl.s);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.saturate = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.s += amount / 100;
      hsl.s = clamp01(hsl.s);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.greyscale = function() {
      return this.desaturate(100);
    };
    TinyColor2.prototype.spin = function(amount) {
      var hsl = this.toHsl();
      var hue = (hsl.h + amount) % 360;
      hsl.h = hue < 0 ? 360 + hue : hue;
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.mix = function(color, amount) {
      if (amount === void 0) {
        amount = 50;
      }
      var rgb1 = this.toRgb();
      var rgb2 = new TinyColor2(color).toRgb();
      var p = amount / 100;
      var rgba = {
        r: (rgb2.r - rgb1.r) * p + rgb1.r,
        g: (rgb2.g - rgb1.g) * p + rgb1.g,
        b: (rgb2.b - rgb1.b) * p + rgb1.b,
        a: (rgb2.a - rgb1.a) * p + rgb1.a
      };
      return new TinyColor2(rgba);
    };
    TinyColor2.prototype.analogous = function(results, slices) {
      if (results === void 0) {
        results = 6;
      }
      if (slices === void 0) {
        slices = 30;
      }
      var hsl = this.toHsl();
      var part = 360 / slices;
      var ret = [this];
      for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
        hsl.h = (hsl.h + part) % 360;
        ret.push(new TinyColor2(hsl));
      }
      return ret;
    };
    TinyColor2.prototype.complement = function() {
      var hsl = this.toHsl();
      hsl.h = (hsl.h + 180) % 360;
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.monochromatic = function(results) {
      if (results === void 0) {
        results = 6;
      }
      var hsv = this.toHsv();
      var h = hsv.h;
      var s = hsv.s;
      var v = hsv.v;
      var res = [];
      var modification = 1 / results;
      while (results--) {
        res.push(new TinyColor2({
          h,
          s,
          v
        }));
        v = (v + modification) % 1;
      }
      return res;
    };
    TinyColor2.prototype.splitcomplement = function() {
      var hsl = this.toHsl();
      var h = hsl.h;
      return [this, new TinyColor2({
        h: (h + 72) % 360,
        s: hsl.s,
        l: hsl.l
      }), new TinyColor2({
        h: (h + 216) % 360,
        s: hsl.s,
        l: hsl.l
      })];
    };
    TinyColor2.prototype.onBackground = function(background) {
      var fg = this.toRgb();
      var bg = new TinyColor2(background).toRgb();
      var alpha = fg.a + bg.a * (1 - fg.a);
      return new TinyColor2({
        r: (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / alpha,
        g: (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / alpha,
        b: (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / alpha,
        a: alpha
      });
    };
    TinyColor2.prototype.triad = function() {
      return this.polyad(3);
    };
    TinyColor2.prototype.tetrad = function() {
      return this.polyad(4);
    };
    TinyColor2.prototype.polyad = function(n) {
      var hsl = this.toHsl();
      var h = hsl.h;
      var result = [this];
      var increment = 360 / n;
      for (var i = 1; i < n; i++) {
        result.push(new TinyColor2({
          h: (h + i * increment) % 360,
          s: hsl.s,
          l: hsl.l
        }));
      }
      return result;
    };
    TinyColor2.prototype.equals = function(color) {
      return this.toRgbString() === new TinyColor2(color).toRgbString();
    };
    return TinyColor2;
  }()
);

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-core-color.mjs
var presetColors = ["pink", "red", "yellow", "orange", "cyan", "green", "blue", "purple", "geekblue", "magenta", "volcano", "gold", "lime"];
function isPresetColor(color) {
  return presetColors.indexOf(color) !== -1;
}
var hueStep2 = 2;
var saturationStep3 = 0.16;
var saturationStep22 = 0.05;
var brightnessStep12 = 0.05;
var brightnessStep22 = 0.15;
var lightColorCount2 = 5;
var darkColorCount2 = 4;
var darkColorMap2 = [{
  index: 7,
  opacity: 0.15
}, {
  index: 6,
  opacity: 0.25
}, {
  index: 5,
  opacity: 0.3
}, {
  index: 5,
  opacity: 0.45
}, {
  index: 5,
  opacity: 0.65
}, {
  index: 5,
  opacity: 0.85
}, {
  index: 4,
  opacity: 0.9
}, {
  index: 3,
  opacity: 0.95
}, {
  index: 2,
  opacity: 0.97
}, {
  index: 1,
  opacity: 0.98
}];
function toHsv({
  r,
  g,
  b
}) {
  const hsv = rgbToHsv(r, g, b);
  return {
    h: hsv.h * 360,
    s: hsv.s,
    v: hsv.v
  };
}
function toHex({
  r,
  g,
  b
}) {
  return `#${rgbToHex(r, g, b, false)}`;
}
function mix(rgb1, rgb2, amount) {
  const p = amount / 100;
  const rgb = {
    r: (rgb2.r - rgb1.r) * p + rgb1.r,
    g: (rgb2.g - rgb1.g) * p + rgb1.g,
    b: (rgb2.b - rgb1.b) * p + rgb1.b
  };
  return rgb;
}
function getHue2(hsv, i, light) {
  let hue;
  if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {
    hue = light ? Math.round(hsv.h) - hueStep2 * i : Math.round(hsv.h) + hueStep2 * i;
  } else {
    hue = light ? Math.round(hsv.h) + hueStep2 * i : Math.round(hsv.h) - hueStep2 * i;
  }
  if (hue < 0) {
    hue += 360;
  } else if (hue >= 360) {
    hue -= 360;
  }
  return hue;
}
function getSaturation2(hsv, i, light) {
  if (hsv.h === 0 && hsv.s === 0) {
    return hsv.s;
  }
  let saturation;
  if (light) {
    saturation = hsv.s - saturationStep3 * i;
  } else if (i === darkColorCount2) {
    saturation = hsv.s + saturationStep3;
  } else {
    saturation = hsv.s + saturationStep22 * i;
  }
  if (saturation > 1) {
    saturation = 1;
  }
  if (light && i === lightColorCount2 && saturation > 0.1) {
    saturation = 0.1;
  }
  if (saturation < 0.06) {
    saturation = 0.06;
  }
  return Number(saturation.toFixed(2));
}
function getValue2(hsv, i, light) {
  let value;
  if (light) {
    value = hsv.v + brightnessStep12 * i;
  } else {
    value = hsv.v - brightnessStep22 * i;
  }
  if (value > 1) {
    value = 1;
  }
  return Number(value.toFixed(2));
}
function generate2(color, opts = {}) {
  const patterns = [];
  const pColor = inputToRGB(color);
  for (let i = lightColorCount2; i > 0; i -= 1) {
    const hsv = toHsv(pColor);
    const colorString = toHex(inputToRGB({
      h: getHue2(hsv, i, true),
      s: getSaturation2(hsv, i, true),
      v: getValue2(hsv, i, true)
    }));
    patterns.push(colorString);
  }
  patterns.push(toHex(pColor));
  for (let i = 1; i <= darkColorCount2; i += 1) {
    const hsv = toHsv(pColor);
    const colorString = toHex(inputToRGB({
      h: getHue2(hsv, i),
      s: getSaturation2(hsv, i),
      v: getValue2(hsv, i)
    }));
    patterns.push(colorString);
  }
  if (opts.theme === "dark") {
    return darkColorMap2.map(({
      index,
      opacity
    }) => {
      const darkColorString = toHex(mix(inputToRGB(opts.backgroundColor || "#141414"), inputToRGB(patterns[index]), opacity * 100));
      return darkColorString;
    });
  }
  return patterns;
}

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-core-config.mjs
var NZ_CONFIG = new InjectionToken("nz-config");
var dynamicStyleMark = `-ant-${Date.now()}-${Math.random()}`;
function getStyle(globalPrefixCls, theme) {
  const variables = {};
  const formatColor = (color, updater) => {
    let clone = color.clone();
    clone = updater?.(clone) || clone;
    return clone.toRgbString();
  };
  const fillColor = (colorVal, type) => {
    const baseColor = new TinyColor(colorVal);
    const colorPalettes = generate2(baseColor.toRgbString());
    variables[`${type}-color`] = formatColor(baseColor);
    variables[`${type}-color-disabled`] = colorPalettes[1];
    variables[`${type}-color-hover`] = colorPalettes[4];
    variables[`${type}-color-active`] = colorPalettes[7];
    variables[`${type}-color-outline`] = baseColor.clone().setAlpha(0.2).toRgbString();
    variables[`${type}-color-deprecated-bg`] = colorPalettes[1];
    variables[`${type}-color-deprecated-border`] = colorPalettes[3];
  };
  if (theme.primaryColor) {
    fillColor(theme.primaryColor, "primary");
    const primaryColor = new TinyColor(theme.primaryColor);
    const primaryColors = generate2(primaryColor.toRgbString());
    primaryColors.forEach((color, index) => {
      variables[`primary-${index + 1}`] = color;
    });
    variables["primary-color-deprecated-l-35"] = formatColor(primaryColor, (c) => c.lighten(35));
    variables["primary-color-deprecated-l-20"] = formatColor(primaryColor, (c) => c.lighten(20));
    variables["primary-color-deprecated-t-20"] = formatColor(primaryColor, (c) => c.tint(20));
    variables["primary-color-deprecated-t-50"] = formatColor(primaryColor, (c) => c.tint(50));
    variables["primary-color-deprecated-f-12"] = formatColor(primaryColor, (c) => c.setAlpha(c.getAlpha() * 0.12));
    const primaryActiveColor = new TinyColor(primaryColors[0]);
    variables["primary-color-active-deprecated-f-30"] = formatColor(primaryActiveColor, (c) => c.setAlpha(c.getAlpha() * 0.3));
    variables["primary-color-active-deprecated-d-02"] = formatColor(primaryActiveColor, (c) => c.darken(2));
  }
  if (theme.successColor) {
    fillColor(theme.successColor, "success");
  }
  if (theme.warningColor) {
    fillColor(theme.warningColor, "warning");
  }
  if (theme.errorColor) {
    fillColor(theme.errorColor, "error");
  }
  if (theme.infoColor) {
    fillColor(theme.infoColor, "info");
  }
  const cssList = Object.keys(variables).map((key) => `--${globalPrefixCls}-${key}: ${variables[key]};`);
  return `
  :root {
    ${cssList.join("\n")}
  }
  `.trim();
}
function registerTheme(globalPrefixCls, theme, cspNonce) {
  const style2 = getStyle(globalPrefixCls, theme);
  if (canUseDom()) {
    updateCSS(style2, `${dynamicStyleMark}-dynamic-theme`, {
      cspNonce
    });
  } else {
    warn(`NzConfigService: SSR do not support dynamic theme with css variables.`);
  }
}
var isDefined = function(value) {
  return value !== void 0;
};
var defaultPrefixCls = "ant";
var NzConfigService = class _NzConfigService {
  constructor() {
    this.configUpdated$ = new Subject();
    this.config = inject(NZ_CONFIG, {
      optional: true
    }) || {};
    this.cspNonce = inject(CSP_NONCE, {
      optional: true
    });
    if (this.config.theme) {
      registerTheme(this.getConfig().prefixCls?.prefixCls || defaultPrefixCls, this.config.theme, this.cspNonce);
    }
  }
  getConfig() {
    return this.config;
  }
  getConfigForComponent(componentName) {
    return this.config[componentName];
  }
  getConfigChangeEventForComponent(componentName) {
    return this.configUpdated$.pipe(filter((n) => n === componentName), map(() => void 0));
  }
  set(componentName, value) {
    this.config[componentName] = __spreadValues(__spreadValues({}, this.config[componentName]), value);
    if (componentName === "theme" && this.config.theme) {
      registerTheme(this.getConfig().prefixCls?.prefixCls || defaultPrefixCls, this.config.theme, this.cspNonce);
    }
    this.configUpdated$.next(componentName);
  }
  static {
    this.\u0275fac = function NzConfigService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzConfigService)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _NzConfigService,
      factory: _NzConfigService.\u0275fac,
      providedIn: "root"
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzConfigService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
function WithConfig() {
  return function(_value, context) {
    context.addInitializer(function() {
      const nzConfigService = inject(NzConfigService);
      const originalValue = this[context.name];
      let value;
      let assignedByUser = false;
      Object.defineProperty(this, context.name, {
        get: () => {
          const configValue = nzConfigService.getConfigForComponent(this["_nzModuleName"])?.[context.name];
          if (assignedByUser) {
            return value;
          }
          if (isDefined(configValue)) {
            return configValue;
          }
          return originalValue;
        },
        set: (newValue) => {
          assignedByUser = isDefined(newValue);
          value = newValue;
        },
        enumerable: true,
        configurable: true
      });
    });
  };
}

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-icon.mjs
var NZ_ICONS_USED_BY_ZORRO = [BarsOutline, CalendarOutline, CaretUpFill, CaretUpOutline, CaretDownFill, CaretDownOutline, CheckCircleFill, CheckCircleOutline, CheckOutline, ClockCircleOutline, CloseCircleOutline, CloseCircleFill, CloseOutline, CopyOutline, DeleteOutline, DoubleLeftOutline, DoubleRightOutline, DownOutline, EditOutline, EllipsisOutline, ExclamationCircleFill, ExclamationCircleOutline, EyeOutline, FileFill, FileOutline, FilterFill, InfoCircleFill, InfoCircleOutline, LeftOutline, LoadingOutline, PaperClipOutline, QuestionCircleOutline, RightOutline, RotateRightOutline, RotateLeftOutline, StarFill, SearchOutline, StarFill, UploadOutline, VerticalAlignTopOutline, UpOutline, SwapOutline, SwapRightOutline, ZoomInOutline, ZoomOutOutline];
var NZ_ICONS = new InjectionToken("nz_icons");
var NZ_ICON_DEFAULT_TWOTONE_COLOR = new InjectionToken("nz_icon_default_twotone_color");
var DEFAULT_TWOTONE_COLOR = "#1890ff";
var NzIconService = class _NzIconService extends IconService {
  get _disableDynamicLoading() {
    return !this.platform.isBrowser;
  }
  ngOnDestroy() {
    if (this.subscription) {
      this.subscription.unsubscribe();
      this.subscription = null;
    }
  }
  normalizeSvgElement(svg) {
    if (!svg.getAttribute("viewBox")) {
      this._renderer.setAttribute(svg, "viewBox", "0 0 1024 1024");
    }
    if (!svg.getAttribute("width") || !svg.getAttribute("height")) {
      this._renderer.setAttribute(svg, "width", "1em");
      this._renderer.setAttribute(svg, "height", "1em");
    }
    if (!svg.getAttribute("fill")) {
      this._renderer.setAttribute(svg, "fill", "currentColor");
    }
  }
  fetchFromIconfont(opt) {
    const {
      scriptUrl
    } = opt;
    if (this._document && !this.iconfontCache.has(scriptUrl)) {
      const script = this._renderer.createElement("script");
      this._renderer.setAttribute(script, "src", scriptUrl);
      this._renderer.setAttribute(script, "data-namespace", scriptUrl.replace(/^(https?|http):/g, ""));
      this._renderer.appendChild(this._document.body, script);
      this.iconfontCache.add(scriptUrl);
    }
  }
  createIconfontIcon(type) {
    return this._createSVGElementFromString(`<svg><use xlink:href="${type}"></svg>`);
  }
  constructor(rendererFactory, sanitizer, nzConfigService, platform) {
    super(
      rendererFactory,
      inject(HttpBackend, {
        optional: true
      }),
      // TODO: fix the type
      inject(DOCUMENT),
      sanitizer,
      [...NZ_ICONS_USED_BY_ZORRO, ...inject(NZ_ICONS, {
        optional: true
      }) || []]
    );
    this.nzConfigService = nzConfigService;
    this.platform = platform;
    this.configUpdated$ = new Subject();
    this.iconfontCache = /* @__PURE__ */ new Set();
    this.subscription = null;
    this.onConfigChange();
    this.configDefaultTwotoneColor();
    this.configDefaultTheme();
  }
  onConfigChange() {
    this.subscription = this.nzConfigService.getConfigChangeEventForComponent("icon").subscribe(() => {
      this.configDefaultTwotoneColor();
      this.configDefaultTheme();
      this.configUpdated$.next();
    });
  }
  configDefaultTheme() {
    const iconConfig = this.getConfig();
    this.defaultTheme = iconConfig.nzTheme || "outline";
  }
  configDefaultTwotoneColor() {
    const iconConfig = this.getConfig();
    const defaultTwotoneColor = iconConfig.nzTwotoneColor || DEFAULT_TWOTONE_COLOR;
    let primaryColor = DEFAULT_TWOTONE_COLOR;
    if (defaultTwotoneColor) {
      if (defaultTwotoneColor.startsWith("#")) {
        primaryColor = defaultTwotoneColor;
      } else {
        warn("Twotone color must be a hex color!");
      }
    }
    this.twoToneColor = {
      primaryColor
    };
  }
  getConfig() {
    return this.nzConfigService.getConfigForComponent("icon") || {};
  }
  static {
    this.\u0275fac = function NzIconService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzIconService)(\u0275\u0275inject(RendererFactory2), \u0275\u0275inject(DomSanitizer), \u0275\u0275inject(NzConfigService), \u0275\u0275inject(Platform));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _NzIconService,
      factory: _NzIconService.\u0275fac,
      providedIn: "root"
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzIconService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: RendererFactory2
  }, {
    type: DomSanitizer
  }, {
    type: NzConfigService
  }, {
    type: Platform
  }], null);
})();
var NZ_ICONS_PATCH = new InjectionToken("nz_icons_patch");
var NzIconPatchService = class _NzIconPatchService {
  constructor(rootIconService) {
    this.rootIconService = rootIconService;
    this.patched = false;
    this.extraIcons = inject(NZ_ICONS_PATCH, {
      self: true
    });
  }
  doPatch() {
    if (this.patched) {
      return;
    }
    this.extraIcons.forEach((iconDefinition) => this.rootIconService.addIcon(iconDefinition));
    this.patched = true;
  }
  static {
    this.\u0275fac = function NzIconPatchService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzIconPatchService)(\u0275\u0275inject(NzIconService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _NzIconPatchService,
      factory: _NzIconPatchService.\u0275fac
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzIconPatchService, [{
    type: Injectable
  }], () => [{
    type: NzIconService
  }], null);
})();
var NzIconDirective = class _NzIconDirective extends IconDirective {
  set nzSpin(value) {
    this.spin = value;
  }
  set nzType(value) {
    this.type = value;
  }
  set nzTheme(value) {
    this.theme = value;
  }
  set nzTwotoneColor(value) {
    this.twoToneColor = value;
  }
  set nzIconfont(value) {
    this.iconfont = value;
  }
  constructor(ngZone, changeDetectorRef, iconService, renderer) {
    super(iconService);
    this.ngZone = ngZone;
    this.changeDetectorRef = changeDetectorRef;
    this.iconService = iconService;
    this.renderer = renderer;
    this.cacheClassName = null;
    this.nzRotate = 0;
    this.spin = false;
    this.destroy$ = new Subject();
    const iconPatch = inject(NzIconPatchService, {
      optional: true
    });
    if (iconPatch) {
      iconPatch.doPatch();
    }
    this.el = this._elementRef.nativeElement;
  }
  ngOnChanges(changes) {
    const {
      nzType,
      nzTwotoneColor,
      nzSpin,
      nzTheme,
      nzRotate
    } = changes;
    if (nzType || nzTwotoneColor || nzSpin || nzTheme) {
      this.changeIcon2();
    } else if (nzRotate) {
      this.handleRotate(this.el.firstChild);
    } else {
      this._setSVGElement(this.iconService.createIconfontIcon(`#${this.iconfont}`));
    }
  }
  /**
   * If custom content is provided, try to normalize SVG elements.
   */
  ngAfterContentChecked() {
    if (!this.type) {
      const children = this.el.children;
      let length = children.length;
      if (!this.type && children.length) {
        while (length--) {
          const child = children[length];
          if (child.tagName.toLowerCase() === "svg") {
            this.iconService.normalizeSvgElement(child);
          }
        }
      }
    }
  }
  ngOnDestroy() {
    this.destroy$.next();
  }
  /**
   * Replacement of `changeIcon` for more modifications.
   */
  changeIcon2() {
    this.setClassName();
    this.ngZone.runOutsideAngular(() => {
      from(this._changeIcon()).pipe(takeUntil(this.destroy$)).subscribe({
        next: (svgOrRemove) => {
          this.ngZone.run(() => {
            this.changeDetectorRef.detectChanges();
            if (svgOrRemove) {
              this.setSVGData(svgOrRemove);
              this.handleSpin(svgOrRemove);
              this.handleRotate(svgOrRemove);
            }
          });
        },
        error: warn
      });
    });
  }
  handleSpin(svg) {
    if (this.spin || this.type === "loading") {
      this.renderer.addClass(svg, "anticon-spin");
    } else {
      this.renderer.removeClass(svg, "anticon-spin");
    }
  }
  handleRotate(svg) {
    if (this.nzRotate) {
      this.renderer.setAttribute(svg, "style", `transform: rotate(${this.nzRotate}deg)`);
    } else {
      this.renderer.removeAttribute(svg, "style");
    }
  }
  setClassName() {
    if (this.cacheClassName) {
      this.renderer.removeClass(this.el, this.cacheClassName);
    }
    this.cacheClassName = `anticon-${this.type}`;
    this.renderer.addClass(this.el, this.cacheClassName);
  }
  setSVGData(svg) {
    this.renderer.setAttribute(svg, "data-icon", this.type);
    this.renderer.setAttribute(svg, "aria-hidden", "true");
  }
  static {
    this.\u0275fac = function NzIconDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzIconDirective)(\u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(NzIconService), \u0275\u0275directiveInject(Renderer2));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzIconDirective,
      selectors: [["nz-icon"], ["", "nz-icon", ""]],
      hostAttrs: [1, "anticon"],
      inputs: {
        nzSpin: [2, "nzSpin", "nzSpin", booleanAttribute],
        nzRotate: [2, "nzRotate", "nzRotate", numberAttribute],
        nzType: "nzType",
        nzTheme: "nzTheme",
        nzTwotoneColor: "nzTwotoneColor",
        nzIconfont: "nzIconfont"
      },
      exportAs: ["nzIcon"],
      features: [\u0275\u0275InputTransformsFeature, \u0275\u0275InheritDefinitionFeature, \u0275\u0275NgOnChangesFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzIconDirective, [{
    type: Directive,
    args: [{
      selector: "nz-icon,[nz-icon]",
      exportAs: "nzIcon",
      host: {
        class: "anticon"
      }
    }]
  }], () => [{
    type: NgZone
  }, {
    type: ChangeDetectorRef
  }, {
    type: NzIconService
  }, {
    type: Renderer2
  }], {
    nzSpin: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzRotate: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    nzType: [{
      type: Input
    }],
    nzTheme: [{
      type: Input
    }],
    nzTwotoneColor: [{
      type: Input
    }],
    nzIconfont: [{
      type: Input
    }]
  });
})();
var provideNzIcons = (icons) => {
  return makeEnvironmentProviders([{
    provide: NZ_ICONS,
    useValue: icons
  }]);
};
var provideNzIconsPatch = (icons) => {
  return [NzIconPatchService, {
    provide: NZ_ICONS_PATCH,
    useValue: icons
  }];
};
var NzIconModule = class _NzIconModule {
  static forRoot(icons) {
    return {
      ngModule: _NzIconModule,
      providers: [provideNzIcons(icons)]
    };
  }
  static forChild(icons) {
    return {
      ngModule: _NzIconModule,
      providers: [provideNzIconsPatch(icons)]
    };
  }
  static {
    this.\u0275fac = function NzIconModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzIconModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzIconModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzIconModule, [{
    type: NgModule,
    args: [{
      imports: [NzIconDirective],
      exports: [NzIconDirective]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-core-form.mjs
function NzFormItemFeedbackIconComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-icon", 0);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("nzType", ctx_r0.iconType);
  }
}
var NzFormStatusService = class _NzFormStatusService {
  constructor() {
    this.formStatusChanges = new ReplaySubject(1);
  }
  static {
    this.\u0275fac = function NzFormStatusService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzFormStatusService)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _NzFormStatusService,
      factory: _NzFormStatusService.\u0275fac
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzFormStatusService, [{
    type: Injectable
  }], null, null);
})();
var NzFormNoStatusService = class _NzFormNoStatusService {
  constructor() {
    this.noFormStatus = new BehaviorSubject(false);
  }
  static {
    this.\u0275fac = function NzFormNoStatusService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzFormNoStatusService)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _NzFormNoStatusService,
      factory: _NzFormNoStatusService.\u0275fac
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzFormNoStatusService, [{
    type: Injectable
  }], null, null);
})();
var iconTypeMap = {
  error: "close-circle-fill",
  validating: "loading",
  success: "check-circle-fill",
  warning: "exclamation-circle-fill"
};
var NzFormItemFeedbackIconComponent = class _NzFormItemFeedbackIconComponent {
  constructor(cdr) {
    this.cdr = cdr;
    this.status = "";
    this.iconType = null;
  }
  ngOnChanges(_changes) {
    this.updateIcon();
  }
  updateIcon() {
    this.iconType = this.status ? iconTypeMap[this.status] : null;
    this.cdr.markForCheck();
  }
  static {
    this.\u0275fac = function NzFormItemFeedbackIconComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzFormItemFeedbackIconComponent)(\u0275\u0275directiveInject(ChangeDetectorRef));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzFormItemFeedbackIconComponent,
      selectors: [["nz-form-item-feedback-icon"]],
      hostAttrs: [1, "ant-form-item-feedback-icon"],
      hostVars: 8,
      hostBindings: function NzFormItemFeedbackIconComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-form-item-feedback-icon-error", ctx.status === "error")("ant-form-item-feedback-icon-warning", ctx.status === "warning")("ant-form-item-feedback-icon-success", ctx.status === "success")("ant-form-item-feedback-icon-validating", ctx.status === "validating");
        }
      },
      inputs: {
        status: "status"
      },
      exportAs: ["nzFormFeedbackIcon"],
      features: [\u0275\u0275NgOnChangesFeature],
      decls: 1,
      vars: 1,
      consts: [[3, "nzType"]],
      template: function NzFormItemFeedbackIconComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275template(0, NzFormItemFeedbackIconComponent_Conditional_0_Template, 1, 1, "nz-icon", 0);
        }
        if (rf & 2) {
          \u0275\u0275conditional(ctx.iconType ? 0 : -1);
        }
      },
      dependencies: [NzIconModule, NzIconDirective],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzFormItemFeedbackIconComponent, [{
    type: Component,
    args: [{
      selector: "nz-form-item-feedback-icon",
      exportAs: "nzFormFeedbackIcon",
      imports: [NzIconModule],
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    @if (iconType) {
      <nz-icon [nzType]="iconType" />
    }
  `,
      host: {
        class: "ant-form-item-feedback-icon",
        "[class.ant-form-item-feedback-icon-error]": 'status==="error"',
        "[class.ant-form-item-feedback-icon-warning]": 'status==="warning"',
        "[class.ant-form-item-feedback-icon-success]": 'status==="success"',
        "[class.ant-form-item-feedback-icon-validating]": 'status==="validating"'
      }
    }]
  }], () => [{
    type: ChangeDetectorRef
  }], {
    status: [{
      type: Input
    }]
  });
})();
var NzFormPatchModule = class _NzFormPatchModule {
  static {
    this.\u0275fac = function NzFormPatchModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzFormPatchModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzFormPatchModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      imports: [NzFormItemFeedbackIconComponent]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzFormPatchModule, [{
    type: NgModule,
    args: [{
      imports: [NzFormItemFeedbackIconComponent],
      exports: [NzFormItemFeedbackIconComponent]
    }]
  }], null, null);
})();

// node_modules/@angular/core/fesm2022/rxjs-interop.mjs
function takeUntilDestroyed(destroyRef) {
  if (!destroyRef) {
    assertInInjectionContext(takeUntilDestroyed);
    destroyRef = inject(DestroyRef);
  }
  const destroyed$ = new Observable((observer) => {
    const unregisterFn = destroyRef.onDestroy(observer.next.bind(observer));
    return unregisterFn;
  });
  return (source) => {
    return source.pipe(takeUntil(destroyed$));
  };
}
function toSignal(source, options) {
  ngDevMode && assertNotInReactiveContext(toSignal, "Invoking `toSignal` causes new subscriptions every time. Consider moving `toSignal` outside of the reactive context and read the signal value where needed.");
  const requiresCleanup = !options?.manualCleanup;
  requiresCleanup && !options?.injector && assertInInjectionContext(toSignal);
  const cleanupRef = requiresCleanup ? options?.injector?.get(DestroyRef) ?? inject(DestroyRef) : null;
  const equal = makeToSignalEqual(options?.equal);
  let state2;
  if (options?.requireSync) {
    state2 = signal({
      kind: 0
      /* StateKind.NoValue */
    }, {
      equal
    });
  } else {
    state2 = signal({
      kind: 1,
      value: options?.initialValue
    }, {
      equal
    });
  }
  const sub = source.subscribe({
    next: (value) => state2.set({
      kind: 1,
      value
    }),
    error: (error2) => {
      if (options?.rejectErrors) {
        throw error2;
      }
      state2.set({
        kind: 2,
        error: error2
      });
    }
    // Completion of the Observable is meaningless to the signal. Signals don't have a concept of
    // "complete".
  });
  if (options?.requireSync && state2().kind === 0) {
    throw new RuntimeError(601, (typeof ngDevMode === "undefined" || ngDevMode) && "`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.");
  }
  cleanupRef?.onDestroy(sub.unsubscribe.bind(sub));
  return computed(() => {
    const current = state2();
    switch (current.kind) {
      case 1:
        return current.value;
      case 2:
        throw current.error;
      case 0:
        throw new RuntimeError(601, (typeof ngDevMode === "undefined" || ngDevMode) && "`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.");
    }
  }, {
    equal: options?.equal
  });
}
function makeToSignalEqual(userEquality = Object.is) {
  return (a, b) => a.kind === 1 && b.kind === 1 && userEquality(a.value, b.value);
}

// node_modules/tslib/tslib.es6.mjs
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _3, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access) context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done) throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? {
      get: descriptor.get,
      set: descriptor.set
    } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0) continue;
      if (result === null || typeof result !== "object") throw new TypeError("Object expected");
      if (_3 = accept(result.get)) descriptor.get = _3;
      if (_3 = accept(result.set)) descriptor.set = _3;
      if (_3 = accept(result.init)) initializers.unshift(_3);
    } else if (_3 = accept(result)) {
      if (kind === "field") initializers.unshift(_3);
      else descriptor[key] = _3;
    }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-space.mjs
var _c010 = ["*"];
var _c16 = (a0) => ({
  $implicit: a0
});
function NzSpaceComponent_For_2_Conditional_2_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275textInterpolate(ctx_r0.nzSplit);
  }
}
function NzSpaceComponent_For_2_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 3);
    \u0275\u0275template(1, NzSpaceComponent_For_2_Conditional_2_ng_template_1_Template, 1, 1, "ng-template", 4);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    const \u0275$index_2_r3 = ctx_r1.$index;
    const \u0275$count_2_r4 = ctx_r1.$count;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275styleProp("margin-bottom", ctx_r0.nzDirection === "vertical" ? \u0275$index_2_r3 === \u0275$count_2_r4 - 1 ? null : ctx_r0.spaceSize : null, "px")("margin-right", ctx_r0.nzDirection === "horizontal" ? \u0275$index_2_r3 === \u0275$count_2_r4 - 1 ? null : ctx_r0.spaceSize : null, "px");
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r0.nzSplit)("nzStringTemplateOutletContext", \u0275\u0275pureFunction1(6, _c16, \u0275$index_2_r3));
  }
}
function NzSpaceComponent_For_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0);
    \u0275\u0275elementContainer(1, 1);
    \u0275\u0275elementEnd();
    \u0275\u0275template(2, NzSpaceComponent_For_2_Conditional_2_Template, 2, 8, "span", 2);
  }
  if (rf & 2) {
    const item_r5 = ctx.$implicit;
    const \u0275$index_2_r3 = ctx.$index;
    const \u0275$count_2_r4 = ctx.$count;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275styleProp("margin-bottom", ctx_r0.nzDirection === "vertical" ? \u0275$index_2_r3 === \u0275$count_2_r4 - 1 ? null : ctx_r0.spaceSize : null, "px")("margin-right", ctx_r0.nzDirection === "horizontal" ? \u0275$index_2_r3 === \u0275$count_2_r4 - 1 ? null : ctx_r0.spaceSize : null, "px");
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", item_r5);
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r0.nzSplit && !(\u0275$index_2_r3 === \u0275$count_2_r4 - 1) ? 2 : -1);
  }
}
var NZ_SPACE_COMPACT_SIZE = new InjectionToken("NZ_SPACE_COMPACT_SIZE");
var NZ_SPACE_COMPACT_ITEMS = new InjectionToken("NZ_SPACE_COMPACT_ITEMS");
var NZ_SPACE_COMPACT_ITEM_TYPE = new InjectionToken("NZ_SPACE_COMPACT_ITEM_TYPE");
var NzSpaceCompactComponent = class _NzSpaceCompactComponent {
  constructor() {
    this.nzBlock = input(false, {
      transform: booleanAttribute
    });
    this.nzDirection = input("horizontal");
    this.nzSize = input("default");
    this.elementRef = inject(ElementRef);
  }
  static {
    this.\u0275fac = function NzSpaceCompactComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSpaceCompactComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzSpaceCompactComponent,
      selectors: [["nz-space-compact"]],
      hostAttrs: [1, "ant-space-compact"],
      hostVars: 4,
      hostBindings: function NzSpaceCompactComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-space-compact-block", ctx.nzBlock())("ant-space-compact-vertical", ctx.nzDirection() === "vertical");
        }
      },
      inputs: {
        nzBlock: [1, "nzBlock"],
        nzDirection: [1, "nzDirection"],
        nzSize: [1, "nzSize"]
      },
      exportAs: ["nzSpaceCompact"],
      features: [\u0275\u0275ProvidersFeature([{
        provide: NZ_SPACE_COMPACT_SIZE,
        useFactory: () => inject(_NzSpaceCompactComponent).nzSize
      }, {
        provide: NZ_SPACE_COMPACT_ITEMS,
        useFactory: () => signal([])
      }])],
      ngContentSelectors: _c010,
      decls: 1,
      vars: 0,
      template: function NzSpaceCompactComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275projection(0);
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSpaceCompactComponent, [{
    type: Component,
    args: [{
      selector: "nz-space-compact",
      exportAs: "nzSpaceCompact",
      template: `<ng-content></ng-content>`,
      host: {
        class: "ant-space-compact",
        "[class.ant-space-compact-block]": `nzBlock()`,
        "[class.ant-space-compact-vertical]": `nzDirection() === 'vertical'`
      },
      providers: [{
        provide: NZ_SPACE_COMPACT_SIZE,
        useFactory: () => inject(NzSpaceCompactComponent).nzSize
      }, {
        provide: NZ_SPACE_COMPACT_ITEMS,
        useFactory: () => signal([])
      }],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], null, null);
})();
var NzSpaceCompactItemDirective = class _NzSpaceCompactItemDirective {
  get parentElement() {
    return this.elementRef.nativeElement?.parentElement;
  }
  constructor() {
    this.spaceCompactCmp = inject(NzSpaceCompactComponent, {
      host: true,
      optional: true
    });
    this.items = inject(NZ_SPACE_COMPACT_ITEMS, {
      host: true,
      optional: true
    });
    this.type = inject(NZ_SPACE_COMPACT_ITEM_TYPE);
    this.elementRef = inject(ElementRef);
    this.directionality = inject(Directionality);
    this.dir = toSignal(this.directionality.change, {
      initialValue: this.directionality.value
    });
    this.class = computed(() => {
      if (!this.spaceCompactCmp || !this.items) return null;
      if (this.parentElement !== this.spaceCompactCmp.elementRef.nativeElement) return null;
      const items = this.items();
      const direction = this.spaceCompactCmp.nzDirection();
      const classes = [compactItemClassOf(this.type, direction, this.dir() === "rtl")];
      const index = items.indexOf(this);
      const firstIndex = items.findIndex((element) => element);
      if (index === firstIndex) {
        classes.push(compactFirstItemClassOf(this.type, direction));
      } else if (index === items.length - 1) {
        classes.push(compactLastItemClassOf(this.type, direction));
      }
      return classes;
    });
    if (!this.spaceCompactCmp || !this.items) return;
    afterNextRender(() => {
      if (this.parentElement === this.spaceCompactCmp.elementRef.nativeElement) {
        const index = Array.from(this.parentElement.children).indexOf(this.elementRef.nativeElement);
        this.items.update((value) => {
          const newValue = value.slice();
          newValue.splice(index, 0, this);
          return newValue;
        });
      }
    });
  }
  ngOnDestroy() {
    this.items?.update((value) => value.filter((o) => o !== this));
  }
  static {
    this.\u0275fac = function NzSpaceCompactItemDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSpaceCompactItemDirective)();
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzSpaceCompactItemDirective,
      hostVars: 2,
      hostBindings: function NzSpaceCompactItemDirective_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classMap(ctx.class());
        }
      },
      exportAs: ["nzSpaceCompactItem"]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSpaceCompactItemDirective, [{
    type: Directive,
    args: [{
      exportAs: "nzSpaceCompactItem",
      host: {
        "[class]": "class()"
      }
    }]
  }], () => [], null);
})();
function generateCompactClass(type, direction, position) {
  const directionPrefix = direction === "vertical" ? "vertical-" : "";
  return `ant-${type}-compact-${directionPrefix}${position}`;
}
function compactItemClassOf(type, direction, rtl) {
  const rtlSuffix = rtl ? "-rtl" : "";
  return `${generateCompactClass(type, direction, "item")}${rtlSuffix}`;
}
function compactFirstItemClassOf(type, direction) {
  return generateCompactClass(type, direction, "first-item");
}
function compactLastItemClassOf(type, direction) {
  return generateCompactClass(type, direction, "last-item");
}
var NzSpaceItemDirective = class _NzSpaceItemDirective {
  static {
    this.\u0275fac = function NzSpaceItemDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSpaceItemDirective)();
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzSpaceItemDirective,
      selectors: [["", "nzSpaceItem", ""]]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSpaceItemDirective, [{
    type: Directive,
    args: [{
      selector: "[nzSpaceItem]"
    }]
  }], null, null);
})();
var NZ_CONFIG_MODULE_NAME = "space";
var SPACE_SIZE = {
  small: 8,
  middle: 16,
  large: 24
};
var NzSpaceComponent = (() => {
  let _nzSize_decorators;
  let _nzSize_initializers = [];
  let _nzSize_extraInitializers = [];
  return class NzSpaceComponent2 {
    static {
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
      _nzSize_decorators = [WithConfig()];
      __esDecorate(null, null, _nzSize_decorators, {
        kind: "field",
        name: "nzSize",
        static: false,
        private: false,
        access: {
          has: (obj) => "nzSize" in obj,
          get: (obj) => obj.nzSize,
          set: (obj, value) => {
            obj.nzSize = value;
          }
        },
        metadata: _metadata
      }, _nzSize_initializers, _nzSize_extraInitializers);
      if (_metadata) Object.defineProperty(this, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    }
    constructor(nzConfigService, cdr) {
      this.nzConfigService = nzConfigService;
      this.cdr = cdr;
      this._nzModuleName = NZ_CONFIG_MODULE_NAME;
      this.nzDirection = "horizontal";
      this.nzSplit = null;
      this.nzWrap = false;
      this.nzSize = __runInitializers(this, _nzSize_initializers, "small");
      this.items = __runInitializers(this, _nzSize_extraInitializers);
      this.spaceSize = SPACE_SIZE.small;
      this.destroy$ = new Subject();
    }
    updateSpaceItems() {
      const numberSize = typeof this.nzSize === "string" ? SPACE_SIZE[this.nzSize] : this.nzSize;
      this.spaceSize = numberSize / (this.nzSplit ? 2 : 1);
      this.cdr.markForCheck();
    }
    ngOnChanges() {
      this.updateSpaceItems();
      this.mergedAlign = this.nzAlign === void 0 && this.nzDirection === "horizontal" ? "center" : this.nzAlign;
    }
    ngOnDestroy() {
      this.destroy$.next(true);
      this.destroy$.complete();
    }
    ngAfterContentInit() {
      this.updateSpaceItems();
      this.items.changes.pipe(takeUntil(this.destroy$)).subscribe(() => {
        this.cdr.markForCheck();
      });
    }
    static {
      this.\u0275fac = function NzSpaceComponent_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || NzSpaceComponent2)(\u0275\u0275directiveInject(NzConfigService), \u0275\u0275directiveInject(ChangeDetectorRef));
      };
    }
    static {
      this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
        type: NzSpaceComponent2,
        selectors: [["nz-space"], ["", "nz-space", ""]],
        contentQueries: function NzSpaceComponent_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            \u0275\u0275contentQuery(dirIndex, NzSpaceItemDirective, 4, TemplateRef);
          }
          if (rf & 2) {
            let _t;
            \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.items = _t);
          }
        },
        hostAttrs: [1, "ant-space"],
        hostVars: 14,
        hostBindings: function NzSpaceComponent_HostBindings(rf, ctx) {
          if (rf & 2) {
            \u0275\u0275styleProp("flex-wrap", ctx.nzWrap ? "wrap" : null);
            \u0275\u0275classProp("ant-space-horizontal", ctx.nzDirection === "horizontal")("ant-space-vertical", ctx.nzDirection === "vertical")("ant-space-align-start", ctx.mergedAlign === "start")("ant-space-align-end", ctx.mergedAlign === "end")("ant-space-align-center", ctx.mergedAlign === "center")("ant-space-align-baseline", ctx.mergedAlign === "baseline");
          }
        },
        inputs: {
          nzDirection: "nzDirection",
          nzAlign: "nzAlign",
          nzSplit: "nzSplit",
          nzWrap: [2, "nzWrap", "nzWrap", booleanAttribute],
          nzSize: "nzSize"
        },
        exportAs: ["nzSpace"],
        features: [\u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature],
        ngContentSelectors: _c010,
        decls: 3,
        vars: 0,
        consts: [[1, "ant-space-item"], [3, "ngTemplateOutlet"], [1, "ant-space-split", 3, "margin-bottom", "margin-right"], [1, "ant-space-split"], [3, "nzStringTemplateOutlet", "nzStringTemplateOutletContext"]],
        template: function NzSpaceComponent_Template(rf, ctx) {
          if (rf & 1) {
            \u0275\u0275projectionDef();
            \u0275\u0275projection(0);
            \u0275\u0275repeaterCreate(1, NzSpaceComponent_For_2_Template, 3, 6, null, null, \u0275\u0275repeaterTrackByIdentity);
          }
          if (rf & 2) {
            \u0275\u0275advance();
            \u0275\u0275repeater(ctx.items);
          }
        },
        dependencies: [NgTemplateOutlet, NzStringTemplateOutletDirective],
        encapsulation: 2,
        changeDetection: 0
      });
    }
  };
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSpaceComponent, [{
    type: Component,
    args: [{
      selector: "nz-space, [nz-space]",
      exportAs: "nzSpace",
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    <ng-content></ng-content>
    @for (item of items; track item; let last = $last; let index = $index) {
      <div
        class="ant-space-item"
        [style.margin-bottom.px]="nzDirection === 'vertical' ? (last ? null : spaceSize) : null"
        [style.margin-right.px]="nzDirection === 'horizontal' ? (last ? null : spaceSize) : null"
      >
        <ng-container [ngTemplateOutlet]="item"></ng-container>
      </div>
      @if (nzSplit && !last) {
        <span
          class="ant-space-split"
          [style.margin-bottom.px]="nzDirection === 'vertical' ? (last ? null : spaceSize) : null"
          [style.margin-right.px]="nzDirection === 'horizontal' ? (last ? null : spaceSize) : null"
        >
          <ng-template [nzStringTemplateOutlet]="nzSplit" [nzStringTemplateOutletContext]="{ $implicit: index }">{{
            nzSplit
          }}</ng-template>
        </span>
      }
    }
  `,
      host: {
        class: "ant-space",
        "[class.ant-space-horizontal]": 'nzDirection === "horizontal"',
        "[class.ant-space-vertical]": 'nzDirection === "vertical"',
        "[class.ant-space-align-start]": 'mergedAlign === "start"',
        "[class.ant-space-align-end]": 'mergedAlign === "end"',
        "[class.ant-space-align-center]": 'mergedAlign === "center"',
        "[class.ant-space-align-baseline]": 'mergedAlign === "baseline"',
        "[style.flex-wrap]": 'nzWrap ? "wrap" : null'
      },
      imports: [NgTemplateOutlet, NzStringTemplateOutletDirective]
    }]
  }], () => [{
    type: NzConfigService
  }, {
    type: ChangeDetectorRef
  }], {
    nzDirection: [{
      type: Input
    }],
    nzAlign: [{
      type: Input
    }],
    nzSplit: [{
      type: Input
    }],
    nzWrap: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzSize: [{
      type: Input
    }],
    items: [{
      type: ContentChildren,
      args: [NzSpaceItemDirective, {
        read: TemplateRef
      }]
    }]
  });
})();
var NzSpaceModule = class _NzSpaceModule {
  static {
    this.\u0275fac = function NzSpaceModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSpaceModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzSpaceModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSpaceModule, [{
    type: NgModule,
    args: [{
      imports: [NzSpaceComponent, NzSpaceItemDirective, NzSpaceCompactComponent],
      exports: [NzSpaceComponent, NzSpaceItemDirective, NzSpaceCompactComponent]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-input.mjs
var _c011 = ["nz-input-group-slot", ""];
var _c17 = ["*"];
function NzInputGroupSlotComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-icon", 0);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("nzType", ctx_r0.icon);
  }
}
function NzInputGroupSlotComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.template);
  }
}
function NzInputGroupComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 3);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("icon", ctx_r0.nzAddOnBeforeIcon)("template", ctx_r0.nzAddOnBefore);
  }
}
function NzInputGroupComponent_Conditional_0_Conditional_2_ng_template_1_Template(rf, ctx) {
}
function NzInputGroupComponent_Conditional_0_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 6);
    \u0275\u0275template(1, NzInputGroupComponent_Conditional_0_Conditional_2_ng_template_1_Template, 0, 0, "ng-template", 5);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    const affixTemplate_r2 = \u0275\u0275reference(3);
    \u0275\u0275classMap(ctx_r0.affixInGroupStatusCls);
    \u0275\u0275classProp("ant-input-affix-wrapper-disabled", ctx_r0.disabled)("ant-input-affix-wrapper-sm", ctx_r0.isSmall)("ant-input-affix-wrapper-lg", ctx_r0.isLarge)("ant-input-affix-wrapper-focused", ctx_r0.focused);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", affixTemplate_r2);
  }
}
function NzInputGroupComponent_Conditional_0_Conditional_3_ng_template_0_Template(rf, ctx) {
}
function NzInputGroupComponent_Conditional_0_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzInputGroupComponent_Conditional_0_Conditional_3_ng_template_0_Template, 0, 0, "ng-template", 5);
  }
  if (rf & 2) {
    \u0275\u0275nextContext(2);
    const contentTemplate_r3 = \u0275\u0275reference(5);
    \u0275\u0275property("ngTemplateOutlet", contentTemplate_r3);
  }
}
function NzInputGroupComponent_Conditional_0_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 3);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("icon", ctx_r0.nzAddOnAfterIcon)("template", ctx_r0.nzAddOnAfter);
  }
}
function NzInputGroupComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 2);
    \u0275\u0275template(1, NzInputGroupComponent_Conditional_0_Conditional_1_Template, 1, 2, "span", 3)(2, NzInputGroupComponent_Conditional_0_Conditional_2_Template, 2, 11, "span", 4)(3, NzInputGroupComponent_Conditional_0_Conditional_3_Template, 1, 1, null, 5)(4, NzInputGroupComponent_Conditional_0_Conditional_4_Template, 1, 2, "span", 3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r0.nzAddOnBefore || ctx_r0.nzAddOnBeforeIcon ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r0.isAffix || ctx_r0.hasFeedback ? 2 : 3);
    \u0275\u0275advance(2);
    \u0275\u0275conditional(ctx_r0.nzAddOnAfter || ctx_r0.nzAddOnAfterIcon ? 4 : -1);
  }
}
function NzInputGroupComponent_Conditional_1_Conditional_0_ng_template_0_Template(rf, ctx) {
}
function NzInputGroupComponent_Conditional_1_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzInputGroupComponent_Conditional_1_Conditional_0_ng_template_0_Template, 0, 0, "ng-template", 5);
  }
  if (rf & 2) {
    \u0275\u0275nextContext(2);
    const affixTemplate_r2 = \u0275\u0275reference(3);
    \u0275\u0275property("ngTemplateOutlet", affixTemplate_r2);
  }
}
function NzInputGroupComponent_Conditional_1_Conditional_1_ng_template_0_Template(rf, ctx) {
}
function NzInputGroupComponent_Conditional_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzInputGroupComponent_Conditional_1_Conditional_1_ng_template_0_Template, 0, 0, "ng-template", 5);
  }
  if (rf & 2) {
    \u0275\u0275nextContext(2);
    const contentTemplate_r3 = \u0275\u0275reference(5);
    \u0275\u0275property("ngTemplateOutlet", contentTemplate_r3);
  }
}
function NzInputGroupComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzInputGroupComponent_Conditional_1_Conditional_0_Template, 1, 1, null, 5)(1, NzInputGroupComponent_Conditional_1_Conditional_1_Template, 1, 1, null, 5);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r0.isAffix ? 0 : 1);
  }
}
function NzInputGroupComponent_ng_template_2_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 7);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("icon", ctx_r0.nzPrefixIcon)("template", ctx_r0.nzPrefix);
  }
}
function NzInputGroupComponent_ng_template_2_ng_template_1_Template(rf, ctx) {
}
function NzInputGroupComponent_ng_template_2_Conditional_2_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-form-item-feedback-icon", 9);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275property("status", ctx_r0.status);
  }
}
function NzInputGroupComponent_ng_template_2_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 8);
    \u0275\u0275template(1, NzInputGroupComponent_ng_template_2_Conditional_2_Conditional_1_Template, 1, 1, "nz-form-item-feedback-icon", 9);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("icon", ctx_r0.nzSuffixIcon)("template", ctx_r0.nzSuffix);
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r0.isFeedback ? 1 : -1);
  }
}
function NzInputGroupComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzInputGroupComponent_ng_template_2_Conditional_0_Template, 1, 2, "span", 7)(1, NzInputGroupComponent_ng_template_2_ng_template_1_Template, 0, 0, "ng-template", 5)(2, NzInputGroupComponent_ng_template_2_Conditional_2_Template, 2, 3, "span", 8);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    const contentTemplate_r3 = \u0275\u0275reference(5);
    \u0275\u0275conditional(ctx_r0.nzPrefix || ctx_r0.nzPrefixIcon ? 0 : -1);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", contentTemplate_r3);
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r0.nzSuffix || ctx_r0.nzSuffixIcon || ctx_r0.isFeedback ? 2 : -1);
  }
}
function NzInputGroupComponent_ng_template_4_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 10);
    \u0275\u0275element(1, "nz-form-item-feedback-icon", 9);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("status", ctx_r0.status);
  }
}
function NzInputGroupComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275projection(0);
    \u0275\u0275template(1, NzInputGroupComponent_ng_template_4_Conditional_1_Template, 2, 1, "span", 10);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275conditional(!ctx_r0.isAddOn && !ctx_r0.isAffix && ctx_r0.isFeedback ? 1 : -1);
  }
}
var _c24 = ["otpInput"];
function NzInputOtpComponent_For_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "input", 2, 0);
    \u0275\u0275listener("input", function NzInputOtpComponent_For_1_Template_input_input_0_listener($event) {
      const $index_r2 = \u0275\u0275restoreView(_r1).$index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onInput($index_r2, $event));
    })("focus", function NzInputOtpComponent_For_1_Template_input_focus_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onFocus($event));
    })("keydown", function NzInputOtpComponent_For_1_Template_input_keydown_0_listener($event) {
      const $index_r2 = \u0275\u0275restoreView(_r1).$index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onKeyDown($index_r2, $event));
    })("paste", function NzInputOtpComponent_For_1_Template_input_paste_0_listener($event) {
      const $index_r2 = \u0275\u0275restoreView(_r1).$index;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onPaste($index_r2, $event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const item_r4 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275property("nzSize", ctx_r2.nzSize)("formControl", item_r4)("nzStatus", ctx_r2.nzStatus);
  }
}
var _c32 = [[["textarea", "nz-input", ""]]];
var _c42 = ["textarea[nz-input]"];
var NzAutosizeDirective = class _NzAutosizeDirective {
  set nzAutosize(value) {
    const isAutoSizeType = (data) => typeof data !== "string" && typeof data !== "boolean" && (!!data.maxRows || !!data.minRows);
    if (typeof value === "string" || value === true) {
      this.autosize = true;
    } else if (isAutoSizeType(value)) {
      this.autosize = true;
      this.minRows = value.minRows;
      this.maxRows = value.maxRows;
      this.maxHeight = this.setMaxHeight();
      this.minHeight = this.setMinHeight();
    }
  }
  resizeToFitContent(force = false) {
    this.cacheTextareaLineHeight();
    if (!this.cachedLineHeight) {
      return;
    }
    const textarea = this.el;
    const value = textarea.value;
    if (!force && this.minRows === this.previousMinRows && value === this.previousValue) {
      return;
    }
    const placeholderText = textarea.placeholder;
    textarea.classList.add("nz-textarea-autosize-measuring");
    textarea.placeholder = "";
    let height = Math.round((textarea.scrollHeight - this.inputGap) / this.cachedLineHeight) * this.cachedLineHeight + this.inputGap;
    if (this.maxHeight !== null && height > this.maxHeight) {
      height = this.maxHeight;
    }
    if (this.minHeight !== null && height < this.minHeight) {
      height = this.minHeight;
    }
    textarea.style.height = `${height}px`;
    textarea.classList.remove("nz-textarea-autosize-measuring");
    textarea.placeholder = placeholderText;
    if (typeof requestAnimationFrame !== "undefined") {
      this.ngZone.runOutsideAngular(() => requestAnimationFrame(() => {
        const {
          selectionStart,
          selectionEnd
        } = textarea;
        if (!this.destroy$.isStopped && document.activeElement === textarea) {
          textarea.setSelectionRange(selectionStart, selectionEnd);
        }
      }));
    }
    this.previousValue = value;
    this.previousMinRows = this.minRows;
  }
  cacheTextareaLineHeight() {
    if (this.cachedLineHeight >= 0 || !this.el.parentNode) {
      return;
    }
    const textareaClone = this.el.cloneNode(false);
    textareaClone.rows = 1;
    textareaClone.style.position = "absolute";
    textareaClone.style.visibility = "hidden";
    textareaClone.style.border = "none";
    textareaClone.style.padding = "0";
    textareaClone.style.height = "";
    textareaClone.style.minHeight = "";
    textareaClone.style.maxHeight = "";
    textareaClone.style.overflow = "hidden";
    this.el.parentNode.appendChild(textareaClone);
    this.cachedLineHeight = textareaClone.clientHeight - this.inputGap;
    this.el.parentNode.removeChild(textareaClone);
    this.maxHeight = this.setMaxHeight();
    this.minHeight = this.setMinHeight();
  }
  setMinHeight() {
    const minHeight = this.minRows && this.cachedLineHeight ? this.minRows * this.cachedLineHeight + this.inputGap : null;
    if (minHeight !== null) {
      this.el.style.minHeight = `${minHeight}px`;
    }
    return minHeight;
  }
  setMaxHeight() {
    const maxHeight = this.maxRows && this.cachedLineHeight ? this.maxRows * this.cachedLineHeight + this.inputGap : null;
    if (maxHeight !== null) {
      this.el.style.maxHeight = `${maxHeight}px`;
    }
    return maxHeight;
  }
  noopInputHandler() {
  }
  constructor(elementRef, ngZone, platform, resizeService) {
    this.elementRef = elementRef;
    this.ngZone = ngZone;
    this.platform = platform;
    this.resizeService = resizeService;
    this.autosize = false;
    this.el = this.elementRef.nativeElement;
    this.maxHeight = null;
    this.minHeight = null;
    this.destroy$ = new Subject();
    this.inputGap = 10;
  }
  ngAfterViewInit() {
    if (this.autosize && this.platform.isBrowser) {
      this.resizeToFitContent();
      this.resizeService.subscribe().pipe(takeUntil(this.destroy$)).subscribe(() => this.resizeToFitContent(true));
    }
  }
  ngOnDestroy() {
    this.destroy$.next(true);
    this.destroy$.complete();
  }
  ngDoCheck() {
    if (this.autosize && this.platform.isBrowser) {
      this.resizeToFitContent();
    }
  }
  static {
    this.\u0275fac = function NzAutosizeDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzAutosizeDirective)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(Platform), \u0275\u0275directiveInject(NzResizeService));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzAutosizeDirective,
      selectors: [["textarea", "nzAutosize", ""]],
      hostAttrs: ["rows", "1"],
      hostBindings: function NzAutosizeDirective_HostBindings(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275listener("input", function NzAutosizeDirective_input_HostBindingHandler() {
            return ctx.noopInputHandler();
          });
        }
      },
      inputs: {
        nzAutosize: "nzAutosize"
      },
      exportAs: ["nzAutosize"]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzAutosizeDirective, [{
    type: Directive,
    args: [{
      selector: "textarea[nzAutosize]",
      exportAs: "nzAutosize",
      host: {
        // Textarea elements that have the directive applied should have a single row by default.
        // Browsers normally show two rows by default and therefore this limits the minRows binding.
        rows: "1",
        "(input)": "noopInputHandler()"
      }
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: NgZone
  }, {
    type: Platform
  }, {
    type: NzResizeService
  }], {
    nzAutosize: [{
      type: Input
    }]
  });
})();
var NzInputAddonBeforeDirective = class _NzInputAddonBeforeDirective {
  static {
    this.\u0275fac = function NzInputAddonBeforeDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzInputAddonBeforeDirective)();
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzInputAddonBeforeDirective,
      selectors: [["", "nzInputAddonBefore", ""]]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzInputAddonBeforeDirective, [{
    type: Directive,
    args: [{
      selector: "[nzInputAddonBefore]"
    }]
  }], null, null);
})();
var NzInputAddonAfterDirective = class _NzInputAddonAfterDirective {
  static {
    this.\u0275fac = function NzInputAddonAfterDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzInputAddonAfterDirective)();
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzInputAddonAfterDirective,
      selectors: [["", "nzInputAddonAfter", ""]]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzInputAddonAfterDirective, [{
    type: Directive,
    args: [{
      selector: "[nzInputAddonAfter]"
    }]
  }], null, null);
})();
var NzInputPrefixDirective = class _NzInputPrefixDirective {
  static {
    this.\u0275fac = function NzInputPrefixDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzInputPrefixDirective)();
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzInputPrefixDirective,
      selectors: [["", "nzInputPrefix", ""]]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzInputPrefixDirective, [{
    type: Directive,
    args: [{
      selector: "[nzInputPrefix]"
    }]
  }], null, null);
})();
var NzInputSuffixDirective = class _NzInputSuffixDirective {
  static {
    this.\u0275fac = function NzInputSuffixDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzInputSuffixDirective)();
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzInputSuffixDirective,
      selectors: [["", "nzInputSuffix", ""]]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzInputSuffixDirective, [{
    type: Directive,
    args: [{
      selector: "[nzInputSuffix]"
    }]
  }], null, null);
})();
var NzInputGroupSlotComponent = class _NzInputGroupSlotComponent {
  constructor() {
    this.icon = null;
    this.type = null;
    this.template = null;
  }
  static {
    this.\u0275fac = function NzInputGroupSlotComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzInputGroupSlotComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzInputGroupSlotComponent,
      selectors: [["", "nz-input-group-slot", ""]],
      hostVars: 6,
      hostBindings: function NzInputGroupSlotComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-input-group-addon", ctx.type === "addon")("ant-input-prefix", ctx.type === "prefix")("ant-input-suffix", ctx.type === "suffix");
        }
      },
      inputs: {
        icon: "icon",
        type: "type",
        template: "template"
      },
      attrs: _c011,
      ngContentSelectors: _c17,
      decls: 3,
      vars: 2,
      consts: [[3, "nzType"], [4, "nzStringTemplateOutlet"]],
      template: function NzInputGroupSlotComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275template(0, NzInputGroupSlotComponent_Conditional_0_Template, 1, 1, "nz-icon", 0)(1, NzInputGroupSlotComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
          \u0275\u0275projection(2);
        }
        if (rf & 2) {
          \u0275\u0275conditional(ctx.icon ? 0 : -1);
          \u0275\u0275advance();
          \u0275\u0275property("nzStringTemplateOutlet", ctx.template);
        }
      },
      dependencies: [NzIconModule, NzIconDirective, NzOutletModule, NzStringTemplateOutletDirective],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzInputGroupSlotComponent, [{
    type: Component,
    args: [{
      selector: "[nz-input-group-slot]",
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    @if (icon) {
      <nz-icon [nzType]="icon" />
    }
    <ng-container *nzStringTemplateOutlet="template">{{ template }}</ng-container>
    <ng-content></ng-content>
  `,
      host: {
        "[class.ant-input-group-addon]": `type === 'addon'`,
        "[class.ant-input-prefix]": `type === 'prefix'`,
        "[class.ant-input-suffix]": `type === 'suffix'`
      },
      imports: [NzIconModule, NzOutletModule]
    }]
  }], null, {
    icon: [{
      type: Input
    }],
    type: [{
      type: Input
    }],
    template: [{
      type: Input
    }]
  });
})();
var NzInputDirective = class _NzInputDirective {
  get disabled() {
    if (this.ngControl && this.ngControl.disabled !== null) {
      return this.ngControl.disabled;
    }
    return this._disabled;
  }
  set disabled(value) {
    this._disabled = value;
  }
  constructor(renderer, elementRef, hostView, directionality) {
    this.renderer = renderer;
    this.elementRef = elementRef;
    this.hostView = hostView;
    this.directionality = directionality;
    this.nzBorderless = false;
    this.nzSize = "default";
    this.nzStepperless = true;
    this.nzStatus = "";
    this._disabled = false;
    this.disabled$ = new Subject();
    this.dir = "ltr";
    this.prefixCls = "ant-input";
    this.status = "";
    this.statusCls = {};
    this.hasFeedback = false;
    this.feedbackRef = null;
    this.components = [];
    this.ngControl = inject(NgControl, {
      self: true,
      optional: true
    });
    this.finalSize = computed(() => {
      if (this.compactSize) {
        return this.compactSize();
      }
      return this.size();
    });
    this.size = signal(this.nzSize);
    this.compactSize = inject(NZ_SPACE_COMPACT_SIZE, {
      optional: true
    });
    this.destroy$ = inject(NzDestroyService);
    this.nzFormStatusService = inject(NzFormStatusService, {
      optional: true
    });
    this.nzFormNoStatusService = inject(NzFormNoStatusService, {
      optional: true
    });
  }
  ngOnInit() {
    this.nzFormStatusService?.formStatusChanges.pipe(distinctUntilChanged((pre, cur) => {
      return pre.status === cur.status && pre.hasFeedback === cur.hasFeedback;
    }), takeUntil(this.destroy$)).subscribe(({
      status,
      hasFeedback
    }) => {
      this.setStatusStyles(status, hasFeedback);
    });
    if (this.ngControl) {
      this.ngControl.statusChanges?.pipe(filter(() => this.ngControl.disabled !== null), takeUntil(this.destroy$)).subscribe(() => {
        this.disabled$.next(this.ngControl.disabled);
      });
    }
    this.dir = this.directionality.value;
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
    });
  }
  ngOnChanges({
    disabled,
    nzStatus,
    nzSize
  }) {
    if (disabled) {
      this.disabled$.next(this.disabled);
    }
    if (nzStatus) {
      this.setStatusStyles(this.nzStatus, this.hasFeedback);
    }
    if (nzSize) {
      this.size.set(nzSize.currentValue);
    }
  }
  setStatusStyles(status, hasFeedback) {
    this.status = status;
    this.hasFeedback = hasFeedback;
    this.renderFeedbackIcon();
    this.statusCls = getStatusClassNames(this.prefixCls, status, hasFeedback);
    Object.keys(this.statusCls).forEach((status2) => {
      if (this.statusCls[status2]) {
        this.renderer.addClass(this.elementRef.nativeElement, status2);
      } else {
        this.renderer.removeClass(this.elementRef.nativeElement, status2);
      }
    });
  }
  renderFeedbackIcon() {
    if (!this.status || !this.hasFeedback || !!this.nzFormNoStatusService) {
      this.hostView.clear();
      this.feedbackRef = null;
      return;
    }
    this.feedbackRef = this.feedbackRef || this.hostView.createComponent(NzFormItemFeedbackIconComponent);
    this.feedbackRef.location.nativeElement.classList.add("ant-input-suffix");
    this.feedbackRef.instance.status = this.status;
    this.feedbackRef.instance.updateIcon();
  }
  static {
    this.\u0275fac = function NzInputDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzInputDirective)(\u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(Directionality));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzInputDirective,
      selectors: [["input", "nz-input", ""], ["textarea", "nz-input", ""]],
      hostAttrs: [1, "ant-input"],
      hostVars: 13,
      hostBindings: function NzInputDirective_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275attribute("disabled", ctx.disabled || null);
          \u0275\u0275classProp("ant-input-disabled", ctx.disabled)("ant-input-borderless", ctx.nzBorderless)("ant-input-lg", ctx.finalSize() === "large")("ant-input-sm", ctx.finalSize() === "small")("ant-input-rtl", ctx.dir === "rtl")("ant-input-stepperless", ctx.nzStepperless);
        }
      },
      inputs: {
        nzBorderless: [2, "nzBorderless", "nzBorderless", booleanAttribute],
        nzSize: "nzSize",
        nzStepperless: [2, "nzStepperless", "nzStepperless", booleanAttribute],
        nzStatus: "nzStatus",
        disabled: [2, "disabled", "disabled", booleanAttribute]
      },
      exportAs: ["nzInput"],
      features: [\u0275\u0275ProvidersFeature([NzDestroyService, {
        provide: NZ_SPACE_COMPACT_ITEM_TYPE,
        useValue: "input"
      }]), \u0275\u0275InputTransformsFeature, \u0275\u0275HostDirectivesFeature([NzSpaceCompactItemDirective]), \u0275\u0275NgOnChangesFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzInputDirective, [{
    type: Directive,
    args: [{
      selector: "input[nz-input],textarea[nz-input]",
      exportAs: "nzInput",
      host: {
        class: "ant-input",
        "[class.ant-input-disabled]": "disabled",
        "[class.ant-input-borderless]": "nzBorderless",
        "[class.ant-input-lg]": `finalSize() === 'large'`,
        "[class.ant-input-sm]": `finalSize() === 'small'`,
        "[attr.disabled]": "disabled || null",
        "[class.ant-input-rtl]": `dir=== 'rtl'`,
        "[class.ant-input-stepperless]": `nzStepperless`
      },
      hostDirectives: [NzSpaceCompactItemDirective],
      providers: [NzDestroyService, {
        provide: NZ_SPACE_COMPACT_ITEM_TYPE,
        useValue: "input"
      }]
    }]
  }], () => [{
    type: Renderer2
  }, {
    type: ElementRef
  }, {
    type: ViewContainerRef
  }, {
    type: Directionality
  }], {
    nzBorderless: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzSize: [{
      type: Input
    }],
    nzStepperless: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzStatus: [{
      type: Input
    }],
    disabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
var NzInputGroupWhitSuffixOrPrefixDirective = class _NzInputGroupWhitSuffixOrPrefixDirective {
  constructor(elementRef) {
    this.elementRef = elementRef;
  }
  static {
    this.\u0275fac = function NzInputGroupWhitSuffixOrPrefixDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzInputGroupWhitSuffixOrPrefixDirective)(\u0275\u0275directiveInject(ElementRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzInputGroupWhitSuffixOrPrefixDirective,
      selectors: [["nz-input-group", "nzSuffix", ""], ["nz-input-group", "nzPrefix", ""]]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzInputGroupWhitSuffixOrPrefixDirective, [{
    type: Directive,
    args: [{
      selector: `nz-input-group[nzSuffix], nz-input-group[nzPrefix]`
    }]
  }], () => [{
    type: ElementRef
  }], null);
})();
var NzInputGroupComponent = class _NzInputGroupComponent {
  constructor(focusMonitor, elementRef, renderer, cdr, directionality) {
    this.focusMonitor = focusMonitor;
    this.elementRef = elementRef;
    this.renderer = renderer;
    this.cdr = cdr;
    this.directionality = directionality;
    this.nzAddOnBeforeIcon = null;
    this.nzAddOnAfterIcon = null;
    this.nzPrefixIcon = null;
    this.nzSuffixIcon = null;
    this.nzStatus = "";
    this.nzSize = "default";
    this.nzSearch = false;
    this.nzCompact = false;
    this.isLarge = false;
    this.isSmall = false;
    this.isAffix = false;
    this.isAddOn = false;
    this.isFeedback = false;
    this.focused = false;
    this.disabled = false;
    this.dir = "ltr";
    this.prefixCls = "ant-input";
    this.affixStatusCls = {};
    this.groupStatusCls = {};
    this.affixInGroupStatusCls = {};
    this.status = "";
    this.hasFeedback = false;
    this.destroy$ = new Subject();
    this.nzFormStatusService = inject(NzFormStatusService, {
      optional: true
    });
    this.nzFormNoStatusService = inject(NzFormNoStatusService, {
      optional: true
    });
  }
  updateChildrenInputSize() {
    if (this.listOfNzInputDirective) {
      this.listOfNzInputDirective.forEach((item) => item["size"].set(this.nzSize));
    }
  }
  ngOnInit() {
    this.nzFormStatusService?.formStatusChanges.pipe(distinctUntilChanged((pre, cur) => {
      return pre.status === cur.status && pre.hasFeedback === cur.hasFeedback;
    }), takeUntil(this.destroy$)).subscribe(({
      status,
      hasFeedback
    }) => {
      this.setStatusStyles(status, hasFeedback);
    });
    this.focusMonitor.monitor(this.elementRef, true).pipe(takeUntil(this.destroy$)).subscribe((focusOrigin) => {
      this.focused = !!focusOrigin;
      this.cdr.markForCheck();
    });
    this.dir = this.directionality.value;
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
    });
  }
  ngAfterContentInit() {
    this.updateChildrenInputSize();
    const listOfInputChange$ = this.listOfNzInputDirective.changes.pipe(startWith(this.listOfNzInputDirective));
    listOfInputChange$.pipe(switchMap((list) => merge(...[listOfInputChange$, ...list.map((input2) => input2.disabled$)])), mergeMap(() => listOfInputChange$), map((list) => list.some((input2) => input2.disabled)), takeUntil(this.destroy$)).subscribe((disabled) => {
      this.disabled = disabled;
      this.cdr.markForCheck();
    });
  }
  ngOnChanges(changes) {
    const {
      nzSize,
      nzSuffix,
      nzPrefix,
      nzPrefixIcon,
      nzSuffixIcon,
      nzAddOnAfter,
      nzAddOnBefore,
      nzAddOnAfterIcon,
      nzAddOnBeforeIcon,
      nzStatus
    } = changes;
    if (nzSize) {
      this.updateChildrenInputSize();
      this.isLarge = this.nzSize === "large";
      this.isSmall = this.nzSize === "small";
    }
    if (nzSuffix || nzPrefix || nzPrefixIcon || nzSuffixIcon) {
      this.isAffix = !!(this.nzSuffix || this.nzPrefix || this.nzPrefixIcon || this.nzSuffixIcon);
    }
    if (nzAddOnAfter || nzAddOnBefore || nzAddOnAfterIcon || nzAddOnBeforeIcon) {
      this.isAddOn = !!(this.nzAddOnAfter || this.nzAddOnBefore || this.nzAddOnAfterIcon || this.nzAddOnBeforeIcon);
      this.nzFormNoStatusService?.noFormStatus?.next(this.isAddOn);
    }
    if (nzStatus) {
      this.setStatusStyles(this.nzStatus, this.hasFeedback);
    }
  }
  ngOnDestroy() {
    this.focusMonitor.stopMonitoring(this.elementRef);
    this.destroy$.next();
    this.destroy$.complete();
  }
  setStatusStyles(status, hasFeedback) {
    this.status = status;
    this.hasFeedback = hasFeedback;
    this.isFeedback = !!status && hasFeedback;
    const baseAffix = !!(this.nzSuffix || this.nzPrefix || this.nzPrefixIcon || this.nzSuffixIcon);
    this.isAffix = baseAffix || !this.isAddOn && hasFeedback;
    this.affixInGroupStatusCls = this.isAffix || this.isFeedback ? this.affixStatusCls = getStatusClassNames(`${this.prefixCls}-affix-wrapper`, status, hasFeedback) : {};
    this.cdr.markForCheck();
    this.affixStatusCls = getStatusClassNames(`${this.prefixCls}-affix-wrapper`, this.isAddOn ? "" : status, this.isAddOn ? false : hasFeedback);
    this.groupStatusCls = getStatusClassNames(`${this.prefixCls}-group-wrapper`, this.isAddOn ? status : "", this.isAddOn ? hasFeedback : false);
    const statusCls = __spreadValues(__spreadValues({}, this.affixStatusCls), this.groupStatusCls);
    Object.keys(statusCls).forEach((status2) => {
      if (statusCls[status2]) {
        this.renderer.addClass(this.elementRef.nativeElement, status2);
      } else {
        this.renderer.removeClass(this.elementRef.nativeElement, status2);
      }
    });
  }
  static {
    this.\u0275fac = function NzInputGroupComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzInputGroupComponent)(\u0275\u0275directiveInject(FocusMonitor), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(Directionality));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzInputGroupComponent,
      selectors: [["nz-input-group"]],
      contentQueries: function NzInputGroupComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          \u0275\u0275contentQuery(dirIndex, NzInputDirective, 4);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.listOfNzInputDirective = _t);
        }
      },
      hostVars: 40,
      hostBindings: function NzInputGroupComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-input-group-compact", ctx.nzCompact)("ant-input-search-enter-button", ctx.nzSearch)("ant-input-search", ctx.nzSearch)("ant-input-search-rtl", ctx.dir === "rtl")("ant-input-search-sm", ctx.nzSearch && ctx.isSmall)("ant-input-search-large", ctx.nzSearch && ctx.isLarge)("ant-input-group-wrapper", ctx.isAddOn)("ant-input-group-wrapper-rtl", ctx.dir === "rtl")("ant-input-group-wrapper-lg", ctx.isAddOn && ctx.isLarge)("ant-input-group-wrapper-sm", ctx.isAddOn && ctx.isSmall)("ant-input-affix-wrapper", ctx.isAffix && !ctx.isAddOn)("ant-input-affix-wrapper-rtl", ctx.dir === "rtl")("ant-input-affix-wrapper-focused", ctx.isAffix && ctx.focused)("ant-input-affix-wrapper-disabled", ctx.isAffix && ctx.disabled)("ant-input-affix-wrapper-lg", ctx.isAffix && !ctx.isAddOn && ctx.isLarge)("ant-input-affix-wrapper-sm", ctx.isAffix && !ctx.isAddOn && ctx.isSmall)("ant-input-group", !ctx.isAffix && !ctx.isAddOn)("ant-input-group-rtl", ctx.dir === "rtl")("ant-input-group-lg", !ctx.isAffix && !ctx.isAddOn && ctx.isLarge)("ant-input-group-sm", !ctx.isAffix && !ctx.isAddOn && ctx.isSmall);
        }
      },
      inputs: {
        nzAddOnBeforeIcon: "nzAddOnBeforeIcon",
        nzAddOnAfterIcon: "nzAddOnAfterIcon",
        nzPrefixIcon: "nzPrefixIcon",
        nzSuffixIcon: "nzSuffixIcon",
        nzAddOnBefore: "nzAddOnBefore",
        nzAddOnAfter: "nzAddOnAfter",
        nzPrefix: "nzPrefix",
        nzStatus: "nzStatus",
        nzSuffix: "nzSuffix",
        nzSize: "nzSize",
        nzSearch: [2, "nzSearch", "nzSearch", booleanAttribute],
        nzCompact: [2, "nzCompact", "nzCompact", booleanAttribute]
      },
      exportAs: ["nzInputGroup"],
      features: [\u0275\u0275ProvidersFeature([NzFormNoStatusService, {
        provide: NZ_SPACE_COMPACT_ITEM_TYPE,
        useValue: "input"
      }]), \u0275\u0275InputTransformsFeature, \u0275\u0275HostDirectivesFeature([NzSpaceCompactItemDirective]), \u0275\u0275NgOnChangesFeature],
      ngContentSelectors: _c17,
      decls: 6,
      vars: 1,
      consts: [["affixTemplate", ""], ["contentTemplate", ""], [1, "ant-input-wrapper", "ant-input-group"], ["nz-input-group-slot", "", "type", "addon", 3, "icon", "template"], [1, "ant-input-affix-wrapper", 3, "ant-input-affix-wrapper-disabled", "ant-input-affix-wrapper-sm", "ant-input-affix-wrapper-lg", "ant-input-affix-wrapper-focused", "class"], [3, "ngTemplateOutlet"], [1, "ant-input-affix-wrapper"], ["nz-input-group-slot", "", "type", "prefix", 3, "icon", "template"], ["nz-input-group-slot", "", "type", "suffix", 3, "icon", "template"], [3, "status"], ["nz-input-group-slot", "", "type", "suffix"]],
      template: function NzInputGroupComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275template(0, NzInputGroupComponent_Conditional_0_Template, 5, 3, "span", 2)(1, NzInputGroupComponent_Conditional_1_Template, 2, 1)(2, NzInputGroupComponent_ng_template_2_Template, 3, 3, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(4, NzInputGroupComponent_ng_template_4_Template, 2, 1, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
        }
        if (rf & 2) {
          \u0275\u0275conditional(ctx.isAddOn ? 0 : 1);
        }
      },
      dependencies: [NzInputGroupSlotComponent, NgTemplateOutlet, NzFormItemFeedbackIconComponent],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzInputGroupComponent, [{
    type: Component,
    args: [{
      selector: "nz-input-group",
      exportAs: "nzInputGroup",
      imports: [NzInputGroupSlotComponent, NgTemplateOutlet, NzFormItemFeedbackIconComponent],
      encapsulation: ViewEncapsulation.None,
      providers: [NzFormNoStatusService, {
        provide: NZ_SPACE_COMPACT_ITEM_TYPE,
        useValue: "input"
      }],
      template: `
    @if (isAddOn) {
      <span class="ant-input-wrapper ant-input-group">
        @if (nzAddOnBefore || nzAddOnBeforeIcon) {
          <span nz-input-group-slot type="addon" [icon]="nzAddOnBeforeIcon" [template]="nzAddOnBefore"></span>
        }

        @if (isAffix || hasFeedback) {
          <span
            class="ant-input-affix-wrapper"
            [class.ant-input-affix-wrapper-disabled]="disabled"
            [class.ant-input-affix-wrapper-sm]="isSmall"
            [class.ant-input-affix-wrapper-lg]="isLarge"
            [class.ant-input-affix-wrapper-focused]="focused"
            [class]="affixInGroupStatusCls"
          >
            <ng-template [ngTemplateOutlet]="affixTemplate"></ng-template>
          </span>
        } @else {
          <ng-template [ngTemplateOutlet]="contentTemplate" />
        }
        @if (nzAddOnAfter || nzAddOnAfterIcon) {
          <span nz-input-group-slot type="addon" [icon]="nzAddOnAfterIcon" [template]="nzAddOnAfter"></span>
        }
      </span>
    } @else {
      @if (isAffix) {
        <ng-template [ngTemplateOutlet]="affixTemplate" />
      } @else {
        <ng-template [ngTemplateOutlet]="contentTemplate" />
      }
    }

    <!-- affix template -->
    <ng-template #affixTemplate>
      @if (nzPrefix || nzPrefixIcon) {
        <span nz-input-group-slot type="prefix" [icon]="nzPrefixIcon" [template]="nzPrefix"></span>
      }
      <ng-template [ngTemplateOutlet]="contentTemplate" />
      @if (nzSuffix || nzSuffixIcon || isFeedback) {
        <span nz-input-group-slot type="suffix" [icon]="nzSuffixIcon" [template]="nzSuffix">
          @if (isFeedback) {
            <nz-form-item-feedback-icon [status]="status" />
          }
        </span>
      }
    </ng-template>

    <!-- content template -->
    <ng-template #contentTemplate>
      <ng-content></ng-content>
      @if (!isAddOn && !isAffix && isFeedback) {
        <span nz-input-group-slot type="suffix">
          <nz-form-item-feedback-icon [status]="status" />
        </span>
      }
    </ng-template>
  `,
      host: {
        "[class.ant-input-group-compact]": `nzCompact`,
        "[class.ant-input-search-enter-button]": `nzSearch`,
        "[class.ant-input-search]": `nzSearch`,
        "[class.ant-input-search-rtl]": `dir === 'rtl'`,
        "[class.ant-input-search-sm]": `nzSearch && isSmall`,
        "[class.ant-input-search-large]": `nzSearch && isLarge`,
        "[class.ant-input-group-wrapper]": `isAddOn`,
        "[class.ant-input-group-wrapper-rtl]": `dir === 'rtl'`,
        "[class.ant-input-group-wrapper-lg]": `isAddOn && isLarge`,
        "[class.ant-input-group-wrapper-sm]": `isAddOn && isSmall`,
        "[class.ant-input-affix-wrapper]": `isAffix && !isAddOn`,
        "[class.ant-input-affix-wrapper-rtl]": `dir === 'rtl'`,
        "[class.ant-input-affix-wrapper-focused]": `isAffix && focused`,
        "[class.ant-input-affix-wrapper-disabled]": `isAffix && disabled`,
        "[class.ant-input-affix-wrapper-lg]": `isAffix && !isAddOn && isLarge`,
        "[class.ant-input-affix-wrapper-sm]": `isAffix && !isAddOn && isSmall`,
        "[class.ant-input-group]": `!isAffix && !isAddOn`,
        "[class.ant-input-group-rtl]": `dir === 'rtl'`,
        "[class.ant-input-group-lg]": `!isAffix && !isAddOn && isLarge`,
        "[class.ant-input-group-sm]": `!isAffix && !isAddOn && isSmall`
      },
      hostDirectives: [NzSpaceCompactItemDirective],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], () => [{
    type: FocusMonitor
  }, {
    type: ElementRef
  }, {
    type: Renderer2
  }, {
    type: ChangeDetectorRef
  }, {
    type: Directionality
  }], {
    listOfNzInputDirective: [{
      type: ContentChildren,
      args: [NzInputDirective]
    }],
    nzAddOnBeforeIcon: [{
      type: Input
    }],
    nzAddOnAfterIcon: [{
      type: Input
    }],
    nzPrefixIcon: [{
      type: Input
    }],
    nzSuffixIcon: [{
      type: Input
    }],
    nzAddOnBefore: [{
      type: Input
    }],
    nzAddOnAfter: [{
      type: Input
    }],
    nzPrefix: [{
      type: Input
    }],
    nzStatus: [{
      type: Input
    }],
    nzSuffix: [{
      type: Input
    }],
    nzSize: [{
      type: Input
    }],
    nzSearch: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzCompact: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
var NzInputOtpComponent = class _NzInputOtpComponent {
  constructor(formBuilder, nzDestroyService) {
    this.formBuilder = formBuilder;
    this.nzDestroyService = nzDestroyService;
    this.nzLength = 6;
    this.nzSize = "default";
    this.disabled = false;
    this.nzStatus = "";
    this.nzFormatter = (value) => value;
    this.nzMask = null;
    this.internalValue = [];
    this.onTouched = () => {
    };
    this.createFormArray();
  }
  ngOnChanges(changes) {
    if (changes["nzLength"]?.currentValue) {
      this.createFormArray();
    }
    if (changes["disabled"]) {
      this.setDisabledState(this.disabled);
    }
  }
  onInput(index, event2) {
    const inputElement = event2.target;
    const nextInput = this.otpInputs.toArray()[index + 1];
    if (inputElement.value && nextInput) {
      nextInput.nativeElement.focus();
    } else if (!nextInput) {
      this.selectInputBox(index);
    }
  }
  onFocus(event2) {
    const inputElement = event2.target;
    inputElement.select();
  }
  onKeyDown(index, event2) {
    const previousInput = this.otpInputs.toArray()[index - 1];
    if (event2.keyCode === BACKSPACE) {
      event2.preventDefault();
      this.internalValue[index] = "";
      this.otpArray.at(index).setValue("", {
        emitEvent: false
      });
      if (previousInput) {
        this.selectInputBox(index - 1);
      }
      this.emitValue();
    }
  }
  writeValue(value) {
    if (!value) {
      this.otpArray.reset();
      return;
    }
    const controlValues = value.split("");
    this.internalValue = controlValues;
    controlValues.forEach((val, i) => {
      const formattedValue = this.nzFormatter(val);
      const value2 = this.nzMask ? this.nzMask : formattedValue;
      this.otpArray.at(i).setValue(value2, {
        emitEvent: false
      });
    });
  }
  registerOnChange(fn) {
    this.onChangeCallback = fn;
  }
  registerOnTouched(fn) {
    this.onTouched = fn;
  }
  setDisabledState(isDisabled) {
    if (isDisabled) {
      this.otpArray.disable();
    } else {
      this.otpArray.enable();
    }
  }
  onPaste(index, event2) {
    const pastedText = event2.clipboardData?.getData("text") || "";
    if (!pastedText) return;
    let currentIndex = index;
    for (const char of pastedText.split("")) {
      if (currentIndex < this.nzLength) {
        const formattedChar = this.nzFormatter(char);
        this.internalValue[currentIndex] = char;
        const maskedValue = this.nzMask ? this.nzMask : formattedChar;
        this.otpArray.at(currentIndex).setValue(maskedValue, {
          emitEvent: false
        });
        currentIndex++;
      } else {
        break;
      }
    }
    event2.preventDefault();
    this.selectInputBox(currentIndex);
    this.emitValue();
  }
  createFormArray() {
    this.otpArray = this.formBuilder.array([]);
    this.internalValue = new Array(this.nzLength).fill("");
    for (let i = 0; i < this.nzLength; i++) {
      const control = this.formBuilder.nonNullable.control("", [Validators.required]);
      control.valueChanges.pipe(tap((value) => {
        const unmaskedValue = this.nzFormatter(value);
        this.internalValue[i] = unmaskedValue;
        control.setValue(this.nzMask ?? unmaskedValue, {
          emitEvent: false
        });
        this.emitValue();
      }), takeUntil(this.nzDestroyService)).subscribe();
      this.otpArray.push(control);
    }
  }
  emitValue() {
    const result = this.internalValue.join("");
    if (this.onChangeCallback) {
      this.onChangeCallback(result);
    }
  }
  selectInputBox(index) {
    const otpInputArray = this.otpInputs.toArray();
    if (index >= otpInputArray.length) index = otpInputArray.length - 1;
    otpInputArray[index].nativeElement.select();
  }
  static {
    this.\u0275fac = function NzInputOtpComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzInputOtpComponent)(\u0275\u0275directiveInject(FormBuilder), \u0275\u0275directiveInject(NzDestroyService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzInputOtpComponent,
      selectors: [["nz-input-otp"]],
      viewQuery: function NzInputOtpComponent_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(_c24, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.otpInputs = _t);
        }
      },
      hostAttrs: [1, "ant-otp"],
      inputs: {
        nzLength: [2, "nzLength", "nzLength", numberAttribute],
        nzSize: "nzSize",
        disabled: [2, "disabled", "disabled", booleanAttribute],
        nzStatus: "nzStatus",
        nzFormatter: "nzFormatter",
        nzMask: "nzMask"
      },
      exportAs: ["nzInputOtp"],
      features: [\u0275\u0275ProvidersFeature([{
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => _NzInputOtpComponent),
        multi: true
      }, NzDestroyService]), \u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature],
      decls: 2,
      vars: 0,
      consts: [["otpInput", ""], ["nz-input", "", "type", "text", "maxlength", "1", "size", "1", 1, "ant-otp-input", 3, "nzSize", "formControl", "nzStatus"], ["nz-input", "", "type", "text", "maxlength", "1", "size", "1", 1, "ant-otp-input", 3, "input", "focus", "keydown", "paste", "nzSize", "formControl", "nzStatus"]],
      template: function NzInputOtpComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275repeaterCreate(0, NzInputOtpComponent_For_1_Template, 2, 3, "input", 1, \u0275\u0275repeaterTrackByIndex);
        }
        if (rf & 2) {
          \u0275\u0275repeater(ctx.otpArray.controls);
        }
      },
      dependencies: [NzInputDirective, ReactiveFormsModule, DefaultValueAccessor, NgControlStatus, MaxLengthValidator, FormControlDirective],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzInputOtpComponent, [{
    type: Component,
    args: [{
      selector: "nz-input-otp",
      exportAs: "nzInputOtp",
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    @for (item of otpArray.controls; track $index) {
      <input
        nz-input
        class="ant-otp-input"
        type="text"
        maxlength="1"
        size="1"
        [nzSize]="nzSize"
        [formControl]="item"
        [nzStatus]="nzStatus"
        (input)="onInput($index, $event)"
        (focus)="onFocus($event)"
        (keydown)="onKeyDown($index, $event)"
        (paste)="onPaste($index, $event)"
        #otpInput
      />
    }
  `,
      host: {
        class: "ant-otp"
      },
      providers: [{
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => NzInputOtpComponent),
        multi: true
      }, NzDestroyService],
      imports: [NzInputDirective, ReactiveFormsModule]
    }]
  }], () => [{
    type: FormBuilder
  }, {
    type: NzDestroyService
  }], {
    otpInputs: [{
      type: ViewChildren,
      args: ["otpInput"]
    }],
    nzLength: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    nzSize: [{
      type: Input
    }],
    disabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzStatus: [{
      type: Input
    }],
    nzFormatter: [{
      type: Input
    }],
    nzMask: [{
      type: Input
    }]
  });
})();
var NzTextareaCountComponent = class _NzTextareaCountComponent {
  constructor(renderer, elementRef) {
    this.renderer = renderer;
    this.elementRef = elementRef;
    this.nzMaxCharacterCount = 0;
    this.nzComputeCharacterCount = (v) => v.length;
    this.nzFormatter = (c, m) => `${c}${m > 0 ? `/${m}` : ``}`;
    this.configChange$ = new Subject();
    this.destroy$ = new Subject();
  }
  ngAfterContentInit() {
    if (!this.nzInputDirective && isDevMode()) {
      throw new Error("[nz-textarea-count]: Could not find matching textarea[nz-input] child.");
    }
    if (this.nzInputDirective.ngControl) {
      const valueChanges = this.nzInputDirective.ngControl.valueChanges || EMPTY;
      merge(valueChanges, this.configChange$).pipe(takeUntil(this.destroy$), map(() => this.nzInputDirective.ngControl.value), startWith(this.nzInputDirective.ngControl.value)).subscribe((value) => {
        this.setDataCount(value);
      });
    }
  }
  setDataCount(value) {
    const inputValue = isNotNil(value) ? String(value) : "";
    const currentCount = this.nzComputeCharacterCount(inputValue);
    const dataCount = this.nzFormatter(currentCount, this.nzMaxCharacterCount);
    this.renderer.setAttribute(this.elementRef.nativeElement, "data-count", dataCount);
  }
  ngOnDestroy() {
    this.configChange$.complete();
    this.destroy$.next(true);
    this.destroy$.complete();
  }
  static {
    this.\u0275fac = function NzTextareaCountComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTextareaCountComponent)(\u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ElementRef));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzTextareaCountComponent,
      selectors: [["nz-textarea-count"]],
      contentQueries: function NzTextareaCountComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          \u0275\u0275contentQuery(dirIndex, NzInputDirective, 7);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.nzInputDirective = _t.first);
        }
      },
      hostAttrs: [1, "ant-input-textarea-show-count"],
      inputs: {
        nzMaxCharacterCount: [2, "nzMaxCharacterCount", "nzMaxCharacterCount", numberAttribute],
        nzComputeCharacterCount: "nzComputeCharacterCount",
        nzFormatter: "nzFormatter"
      },
      features: [\u0275\u0275InputTransformsFeature],
      ngContentSelectors: _c42,
      decls: 1,
      vars: 0,
      template: function NzTextareaCountComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef(_c32);
          \u0275\u0275projection(0);
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTextareaCountComponent, [{
    type: Component,
    args: [{
      selector: "nz-textarea-count",
      template: ` <ng-content select="textarea[nz-input]"></ng-content> `,
      host: {
        class: "ant-input-textarea-show-count"
      },
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], () => [{
    type: Renderer2
  }, {
    type: ElementRef
  }], {
    nzInputDirective: [{
      type: ContentChild,
      args: [NzInputDirective, {
        static: true
      }]
    }],
    nzMaxCharacterCount: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    nzComputeCharacterCount: [{
      type: Input
    }],
    nzFormatter: [{
      type: Input
    }]
  });
})();
var NzInputModule = class _NzInputModule {
  static {
    this.\u0275fac = function NzInputModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzInputModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzInputModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      imports: [NzInputGroupComponent, NzInputGroupSlotComponent, NzInputOtpComponent]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzInputModule, [{
    type: NgModule,
    args: [{
      imports: [NzTextareaCountComponent, NzInputDirective, NzInputGroupComponent, NzAutosizeDirective, NzInputGroupSlotComponent, NzInputGroupWhitSuffixOrPrefixDirective, NzInputOtpComponent],
      exports: [NzTextareaCountComponent, NzInputDirective, NzInputGroupComponent, NzAutosizeDirective, NzInputGroupWhitSuffixOrPrefixDirective, NzInputOtpComponent]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-grid.mjs
var NzRowDirective = class _NzRowDirective {
  getGutter() {
    const results = [null, null];
    const gutter = this.nzGutter || 0;
    const normalizedGutter = Array.isArray(gutter) ? gutter : [gutter, null];
    normalizedGutter.forEach((g, index) => {
      if (typeof g === "object" && g !== null) {
        results[index] = null;
        Object.keys(gridResponsiveMap).map((screen) => {
          const bp = screen;
          if (this.mediaMatcher.matchMedia(gridResponsiveMap[bp]).matches && g[bp]) {
            results[index] = g[bp];
          }
        });
      } else {
        results[index] = Number(g) || null;
      }
    });
    return results;
  }
  setGutterStyle() {
    const [horizontalGutter, verticalGutter] = this.getGutter();
    this.actualGutter$.next([horizontalGutter, verticalGutter]);
    const renderGutter = (name2, gutter) => {
      const nativeElement = this.elementRef.nativeElement;
      if (gutter !== null) {
        this.renderer.setStyle(nativeElement, name2, `-${gutter / 2}px`);
      }
    };
    renderGutter("margin-left", horizontalGutter);
    renderGutter("margin-right", horizontalGutter);
    renderGutter("margin-top", verticalGutter);
    renderGutter("margin-bottom", verticalGutter);
  }
  constructor(elementRef, renderer, mediaMatcher, ngZone, platform, breakpointService, directionality) {
    this.elementRef = elementRef;
    this.renderer = renderer;
    this.mediaMatcher = mediaMatcher;
    this.ngZone = ngZone;
    this.platform = platform;
    this.breakpointService = breakpointService;
    this.directionality = directionality;
    this.nzAlign = null;
    this.nzJustify = null;
    this.nzGutter = null;
    this.actualGutter$ = new ReplaySubject(1);
    this.dir = "ltr";
    this.destroy$ = new Subject();
  }
  ngOnInit() {
    this.dir = this.directionality.value;
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
    });
    this.setGutterStyle();
  }
  ngOnChanges(changes) {
    if (changes.nzGutter) {
      this.setGutterStyle();
    }
  }
  ngAfterViewInit() {
    if (this.platform.isBrowser) {
      this.breakpointService.subscribe(gridResponsiveMap).pipe(takeUntil(this.destroy$)).subscribe(() => {
        this.setGutterStyle();
      });
    }
  }
  ngOnDestroy() {
    this.destroy$.next(true);
    this.destroy$.complete();
  }
  static {
    this.\u0275fac = function NzRowDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzRowDirective)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(MediaMatcher), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(Platform), \u0275\u0275directiveInject(NzBreakpointService), \u0275\u0275directiveInject(Directionality));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzRowDirective,
      selectors: [["", "nz-row", ""], ["nz-row"], ["nz-form-item"]],
      hostAttrs: [1, "ant-row"],
      hostVars: 20,
      hostBindings: function NzRowDirective_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-row-top", ctx.nzAlign === "top")("ant-row-middle", ctx.nzAlign === "middle")("ant-row-bottom", ctx.nzAlign === "bottom")("ant-row-start", ctx.nzJustify === "start")("ant-row-end", ctx.nzJustify === "end")("ant-row-center", ctx.nzJustify === "center")("ant-row-space-around", ctx.nzJustify === "space-around")("ant-row-space-between", ctx.nzJustify === "space-between")("ant-row-space-evenly", ctx.nzJustify === "space-evenly")("ant-row-rtl", ctx.dir === "rtl");
        }
      },
      inputs: {
        nzAlign: "nzAlign",
        nzJustify: "nzJustify",
        nzGutter: "nzGutter"
      },
      exportAs: ["nzRow"],
      features: [\u0275\u0275NgOnChangesFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzRowDirective, [{
    type: Directive,
    args: [{
      selector: "[nz-row],nz-row,nz-form-item",
      exportAs: "nzRow",
      host: {
        class: "ant-row",
        "[class.ant-row-top]": `nzAlign === 'top'`,
        "[class.ant-row-middle]": `nzAlign === 'middle'`,
        "[class.ant-row-bottom]": `nzAlign === 'bottom'`,
        "[class.ant-row-start]": `nzJustify === 'start'`,
        "[class.ant-row-end]": `nzJustify === 'end'`,
        "[class.ant-row-center]": `nzJustify === 'center'`,
        "[class.ant-row-space-around]": `nzJustify === 'space-around'`,
        "[class.ant-row-space-between]": `nzJustify === 'space-between'`,
        "[class.ant-row-space-evenly]": `nzJustify === 'space-evenly'`,
        "[class.ant-row-rtl]": `dir === "rtl"`
      }
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: Renderer2
  }, {
    type: MediaMatcher
  }, {
    type: NgZone
  }, {
    type: Platform
  }, {
    type: NzBreakpointService
  }, {
    type: Directionality
  }], {
    nzAlign: [{
      type: Input
    }],
    nzJustify: [{
      type: Input
    }],
    nzGutter: [{
      type: Input
    }]
  });
})();
var NzColDirective = class _NzColDirective {
  setHostClassMap() {
    const hostClassMap = __spreadValues({
      ["ant-col"]: true,
      [`ant-col-${this.nzSpan}`]: isNotNil(this.nzSpan),
      [`ant-col-order-${this.nzOrder}`]: isNotNil(this.nzOrder),
      [`ant-col-offset-${this.nzOffset}`]: isNotNil(this.nzOffset),
      [`ant-col-pull-${this.nzPull}`]: isNotNil(this.nzPull),
      [`ant-col-push-${this.nzPush}`]: isNotNil(this.nzPush),
      ["ant-col-rtl"]: this.dir === "rtl"
    }, this.generateClass());
    for (const i in this.classMap) {
      if (this.classMap.hasOwnProperty(i)) {
        this.renderer.removeClass(this.elementRef.nativeElement, i);
      }
    }
    this.classMap = __spreadValues({}, hostClassMap);
    for (const i in this.classMap) {
      if (this.classMap.hasOwnProperty(i) && this.classMap[i]) {
        this.renderer.addClass(this.elementRef.nativeElement, i);
      }
    }
  }
  setHostFlexStyle() {
    this.hostFlexStyle = this.parseFlex(this.nzFlex);
  }
  parseFlex(flex) {
    if (typeof flex === "number") {
      return `${flex} ${flex} auto`;
    } else if (typeof flex === "string") {
      if (/^\d+(\.\d+)?(px|em|rem|%)$/.test(flex)) {
        return `0 0 ${flex}`;
      }
    }
    return flex;
  }
  generateClass() {
    const listOfSizeInputName = ["nzXs", "nzSm", "nzMd", "nzLg", "nzXl", "nzXXl"];
    const listClassMap = {};
    listOfSizeInputName.forEach((name2) => {
      const sizeName = name2.replace("nz", "").toLowerCase();
      if (isNotNil(this[name2])) {
        if (typeof this[name2] === "number" || typeof this[name2] === "string") {
          listClassMap[`ant-col-${sizeName}-${this[name2]}`] = true;
        } else {
          const embedded = this[name2];
          const prefixArray = ["span", "pull", "push", "offset", "order"];
          prefixArray.forEach((prefix) => {
            const prefixClass = prefix === "span" ? "-" : `-${prefix}-`;
            listClassMap[`ant-col-${sizeName}${prefixClass}${embedded[prefix]}`] = embedded && isNotNil(embedded[prefix]);
          });
        }
      }
    });
    return listClassMap;
  }
  constructor(elementRef, renderer, directionality) {
    this.elementRef = elementRef;
    this.renderer = renderer;
    this.directionality = directionality;
    this.classMap = {};
    this.destroy$ = new Subject();
    this.hostFlexStyle = null;
    this.dir = "ltr";
    this.nzFlex = null;
    this.nzSpan = null;
    this.nzOrder = null;
    this.nzOffset = null;
    this.nzPush = null;
    this.nzPull = null;
    this.nzXs = null;
    this.nzSm = null;
    this.nzMd = null;
    this.nzLg = null;
    this.nzXl = null;
    this.nzXXl = null;
    this.nzRowDirective = inject(NzRowDirective, {
      host: true,
      optional: true
    });
  }
  ngOnInit() {
    this.dir = this.directionality.value;
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.setHostClassMap();
    });
    this.setHostClassMap();
    this.setHostFlexStyle();
  }
  ngOnChanges(changes) {
    this.setHostClassMap();
    const {
      nzFlex
    } = changes;
    if (nzFlex) {
      this.setHostFlexStyle();
    }
  }
  ngAfterViewInit() {
    if (this.nzRowDirective) {
      this.nzRowDirective.actualGutter$.pipe(takeUntil(this.destroy$)).subscribe(([horizontalGutter, verticalGutter]) => {
        const renderGutter = (name2, gutter) => {
          const nativeElement = this.elementRef.nativeElement;
          if (gutter !== null) {
            this.renderer.setStyle(nativeElement, name2, `${gutter / 2}px`);
          }
        };
        renderGutter("padding-left", horizontalGutter);
        renderGutter("padding-right", horizontalGutter);
        renderGutter("padding-top", verticalGutter);
        renderGutter("padding-bottom", verticalGutter);
      });
    }
  }
  ngOnDestroy() {
    this.destroy$.next(true);
    this.destroy$.complete();
  }
  static {
    this.\u0275fac = function NzColDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzColDirective)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(Directionality));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzColDirective,
      selectors: [["", "nz-col", ""], ["nz-col"], ["nz-form-control"], ["nz-form-label"]],
      hostVars: 2,
      hostBindings: function NzColDirective_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275styleProp("flex", ctx.hostFlexStyle);
        }
      },
      inputs: {
        nzFlex: "nzFlex",
        nzSpan: "nzSpan",
        nzOrder: "nzOrder",
        nzOffset: "nzOffset",
        nzPush: "nzPush",
        nzPull: "nzPull",
        nzXs: "nzXs",
        nzSm: "nzSm",
        nzMd: "nzMd",
        nzLg: "nzLg",
        nzXl: "nzXl",
        nzXXl: "nzXXl"
      },
      exportAs: ["nzCol"],
      features: [\u0275\u0275NgOnChangesFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzColDirective, [{
    type: Directive,
    args: [{
      selector: "[nz-col],nz-col,nz-form-control,nz-form-label",
      exportAs: "nzCol",
      host: {
        "[style.flex]": "hostFlexStyle"
      }
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: Renderer2
  }, {
    type: Directionality
  }], {
    nzFlex: [{
      type: Input
    }],
    nzSpan: [{
      type: Input
    }],
    nzOrder: [{
      type: Input
    }],
    nzOffset: [{
      type: Input
    }],
    nzPush: [{
      type: Input
    }],
    nzPull: [{
      type: Input
    }],
    nzXs: [{
      type: Input
    }],
    nzSm: [{
      type: Input
    }],
    nzMd: [{
      type: Input
    }],
    nzLg: [{
      type: Input
    }],
    nzXl: [{
      type: Input
    }],
    nzXXl: [{
      type: Input
    }]
  });
})();
var NzGridModule = class _NzGridModule {
  static {
    this.\u0275fac = function NzGridModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzGridModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzGridModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzGridModule, [{
    type: NgModule,
    args: [{
      imports: [NzColDirective, NzRowDirective],
      exports: [NzColDirective, NzRowDirective]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-core-animation.mjs
var AnimationDuration = class {
  static {
    this.SLOW = "0.3s";
  }
  static {
    this.BASE = "0.2s";
  }
  static {
    this.FAST = "0.1s";
  }
  // Tooltip
};
var AnimationCurves = class {
  static {
    this.EASE_BASE_OUT = "cubic-bezier(0.7, 0.3, 0.1, 1)";
  }
  static {
    this.EASE_BASE_IN = "cubic-bezier(0.9, 0, 0.3, 0.7)";
  }
  static {
    this.EASE_OUT = "cubic-bezier(0.215, 0.61, 0.355, 1)";
  }
  static {
    this.EASE_IN = "cubic-bezier(0.55, 0.055, 0.675, 0.19)";
  }
  static {
    this.EASE_IN_OUT = "cubic-bezier(0.645, 0.045, 0.355, 1)";
  }
  static {
    this.EASE_OUT_BACK = "cubic-bezier(0.12, 0.4, 0.29, 1.46)";
  }
  static {
    this.EASE_IN_BACK = "cubic-bezier(0.71, -0.46, 0.88, 0.6)";
  }
  static {
    this.EASE_IN_OUT_BACK = "cubic-bezier(0.71, -0.46, 0.29, 1.46)";
  }
  static {
    this.EASE_OUT_CIRC = "cubic-bezier(0.08, 0.82, 0.17, 1)";
  }
  static {
    this.EASE_IN_CIRC = "cubic-bezier(0.6, 0.04, 0.98, 0.34)";
  }
  static {
    this.EASE_IN_OUT_CIRC = "cubic-bezier(0.78, 0.14, 0.15, 0.86)";
  }
  static {
    this.EASE_OUT_QUINT = "cubic-bezier(0.23, 1, 0.32, 1)";
  }
  static {
    this.EASE_IN_QUINT = "cubic-bezier(0.755, 0.05, 0.855, 0.06)";
  }
  static {
    this.EASE_IN_OUT_QUINT = "cubic-bezier(0.86, 0, 0.07, 1)";
  }
};
var collapseMotion = trigger("collapseMotion", [state("expanded", style({
  height: "*"
})), state("collapsed", style({
  height: 0,
  overflow: "hidden"
})), state("hidden", style({
  height: 0,
  overflow: "hidden",
  borderTopWidth: "0"
})), transition("expanded => collapsed", animate(`150ms ${AnimationCurves.EASE_IN_OUT}`)), transition("expanded => hidden", animate(`150ms ${AnimationCurves.EASE_IN_OUT}`)), transition("collapsed => expanded", animate(`150ms ${AnimationCurves.EASE_IN_OUT}`)), transition("hidden => expanded", animate(`150ms ${AnimationCurves.EASE_IN_OUT}`))]);
var treeCollapseMotion = trigger("treeCollapseMotion", [transition("* => *", [query("nz-tree-node:leave,nz-tree-builtin-node:leave", [style({
  overflow: "hidden"
}), stagger(0, [animate(`150ms ${AnimationCurves.EASE_IN_OUT}`, style({
  height: 0,
  opacity: 0,
  "padding-bottom": 0
}))])], {
  optional: true
}), query("nz-tree-node:enter,nz-tree-builtin-node:enter", [style({
  overflow: "hidden",
  height: 0,
  opacity: 0,
  "padding-bottom": 0
}), stagger(0, [animate(`150ms ${AnimationCurves.EASE_IN_OUT}`, style({
  overflow: "hidden",
  height: "*",
  opacity: "*",
  "padding-bottom": "*"
}))])], {
  optional: true
})])]);
var drawerMaskMotion = trigger("drawerMaskMotion", [transition(":enter", [style({
  opacity: 0
}), animate(`${AnimationDuration.SLOW}`, style({
  opacity: 1
}))]), transition(":leave", [style({
  opacity: 1
}), animate(`${AnimationDuration.SLOW}`, style({
  opacity: 0
}))])]);
var fadeMotion = trigger("fadeMotion", [transition("* => enter", [style({
  opacity: 0
}), animate(`${AnimationDuration.BASE}`, style({
  opacity: 1
}))]), transition("* => leave, :leave", [style({
  opacity: 1
}), animate(`${AnimationDuration.BASE}`, style({
  opacity: 0
}))])]);
var helpMotion = trigger("helpMotion", [transition(":enter", [style({
  opacity: 0,
  transform: "translateY(-5px)"
}), animate(`${AnimationDuration.SLOW} ${AnimationCurves.EASE_IN_OUT}`, style({
  opacity: 1,
  transform: "translateY(0)"
}))]), transition(":leave", [style({
  opacity: 1,
  transform: "translateY(0)"
}), animate(`${AnimationDuration.SLOW} ${AnimationCurves.EASE_IN_OUT}`, style({
  opacity: 0,
  transform: "translateY(-5px)"
}))])]);
var moveUpMotion = trigger("moveUpMotion", [transition("* => enter", [style({
  transformOrigin: "0 0",
  transform: "translateY(-100%)",
  opacity: 0
}), animate(`${AnimationDuration.BASE}`, style({
  transformOrigin: "0 0",
  transform: "translateY(0%)",
  opacity: 1
}))]), transition("* => leave", [style({
  transformOrigin: "0 0",
  transform: "translateY(0%)",
  opacity: 1
}), animate(`${AnimationDuration.BASE}`, style({
  transformOrigin: "0 0",
  transform: "translateY(-100%)",
  opacity: 0
}))])]);
var notificationMotion = trigger("notificationMotion", [state("enterRight", style({
  opacity: 1,
  transform: "translateX(0)"
})), transition("* => enterRight", [style({
  opacity: 0,
  transform: "translateX(5%)"
}), animate("100ms linear")]), state("enterLeft", style({
  opacity: 1,
  transform: "translateX(0)"
})), transition("* => enterLeft", [style({
  opacity: 0,
  transform: "translateX(-5%)"
}), animate("100ms linear")]), state("enterTop", style({
  opacity: 1,
  transform: "translateY(0)"
})), transition("* => enterTop", [style({
  opacity: 0,
  transform: "translateY(-5%)"
}), animate("100ms linear")]), state("enterBottom", style({
  opacity: 1,
  transform: "translateY(0)"
})), transition("* => enterBottom", [style({
  opacity: 0,
  transform: "translateY(5%)"
}), animate("100ms linear")]), state("leave", style({
  opacity: 0,
  transform: "scaleY(0.8)",
  transformOrigin: "0% 0%"
})), transition("* => leave", [style({
  opacity: 1,
  transform: "scaleY(1)",
  transformOrigin: "0% 0%"
}), animate("100ms linear")])]);
var ANIMATION_TRANSITION_IN = `${AnimationDuration.BASE} ${AnimationCurves.EASE_OUT_QUINT}`;
var ANIMATION_TRANSITION_OUT = `${AnimationDuration.BASE} ${AnimationCurves.EASE_IN_QUINT}`;
var slideMotion = trigger("slideMotion", [state("void", style({
  opacity: 0,
  transform: "scaleY(0.8)"
})), state("enter", style({
  opacity: 1,
  transform: "scaleY(1)"
})), transition("void => *", [animate(ANIMATION_TRANSITION_IN)]), transition("* => void", [animate(ANIMATION_TRANSITION_OUT)])]);
var slideAlertMotion = trigger("slideAlertMotion", [transition(":leave", [style({
  opacity: 1,
  transform: "scaleY(1)",
  transformOrigin: "0% 0%"
}), animate(`${AnimationDuration.SLOW} ${AnimationCurves.EASE_IN_OUT_CIRC}`, style({
  opacity: 0,
  transform: "scaleY(0)",
  transformOrigin: "0% 0%"
}))])]);
var tabSwitchMotion = trigger("tabSwitchMotion", [state("leave", style({
  display: "none"
})), transition("* => enter", [style({
  display: "block",
  opacity: 0
}), animate(AnimationDuration.SLOW)]), transition("* => leave, :leave", [style({
  position: "absolute",
  top: 0,
  left: 0,
  width: "100%"
}), animate(AnimationDuration.SLOW, style({
  opacity: 0
})), style({
  display: "none"
})])]);
var thumbMotion = trigger("thumbMotion", [state("from", style({
  transform: "translateX({{ transform }}px)",
  width: "{{ width }}px"
}), {
  params: {
    transform: 0,
    width: 0
  }
}), state("to", style({
  transform: "translateX({{ transform }}px)",
  width: "{{ width }}px"
}), {
  params: {
    transform: 100,
    width: 0
  }
}), transition("from => to", animate(`300ms ${AnimationCurves.EASE_IN_OUT}`))]);
var zoomBigMotion = trigger("zoomBigMotion", [transition("void => active", [style({
  opacity: 0,
  transform: "scale(0.8)"
}), animate(`${AnimationDuration.BASE} ${AnimationCurves.EASE_OUT_CIRC}`, style({
  opacity: 1,
  transform: "scale(1)"
}))]), transition("active => void", [style({
  opacity: 1,
  transform: "scale(1)"
}), animate(`${AnimationDuration.BASE} ${AnimationCurves.EASE_IN_OUT_CIRC}`, style({
  opacity: 0,
  transform: "scale(0.8)"
}))])]);
var zoomBadgeMotion = trigger("zoomBadgeMotion", [transition(":enter", [style({
  opacity: 0,
  transform: "scale(0) translate(50%, -50%)"
}), animate(`${AnimationDuration.SLOW} ${AnimationCurves.EASE_OUT_BACK}`, style({
  opacity: 1,
  transform: "scale(1) translate(50%, -50%)"
}))]), transition(":leave", [style({
  opacity: 1,
  transform: "scale(1) translate(50%, -50%)"
}), animate(`${AnimationDuration.SLOW} ${AnimationCurves.EASE_IN_BACK}`, style({
  opacity: 0,
  transform: "scale(0) translate(50%, -50%)"
}))])]);

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-core-no-animation.mjs
var NzNoAnimationDirective = class _NzNoAnimationDirective {
  constructor() {
    this.animationType = inject(ANIMATION_MODULE_TYPE, {
      optional: true
    });
    this.nzNoAnimation = false;
  }
  static {
    this.\u0275fac = function NzNoAnimationDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzNoAnimationDirective)();
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzNoAnimationDirective,
      selectors: [["", "nzNoAnimation", ""]],
      hostVars: 2,
      hostBindings: function NzNoAnimationDirective_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("nz-animate-disabled", ctx.nzNoAnimation || ctx.animationType === "NoopAnimations");
        }
      },
      inputs: {
        nzNoAnimation: [2, "nzNoAnimation", "nzNoAnimation", booleanAttribute]
      },
      exportAs: ["nzNoAnimation"],
      features: [\u0275\u0275InputTransformsFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzNoAnimationDirective, [{
    type: Directive,
    args: [{
      selector: "[nzNoAnimation]",
      exportAs: "nzNoAnimation",
      host: {
        "[class.nz-animate-disabled]": `nzNoAnimation || animationType === 'NoopAnimations'`
      }
    }]
  }], null, {
    nzNoAnimation: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
var NzNoAnimationModule = class _NzNoAnimationModule {
  static {
    this.\u0275fac = function NzNoAnimationModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzNoAnimationModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzNoAnimationModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzNoAnimationModule, [{
    type: NgModule,
    args: [{
      imports: [NzNoAnimationDirective],
      exports: [NzNoAnimationDirective]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-core-overlay.mjs
var POSITION_MAP = {
  top: new ConnectionPositionPair({
    originX: "center",
    originY: "top"
  }, {
    overlayX: "center",
    overlayY: "bottom"
  }),
  topCenter: new ConnectionPositionPair({
    originX: "center",
    originY: "top"
  }, {
    overlayX: "center",
    overlayY: "bottom"
  }),
  topLeft: new ConnectionPositionPair({
    originX: "start",
    originY: "top"
  }, {
    overlayX: "start",
    overlayY: "bottom"
  }),
  topRight: new ConnectionPositionPair({
    originX: "end",
    originY: "top"
  }, {
    overlayX: "end",
    overlayY: "bottom"
  }),
  right: new ConnectionPositionPair({
    originX: "end",
    originY: "center"
  }, {
    overlayX: "start",
    overlayY: "center"
  }),
  rightTop: new ConnectionPositionPair({
    originX: "end",
    originY: "top"
  }, {
    overlayX: "start",
    overlayY: "top"
  }),
  rightBottom: new ConnectionPositionPair({
    originX: "end",
    originY: "bottom"
  }, {
    overlayX: "start",
    overlayY: "bottom"
  }),
  bottom: new ConnectionPositionPair({
    originX: "center",
    originY: "bottom"
  }, {
    overlayX: "center",
    overlayY: "top"
  }),
  bottomCenter: new ConnectionPositionPair({
    originX: "center",
    originY: "bottom"
  }, {
    overlayX: "center",
    overlayY: "top"
  }),
  bottomLeft: new ConnectionPositionPair({
    originX: "start",
    originY: "bottom"
  }, {
    overlayX: "start",
    overlayY: "top"
  }),
  bottomRight: new ConnectionPositionPair({
    originX: "end",
    originY: "bottom"
  }, {
    overlayX: "end",
    overlayY: "top"
  }),
  left: new ConnectionPositionPair({
    originX: "start",
    originY: "center"
  }, {
    overlayX: "end",
    overlayY: "center"
  }),
  leftTop: new ConnectionPositionPair({
    originX: "start",
    originY: "top"
  }, {
    overlayX: "end",
    overlayY: "top"
  }),
  leftBottom: new ConnectionPositionPair({
    originX: "start",
    originY: "bottom"
  }, {
    overlayX: "end",
    overlayY: "bottom"
  })
};
var DEFAULT_TOOLTIP_POSITIONS = [POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left];
var DEFAULT_CASCADER_POSITIONS = [POSITION_MAP.bottomLeft, POSITION_MAP.bottomRight, POSITION_MAP.topLeft, POSITION_MAP.topRight];
var DEFAULT_MENTION_TOP_POSITIONS = [new ConnectionPositionPair({
  originX: "start",
  originY: "bottom"
}, {
  overlayX: "start",
  overlayY: "bottom"
}), new ConnectionPositionPair({
  originX: "start",
  originY: "bottom"
}, {
  overlayX: "end",
  overlayY: "bottom"
})];
var DEFAULT_MENTION_BOTTOM_POSITIONS = [POSITION_MAP.bottomLeft, new ConnectionPositionPair({
  originX: "start",
  originY: "bottom"
}, {
  overlayX: "end",
  overlayY: "top"
})];
function getPlacementName(position) {
  for (const placement in POSITION_MAP) {
    if (position.connectionPair.originX === POSITION_MAP[placement].originX && position.connectionPair.originY === POSITION_MAP[placement].originY && position.connectionPair.overlayX === POSITION_MAP[placement].overlayX && position.connectionPair.overlayY === POSITION_MAP[placement].overlayY) {
      return placement;
    }
  }
  return void 0;
}
var DATE_PICKER_POSITION_MAP = {
  bottomLeft: new ConnectionPositionPair({
    originX: "start",
    originY: "bottom"
  }, {
    overlayX: "start",
    overlayY: "top"
  }, void 0, 2),
  topLeft: new ConnectionPositionPair({
    originX: "start",
    originY: "top"
  }, {
    overlayX: "start",
    overlayY: "bottom"
  }, void 0, -2),
  bottomRight: new ConnectionPositionPair({
    originX: "end",
    originY: "bottom"
  }, {
    overlayX: "end",
    overlayY: "top"
  }, void 0, 2),
  topRight: new ConnectionPositionPair({
    originX: "end",
    originY: "top"
  }, {
    overlayX: "end",
    overlayY: "bottom"
  }, void 0, -2)
};
var DEFAULT_DATE_PICKER_POSITIONS = [DATE_PICKER_POSITION_MAP.bottomLeft, DATE_PICKER_POSITION_MAP.topLeft, DATE_PICKER_POSITION_MAP.bottomRight, DATE_PICKER_POSITION_MAP.topRight];
var NzConnectedOverlayDirective = class _NzConnectedOverlayDirective {
  constructor(cdkConnectedOverlay, nzDestroyService) {
    this.cdkConnectedOverlay = cdkConnectedOverlay;
    this.nzDestroyService = nzDestroyService;
    this.nzArrowPointAtCenter = false;
    this.cdkConnectedOverlay.backdropClass = "nz-overlay-transparent-backdrop";
    this.cdkConnectedOverlay.positionChange.pipe(takeUntil(this.nzDestroyService)).subscribe((position) => {
      if (this.nzArrowPointAtCenter) {
        this.updateArrowPosition(position);
      }
    });
  }
  updateArrowPosition(position) {
    const originRect = this.getOriginRect();
    const placement = getPlacementName(position);
    let offsetX = 0;
    let offsetY = 0;
    if (placement === "topLeft" || placement === "bottomLeft") {
      offsetX = originRect.width / 2 - 14;
    } else if (placement === "topRight" || placement === "bottomRight") {
      offsetX = -(originRect.width / 2 - 14);
    } else if (placement === "leftTop" || placement === "rightTop") {
      offsetY = originRect.height / 2 - 10;
    } else if (placement === "leftBottom" || placement === "rightBottom") {
      offsetY = -(originRect.height / 2 - 10);
    }
    if (this.cdkConnectedOverlay.offsetX !== offsetX || this.cdkConnectedOverlay.offsetY !== offsetY) {
      this.cdkConnectedOverlay.offsetY = offsetY;
      this.cdkConnectedOverlay.offsetX = offsetX;
      this.cdkConnectedOverlay.overlayRef.updatePosition();
    }
  }
  getFlexibleConnectedPositionStrategyOrigin() {
    if (this.cdkConnectedOverlay.origin instanceof CdkOverlayOrigin) {
      return this.cdkConnectedOverlay.origin.elementRef;
    } else {
      return this.cdkConnectedOverlay.origin;
    }
  }
  getOriginRect() {
    const origin = this.getFlexibleConnectedPositionStrategyOrigin();
    if (origin instanceof ElementRef) {
      return origin.nativeElement.getBoundingClientRect();
    }
    if (origin instanceof Element) {
      return origin.getBoundingClientRect();
    }
    const width = origin.width || 0;
    const height = origin.height || 0;
    return {
      top: origin.y,
      bottom: origin.y + height,
      left: origin.x,
      right: origin.x + width,
      height,
      width
    };
  }
  static {
    this.\u0275fac = function NzConnectedOverlayDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzConnectedOverlayDirective)(\u0275\u0275directiveInject(CdkConnectedOverlay), \u0275\u0275directiveInject(NzDestroyService));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzConnectedOverlayDirective,
      selectors: [["", "cdkConnectedOverlay", "", "nzConnectedOverlay", ""]],
      inputs: {
        nzArrowPointAtCenter: [2, "nzArrowPointAtCenter", "nzArrowPointAtCenter", booleanAttribute]
      },
      exportAs: ["nzConnectedOverlay"],
      features: [\u0275\u0275ProvidersFeature([NzDestroyService]), \u0275\u0275InputTransformsFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzConnectedOverlayDirective, [{
    type: Directive,
    args: [{
      selector: "[cdkConnectedOverlay][nzConnectedOverlay]",
      exportAs: "nzConnectedOverlay",
      providers: [NzDestroyService]
    }]
  }], () => [{
    type: CdkConnectedOverlay
  }, {
    type: NzDestroyService
  }], {
    nzArrowPointAtCenter: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
var NzOverlayModule = class _NzOverlayModule {
  static {
    this.\u0275fac = function NzOverlayModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzOverlayModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzOverlayModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzOverlayModule, [{
    type: NgModule,
    args: [{
      imports: [NzConnectedOverlayDirective],
      exports: [NzConnectedOverlayDirective]
    }]
  }], null, null);
})();
function overlayZIndexSetter(overlayRef, zIndex) {
  if (!zIndex) return;
  overlayRef["_host"].style.zIndex = `${zIndex}`;
}

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-tooltip.mjs
var _c012 = ["overlay"];
function NzToolTipComponent_ng_template_0_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.nzTitle);
  }
}
function NzToolTipComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 2)(1, "div", 3)(2, "div", 4);
    \u0275\u0275element(3, "span", 5);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "div", 6);
    \u0275\u0275template(5, NzToolTipComponent_ng_template_0_ng_container_5_Template, 2, 1, "ng-container", 7);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275styleMap(ctx_r1.nzOverlayStyle);
    \u0275\u0275classMap(ctx_r1._classMap);
    \u0275\u0275classProp("ant-tooltip-rtl", ctx_r1.dir === "rtl");
    \u0275\u0275property("@.disabled", !!(ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation))("nzNoAnimation", ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation)("@zoomBigMotion", "active");
    \u0275\u0275advance(3);
    \u0275\u0275styleMap(ctx_r1._contentStyleMap);
    \u0275\u0275advance();
    \u0275\u0275styleMap(ctx_r1._contentStyleMap);
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r1.nzTitle)("nzStringTemplateOutletContext", ctx_r1.nzTitleContext);
  }
}
var NzTooltipBaseDirective = class _NzTooltipBaseDirective {
  /**
   * This true title that would be used in other parts on this component.
   */
  get _title() {
    return this.title || this.directiveTitle || null;
  }
  get _content() {
    return this.content || this.directiveContent || null;
  }
  get _trigger() {
    return typeof this.trigger !== "undefined" ? this.trigger : "hover";
  }
  get _placement() {
    const p = this.placement;
    return Array.isArray(p) && p.length > 0 ? p : typeof p === "string" && p ? [p] : ["top"];
  }
  get _visible() {
    return (typeof this.visible !== "undefined" ? this.visible : this.internalVisible) || false;
  }
  get _mouseEnterDelay() {
    return this.mouseEnterDelay || 0.15;
  }
  get _mouseLeaveDelay() {
    return this.mouseLeaveDelay || 0.1;
  }
  get _overlayClassName() {
    return this.overlayClassName || null;
  }
  get _overlayStyle() {
    return this.overlayStyle || null;
  }
  getProxyPropertyMap() {
    return {
      noAnimation: ["noAnimation", () => !!this.noAnimation]
    };
  }
  constructor(componentType) {
    this.componentType = componentType;
    this.visibleChange = new EventEmitter();
    this.internalVisible = false;
    this.destroy$ = new Subject();
    this.triggerDisposables = [];
    this.elementRef = inject(ElementRef);
    this.hostView = inject(ViewContainerRef);
    this.renderer = inject(Renderer2);
    this.noAnimation = inject(NzNoAnimationDirective, {
      host: true,
      optional: true
    });
    this.nzConfigService = inject(NzConfigService);
    this.platformId = inject(PLATFORM_ID);
  }
  ngAfterViewInit() {
    if (isPlatformBrowser(this.platformId)) {
      this.createComponent();
      this.registerTriggers();
    }
  }
  ngOnChanges(changes) {
    const {
      trigger: trigger2
    } = changes;
    if (trigger2 && !trigger2.isFirstChange()) {
      this.registerTriggers();
    }
    if (this.component) {
      this.updatePropertiesByChanges(changes);
    }
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
    this.clearTogglingTimer();
    this.removeTriggerListeners();
  }
  show() {
    this.component?.show();
  }
  hide() {
    this.component?.hide();
  }
  /**
   * Force the component to update its position.
   */
  updatePosition() {
    if (this.component) {
      this.component.updatePosition();
    }
  }
  /**
   * Create a dynamic tooltip component. This method can be override.
   */
  createComponent() {
    const componentRef = this.hostView.createComponent(this.componentType);
    this.component = componentRef.instance;
    this.renderer.removeChild(this.renderer.parentNode(this.elementRef.nativeElement), componentRef.location.nativeElement);
    this.component.setOverlayOrigin(this.origin || this.elementRef);
    this.initProperties();
    const ngVisibleChange$ = this.component.nzVisibleChange.pipe(distinctUntilChanged());
    ngVisibleChange$.pipe(takeUntil(this.destroy$)).subscribe((visible) => {
      this.internalVisible = visible;
      this.visibleChange.emit(visible);
    });
    ngVisibleChange$.pipe(filter((visible) => visible), delay(0, asapScheduler), filter(() => Boolean(this.component?.overlay?.overlayRef)), takeUntil(this.destroy$)).subscribe(() => {
      this.component?.updatePosition();
    });
  }
  registerTriggers() {
    const el = this.elementRef.nativeElement;
    const trigger2 = this.trigger;
    this.removeTriggerListeners();
    if (trigger2 === "hover") {
      let overlayElement;
      this.triggerDisposables.push(this.renderer.listen(el, "mouseenter", () => {
        this.delayEnterLeave(true, true, this._mouseEnterDelay);
      }));
      this.triggerDisposables.push(this.renderer.listen(el, "mouseleave", () => {
        this.delayEnterLeave(true, false, this._mouseLeaveDelay);
        if (this.component?.overlay.overlayRef && !overlayElement) {
          overlayElement = this.component.overlay.overlayRef.overlayElement;
          this.triggerDisposables.push(this.renderer.listen(overlayElement, "mouseenter", () => {
            this.delayEnterLeave(false, true, this._mouseEnterDelay);
          }));
          this.triggerDisposables.push(this.renderer.listen(overlayElement, "mouseleave", () => {
            this.delayEnterLeave(false, false, this._mouseLeaveDelay);
          }));
        }
      }));
    } else if (trigger2 === "focus") {
      this.triggerDisposables.push(this.renderer.listen(el, "focusin", () => this.show()));
      this.triggerDisposables.push(this.renderer.listen(el, "focusout", () => this.hide()));
    } else if (trigger2 === "click") {
      this.triggerDisposables.push(this.renderer.listen(el, "click", (e) => {
        e.preventDefault();
        this.show();
      }));
    }
  }
  updatePropertiesByChanges(changes) {
    this.updatePropertiesByKeys(Object.keys(changes));
  }
  updatePropertiesByKeys(keys) {
    const mappingProperties = __spreadValues({
      // common mappings
      title: ["nzTitle", () => this._title],
      directiveTitle: ["nzTitle", () => this._title],
      content: ["nzContent", () => this._content],
      directiveContent: ["nzContent", () => this._content],
      trigger: ["nzTrigger", () => this._trigger],
      placement: ["nzPlacement", () => this._placement],
      visible: ["nzVisible", () => this._visible],
      mouseEnterDelay: ["nzMouseEnterDelay", () => this._mouseEnterDelay],
      mouseLeaveDelay: ["nzMouseLeaveDelay", () => this._mouseLeaveDelay],
      overlayClassName: ["nzOverlayClassName", () => this._overlayClassName],
      overlayStyle: ["nzOverlayStyle", () => this._overlayStyle],
      arrowPointAtCenter: ["nzArrowPointAtCenter", () => this.arrowPointAtCenter],
      cdkConnectedOverlayPush: ["cdkConnectedOverlayPush", () => this.cdkConnectedOverlayPush]
    }, this.getProxyPropertyMap());
    (keys || Object.keys(mappingProperties).filter((key) => !key.startsWith("directive"))).forEach((property) => {
      if (mappingProperties[property]) {
        const [name2, valueFn] = mappingProperties[property];
        this.updateComponentValue(name2, valueFn());
      }
    });
    this.component?.updateByDirective();
  }
  initProperties() {
    this.updatePropertiesByKeys();
  }
  updateComponentValue(key, value) {
    if (typeof value !== "undefined") {
      this.component[key] = value;
    }
  }
  delayEnterLeave(isOrigin, isEnter, delay2 = -1) {
    if (this.delayTimer) {
      this.clearTogglingTimer();
    } else if (delay2 > 0) {
      this.delayTimer = setTimeout(() => {
        this.delayTimer = void 0;
        isEnter ? this.show() : this.hide();
      }, delay2 * 1e3);
    } else {
      isEnter && isOrigin ? this.show() : this.hide();
    }
  }
  removeTriggerListeners() {
    this.triggerDisposables.forEach((dispose) => dispose());
    this.triggerDisposables.length = 0;
  }
  clearTogglingTimer() {
    if (this.delayTimer) {
      clearTimeout(this.delayTimer);
      this.delayTimer = void 0;
    }
  }
  static {
    this.\u0275fac = function NzTooltipBaseDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTooltipBaseDirective)(\u0275\u0275directiveInject(Type));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTooltipBaseDirective,
      features: [\u0275\u0275NgOnChangesFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTooltipBaseDirective, [{
    type: Directive
  }], () => [{
    type: Type
  }], null);
})();
var NzTooltipBaseComponent = class _NzTooltipBaseComponent {
  constructor() {
    this.noAnimation = inject(NzNoAnimationDirective, {
      host: true,
      optional: true
    });
    this.cdr = inject(ChangeDetectorRef);
    this.directionality = inject(Directionality);
    this.nzTitle = null;
    this.nzContent = null;
    this.nzArrowPointAtCenter = false;
    this.nzOverlayStyle = {};
    this.nzBackdrop = false;
    this.cdkConnectedOverlayPush = true;
    this.nzVisibleChange = new Subject();
    this._visible = false;
    this._trigger = "hover";
    this.preferredPlacement = "top";
    this.dir = "ltr";
    this._classMap = {};
    this._prefix = "ant-tooltip";
    this._positions = [...DEFAULT_TOOLTIP_POSITIONS];
    this.destroy$ = new Subject();
  }
  set nzVisible(value) {
    const visible = toBoolean(value);
    if (this._visible !== visible) {
      this._visible = visible;
      this.nzVisibleChange.next(visible);
    }
  }
  get nzVisible() {
    return this._visible;
  }
  set nzTrigger(value) {
    this._trigger = value;
  }
  get nzTrigger() {
    return this._trigger;
  }
  set nzPlacement(value) {
    const preferredPosition = value.map((placement) => POSITION_MAP[placement]);
    this._positions = [...preferredPosition, ...DEFAULT_TOOLTIP_POSITIONS];
  }
  ngOnInit() {
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.cdr.detectChanges();
    });
    this.dir = this.directionality.value;
  }
  ngOnDestroy() {
    this.nzVisibleChange.complete();
    this.destroy$.next();
    this.destroy$.complete();
  }
  show() {
    if (this.nzVisible) {
      return;
    }
    if (!this.isEmpty()) {
      this.nzVisible = true;
      this.nzVisibleChange.next(true);
      this.cdr.detectChanges();
    }
    if (this.origin && this.overlay && this.overlay.overlayRef && this.overlay.overlayRef.getDirection() === "rtl") {
      this.overlay.overlayRef.setDirection("ltr");
    }
  }
  hide() {
    if (!this.nzVisible) {
      return;
    }
    this.nzVisible = false;
    this.nzVisibleChange.next(false);
    this.cdr.detectChanges();
  }
  updateByDirective() {
    this.updateStyles();
    this.cdr.detectChanges();
    Promise.resolve().then(() => {
      this.updatePosition();
      this.updateVisibilityByTitle();
    });
  }
  /**
   * Force the component to update its position.
   */
  updatePosition() {
    if (this.origin && this.overlay && this.overlay.overlayRef) {
      this.overlay.overlayRef.updatePosition();
    }
  }
  onPositionChange(position) {
    this.preferredPlacement = getPlacementName(position);
    this.updateStyles();
    this.cdr.detectChanges();
  }
  setOverlayOrigin(origin) {
    this.origin = origin;
    this.cdr.markForCheck();
  }
  onClickOutside(event2) {
    const target = _getEventTarget(event2);
    if (!this.origin.nativeElement.contains(target) && this.nzTrigger !== null) {
      this.hide();
    }
  }
  /**
   * Hide the component while the content is empty.
   */
  updateVisibilityByTitle() {
    if (this.isEmpty()) {
      this.hide();
    }
  }
  updateStyles() {
    this._classMap = {
      [this.nzOverlayClassName]: true,
      [`${this._prefix}-placement-${this.preferredPlacement}`]: true
    };
  }
  static {
    this.\u0275fac = function NzTooltipBaseComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTooltipBaseComponent)();
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTooltipBaseComponent,
      viewQuery: function NzTooltipBaseComponent_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(_c012, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.overlay = _t.first);
        }
      }
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTooltipBaseComponent, [{
    type: Directive
  }], null, {
    overlay: [{
      type: ViewChild,
      args: ["overlay", {
        static: false
      }]
    }]
  });
})();
function isTooltipEmpty(value) {
  return value instanceof TemplateRef ? false : value === "" || !isNotNil(value);
}
var NzTooltipDirective = class _NzTooltipDirective extends NzTooltipBaseDirective {
  constructor() {
    super(NzToolTipComponent);
    this.titleContext = null;
    this.trigger = "hover";
    this.placement = "top";
    this.cdkConnectedOverlayPush = true;
    this.visibleChange = new EventEmitter();
  }
  getProxyPropertyMap() {
    return __spreadProps(__spreadValues({}, super.getProxyPropertyMap()), {
      nzTooltipColor: ["nzColor", () => this.nzTooltipColor],
      titleContext: ["nzTitleContext", () => this.titleContext]
    });
  }
  static {
    this.\u0275fac = function NzTooltipDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTooltipDirective)();
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTooltipDirective,
      selectors: [["", "nz-tooltip", ""]],
      hostVars: 2,
      hostBindings: function NzTooltipDirective_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-tooltip-open", ctx.visible);
        }
      },
      inputs: {
        title: [0, "nzTooltipTitle", "title"],
        titleContext: [0, "nzTooltipTitleContext", "titleContext"],
        directiveTitle: [0, "nz-tooltip", "directiveTitle"],
        trigger: [0, "nzTooltipTrigger", "trigger"],
        placement: [0, "nzTooltipPlacement", "placement"],
        origin: [0, "nzTooltipOrigin", "origin"],
        visible: [0, "nzTooltipVisible", "visible"],
        mouseEnterDelay: [0, "nzTooltipMouseEnterDelay", "mouseEnterDelay"],
        mouseLeaveDelay: [0, "nzTooltipMouseLeaveDelay", "mouseLeaveDelay"],
        overlayClassName: [0, "nzTooltipOverlayClassName", "overlayClassName"],
        overlayStyle: [0, "nzTooltipOverlayStyle", "overlayStyle"],
        arrowPointAtCenter: [2, "nzTooltipArrowPointAtCenter", "arrowPointAtCenter", booleanAttribute],
        cdkConnectedOverlayPush: [2, "cdkConnectedOverlayPush", "cdkConnectedOverlayPush", booleanAttribute],
        nzTooltipColor: "nzTooltipColor"
      },
      outputs: {
        visibleChange: "nzTooltipVisibleChange"
      },
      exportAs: ["nzTooltip"],
      features: [\u0275\u0275InputTransformsFeature, \u0275\u0275InheritDefinitionFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTooltipDirective, [{
    type: Directive,
    args: [{
      selector: "[nz-tooltip]",
      exportAs: "nzTooltip",
      host: {
        "[class.ant-tooltip-open]": "visible"
      }
    }]
  }], () => [], {
    title: [{
      type: Input,
      args: ["nzTooltipTitle"]
    }],
    titleContext: [{
      type: Input,
      args: ["nzTooltipTitleContext"]
    }],
    directiveTitle: [{
      type: Input,
      args: ["nz-tooltip"]
    }],
    trigger: [{
      type: Input,
      args: ["nzTooltipTrigger"]
    }],
    placement: [{
      type: Input,
      args: ["nzTooltipPlacement"]
    }],
    origin: [{
      type: Input,
      args: ["nzTooltipOrigin"]
    }],
    visible: [{
      type: Input,
      args: ["nzTooltipVisible"]
    }],
    mouseEnterDelay: [{
      type: Input,
      args: ["nzTooltipMouseEnterDelay"]
    }],
    mouseLeaveDelay: [{
      type: Input,
      args: ["nzTooltipMouseLeaveDelay"]
    }],
    overlayClassName: [{
      type: Input,
      args: ["nzTooltipOverlayClassName"]
    }],
    overlayStyle: [{
      type: Input,
      args: ["nzTooltipOverlayStyle"]
    }],
    arrowPointAtCenter: [{
      type: Input,
      args: [{
        alias: "nzTooltipArrowPointAtCenter",
        transform: booleanAttribute
      }]
    }],
    cdkConnectedOverlayPush: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzTooltipColor: [{
      type: Input
    }],
    visibleChange: [{
      type: Output,
      args: ["nzTooltipVisibleChange"]
    }]
  });
})();
var NzToolTipComponent = class _NzToolTipComponent extends NzTooltipBaseComponent {
  constructor() {
    super(...arguments);
    this.nzTitle = null;
    this.nzTitleContext = null;
    this._contentStyleMap = {};
  }
  isEmpty() {
    return isTooltipEmpty(this.nzTitle);
  }
  updateStyles() {
    const isColorPreset = this.nzColor && isPresetColor(this.nzColor);
    this._classMap = {
      [this.nzOverlayClassName]: true,
      [`${this._prefix}-placement-${this.preferredPlacement}`]: true,
      [`${this._prefix}-${this.nzColor}`]: isColorPreset
    };
    this._contentStyleMap = {
      backgroundColor: !!this.nzColor && !isColorPreset ? this.nzColor : null,
      "--antd-arrow-background-color": this.nzColor
    };
  }
  static {
    this.\u0275fac = /* @__PURE__ */ (() => {
      let \u0275NzToolTipComponent_BaseFactory;
      return function NzToolTipComponent_Factory(__ngFactoryType__) {
        return (\u0275NzToolTipComponent_BaseFactory || (\u0275NzToolTipComponent_BaseFactory = \u0275\u0275getInheritedFactory(_NzToolTipComponent)))(__ngFactoryType__ || _NzToolTipComponent);
      };
    })();
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzToolTipComponent,
      selectors: [["nz-tooltip"]],
      exportAs: ["nzTooltipComponent"],
      features: [\u0275\u0275InheritDefinitionFeature],
      decls: 2,
      vars: 5,
      consts: [["overlay", "cdkConnectedOverlay"], ["cdkConnectedOverlay", "", "nzConnectedOverlay", "", 3, "overlayOutsideClick", "detach", "positionChange", "cdkConnectedOverlayOrigin", "cdkConnectedOverlayOpen", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPush", "nzArrowPointAtCenter"], [1, "ant-tooltip", 3, "nzNoAnimation"], [1, "ant-tooltip-content"], [1, "ant-tooltip-arrow"], [1, "ant-tooltip-arrow-content"], [1, "ant-tooltip-inner"], [4, "nzStringTemplateOutlet", "nzStringTemplateOutletContext"]],
      template: function NzToolTipComponent_Template(rf, ctx) {
        if (rf & 1) {
          const _r1 = \u0275\u0275getCurrentView();
          \u0275\u0275template(0, NzToolTipComponent_ng_template_0_Template, 6, 15, "ng-template", 1, 0, \u0275\u0275templateRefExtractor);
          \u0275\u0275listener("overlayOutsideClick", function NzToolTipComponent_Template_ng_template_overlayOutsideClick_0_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.onClickOutside($event));
          })("detach", function NzToolTipComponent_Template_ng_template_detach_0_listener() {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.hide());
          })("positionChange", function NzToolTipComponent_Template_ng_template_positionChange_0_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.onPositionChange($event));
          });
        }
        if (rf & 2) {
          \u0275\u0275property("cdkConnectedOverlayOrigin", ctx.origin)("cdkConnectedOverlayOpen", ctx._visible)("cdkConnectedOverlayPositions", ctx._positions)("cdkConnectedOverlayPush", ctx.cdkConnectedOverlayPush)("nzArrowPointAtCenter", ctx.nzArrowPointAtCenter);
        }
      },
      dependencies: [OverlayModule, CdkConnectedOverlay, NzNoAnimationDirective, NzOutletModule, NzStringTemplateOutletDirective, NzOverlayModule, NzConnectedOverlayDirective],
      encapsulation: 2,
      data: {
        animation: [zoomBigMotion]
      },
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzToolTipComponent, [{
    type: Component,
    args: [{
      selector: "nz-tooltip",
      exportAs: "nzTooltipComponent",
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      animations: [zoomBigMotion],
      template: `
    <ng-template
      #overlay="cdkConnectedOverlay"
      cdkConnectedOverlay
      nzConnectedOverlay
      [cdkConnectedOverlayOrigin]="origin"
      [cdkConnectedOverlayOpen]="_visible"
      [cdkConnectedOverlayPositions]="_positions"
      [cdkConnectedOverlayPush]="cdkConnectedOverlayPush"
      [nzArrowPointAtCenter]="nzArrowPointAtCenter"
      (overlayOutsideClick)="onClickOutside($event)"
      (detach)="hide()"
      (positionChange)="onPositionChange($event)"
    >
      <div
        class="ant-tooltip"
        [class.ant-tooltip-rtl]="dir === 'rtl'"
        [class]="_classMap"
        [style]="nzOverlayStyle"
        [@.disabled]="!!noAnimation?.nzNoAnimation"
        [nzNoAnimation]="noAnimation?.nzNoAnimation"
        [@zoomBigMotion]="'active'"
      >
        <div class="ant-tooltip-content">
          <div class="ant-tooltip-arrow">
            <span class="ant-tooltip-arrow-content" [style]="_contentStyleMap"></span>
          </div>
          <div class="ant-tooltip-inner" [style]="_contentStyleMap">
            <ng-container *nzStringTemplateOutlet="nzTitle; context: nzTitleContext">{{ nzTitle }}</ng-container>
          </div>
        </div>
      </div>
    </ng-template>
  `,
      preserveWhitespaces: false,
      imports: [OverlayModule, NzNoAnimationDirective, NzOutletModule, NzOverlayModule]
    }]
  }], null, null);
})();
var NzToolTipModule = class _NzToolTipModule {
  static {
    this.\u0275fac = function NzToolTipModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzToolTipModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzToolTipModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      imports: [NzToolTipComponent]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzToolTipModule, [{
    type: NgModule,
    args: [{
      imports: [NzToolTipComponent, NzTooltipDirective],
      exports: [NzToolTipComponent, NzTooltipDirective]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-form.mjs
var _c013 = ["*"];
var _c18 = (a0) => [a0];
var _c25 = (a0) => ({
  $implicit: a0
});
function NzFormControlComponent_Conditional_3_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.innerTip);
  }
}
function NzFormControlComponent_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 2)(1, "div", 4);
    \u0275\u0275template(2, NzFormControlComponent_Conditional_3_ng_container_2_Template, 2, 1, "ng-container", 5);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("@helpMotion", void 0);
    \u0275\u0275advance();
    \u0275\u0275classMap(\u0275\u0275pureFunction1(5, _c18, "ant-form-item-explain-" + ctx_r0.status));
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r0.innerTip)("nzStringTemplateOutletContext", \u0275\u0275pureFunction1(7, _c25, ctx_r0.validateControl));
  }
}
function NzFormControlComponent_Conditional_4_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.nzExtra);
  }
}
function NzFormControlComponent_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 3);
    \u0275\u0275template(1, NzFormControlComponent_Conditional_4_ng_container_1_Template, 2, 1, "ng-container", 6);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r0.nzExtra);
  }
}
function NzFormLabelComponent_Conditional_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "nz-icon", 2);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const tooltipIconType_r1 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("nzType", tooltipIconType_r1)("nzTheme", ctx_r1.tooltipIcon.theme);
  }
}
function NzFormLabelComponent_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 0);
    \u0275\u0275template(1, NzFormLabelComponent_Conditional_2_ng_container_1_Template, 2, 2, "ng-container", 1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("nzTooltipTitle", ctx_r1.nzTooltipTitle);
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r1.tooltipIcon.type);
  }
}
var NzFormItemComponent = class _NzFormItemComponent {
  setWithHelpViaTips(value) {
    this.withHelpClass = value;
    this.cdr.markForCheck();
  }
  setStatus(status) {
    this.status = status;
    this.cdr.markForCheck();
  }
  setHasFeedback(hasFeedback) {
    this.hasFeedback = hasFeedback;
    this.cdr.markForCheck();
  }
  constructor(cdr) {
    this.cdr = cdr;
    this.status = "";
    this.hasFeedback = false;
    this.withHelpClass = false;
    this.destroy$ = new Subject();
  }
  ngOnDestroy() {
    this.destroy$.next(true);
    this.destroy$.complete();
  }
  static {
    this.\u0275fac = function NzFormItemComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzFormItemComponent)(\u0275\u0275directiveInject(ChangeDetectorRef));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzFormItemComponent,
      selectors: [["nz-form-item"]],
      hostAttrs: [1, "ant-form-item"],
      hostVars: 12,
      hostBindings: function NzFormItemComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-form-item-has-success", ctx.status === "success")("ant-form-item-has-warning", ctx.status === "warning")("ant-form-item-has-error", ctx.status === "error")("ant-form-item-is-validating", ctx.status === "validating")("ant-form-item-has-feedback", ctx.hasFeedback && ctx.status)("ant-form-item-with-help", ctx.withHelpClass);
        }
      },
      exportAs: ["nzFormItem"],
      ngContentSelectors: _c013,
      decls: 1,
      vars: 0,
      template: function NzFormItemComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275projection(0);
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzFormItemComponent, [{
    type: Component,
    args: [{
      selector: "nz-form-item",
      exportAs: "nzFormItem",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      host: {
        class: "ant-form-item",
        "[class.ant-form-item-has-success]": 'status === "success"',
        "[class.ant-form-item-has-warning]": 'status === "warning"',
        "[class.ant-form-item-has-error]": 'status === "error"',
        "[class.ant-form-item-is-validating]": 'status === "validating"',
        "[class.ant-form-item-has-feedback]": "hasFeedback && status",
        "[class.ant-form-item-with-help]": "withHelpClass"
      },
      template: `<ng-content></ng-content>`
    }]
  }], () => [{
    type: ChangeDetectorRef
  }], null);
})();
var NZ_CONFIG_MODULE_NAME2 = "form";
var DefaultTooltipIcon = {
  type: "question-circle",
  theme: "outline"
};
var NzFormDirective = (() => {
  let _nzNoColon_decorators;
  let _nzNoColon_initializers = [];
  let _nzNoColon_extraInitializers = [];
  let _nzAutoTips_decorators;
  let _nzAutoTips_initializers = [];
  let _nzAutoTips_extraInitializers = [];
  let _nzTooltipIcon_decorators;
  let _nzTooltipIcon_initializers = [];
  let _nzTooltipIcon_extraInitializers = [];
  let _nzLabelWrap_decorators;
  let _nzLabelWrap_initializers = [];
  let _nzLabelWrap_extraInitializers = [];
  return class NzFormDirective2 {
    static {
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
      _nzNoColon_decorators = [WithConfig()];
      _nzAutoTips_decorators = [WithConfig()];
      _nzTooltipIcon_decorators = [WithConfig()];
      _nzLabelWrap_decorators = [WithConfig()];
      __esDecorate(null, null, _nzNoColon_decorators, {
        kind: "field",
        name: "nzNoColon",
        static: false,
        private: false,
        access: {
          has: (obj) => "nzNoColon" in obj,
          get: (obj) => obj.nzNoColon,
          set: (obj, value) => {
            obj.nzNoColon = value;
          }
        },
        metadata: _metadata
      }, _nzNoColon_initializers, _nzNoColon_extraInitializers);
      __esDecorate(null, null, _nzAutoTips_decorators, {
        kind: "field",
        name: "nzAutoTips",
        static: false,
        private: false,
        access: {
          has: (obj) => "nzAutoTips" in obj,
          get: (obj) => obj.nzAutoTips,
          set: (obj, value) => {
            obj.nzAutoTips = value;
          }
        },
        metadata: _metadata
      }, _nzAutoTips_initializers, _nzAutoTips_extraInitializers);
      __esDecorate(null, null, _nzTooltipIcon_decorators, {
        kind: "field",
        name: "nzTooltipIcon",
        static: false,
        private: false,
        access: {
          has: (obj) => "nzTooltipIcon" in obj,
          get: (obj) => obj.nzTooltipIcon,
          set: (obj, value) => {
            obj.nzTooltipIcon = value;
          }
        },
        metadata: _metadata
      }, _nzTooltipIcon_initializers, _nzTooltipIcon_extraInitializers);
      __esDecorate(null, null, _nzLabelWrap_decorators, {
        kind: "field",
        name: "nzLabelWrap",
        static: false,
        private: false,
        access: {
          has: (obj) => "nzLabelWrap" in obj,
          get: (obj) => obj.nzLabelWrap,
          set: (obj, value) => {
            obj.nzLabelWrap = value;
          }
        },
        metadata: _metadata
      }, _nzLabelWrap_initializers, _nzLabelWrap_extraInitializers);
      if (_metadata) Object.defineProperty(this, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    }
    getInputObservable(changeType) {
      return this.inputChanges$.pipe(filter((changes) => changeType in changes), map((value) => value[changeType]));
    }
    constructor(nzConfigService, directionality) {
      this.nzConfigService = nzConfigService;
      this.directionality = directionality;
      this._nzModuleName = NZ_CONFIG_MODULE_NAME2;
      this.nzLayout = "horizontal";
      this.nzNoColon = __runInitializers(this, _nzNoColon_initializers, false);
      this.nzAutoTips = (__runInitializers(this, _nzNoColon_extraInitializers), __runInitializers(this, _nzAutoTips_initializers, {}));
      this.nzDisableAutoTips = (__runInitializers(this, _nzAutoTips_extraInitializers), false);
      this.nzTooltipIcon = __runInitializers(this, _nzTooltipIcon_initializers, DefaultTooltipIcon);
      this.nzLabelAlign = (__runInitializers(this, _nzTooltipIcon_extraInitializers), "right");
      this.nzLabelWrap = __runInitializers(this, _nzLabelWrap_initializers, false);
      this.dir = (__runInitializers(this, _nzLabelWrap_extraInitializers), "ltr");
      this.destroy$ = new Subject();
      this.inputChanges$ = new Subject();
      this.dir = this.directionality.value;
      this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
        this.dir = direction;
      });
    }
    ngOnChanges(changes) {
      this.inputChanges$.next(changes);
    }
    ngOnDestroy() {
      this.inputChanges$.complete();
      this.destroy$.next(true);
      this.destroy$.complete();
    }
    static {
      this.\u0275fac = function NzFormDirective_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || NzFormDirective2)(\u0275\u0275directiveInject(NzConfigService), \u0275\u0275directiveInject(Directionality));
      };
    }
    static {
      this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
        type: NzFormDirective2,
        selectors: [["", "nz-form", ""]],
        hostAttrs: [1, "ant-form"],
        hostVars: 8,
        hostBindings: function NzFormDirective_HostBindings(rf, ctx) {
          if (rf & 2) {
            \u0275\u0275classProp("ant-form-horizontal", ctx.nzLayout === "horizontal")("ant-form-vertical", ctx.nzLayout === "vertical")("ant-form-inline", ctx.nzLayout === "inline")("ant-form-rtl", ctx.dir === "rtl");
          }
        },
        inputs: {
          nzLayout: "nzLayout",
          nzNoColon: [2, "nzNoColon", "nzNoColon", booleanAttribute],
          nzAutoTips: "nzAutoTips",
          nzDisableAutoTips: [2, "nzDisableAutoTips", "nzDisableAutoTips", booleanAttribute],
          nzTooltipIcon: "nzTooltipIcon",
          nzLabelAlign: "nzLabelAlign",
          nzLabelWrap: [2, "nzLabelWrap", "nzLabelWrap", booleanAttribute]
        },
        exportAs: ["nzForm"],
        features: [\u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature]
      });
    }
  };
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzFormDirective, [{
    type: Directive,
    args: [{
      selector: "[nz-form]",
      exportAs: "nzForm",
      host: {
        class: "ant-form",
        "[class.ant-form-horizontal]": `nzLayout === 'horizontal'`,
        "[class.ant-form-vertical]": `nzLayout === 'vertical'`,
        "[class.ant-form-inline]": `nzLayout === 'inline'`,
        "[class.ant-form-rtl]": `dir === 'rtl'`
      }
    }]
  }], () => [{
    type: NzConfigService
  }, {
    type: Directionality
  }], {
    nzLayout: [{
      type: Input
    }],
    nzNoColon: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzAutoTips: [{
      type: Input
    }],
    nzDisableAutoTips: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzTooltipIcon: [{
      type: Input
    }],
    nzLabelAlign: [{
      type: Input
    }],
    nzLabelWrap: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
var NzFormControlComponent = class _NzFormControlComponent {
  get disableAutoTips() {
    return this.nzDisableAutoTips !== void 0 ? toBoolean(this.nzDisableAutoTips) : !!this.nzFormDirective?.nzDisableAutoTips;
  }
  set nzHasFeedback(value) {
    this._hasFeedback = value;
    this.nzFormStatusService.formStatusChanges.next({
      status: this.status,
      hasFeedback: this._hasFeedback
    });
    if (this.nzFormItemComponent) {
      this.nzFormItemComponent.setHasFeedback(this._hasFeedback);
    }
  }
  get nzHasFeedback() {
    return this._hasFeedback;
  }
  set nzValidateStatus(value) {
    if (value instanceof AbstractControl || value instanceof NgModel) {
      this.validateControl = value;
      this.validateString = null;
      this.watchControl();
    } else if (value instanceof FormControlName) {
      this.validateControl = value.control;
      this.validateString = null;
      this.watchControl();
    } else {
      this.validateString = value;
      this.validateControl = null;
      this.setStatus();
    }
  }
  watchControl() {
    this.validateChanges.unsubscribe();
    if (this.validateControl && this.validateControl.statusChanges) {
      this.validateChanges = this.validateControl.statusChanges.pipe(startWith(null), takeUntil(this.destroyed$)).subscribe(() => {
        if (!this.disableAutoTips) {
          this.updateAutoErrorTip();
        }
        this.setStatus();
        this.cdr.markForCheck();
      });
    }
  }
  setStatus() {
    this.status = this.getControlStatus(this.validateString);
    this.innerTip = this.getInnerTip(this.status);
    this.nzFormStatusService.formStatusChanges.next({
      status: this.status,
      hasFeedback: this.nzHasFeedback
    });
    if (this.nzFormItemComponent) {
      this.nzFormItemComponent.setWithHelpViaTips(!!this.innerTip);
      this.nzFormItemComponent.setStatus(this.status);
    }
  }
  getControlStatus(validateString) {
    let status;
    if (validateString === "warning" || this.validateControlStatus("INVALID", "warning")) {
      status = "warning";
    } else if (validateString === "error" || this.validateControlStatus("INVALID")) {
      status = "error";
    } else if (validateString === "validating" || validateString === "pending" || this.validateControlStatus("PENDING")) {
      status = "validating";
    } else if (validateString === "success" || this.validateControlStatus("VALID")) {
      status = "success";
    } else {
      status = "";
    }
    return status;
  }
  validateControlStatus(validStatus, statusType) {
    if (!this.validateControl) {
      return false;
    } else {
      const {
        dirty,
        touched,
        status
      } = this.validateControl;
      return (!!dirty || !!touched) && (statusType ? this.validateControl.hasError(statusType) : status === validStatus);
    }
  }
  getInnerTip(status) {
    switch (status) {
      case "error":
        return !this.disableAutoTips && this.autoErrorTip || this.nzErrorTip || null;
      case "validating":
        return this.nzValidatingTip || null;
      case "success":
        return this.nzSuccessTip || null;
      case "warning":
        return this.nzWarningTip || null;
      default:
        return null;
    }
  }
  updateAutoErrorTip() {
    if (this.validateControl) {
      const errors = this.validateControl.errors || {};
      let autoErrorTip = "";
      for (const key in errors) {
        if (errors.hasOwnProperty(key)) {
          autoErrorTip = errors[key]?.[this.localeId] ?? this.nzAutoTips?.[this.localeId]?.[key] ?? this.nzAutoTips.default?.[key] ?? this.nzFormDirective?.nzAutoTips?.[this.localeId]?.[key] ?? this.nzFormDirective?.nzAutoTips.default?.[key];
        }
        if (!!autoErrorTip) {
          break;
        }
      }
      this.autoErrorTip = autoErrorTip;
    }
  }
  subscribeAutoTips(observable) {
    observable?.pipe(takeUntil(this.destroyed$)).subscribe(() => {
      if (!this.disableAutoTips) {
        this.updateAutoErrorTip();
        this.setStatus();
        this.cdr.markForCheck();
      }
    });
  }
  constructor(cdr, i18n, nzFormStatusService) {
    this.cdr = cdr;
    this.nzFormStatusService = nzFormStatusService;
    this._hasFeedback = false;
    this.validateChanges = Subscription.EMPTY;
    this.validateString = null;
    this.destroyed$ = new Subject();
    this.status = "";
    this.validateControl = null;
    this.innerTip = null;
    this.nzAutoTips = {};
    this.nzFormItemComponent = inject(NzFormItemComponent, {
      host: true,
      optional: true
    });
    this.nzFormDirective = inject(NzFormDirective, {
      optional: true
    });
    this.subscribeAutoTips(i18n.localeChange.pipe(tap((locale) => this.localeId = locale.locale)));
    this.subscribeAutoTips(this.nzFormDirective?.getInputObservable("nzAutoTips"));
    this.subscribeAutoTips(this.nzFormDirective?.getInputObservable("nzDisableAutoTips").pipe(filter(() => this.nzDisableAutoTips === void 0)));
  }
  ngOnChanges(changes) {
    const {
      nzDisableAutoTips,
      nzAutoTips,
      nzSuccessTip,
      nzWarningTip,
      nzErrorTip,
      nzValidatingTip
    } = changes;
    if (nzDisableAutoTips || nzAutoTips) {
      this.updateAutoErrorTip();
      this.setStatus();
    } else if (nzSuccessTip || nzWarningTip || nzErrorTip || nzValidatingTip) {
      this.setStatus();
    }
  }
  ngOnInit() {
    this.setStatus();
  }
  ngOnDestroy() {
    this.destroyed$.next();
    this.destroyed$.complete();
  }
  ngAfterContentInit() {
    if (!this.validateControl && !this.validateString) {
      if (this.defaultValidateControl instanceof FormControlDirective) {
        this.nzValidateStatus = this.defaultValidateControl.control;
      } else {
        this.nzValidateStatus = this.defaultValidateControl;
      }
    }
  }
  static {
    this.\u0275fac = function NzFormControlComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzFormControlComponent)(\u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(NzI18nService), \u0275\u0275directiveInject(NzFormStatusService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzFormControlComponent,
      selectors: [["nz-form-control"]],
      contentQueries: function NzFormControlComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          \u0275\u0275contentQuery(dirIndex, NgControl, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.defaultValidateControl = _t.first);
        }
      },
      hostAttrs: [1, "ant-form-item-control"],
      inputs: {
        nzSuccessTip: "nzSuccessTip",
        nzWarningTip: "nzWarningTip",
        nzErrorTip: "nzErrorTip",
        nzValidatingTip: "nzValidatingTip",
        nzExtra: "nzExtra",
        nzAutoTips: "nzAutoTips",
        nzDisableAutoTips: [2, "nzDisableAutoTips", "nzDisableAutoTips", booleanAttribute],
        nzHasFeedback: [2, "nzHasFeedback", "nzHasFeedback", booleanAttribute],
        nzValidateStatus: "nzValidateStatus"
      },
      exportAs: ["nzFormControl"],
      features: [\u0275\u0275ProvidersFeature([NzFormStatusService]), \u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature],
      ngContentSelectors: _c013,
      decls: 5,
      vars: 2,
      consts: [[1, "ant-form-item-control-input"], [1, "ant-form-item-control-input-content"], [1, "ant-form-item-explain", "ant-form-item-explain-connected"], [1, "ant-form-item-extra"], ["role", "alert"], [4, "nzStringTemplateOutlet", "nzStringTemplateOutletContext"], [4, "nzStringTemplateOutlet"]],
      template: function NzFormControlComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
          \u0275\u0275projection(2);
          \u0275\u0275elementEnd()();
          \u0275\u0275template(3, NzFormControlComponent_Conditional_3_Template, 3, 9, "div", 2)(4, NzFormControlComponent_Conditional_4_Template, 2, 1, "div", 3);
        }
        if (rf & 2) {
          \u0275\u0275advance(3);
          \u0275\u0275conditional(ctx.innerTip ? 3 : -1);
          \u0275\u0275advance();
          \u0275\u0275conditional(ctx.nzExtra ? 4 : -1);
        }
      },
      dependencies: [NzOutletModule, NzStringTemplateOutletDirective],
      encapsulation: 2,
      data: {
        animation: [helpMotion]
      },
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzFormControlComponent, [{
    type: Component,
    args: [{
      selector: "nz-form-control",
      exportAs: "nzFormControl",
      preserveWhitespaces: false,
      animations: [helpMotion],
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    <div class="ant-form-item-control-input">
      <div class="ant-form-item-control-input-content">
        <ng-content></ng-content>
      </div>
    </div>
    @if (innerTip) {
      <div @helpMotion class="ant-form-item-explain ant-form-item-explain-connected">
        <div role="alert" [class]="['ant-form-item-explain-' + status]">
          <ng-container *nzStringTemplateOutlet="innerTip; context: { $implicit: validateControl }">{{
            innerTip
          }}</ng-container>
        </div>
      </div>
    }

    @if (nzExtra) {
      <div class="ant-form-item-extra">
        <ng-container *nzStringTemplateOutlet="nzExtra">{{ nzExtra }}</ng-container>
      </div>
    }
  `,
      providers: [NzFormStatusService],
      host: {
        class: "ant-form-item-control"
      },
      imports: [NzOutletModule]
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: NzI18nService
  }, {
    type: NzFormStatusService
  }], {
    defaultValidateControl: [{
      type: ContentChild,
      args: [NgControl, {
        static: false
      }]
    }],
    nzSuccessTip: [{
      type: Input
    }],
    nzWarningTip: [{
      type: Input
    }],
    nzErrorTip: [{
      type: Input
    }],
    nzValidatingTip: [{
      type: Input
    }],
    nzExtra: [{
      type: Input
    }],
    nzAutoTips: [{
      type: Input
    }],
    nzDisableAutoTips: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzHasFeedback: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzValidateStatus: [{
      type: Input
    }]
  });
})();
function toTooltipIcon(value) {
  const icon = typeof value === "string" ? {
    type: value
  } : value;
  return __spreadValues(__spreadValues({}, DefaultTooltipIcon), icon);
}
var NzFormLabelComponent = class _NzFormLabelComponent {
  set nzNoColon(value) {
    this.noColon = value;
  }
  get nzNoColon() {
    return this.noColon !== "default" ? this.noColon : !!this.nzFormDirective?.nzNoColon;
  }
  set nzTooltipIcon(value) {
    this._tooltipIcon = toTooltipIcon(value);
  }
  // due to 'get' and 'set' accessor must have the same type, so it was renamed to `tooltipIcon`
  get tooltipIcon() {
    return this._tooltipIcon !== "default" ? this._tooltipIcon : toTooltipIcon(this.nzFormDirective?.nzTooltipIcon || DefaultTooltipIcon);
  }
  set nzLabelAlign(value) {
    this.labelAlign = value;
  }
  get nzLabelAlign() {
    return this.labelAlign !== "default" ? this.labelAlign : this.nzFormDirective?.nzLabelAlign || "right";
  }
  set nzLabelWrap(value) {
    this.labelWrap = value;
  }
  get nzLabelWrap() {
    return this.labelWrap !== "default" ? this.labelWrap : !!this.nzFormDirective?.nzLabelWrap;
  }
  constructor(cdr) {
    this.cdr = cdr;
    this.nzRequired = false;
    this.noColon = "default";
    this._tooltipIcon = "default";
    this.labelAlign = "default";
    this.labelWrap = "default";
    this.destroy$ = new Subject();
    this.nzFormDirective = inject(NzFormDirective, {
      skipSelf: true,
      optional: true
    });
    if (this.nzFormDirective) {
      this.nzFormDirective.getInputObservable("nzNoColon").pipe(filter(() => this.noColon === "default"), takeUntil(this.destroy$)).subscribe(() => this.cdr.markForCheck());
      this.nzFormDirective.getInputObservable("nzTooltipIcon").pipe(filter(() => this._tooltipIcon === "default"), takeUntil(this.destroy$)).subscribe(() => this.cdr.markForCheck());
      this.nzFormDirective.getInputObservable("nzLabelAlign").pipe(filter(() => this.labelAlign === "default"), takeUntil(this.destroy$)).subscribe(() => this.cdr.markForCheck());
      this.nzFormDirective.getInputObservable("nzLabelWrap").pipe(filter(() => this.labelWrap === "default"), takeUntil(this.destroy$)).subscribe(() => this.cdr.markForCheck());
    }
  }
  ngOnDestroy() {
    this.destroy$.next(true);
    this.destroy$.complete();
  }
  static {
    this.\u0275fac = function NzFormLabelComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzFormLabelComponent)(\u0275\u0275directiveInject(ChangeDetectorRef));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzFormLabelComponent,
      selectors: [["nz-form-label"]],
      hostAttrs: [1, "ant-form-item-label"],
      hostVars: 4,
      hostBindings: function NzFormLabelComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-form-item-label-left", ctx.nzLabelAlign === "left")("ant-form-item-label-wrap", ctx.nzLabelWrap);
        }
      },
      inputs: {
        nzFor: "nzFor",
        nzRequired: [2, "nzRequired", "nzRequired", booleanAttribute],
        nzNoColon: [2, "nzNoColon", "nzNoColon", booleanAttribute],
        nzTooltipTitle: "nzTooltipTitle",
        nzTooltipIcon: "nzTooltipIcon",
        nzLabelAlign: "nzLabelAlign",
        nzLabelWrap: [2, "nzLabelWrap", "nzLabelWrap", booleanAttribute]
      },
      exportAs: ["nzFormLabel"],
      features: [\u0275\u0275InputTransformsFeature],
      ngContentSelectors: _c013,
      decls: 3,
      vars: 6,
      consts: [["nz-tooltip", "", 1, "ant-form-item-tooltip", 3, "nzTooltipTitle"], [4, "nzStringTemplateOutlet"], [3, "nzType", "nzTheme"]],
      template: function NzFormLabelComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275elementStart(0, "label");
          \u0275\u0275projection(1);
          \u0275\u0275template(2, NzFormLabelComponent_Conditional_2_Template, 2, 2, "span", 0);
          \u0275\u0275elementEnd();
        }
        if (rf & 2) {
          \u0275\u0275classProp("ant-form-item-no-colon", ctx.nzNoColon)("ant-form-item-required", ctx.nzRequired);
          \u0275\u0275attribute("for", ctx.nzFor);
          \u0275\u0275advance(2);
          \u0275\u0275conditional(ctx.nzTooltipTitle ? 2 : -1);
        }
      },
      dependencies: [NzOutletModule, NzStringTemplateOutletDirective, NzTooltipDirective, NzIconModule, NzIconDirective],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzFormLabelComponent, [{
    type: Component,
    args: [{
      selector: "nz-form-label",
      exportAs: "nzFormLabel",
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    <label [attr.for]="nzFor" [class.ant-form-item-no-colon]="nzNoColon" [class.ant-form-item-required]="nzRequired">
      <ng-content></ng-content>
      @if (nzTooltipTitle) {
        <span class="ant-form-item-tooltip" nz-tooltip [nzTooltipTitle]="nzTooltipTitle">
          <ng-container *nzStringTemplateOutlet="tooltipIcon.type; let tooltipIconType">
            <nz-icon [nzType]="tooltipIconType" [nzTheme]="tooltipIcon.theme" />
          </ng-container>
        </span>
      }
    </label>
  `,
      host: {
        class: "ant-form-item-label",
        "[class.ant-form-item-label-left]": `nzLabelAlign === 'left'`,
        "[class.ant-form-item-label-wrap]": `nzLabelWrap`
      },
      imports: [NzOutletModule, NzTooltipDirective, NzIconModule]
    }]
  }], () => [{
    type: ChangeDetectorRef
  }], {
    nzFor: [{
      type: Input
    }],
    nzRequired: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzNoColon: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzTooltipTitle: [{
      type: Input
    }],
    nzTooltipIcon: [{
      type: Input
    }],
    nzLabelAlign: [{
      type: Input
    }],
    nzLabelWrap: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
var NzFormSplitComponent = class _NzFormSplitComponent {
  static {
    this.\u0275fac = function NzFormSplitComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzFormSplitComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzFormSplitComponent,
      selectors: [["nz-form-split"]],
      hostAttrs: [1, "ant-form-split"],
      exportAs: ["nzFormSplit"],
      ngContentSelectors: _c013,
      decls: 1,
      vars: 0,
      template: function NzFormSplitComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275projection(0);
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzFormSplitComponent, [{
    type: Component,
    args: [{
      selector: "nz-form-split",
      exportAs: "nzFormSplit",
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: ` <ng-content></ng-content> `,
      host: {
        class: "ant-form-split"
      }
    }]
  }], null, null);
})();
var NzFormTextComponent = class _NzFormTextComponent {
  static {
    this.\u0275fac = function NzFormTextComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzFormTextComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzFormTextComponent,
      selectors: [["nz-form-text"]],
      hostAttrs: [1, "ant-form-text"],
      exportAs: ["nzFormText"],
      ngContentSelectors: _c013,
      decls: 1,
      vars: 0,
      template: function NzFormTextComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275projection(0);
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzFormTextComponent, [{
    type: Component,
    args: [{
      selector: "nz-form-text",
      exportAs: "nzFormText",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      template: ` <ng-content></ng-content> `,
      host: {
        class: "ant-form-text"
      }
    }]
  }], null, null);
})();
var NzFormModule = class _NzFormModule {
  static {
    this.\u0275fac = function NzFormModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzFormModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzFormModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      imports: [NzFormLabelComponent, NzFormControlComponent, NzGridModule]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzFormModule, [{
    type: NgModule,
    args: [{
      imports: [NzFormDirective, NzFormItemComponent, NzFormLabelComponent, NzFormControlComponent, NzFormTextComponent, NzFormSplitComponent],
      exports: [NzGridModule, NzFormDirective, NzFormItemComponent, NzFormLabelComponent, NzFormControlComponent, NzFormTextComponent, NzFormSplitComponent]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-popover.mjs
function NzPopoverComponent_ng_template_0_Conditional_6_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.nzTitle);
  }
}
function NzPopoverComponent_ng_template_0_Conditional_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 7);
    \u0275\u0275template(1, NzPopoverComponent_ng_template_0_Conditional_6_ng_container_1_Template, 2, 1, "ng-container", 9);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r1.nzTitle);
  }
}
function NzPopoverComponent_ng_template_0_ng_container_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.nzContent);
  }
}
function NzPopoverComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 2)(1, "div", 3)(2, "div", 4);
    \u0275\u0275element(3, "span", 5);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "div", 6)(5, "div");
    \u0275\u0275template(6, NzPopoverComponent_ng_template_0_Conditional_6_Template, 2, 1, "div", 7);
    \u0275\u0275elementStart(7, "div", 8);
    \u0275\u0275template(8, NzPopoverComponent_ng_template_0_ng_container_8_Template, 2, 1, "ng-container", 9);
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275styleMap(ctx_r1.nzOverlayStyle);
    \u0275\u0275classMap(ctx_r1._classMap);
    \u0275\u0275classProp("ant-popover-rtl", ctx_r1.dir === "rtl");
    \u0275\u0275property("@.disabled", !!(ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation))("nzNoAnimation", ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation)("@zoomBigMotion", "active");
    \u0275\u0275advance(6);
    \u0275\u0275conditional(ctx_r1.nzTitle ? 6 : -1);
    \u0275\u0275advance(2);
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r1.nzContent);
  }
}
var NZ_CONFIG_MODULE_NAME3 = "popover";
var NzPopoverDirective = (() => {
  let _classSuper = NzTooltipBaseDirective;
  let _nzPopoverBackdrop_decorators;
  let _nzPopoverBackdrop_initializers = [];
  let _nzPopoverBackdrop_extraInitializers = [];
  return class NzPopoverDirective2 extends _classSuper {
    static {
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
      _nzPopoverBackdrop_decorators = [WithConfig()];
      __esDecorate(null, null, _nzPopoverBackdrop_decorators, {
        kind: "field",
        name: "nzPopoverBackdrop",
        static: false,
        private: false,
        access: {
          has: (obj) => "nzPopoverBackdrop" in obj,
          get: (obj) => obj.nzPopoverBackdrop,
          set: (obj, value) => {
            obj.nzPopoverBackdrop = value;
          }
        },
        metadata: _metadata
      }, _nzPopoverBackdrop_initializers, _nzPopoverBackdrop_extraInitializers);
      if (_metadata) Object.defineProperty(this, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    }
    getProxyPropertyMap() {
      return __spreadValues({
        nzPopoverBackdrop: ["nzBackdrop", () => this.nzPopoverBackdrop]
      }, super.getProxyPropertyMap());
    }
    constructor() {
      super(NzPopoverComponent);
      this._nzModuleName = NZ_CONFIG_MODULE_NAME3;
      this.trigger = "hover";
      this.placement = "top";
      this.nzPopoverBackdrop = __runInitializers(this, _nzPopoverBackdrop_initializers, false);
      this.visibleChange = (__runInitializers(this, _nzPopoverBackdrop_extraInitializers), new EventEmitter());
    }
    static {
      this.\u0275fac = function NzPopoverDirective_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || NzPopoverDirective2)();
      };
    }
    static {
      this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
        type: NzPopoverDirective2,
        selectors: [["", "nz-popover", ""]],
        hostVars: 2,
        hostBindings: function NzPopoverDirective_HostBindings(rf, ctx) {
          if (rf & 2) {
            \u0275\u0275classProp("ant-popover-open", ctx.visible);
          }
        },
        inputs: {
          arrowPointAtCenter: [2, "nzPopoverArrowPointAtCenter", "arrowPointAtCenter", booleanAttribute],
          title: [0, "nzPopoverTitle", "title"],
          content: [0, "nzPopoverContent", "content"],
          directiveTitle: [0, "nz-popover", "directiveTitle"],
          trigger: [0, "nzPopoverTrigger", "trigger"],
          placement: [0, "nzPopoverPlacement", "placement"],
          origin: [0, "nzPopoverOrigin", "origin"],
          visible: [0, "nzPopoverVisible", "visible"],
          mouseEnterDelay: [0, "nzPopoverMouseEnterDelay", "mouseEnterDelay"],
          mouseLeaveDelay: [0, "nzPopoverMouseLeaveDelay", "mouseLeaveDelay"],
          overlayClassName: [0, "nzPopoverOverlayClassName", "overlayClassName"],
          overlayStyle: [0, "nzPopoverOverlayStyle", "overlayStyle"],
          nzPopoverBackdrop: "nzPopoverBackdrop"
        },
        outputs: {
          visibleChange: "nzPopoverVisibleChange"
        },
        exportAs: ["nzPopover"],
        features: [\u0275\u0275InputTransformsFeature, \u0275\u0275InheritDefinitionFeature]
      });
    }
  };
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzPopoverDirective, [{
    type: Directive,
    args: [{
      selector: "[nz-popover]",
      exportAs: "nzPopover",
      host: {
        "[class.ant-popover-open]": "visible"
      }
    }]
  }], () => [], {
    arrowPointAtCenter: [{
      type: Input,
      args: [{
        alias: "nzPopoverArrowPointAtCenter",
        transform: booleanAttribute
      }]
    }],
    title: [{
      type: Input,
      args: ["nzPopoverTitle"]
    }],
    content: [{
      type: Input,
      args: ["nzPopoverContent"]
    }],
    directiveTitle: [{
      type: Input,
      args: ["nz-popover"]
    }],
    trigger: [{
      type: Input,
      args: ["nzPopoverTrigger"]
    }],
    placement: [{
      type: Input,
      args: ["nzPopoverPlacement"]
    }],
    origin: [{
      type: Input,
      args: ["nzPopoverOrigin"]
    }],
    visible: [{
      type: Input,
      args: ["nzPopoverVisible"]
    }],
    mouseEnterDelay: [{
      type: Input,
      args: ["nzPopoverMouseEnterDelay"]
    }],
    mouseLeaveDelay: [{
      type: Input,
      args: ["nzPopoverMouseLeaveDelay"]
    }],
    overlayClassName: [{
      type: Input,
      args: ["nzPopoverOverlayClassName"]
    }],
    overlayStyle: [{
      type: Input,
      args: ["nzPopoverOverlayStyle"]
    }],
    nzPopoverBackdrop: [{
      type: Input
    }],
    visibleChange: [{
      type: Output,
      args: ["nzPopoverVisibleChange"]
    }]
  });
})();
var NzPopoverComponent = class _NzPopoverComponent extends NzToolTipComponent {
  constructor() {
    super(...arguments);
    this._prefix = "ant-popover";
  }
  get hasBackdrop() {
    return this.nzTrigger === "click" ? this.nzBackdrop : false;
  }
  isEmpty() {
    return isTooltipEmpty(this.nzTitle) && isTooltipEmpty(this.nzContent);
  }
  static {
    this.\u0275fac = /* @__PURE__ */ (() => {
      let \u0275NzPopoverComponent_BaseFactory;
      return function NzPopoverComponent_Factory(__ngFactoryType__) {
        return (\u0275NzPopoverComponent_BaseFactory || (\u0275NzPopoverComponent_BaseFactory = \u0275\u0275getInheritedFactory(_NzPopoverComponent)))(__ngFactoryType__ || _NzPopoverComponent);
      };
    })();
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzPopoverComponent,
      selectors: [["nz-popover"]],
      exportAs: ["nzPopoverComponent"],
      features: [\u0275\u0275InheritDefinitionFeature],
      decls: 2,
      vars: 6,
      consts: [["overlay", "cdkConnectedOverlay"], ["cdkConnectedOverlay", "", "nzConnectedOverlay", "", 3, "overlayOutsideClick", "detach", "positionChange", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayOpen", "cdkConnectedOverlayPush", "nzArrowPointAtCenter"], [1, "ant-popover", 3, "nzNoAnimation"], [1, "ant-popover-content"], [1, "ant-popover-arrow"], [1, "ant-popover-arrow-content"], ["role", "tooltip", 1, "ant-popover-inner"], [1, "ant-popover-title"], [1, "ant-popover-inner-content"], [4, "nzStringTemplateOutlet"]],
      template: function NzPopoverComponent_Template(rf, ctx) {
        if (rf & 1) {
          const _r1 = \u0275\u0275getCurrentView();
          \u0275\u0275template(0, NzPopoverComponent_ng_template_0_Template, 9, 11, "ng-template", 1, 0, \u0275\u0275templateRefExtractor);
          \u0275\u0275listener("overlayOutsideClick", function NzPopoverComponent_Template_ng_template_overlayOutsideClick_0_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.onClickOutside($event));
          })("detach", function NzPopoverComponent_Template_ng_template_detach_0_listener() {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.hide());
          })("positionChange", function NzPopoverComponent_Template_ng_template_positionChange_0_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.onPositionChange($event));
          });
        }
        if (rf & 2) {
          \u0275\u0275property("cdkConnectedOverlayHasBackdrop", ctx.hasBackdrop)("cdkConnectedOverlayOrigin", ctx.origin)("cdkConnectedOverlayPositions", ctx._positions)("cdkConnectedOverlayOpen", ctx._visible)("cdkConnectedOverlayPush", ctx.cdkConnectedOverlayPush)("nzArrowPointAtCenter", ctx.nzArrowPointAtCenter);
        }
      },
      dependencies: [OverlayModule, CdkConnectedOverlay, NzOverlayModule, NzConnectedOverlayDirective, NzNoAnimationDirective, NzOutletModule, NzStringTemplateOutletDirective],
      encapsulation: 2,
      data: {
        animation: [zoomBigMotion]
      },
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzPopoverComponent, [{
    type: Component,
    args: [{
      selector: "nz-popover",
      exportAs: "nzPopoverComponent",
      animations: [zoomBigMotion],
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      preserveWhitespaces: false,
      template: `
    <ng-template
      #overlay="cdkConnectedOverlay"
      cdkConnectedOverlay
      nzConnectedOverlay
      [cdkConnectedOverlayHasBackdrop]="hasBackdrop"
      [cdkConnectedOverlayOrigin]="origin"
      [cdkConnectedOverlayPositions]="_positions"
      [cdkConnectedOverlayOpen]="_visible"
      [cdkConnectedOverlayPush]="cdkConnectedOverlayPush"
      [nzArrowPointAtCenter]="nzArrowPointAtCenter"
      (overlayOutsideClick)="onClickOutside($event)"
      (detach)="hide()"
      (positionChange)="onPositionChange($event)"
    >
      <div
        class="ant-popover"
        [class.ant-popover-rtl]="dir === 'rtl'"
        [class]="_classMap"
        [style]="nzOverlayStyle"
        [@.disabled]="!!noAnimation?.nzNoAnimation"
        [nzNoAnimation]="noAnimation?.nzNoAnimation"
        [@zoomBigMotion]="'active'"
      >
        <div class="ant-popover-content">
          <div class="ant-popover-arrow">
            <span class="ant-popover-arrow-content"></span>
          </div>
          <div class="ant-popover-inner" role="tooltip">
            <div>
              @if (nzTitle) {
                <div class="ant-popover-title">
                  <ng-container *nzStringTemplateOutlet="nzTitle">{{ nzTitle }}</ng-container>
                </div>
              }
              <div class="ant-popover-inner-content">
                <ng-container *nzStringTemplateOutlet="nzContent">{{ nzContent }}</ng-container>
              </div>
            </div>
          </div>
        </div>
      </div>
    </ng-template>
  `,
      imports: [OverlayModule, NzOverlayModule, NzNoAnimationDirective, NzOutletModule]
    }]
  }], null, null);
})();
var NzPopoverModule = class _NzPopoverModule {
  static {
    this.\u0275fac = function NzPopoverModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzPopoverModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzPopoverModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      imports: [NzPopoverComponent]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzPopoverModule, [{
    type: NgModule,
    args: [{
      imports: [NzPopoverDirective, NzPopoverComponent],
      exports: [NzPopoverDirective, NzPopoverComponent]
    }]
  }], null, null);
})();

// src/app/modules/management/pages/bus-services/component/create-edit-bus-service-dialog/create-bus-service-dialog.component.ts
var _c014 = (a0) => ({ "border-red-500": a0 });
function CreateEditBusServiceDialogComponent_ng_template_15_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 17);
    \u0275\u0275listener("click", function CreateEditBusServiceDialogComponent_ng_template_15_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.busServiceForm.controls["name"].patchValue(""));
    });
    \u0275\u0275elementEnd();
  }
}
function CreateEditBusServiceDialogComponent_ng_template_17_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Vui l\xF2ng nh\u1EADp tr\u01B0\u1EDDng n\xE0y ");
  }
}
function CreateEditBusServiceDialogComponent_ng_template_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 18);
    \u0275\u0275template(1, CreateEditBusServiceDialogComponent_ng_template_17_Conditional_1_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275conditional((ctx_r2.busServiceForm.controls["name"].errors == null ? null : ctx_r2.busServiceForm.controls["name"].errors["required"]) ? 1 : -1);
  }
}
function CreateEditBusServiceDialogComponent_Conditional_20_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 25)(1, "div", 26)(2, "input", 27);
    \u0275\u0275listener("change", function CreateEditBusServiceDialogComponent_Conditional_20_ng_template_6_Template_input_change_2_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onFileChange($event));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 28);
    \u0275\u0275element(4, "svg-icon", 29);
    \u0275\u0275elementStart(5, "p", 30);
    \u0275\u0275text(6, "T\u1EADp tin c\u1EE5c b\u1ED9");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(7, "div", 31);
    \u0275\u0275listener("click", function CreateEditBusServiceDialogComponent_Conditional_20_ng_template_6_Template_div_click_7_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.openFilesCenterDialog());
    });
    \u0275\u0275element(8, "svg-icon", 32);
    \u0275\u0275elementStart(9, "p", 30);
    \u0275\u0275text(10, "Trung t\xE2m ph\u01B0\u01A1ng ti\u1EC7n");
    \u0275\u0275elementEnd()()();
  }
}
function CreateEditBusServiceDialogComponent_Conditional_20_p_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 33);
    \u0275\u0275text(1, " Vui l\xF2ng upload \u1EA3nh cho tr\u01B0\u1EDDng n\xE0y ");
    \u0275\u0275elementEnd();
  }
}
function CreateEditBusServiceDialogComponent_Conditional_20_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 19)(1, "div", 20)(2, "div", 21);
    \u0275\u0275element(3, "svg-icon", 22);
    \u0275\u0275elementStart(4, "p", 23);
    \u0275\u0275text(5, "T\u1EA3i \u1EA3nh l\xEAn");
    \u0275\u0275elementEnd()()()();
    \u0275\u0275template(6, CreateEditBusServiceDialogComponent_Conditional_20_ng_template_6_Template, 11, 0, "ng-template", null, 2, \u0275\u0275templateRefExtractor)(8, CreateEditBusServiceDialogComponent_Conditional_20_p_8_Template, 2, 0, "p", 24);
  }
  if (rf & 2) {
    const contentIconTemplate_r5 = \u0275\u0275reference(7);
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275property("nzPopoverContent", contentIconTemplate_r5)("ngClass", \u0275\u0275pureFunction1(3, _c014, (ctx_r2.busServiceForm.controls["icon"].errors == null ? null : ctx_r2.busServiceForm.controls["icon"].errors["required"]) && ctx_r2.busServiceForm.controls["icon"].touched));
    \u0275\u0275advance(8);
    \u0275\u0275property("ngIf", (ctx_r2.busServiceForm.controls["icon"].errors == null ? null : ctx_r2.busServiceForm.controls["icon"].errors["required"]) && ctx_r2.busServiceForm.controls["icon"].touched);
  }
}
function CreateEditBusServiceDialogComponent_Conditional_21_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 14)(1, "div", 34);
    \u0275\u0275element(2, "svg-icon", 35);
    \u0275\u0275elementStart(3, "div", 36)(4, "button", 37);
    \u0275\u0275listener("click", function CreateEditBusServiceDialogComponent_Conditional_21_Template_button_click_4_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.removeFileImage());
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(5, "svg", 38);
    \u0275\u0275element(6, "path", 39);
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("src", ctx_r2.busServiceIcon);
  }
}
var CreateEditBusServiceDialogComponent = class _CreateEditBusServiceDialogComponent {
  constructor(fb, utils, utilsModal) {
    this.fb = fb;
    this.utils = utils;
    this.utilsModal = utilsModal;
    this.dialogRef = inject(MatDialogRef);
    this.data = inject(MAT_DIALOG_DATA);
    this.busService = this.data.busService ?? new BusService2Create();
  }
  ngOnInit() {
    if (this.data) {
      this.busServiceIcon = this.busService.icon;
      console.log("\u{1F680} ~ CreateEditBusServiceDialogComponent ~ ngOnInit ~ this.busService:", this.busService);
    }
    this.initForm();
  }
  initForm() {
    return __async(this, null, function* () {
      this.busServiceForm = this.fb.group({
        name: [this.busService.name, [Validators.required]],
        icon: [this.busService.icon, Validators.required]
      });
    });
  }
  onButtonClick() {
  }
  closeDialog() {
    this.dialogRef.close();
  }
  onFileChange(event2) {
    const files = event2.target.files;
    if (!files || files.length === 0)
      return;
    const file = files[0];
    this.busServiceIconFile = file;
    if (file) {
      this.readAndSetImage(file);
    }
  }
  readAndSetImage(file) {
    const reader = new FileReader();
    reader.onload = (event2) => {
      const arrayBuffer = event2.target.result;
      const blob = new Blob([arrayBuffer], { type: file.type });
      this.busServiceIcon = URL.createObjectURL(blob);
    };
    reader.readAsArrayBuffer(file);
  }
  removeFileImage() {
    this.busServiceIcon = "";
    this.busServiceForm.patchValue({ icon: "" });
  }
  openFilesCenterDialog() {
    this.utilsModal.openModal(FilesCenterDialogComponent, null, "large").subscribe((files) => {
      if (!files || files.length === 0)
        return;
      this.busServiceIcon = files[0].link;
      this.busServiceForm.patchValue({ icon: files[0]._id });
    });
  }
  onSubmit() {
    if (!this.busServiceForm.valid) {
      this.utils.markFormGroupTouched(this.busServiceForm);
      return;
    }
    const { name: name2 } = this.busServiceForm.getRawValue();
    let dataTransfer = new DataTransfer();
    if (this.busServiceIconFile) {
      dataTransfer.items.add(this.busServiceIconFile);
    }
    const files = dataTransfer.files;
    const data = {
      name: name2,
      files
    };
    this.dialogRef.close(data);
  }
  static {
    this.\u0275fac = function CreateEditBusServiceDialogComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _CreateEditBusServiceDialogComponent)(\u0275\u0275directiveInject(FormBuilder), \u0275\u0275directiveInject(Utils), \u0275\u0275directiveInject(UtilsModal));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _CreateEditBusServiceDialogComponent, selectors: [["app-create-bus-service-dialog"]], standalone: false, decls: 25, vars: 6, consts: [["busServiceNameClearTpl", ""], ["busServiceNameErrorTpl", ""], ["contentIconTemplate", ""], [1, "p-3", "text-center"], [1, "text-xl", "font-bold"], [1, "absolute", "right-10", 3, "matDialogClose"], ["xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 24 24", "fill", "currentColor", 1, "size-6"], ["fill-rule", "evenodd", "d", "M5.47 5.47a.75.75 0 0 1 1.06 0L12 10.94l5.47-5.47a.75.75 0 1 1 1.06 1.06L13.06 12l5.47 5.47a.75.75 0 1 1-1.06 1.06L12 13.06l-5.47 5.47a.75.75 0 0 1-1.06-1.06L10.94 12 5.47 6.53a.75.75 0 0 1 0-1.06Z", "clip-rule", "evenodd"], ["nz-form", "", 1, "sm:min-w-36", "md:min-w-96", 3, "ngSubmit", "formGroup"], [1, "mb-5", "w-full"], ["nzFor", "name", 1, "!flex", "!h-[36px]", "!items-center", "!justify-start", 3, "nzSpan"], [1, "!flex", "!h-[56px]", "flex-col", 3, "nzErrorTip"], [1, "custom-nz-input-group", "!mt-0", "!mb-0", "!h-[36px]", 3, "nzSuffix"], ["type", "text", "nz-input", "", "formControlName", "name", "placeholder", "Nh\u1EADp Name"], [1, "relative", "h-32", "w-32", "select-none", "rounded", "border", "border-gray-200"], [1, "line-block", "space-x-4", "text-center"], [1, "bg-primary", "text-primary-foreground", "flex-none", "cursor-pointer", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold", 3, "click"], ["nz-icon", "", "nzTheme", "fill", "nzType", "close-circle", 1, "ant-input-clear-icon", 3, "click"], [1, "mt-1", "!text-xs", "text-red-500"], ["nz-popover", "", 1, "relative", "h-32", "w-32", "cursor-pointer", "select-none", "rounded", "border", "border-dashed", "border-gray-500", 3, "nzPopoverContent", "ngClass"], [1, "mx-auto-8", "left-0", "m-auto", "block", "flex", "h-full", "w-full", "flex-wrap", "content-center", "items-center", "px-4"], [1, "flex", "w-full", "flex-wrap", "justify-center", "pb-5", "text-center"], ["svgClass", "w-8 h-8", "src", "assets/icons/upload.svg"], [1, "w-full", "pt-1", "text-sm"], ["class", "animate-fade-in-down mt-1 text-xs text-red-500", 4, "ngIf"], [1, "grap-2", "grid", "w-96", "cursor-pointer", "grid-cols-2"], [1, "relative", "flex", "h-12", "cursor-pointer", "flex-wrap", "items-center", "justify-center", "px-2"], ["formControlName", "icon", "type", "file", "accept", ".svg", 1, "z-50", "block", "h-full", "w-full", "cursor-pointer", "opacity-0", 3, "change"], [1, "absolute", "top-0", "right-0", "left-0", "m-auto", "flex", "h-full", "w-full", "cursor-pointer", "flex-wrap", "content-center", "items-center", "justify-center"], ["svgClass", "w-7 h-7", "src", "assets/icons/upload.svg"], [1, "w-full", "pt-1", "text-center", "text-xs"], [1, "flex", "h-12", "cursor-pointer", "flex-wrap", "items-center", "justify-center", "px-2", 3, "click"], ["svgClass", "w-7 h-7", "src", "assets/icons/media.svg"], [1, "animate-fade-in-down", "mt-1", "text-xs", "text-red-500"], [1, "flex", "h-full", "w-full", "cursor-pointer", "items-center", "justify-center"], ["svgClass", "w-10 h-10", 3, "src"], [1, "action-preview-img", "absolute", "top-0", "right-0", "flex", "h-full", "w-full", "items-center", "justify-center", "opacity-0"], [3, "click"], ["xmlns", "http://www.w3.org/2000/svg", "fill", "none", "viewBox", "0 0 24 24", "stroke-width", "1.5", "stroke", "currentColor", 1, "size-4", "text-white"], ["stroke-linecap", "round", "stroke-linejoin", "round", "d", "m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"]], template: function CreateEditBusServiceDialogComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "mat-dialog-title", 3)(1, "span", 4);
        \u0275\u0275text(2);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(3, "button", 5);
        \u0275\u0275namespaceSVG();
        \u0275\u0275elementStart(4, "svg", 6);
        \u0275\u0275element(5, "path", 7);
        \u0275\u0275elementEnd()()();
        \u0275\u0275namespaceHTML();
        \u0275\u0275elementStart(6, "mat-dialog-content")(7, "form", 8);
        \u0275\u0275listener("ngSubmit", function CreateEditBusServiceDialogComponent_Template_form_ngSubmit_7_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onSubmit());
        });
        \u0275\u0275elementStart(8, "div", 9)(9, "nz-form-item")(10, "nz-form-label", 10);
        \u0275\u0275text(11, "Name");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(12, "nz-form-control", 11)(13, "nz-input-group", 12);
        \u0275\u0275element(14, "input", 13);
        \u0275\u0275elementEnd();
        \u0275\u0275template(15, CreateEditBusServiceDialogComponent_ng_template_15_Template, 1, 0, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(17, CreateEditBusServiceDialogComponent_ng_template_17_Template, 2, 1, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(19, "div");
        \u0275\u0275template(20, CreateEditBusServiceDialogComponent_Conditional_20_Template, 9, 5)(21, CreateEditBusServiceDialogComponent_Conditional_21_Template, 7, 1, "div", 14);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(22, "mat-dialog-actions", 15)(23, "button", 16);
        \u0275\u0275listener("click", function CreateEditBusServiceDialogComponent_Template_button_click_23_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onSubmit());
        });
        \u0275\u0275text(24, " SAVE ");
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        const busServiceNameClearTpl_r7 = \u0275\u0275reference(16);
        const busServiceNameErrorTpl_r8 = \u0275\u0275reference(18);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.data.title);
        \u0275\u0275advance(5);
        \u0275\u0275property("formGroup", ctx.busServiceForm);
        \u0275\u0275advance(3);
        \u0275\u0275property("nzSpan", 6);
        \u0275\u0275advance(2);
        \u0275\u0275property("nzErrorTip", busServiceNameErrorTpl_r8);
        \u0275\u0275advance();
        \u0275\u0275property("nzSuffix", busServiceNameClearTpl_r7);
        \u0275\u0275advance(7);
        \u0275\u0275conditional(!ctx.busServiceIcon ? 20 : 21);
      }
    }, dependencies: [NgClass, NgIf, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, FormGroupDirective, FormControlName, SvgIconComponent, MatDialogClose, MatDialogActions, MatDialogContent, NzTransitionPatchDirective, NzInputDirective, NzInputGroupComponent, NzInputGroupWhitSuffixOrPrefixDirective, NzColDirective, NzRowDirective, NzFormDirective, NzFormItemComponent, NzFormLabelComponent, NzFormControlComponent, NzPopoverDirective, NzIconDirective], styles: ["\n\n.action-preview-img[_ngcontent-%COMP%]:hover {\n  opacity: 1;\n  background: rgba(0, 0, 0, 0.5);\n}\n/*# sourceMappingURL=create-bus-service-dialog.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(CreateEditBusServiceDialogComponent, { className: "CreateEditBusServiceDialogComponent", filePath: "src/app/modules/management/pages/bus-services/component/create-edit-bus-service-dialog/create-bus-service-dialog.component.ts", lineNumber: 21 });
})();

// src/app/modules/management/pages/bus-services/service/bus-services.servive.ts
var BusServicesService = class _BusServicesService {
  constructor(apiGatewayService, filesService) {
    this.apiGatewayService = apiGatewayService;
    this.filesService = filesService;
    this.url = "/bus-service";
  }
  findAll() {
    const url = `${this.url}/findAll`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  searchBusService(pageIdx = 0, pageSize = 999, keyword = "", sortBy = "") {
    const url = `${this.url}/search?pageIdx=${pageIdx}&pageSize=${pageSize}&keyword=${keyword}&sortBy=${sortBy}`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  createBusService(busServiceIconFile, busService2Create) {
    const url = this.url;
    return this.filesService.uploadFiles(busServiceIconFile).pipe(switchMap((res) => {
      busService2Create.icon = res[0].link;
      return this.apiGatewayService.post(url, busService2Create).pipe(tap((res2) => {
      }), catchError((error2) => {
        return of([]);
      }));
    }));
  }
  processUpdateBusService(BusServiceIconFile, busService2Update) {
    const url = this.url;
    if (BusServiceIconFile.length > 0) {
      return this.filesService.uploadFiles(BusServiceIconFile).pipe(switchMap((res) => {
        busService2Update.icon = res[0].link;
        return this.updateBusService(busService2Update);
      }));
    } else {
      return this.updateBusService(busService2Update);
    }
  }
  updateBusService(busService2Update) {
    const url = this.url;
    return this.apiGatewayService.put(url, busService2Update).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  deleteBusService(id) {
    const deleteOptionUrl = this.url + `/${id}`;
    return this.apiGatewayService.delete(deleteOptionUrl).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  static {
    this.\u0275fac = function BusServicesService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusServicesService)(\u0275\u0275inject(ApiGatewayService), \u0275\u0275inject(FilesService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _BusServicesService, factory: _BusServicesService.\u0275fac, providedIn: "root" });
  }
};

// src/app/modules/management/pages/bus-services/bus-services.component.ts
var _forTrack03 = ($index, $item) => $item._id;
function BusServicesComponent_For_22_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr", 13)(1, "td", 15)(2, "input", 16);
    \u0275\u0275twoWayListener("ngModelChange", function BusServicesComponent_For_22_Template_input_ngModelChange_2_listener($event) {
      const busService_r2 = \u0275\u0275restoreView(_r1).$implicit;
      \u0275\u0275twoWayBindingSet(busService_r2.selected, $event) || (busService_r2.selected = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function BusServicesComponent_For_22_Template_input_change_2_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.checkSelectAll());
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(3, "td");
    \u0275\u0275element(4, "svg-icon", 17);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "td");
    \u0275\u0275text(6);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "td", 15)(8, "button", 18);
    \u0275\u0275listener("click", function BusServicesComponent_For_22_Template_button_click_8_listener() {
      const busService_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.editBusService(busService_r2));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(9, "svg", 19);
    \u0275\u0275element(10, "path", 20);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(11, "button", 21);
    \u0275\u0275listener("click", function BusServicesComponent_For_22_Template_button_click_11_listener() {
      const busService_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.deleteBusService(busService_r2._id));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(12, "svg", 19);
    \u0275\u0275element(13, "path", 22);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const busService_r2 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", busService_r2.selected);
    \u0275\u0275attribute("aria-label", "Select " + busService_r2.name);
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate("src", busService_r2.icon);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(busService_r2.name);
  }
}
function BusServicesComponent_ForEmpty_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr")(1, "td", 23);
    \u0275\u0275text(2, "No busServices found");
    \u0275\u0275elementEnd()();
  }
}
var BusServicesComponent = class _BusServicesComponent {
  constructor(busServicesService, dialog, utils) {
    this.busServicesService = busServicesService;
    this.dialog = dialog;
    this.utils = utils;
    this.searchBusService = new SearchBusService();
    this.selectAll = false;
    this.pageIdx = 1;
    this.pageSize = 5;
    this.totalPage = 0;
    this.totalItem = 0;
    this.keyword = "";
    this.sortBy = "";
    this.isLoadingBusService = false;
  }
  ngOnInit() {
    this.loadData();
  }
  loadData() {
    this.isLoadingBusService = true;
    this.busServicesService.searchBusService(this.pageIdx, this.pageSize, this.keyword, this.sortBy).subscribe({
      next: (res) => {
        if (res) {
          this.searchBusService = res;
          this.totalItem = this.searchBusService.totalItem;
          this.totalPage = this.searchBusService.totalPage;
        }
        this.isLoadingBusService = false;
      },
      error: (error2) => {
        this.utils.handleRequestError(error2);
        this.isLoadingBusService = false;
      }
    });
  }
  toggleBusService(event2) {
    const checked = event2.target.checked;
    this.searchBusService.busServices = this.searchBusService.busServices.map((busService) => __spreadProps(__spreadValues({}, busService), {
      selected: checked
    }));
  }
  checkSelectAll() {
    this.selectAll = !this.searchBusService.busServices.some((busService) => !busService.selected);
  }
  deleteBusService(id) {
    const dialogRef = this.dialog.open(MaterialDialogComponent, {
      data: {
        icon: {
          type: "dangerous"
        },
        title: "Delete BusService",
        content: "Are you sure you want to delete this busService? All of your data will be permanently removed. This action cannot be undone.",
        btn: [
          {
            label: "NO",
            type: "cancel"
          },
          {
            label: "YES",
            type: "submit"
          }
        ]
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        this.busServicesService.deleteBusService(id).subscribe({
          next: (res) => {
            if (res) {
              this.searchBusService.busServices = this.searchBusService.busServices.filter((busService) => busService._id !== id);
              toast.success("BusService deleted successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  editBusService(busService) {
    const dialogRef = this.dialog.open(CreateEditBusServiceDialogComponent, {
      data: {
        title: "Edit BusService",
        busService: __spreadValues({}, busService)
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        const busServiceType2Update = __spreadProps(__spreadValues({}, busService), {
          name: result.name
        });
        this.busServicesService.processUpdateBusService(result.files, busServiceType2Update).subscribe({
          next: (res) => {
            if (res) {
              this.searchBusService.busServices = this.searchBusService.busServices.map((busService2) => busService2._id === res._id ? __spreadValues(__spreadValues({}, busService2), res) : busService2);
              toast.success("BusService updated successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  addBusService() {
    const dialogRef = this.dialog.open(CreateEditBusServiceDialogComponent, {
      data: {
        title: "Add New BusService"
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        const busService2Create = new BusService2Create();
        busService2Create.name = result.name;
        this.busServicesService.createBusService(result.files, busService2Create).subscribe({
          next: (res) => {
            if (res) {
              this.loadData();
              toast.success("BusService added successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  reloadBusServicePage(data) {
    this.pageIdx = data.pageIdx;
    this.pageSize = data.pageSize;
    this.loadData();
  }
  searchBusServicePage(keyword) {
    this.pageIdx = 1;
    this.keyword = keyword;
    this.loadData();
  }
  sortBusServicePage(sortBy) {
    this.sortBy = sortBy;
    this.loadData();
  }
  handleRequestError(error2) {
    const msg = "An error occurred while processing your request";
    toast.error(msg, {
      position: "bottom-right",
      description: error2.message || "Please try again later",
      action: {
        label: "Dismiss",
        onClick: () => {
        }
      },
      actionButtonStyle: "background-color:#DC2626; color:white;"
    });
  }
  static {
    this.\u0275fac = function BusServicesComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusServicesComponent)(\u0275\u0275directiveInject(BusServicesService), \u0275\u0275directiveInject(MatDialog), \u0275\u0275directiveInject(Utils));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _BusServicesComponent, selectors: [["app-bus-services"]], standalone: false, decls: 25, vars: 9, consts: [[1, "mb-4", "flex", "justify-end"], [1, "inline-block", "space-x-4"], ["aria-label", "Import CSV", 1, "bg-muted", "text-muted-foreground", "hover:text-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold"], ["aria-label", "Add BusService", 1, "bg-primary", "text-primary-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold", 3, "click"], [1, "border-muted/20", "bg-background", "flex", "min-w-full", "flex-col", "rounded-xl", "border", "p-2"], [3, "sortDataEvent", "searchDataEvent", "title", "totalItem"], [1, "overflow-x-auto"], [1, "text-muted-foreground", "w-full", "table-auto", "border-collapse", "text-left", "align-middle", "leading-5"], [1, "border-muted/20", "text-muted-foreground", "border", "text-xs"], [1, "w-[50px]"], ["type", "checkbox", "aria-label", "Select all busServices", 1, "checkbox", "checkbox-sm", 3, "change", "ngModelChange", "ngModel"], [1, "min-w-[200px]"], [1, "w-[100px]", "text-center"], [1, "hover:bg-card/50"], [3, "reloadDataAndPageEvent", "pageIdx", "pageSize", "totalItem", "isLoading", "totalPage"], [1, "text-center"], ["type", "checkbox", 1, "checkbox", "checkbox-sm", 3, "ngModelChange", "change", "ngModel"], ["svgClass", "w-6 h-6", 3, "src"], ["aria-label", "Edit busService", 1, "text-muted-foreground", "hover:bg-card", "hover:text-foreground", "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", 3, "click"], ["viewBox", "0 0 20 20", "fill", "currentColor", 1, "size-5"], ["d", "m2.695 14.762-1.262 3.155a.5.5 0 0 0 .65.65l3.155-1.262a4 4 0 0 0 1.343-.886L17.5 5.501a2.121 2.121 0 0 0-3-3L3.58 13.419a4 4 0 0 0-.885 1.343Z"], ["aria-label", "Delete busService", 1, "text-muted-foreground", "hover:bg-card", "hover:text-foreground", "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", 3, "click"], ["fill-rule", "evenodd", "d", "M8.75 1A2.75 2.75 0 0 0 6 3.75v.443c-.795.077-1.584.176-2.365.298a.75.75 0 1 0 .23 1.482l.149-.022.841 10.518A2.75 2.75 0 0 0 7.596 19h4.807a2.75 2.75 0 0 0 2.742-2.53l.841-10.52.149.023a.75.75 0 0 0 .23-1.482A41.03 41.03 0 0 0 14 4.193V3.75A2.75 2.75 0 0 0 11.25 1h-2.5ZM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25v.325C8.327 4.025 9.16 4 10 4ZM8.58 7.72a.75.75 0 0 0-1.5.06l.3 7.5a.75.75 0 1 0 1.5-.06l-.3-7.5Zm4.34.06a.75.75 0 1 0-1.5-.06l-.3 7.5a.75.75 0 1 0 1.5.06l.3-7.5Z", "clip-rule", "evenodd"], ["colspan", "4", 1, "py-4", "text-center", "text-sm"]], template: function BusServicesComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "button", 2);
        \u0275\u0275text(3, " Import CSV ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(4, "button", 3);
        \u0275\u0275listener("click", function BusServicesComponent_Template_button_click_4_listener() {
          return ctx.addBusService();
        });
        \u0275\u0275text(5, " Add BusService ");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(6, "div", 4)(7, "app-table-action", 5);
        \u0275\u0275listener("sortDataEvent", function BusServicesComponent_Template_app_table_action_sortDataEvent_7_listener($event) {
          return ctx.sortBusServicePage($event);
        })("searchDataEvent", function BusServicesComponent_Template_app_table_action_searchDataEvent_7_listener($event) {
          return ctx.searchBusServicePage($event);
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "div", 6)(9, "table", 7)(10, "thead", 8)(11, "tr")(12, "th", 9)(13, "input", 10);
        \u0275\u0275listener("change", function BusServicesComponent_Template_input_change_13_listener($event) {
          return ctx.toggleBusService($event);
        });
        \u0275\u0275twoWayListener("ngModelChange", function BusServicesComponent_Template_input_ngModelChange_13_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.selectAll, $event) || (ctx.selectAll = $event);
          return $event;
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(14, "th", 9);
        \u0275\u0275text(15, "Icon");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(16, "th", 11);
        \u0275\u0275text(17, "Name");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(18, "th", 12);
        \u0275\u0275text(19, "Actions");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(20, "tbody");
        \u0275\u0275repeaterCreate(21, BusServicesComponent_For_22_Template, 14, 4, "tr", 13, _forTrack03, false, BusServicesComponent_ForEmpty_23_Template, 3, 0, "tr");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(24, "app-table-footer", 14);
        \u0275\u0275listener("reloadDataAndPageEvent", function BusServicesComponent_Template_app_table_footer_reloadDataAndPageEvent_24_listener($event) {
          return ctx.reloadBusServicePage($event);
        });
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(7);
        \u0275\u0275property("title", "BusService")("totalItem", ctx.totalItem);
        \u0275\u0275advance(6);
        \u0275\u0275twoWayProperty("ngModel", ctx.selectAll);
        \u0275\u0275advance(8);
        \u0275\u0275repeater(ctx.searchBusService.busServices);
        \u0275\u0275advance(3);
        \u0275\u0275property("pageIdx", ctx.pageIdx)("pageSize", ctx.pageSize)("totalItem", ctx.totalItem)("isLoading", ctx.isLoadingBusService)("totalPage", ctx.totalPage);
      }
    }, dependencies: [CheckboxControlValueAccessor, NgControlStatus, NgModel, SvgIconComponent, TableFooterComponent, TableActionComponent], styles: ["\n\ntd[_ngcontent-%COMP%] {\n  padding: 0.75rem 1rem;\n  font-size: 0.85rem;\n}\nth[_ngcontent-%COMP%] {\n  font-weight: 500;\n  padding: 0.625rem 1rem;\n  font-weight: 500;\n  font-size: 0.8125rem;\n  line-height: 1.125rem;\n  vertical-align: middle;\n  @apply border-b border-r;\n}\n/*# sourceMappingURL=bus-services.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(BusServicesComponent, { className: "BusServicesComponent", filePath: "src/app/modules/management/pages/bus-services/bus-services.component.ts", lineNumber: 16 });
})();

// src/app/modules/management/pages/bus-stations/model/bus-station.model.ts
var SearchBusStation = class {
  constructor() {
    this.busStations = [];
    this.pageIdx = 0;
    this.totalItem = 0;
    this.totalPage = 0;
  }
};
var BusStation = class {
  constructor() {
    this._id = "";
    this.name = "";
    this.icon = "";
    this.provinceId = "";
    this.selected = false;
  }
};
var BusStation2Create = class {
  constructor() {
    this.name = "";
    this.detailAddress = "";
    this.provinceId = "";
  }
};

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-empty.mjs
function NzEmptyComponent_Conditional_1_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "img", 4);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("src", ctx_r0.nzNotFoundImage, \u0275\u0275sanitizeUrl)("alt", ctx_r0.isContentString ? ctx_r0.nzNotFoundContent : "empty");
  }
}
function NzEmptyComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzEmptyComponent_Conditional_1_ng_container_0_Template, 2, 2, "ng-container", 3);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r0.nzNotFoundImage);
  }
}
function NzEmptyComponent_Conditional_2_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-empty-simple");
  }
}
function NzEmptyComponent_Conditional_2_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-empty-default");
  }
}
function NzEmptyComponent_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzEmptyComponent_Conditional_2_Conditional_0_Template, 1, 0, "nz-empty-simple")(1, NzEmptyComponent_Conditional_2_Conditional_1_Template, 1, 0, "nz-empty-default");
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r0.nzNotFoundImage === "simple" ? 0 : 1);
  }
}
function NzEmptyComponent_Conditional_3_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.isContentString ? ctx_r0.nzNotFoundContent : ctx_r0.locale["description"], " ");
  }
}
function NzEmptyComponent_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 1);
    \u0275\u0275template(1, NzEmptyComponent_Conditional_3_ng_container_1_Template, 2, 1, "ng-container", 3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r0.nzNotFoundContent);
  }
}
function NzEmptyComponent_Conditional_4_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.nzNotFoundFooter, " ");
  }
}
function NzEmptyComponent_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 2);
    \u0275\u0275template(1, NzEmptyComponent_Conditional_4_ng_container_1_Template, 2, 1, "ng-container", 3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r0.nzNotFoundFooter);
  }
}
function NzEmbedEmptyComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.content, " ");
  }
}
function NzEmbedEmptyComponent_Conditional_0_Conditional_1_ng_template_0_Template(rf, ctx) {
}
function NzEmbedEmptyComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzEmbedEmptyComponent_Conditional_0_Conditional_1_ng_template_0_Template, 0, 0, "ng-template", 0);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("cdkPortalOutlet", ctx_r0.contentPortal);
  }
}
function NzEmbedEmptyComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzEmbedEmptyComponent_Conditional_0_Conditional_0_Template, 1, 1)(1, NzEmbedEmptyComponent_Conditional_0_Conditional_1_Template, 1, 1, null, 0);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r0.contentType === "string" ? 0 : 1);
  }
}
function NzEmbedEmptyComponent_Conditional_1_Conditional_0_Case_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-empty", 1);
  }
}
function NzEmbedEmptyComponent_Conditional_1_Conditional_0_Case_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-empty", 2);
  }
}
function NzEmbedEmptyComponent_Conditional_1_Conditional_0_Case_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-empty");
  }
}
function NzEmbedEmptyComponent_Conditional_1_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzEmbedEmptyComponent_Conditional_1_Conditional_0_Case_0_Template, 1, 0, "nz-empty", 1)(1, NzEmbedEmptyComponent_Conditional_1_Conditional_0_Case_1_Template, 1, 0, "nz-empty", 2)(2, NzEmbedEmptyComponent_Conditional_1_Conditional_0_Case_2_Template, 1, 0, "nz-empty");
  }
  if (rf & 2) {
    let tmp_2_0;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275conditional((tmp_2_0 = ctx_r0.size) === "normal" ? 0 : tmp_2_0 === "small" ? 1 : 2);
  }
}
function NzEmbedEmptyComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzEmbedEmptyComponent_Conditional_1_Conditional_0_Template, 3, 1);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r0.specificContent !== null ? 0 : -1);
  }
}
var NZ_EMPTY_COMPONENT_NAME = new InjectionToken("nz-empty-component-name");
var NzEmptyDefaultComponent = class _NzEmptyDefaultComponent {
  static {
    this.\u0275fac = function NzEmptyDefaultComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzEmptyDefaultComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzEmptyDefaultComponent,
      selectors: [["nz-empty-default"]],
      exportAs: ["nzEmptyDefault"],
      decls: 12,
      vars: 0,
      consts: [["width", "184", "height", "152", "viewBox", "0 0 184 152", "xmlns", "http://www.w3.org/2000/svg", 1, "ant-empty-img-default"], ["fill", "none", "fill-rule", "evenodd"], ["transform", "translate(24 31.67)"], ["cx", "67.797", "cy", "106.89", "rx", "67.797", "ry", "12.668", 1, "ant-empty-img-default-ellipse"], ["d", "M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z", 1, "ant-empty-img-default-path-1"], ["d", "M101.537 86.214L80.63 61.102c-1.001-1.207-2.507-1.867-4.048-1.867H31.724c-1.54 0-3.047.66-4.048 1.867L6.769 86.214v13.792h94.768V86.214z", "transform", "translate(13.56)", 1, "ant-empty-img-default-path-2"], ["d", "M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z", 1, "ant-empty-img-default-path-3"], ["d", "M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z", 1, "ant-empty-img-default-path-4"], ["d", "M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z", 1, "ant-empty-img-default-path-5"], ["transform", "translate(149.65 15.383)", 1, "ant-empty-img-default-g"], ["cx", "20.654", "cy", "3.167", "rx", "2.849", "ry", "2.815"], ["d", "M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z"]],
      template: function NzEmptyDefaultComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275namespaceSVG();
          \u0275\u0275elementStart(0, "svg", 0)(1, "g", 1)(2, "g", 2);
          \u0275\u0275element(3, "ellipse", 3)(4, "path", 4)(5, "path", 5)(6, "path", 6)(7, "path", 7);
          \u0275\u0275elementEnd();
          \u0275\u0275element(8, "path", 8);
          \u0275\u0275elementStart(9, "g", 9);
          \u0275\u0275element(10, "ellipse", 10)(11, "path", 11);
          \u0275\u0275elementEnd()()();
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzEmptyDefaultComponent, [{
    type: Component,
    args: [{
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      selector: "nz-empty-default",
      exportAs: "nzEmptyDefault",
      template: `
    <svg
      class="ant-empty-img-default"
      width="184"
      height="152"
      viewBox="0 0 184 152"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g fill="none" fill-rule="evenodd">
        <g transform="translate(24 31.67)">
          <ellipse class="ant-empty-img-default-ellipse" cx="67.797" cy="106.89" rx="67.797" ry="12.668" />
          <path
            class="ant-empty-img-default-path-1"
            d="M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z"
          />
          <path
            class="ant-empty-img-default-path-2"
            d="M101.537 86.214L80.63 61.102c-1.001-1.207-2.507-1.867-4.048-1.867H31.724c-1.54 0-3.047.66-4.048 1.867L6.769 86.214v13.792h94.768V86.214z"
            transform="translate(13.56)"
          />
          <path
            class="ant-empty-img-default-path-3"
            d="M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z"
          />
          <path
            class="ant-empty-img-default-path-4"
            d="M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z"
          />
        </g>
        <path
          class="ant-empty-img-default-path-5"
          d="M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z"
        />
        <g class="ant-empty-img-default-g" transform="translate(149.65 15.383)">
          <ellipse cx="20.654" cy="3.167" rx="2.849" ry="2.815" />
          <path d="M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z" />
        </g>
      </g>
    </svg>
  `
    }]
  }], null, null);
})();
var NzEmptySimpleComponent = class _NzEmptySimpleComponent {
  static {
    this.\u0275fac = function NzEmptySimpleComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzEmptySimpleComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzEmptySimpleComponent,
      selectors: [["nz-empty-simple"]],
      exportAs: ["nzEmptySimple"],
      decls: 6,
      vars: 0,
      consts: [["width", "64", "height", "41", "viewBox", "0 0 64 41", "xmlns", "http://www.w3.org/2000/svg", 1, "ant-empty-img-simple"], ["transform", "translate(0 1)", "fill", "none", "fill-rule", "evenodd"], ["cx", "32", "cy", "33", "rx", "32", "ry", "7", 1, "ant-empty-img-simple-ellipse"], ["fill-rule", "nonzero", 1, "ant-empty-img-simple-g"], ["d", "M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"], ["d", "M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z", 1, "ant-empty-img-simple-path"]],
      template: function NzEmptySimpleComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275namespaceSVG();
          \u0275\u0275elementStart(0, "svg", 0)(1, "g", 1);
          \u0275\u0275element(2, "ellipse", 2);
          \u0275\u0275elementStart(3, "g", 3);
          \u0275\u0275element(4, "path", 4)(5, "path", 5);
          \u0275\u0275elementEnd()()();
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzEmptySimpleComponent, [{
    type: Component,
    args: [{
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      selector: "nz-empty-simple",
      exportAs: "nzEmptySimple",
      template: `
    <svg class="ant-empty-img-simple" width="64" height="41" viewBox="0 0 64 41" xmlns="http://www.w3.org/2000/svg">
      <g transform="translate(0 1)" fill="none" fill-rule="evenodd">
        <ellipse class="ant-empty-img-simple-ellipse" cx="32" cy="33" rx="32" ry="7" />
        <g class="ant-empty-img-simple-g" fill-rule="nonzero">
          <path
            d="M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"
          />
          <path
            d="M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z"
            class="ant-empty-img-simple-path"
          />
        </g>
      </g>
    </svg>
  `
    }]
  }], null, null);
})();
var NzEmptyDefaultImages = ["default", "simple"];
var NzEmptyComponent = class _NzEmptyComponent {
  constructor(i18n, cdr) {
    this.i18n = i18n;
    this.cdr = cdr;
    this.nzNotFoundImage = "default";
    this.isContentString = false;
    this.isImageBuildIn = true;
    this.destroy$ = new Subject();
  }
  ngOnChanges(changes) {
    const {
      nzNotFoundContent,
      nzNotFoundImage
    } = changes;
    if (nzNotFoundContent) {
      const content = nzNotFoundContent.currentValue;
      this.isContentString = typeof content === "string";
    }
    if (nzNotFoundImage) {
      const image = nzNotFoundImage.currentValue || "default";
      this.isImageBuildIn = NzEmptyDefaultImages.findIndex((i) => i === image) > -1;
    }
  }
  ngOnInit() {
    this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
      this.locale = this.i18n.getLocaleData("Empty");
      this.cdr.markForCheck();
    });
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  static {
    this.\u0275fac = function NzEmptyComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzEmptyComponent)(\u0275\u0275directiveInject(NzI18nService), \u0275\u0275directiveInject(ChangeDetectorRef));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzEmptyComponent,
      selectors: [["nz-empty"]],
      hostAttrs: [1, "ant-empty"],
      inputs: {
        nzNotFoundImage: "nzNotFoundImage",
        nzNotFoundContent: "nzNotFoundContent",
        nzNotFoundFooter: "nzNotFoundFooter"
      },
      exportAs: ["nzEmpty"],
      features: [\u0275\u0275NgOnChangesFeature],
      decls: 5,
      vars: 3,
      consts: [[1, "ant-empty-image"], [1, "ant-empty-description"], [1, "ant-empty-footer"], [4, "nzStringTemplateOutlet"], [3, "src", "alt"]],
      template: function NzEmptyComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275elementStart(0, "div", 0);
          \u0275\u0275template(1, NzEmptyComponent_Conditional_1_Template, 1, 1, "ng-container")(2, NzEmptyComponent_Conditional_2_Template, 2, 1);
          \u0275\u0275elementEnd();
          \u0275\u0275template(3, NzEmptyComponent_Conditional_3_Template, 2, 1, "p", 1)(4, NzEmptyComponent_Conditional_4_Template, 2, 1, "div", 2);
        }
        if (rf & 2) {
          \u0275\u0275advance();
          \u0275\u0275conditional(!ctx.isImageBuildIn ? 1 : 2);
          \u0275\u0275advance(2);
          \u0275\u0275conditional(ctx.nzNotFoundContent !== null ? 3 : -1);
          \u0275\u0275advance();
          \u0275\u0275conditional(ctx.nzNotFoundFooter ? 4 : -1);
        }
      },
      dependencies: [NzOutletModule, NzStringTemplateOutletDirective, NzEmptyDefaultComponent, NzEmptySimpleComponent],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzEmptyComponent, [{
    type: Component,
    args: [{
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      selector: "nz-empty",
      exportAs: "nzEmpty",
      template: `
    <div class="ant-empty-image">
      @if (!isImageBuildIn) {
        <ng-container *nzStringTemplateOutlet="nzNotFoundImage">
          <img [src]="nzNotFoundImage" [alt]="isContentString ? nzNotFoundContent : 'empty'" />
        </ng-container>
      } @else {
        @if (nzNotFoundImage === 'simple') {
          <nz-empty-simple />
        } @else {
          <nz-empty-default />
        }
      }
    </div>
    @if (nzNotFoundContent !== null) {
      <p class="ant-empty-description">
        <ng-container *nzStringTemplateOutlet="nzNotFoundContent">
          {{ isContentString ? nzNotFoundContent : locale['description'] }}
        </ng-container>
      </p>
    }

    @if (nzNotFoundFooter) {
      <div class="ant-empty-footer">
        <ng-container *nzStringTemplateOutlet="nzNotFoundFooter">
          {{ nzNotFoundFooter }}
        </ng-container>
      </div>
    }
  `,
      host: {
        class: "ant-empty"
      },
      imports: [NzOutletModule, NzEmptyDefaultComponent, NzEmptySimpleComponent]
    }]
  }], () => [{
    type: NzI18nService
  }, {
    type: ChangeDetectorRef
  }], {
    nzNotFoundImage: [{
      type: Input
    }],
    nzNotFoundContent: [{
      type: Input
    }],
    nzNotFoundFooter: [{
      type: Input
    }]
  });
})();
function getEmptySize(componentName) {
  switch (componentName) {
    case "table":
    case "list":
      return "normal";
    case "select":
    case "tree-select":
    case "cascader":
    case "transfer":
      return "small";
    default:
      return "";
  }
}
var NzEmbedEmptyComponent = class _NzEmbedEmptyComponent {
  constructor(configService, viewContainerRef, cdr, injector) {
    this.configService = configService;
    this.viewContainerRef = viewContainerRef;
    this.cdr = cdr;
    this.injector = injector;
    this.contentType = "string";
    this.size = "";
    this.destroy$ = new Subject();
  }
  ngOnChanges(changes) {
    if (changes.nzComponentName) {
      this.size = getEmptySize(changes.nzComponentName.currentValue);
    }
    if (changes.specificContent && !changes.specificContent.isFirstChange()) {
      this.content = changes.specificContent.currentValue;
      this.renderEmpty();
    }
  }
  ngOnInit() {
    this.subscribeDefaultEmptyContentChange();
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  renderEmpty() {
    const content = this.content;
    if (typeof content === "string") {
      this.contentType = "string";
    } else if (content instanceof TemplateRef) {
      const context = {
        $implicit: this.nzComponentName
      };
      this.contentType = "template";
      this.contentPortal = new TemplatePortal(content, this.viewContainerRef, context);
    } else if (content instanceof Type) {
      const injector = Injector.create({
        parent: this.injector,
        providers: [{
          provide: NZ_EMPTY_COMPONENT_NAME,
          useValue: this.nzComponentName
        }]
      });
      this.contentType = "component";
      this.contentPortal = new ComponentPortal(content, this.viewContainerRef, injector);
    } else {
      this.contentType = "string";
      this.contentPortal = void 0;
    }
    this.cdr.detectChanges();
  }
  subscribeDefaultEmptyContentChange() {
    this.configService.getConfigChangeEventForComponent("empty").pipe(startWith(true), takeUntil(this.destroy$)).subscribe(() => {
      this.content = this.specificContent || this.getUserDefaultEmptyContent();
      this.renderEmpty();
    });
  }
  getUserDefaultEmptyContent() {
    return (this.configService.getConfigForComponent("empty") || {}).nzDefaultEmptyContent;
  }
  static {
    this.\u0275fac = function NzEmbedEmptyComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzEmbedEmptyComponent)(\u0275\u0275directiveInject(NzConfigService), \u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(Injector));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzEmbedEmptyComponent,
      selectors: [["nz-embed-empty"]],
      inputs: {
        nzComponentName: "nzComponentName",
        specificContent: "specificContent"
      },
      exportAs: ["nzEmbedEmpty"],
      features: [\u0275\u0275NgOnChangesFeature],
      decls: 2,
      vars: 1,
      consts: [[3, "cdkPortalOutlet"], ["nzNotFoundImage", "simple", 1, "ant-empty-normal"], ["nzNotFoundImage", "simple", 1, "ant-empty-small"]],
      template: function NzEmbedEmptyComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275template(0, NzEmbedEmptyComponent_Conditional_0_Template, 2, 1)(1, NzEmbedEmptyComponent_Conditional_1_Template, 1, 1);
        }
        if (rf & 2) {
          \u0275\u0275conditional(ctx.content ? 0 : 1);
        }
      },
      dependencies: [NzEmptyComponent, PortalModule, CdkPortalOutlet],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzEmbedEmptyComponent, [{
    type: Component,
    args: [{
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      selector: "nz-embed-empty",
      exportAs: "nzEmbedEmpty",
      template: `
    @if (content) {
      @if (contentType === 'string') {
        {{ content }}
      } @else {
        <ng-template [cdkPortalOutlet]="contentPortal" />
      }
    } @else {
      @if (specificContent !== null) {
        @switch (size) {
          @case ('normal') {
            <nz-empty class="ant-empty-normal" nzNotFoundImage="simple" />
          }
          @case ('small') {
            <nz-empty class="ant-empty-small" nzNotFoundImage="simple" />
          }
          @default {
            <nz-empty />
          }
        }
      }
    }
  `,
      imports: [NzEmptyComponent, PortalModule]
    }]
  }], () => [{
    type: NzConfigService
  }, {
    type: ViewContainerRef
  }, {
    type: ChangeDetectorRef
  }, {
    type: Injector
  }], {
    nzComponentName: [{
      type: Input
    }],
    specificContent: [{
      type: Input
    }]
  });
})();
var NzEmptyModule = class _NzEmptyModule {
  static {
    this.\u0275fac = function NzEmptyModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzEmptyModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzEmptyModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      imports: [NzEmptyComponent, NzEmbedEmptyComponent]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzEmptyModule, [{
    type: NgModule,
    args: [{
      imports: [NzEmptyComponent, NzEmbedEmptyComponent, NzEmptyDefaultComponent, NzEmptySimpleComponent],
      exports: [NzEmptyComponent, NzEmbedEmptyComponent]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-select.mjs
var _c015 = ["*"];
function NzOptionItemGroupComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.nzLabel);
  }
}
function NzOptionItemComponent_Conditional_1_ng_template_0_Template(rf, ctx) {
}
function NzOptionItemComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzOptionItemComponent_Conditional_1_ng_template_0_Template, 0, 0, "ng-template", 1);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("ngTemplateOutlet", ctx_r0.template);
  }
}
function NzOptionItemComponent_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275textInterpolate1(" ", ctx_r0.label, " ");
  }
}
function NzOptionItemComponent_Conditional_3_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-icon", 3);
  }
}
function NzOptionItemComponent_Conditional_3_Conditional_2_ng_template_0_Template(rf, ctx) {
}
function NzOptionItemComponent_Conditional_3_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzOptionItemComponent_Conditional_3_Conditional_2_ng_template_0_Template, 0, 0, "ng-template", 1);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("ngTemplateOutlet", ctx_r0.icon);
  }
}
function NzOptionItemComponent_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 2);
    \u0275\u0275template(1, NzOptionItemComponent_Conditional_3_Conditional_1_Template, 1, 0, "nz-icon", 3)(2, NzOptionItemComponent_Conditional_3_Conditional_2_Template, 1, 1, null, 1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275conditional(!ctx_r0.icon ? 1 : 2);
  }
}
function NzOptionContainerComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0);
    \u0275\u0275element(1, "nz-embed-empty", 4);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("specificContent", ctx_r0.notFoundContent);
  }
}
function NzOptionContainerComponent_ng_template_3_Case_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-option-item-group", 5);
  }
  if (rf & 2) {
    let tmp_3_0;
    const item_r2 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("nzLabel", (tmp_3_0 = item_r2.groupLabel) !== null && tmp_3_0 !== void 0 ? tmp_3_0 : null);
  }
}
function NzOptionContainerComponent_ng_template_3_Case_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "nz-option-item", 7);
    \u0275\u0275listener("itemHover", function NzOptionContainerComponent_ng_template_3_Case_1_Template_nz_option_item_itemHover_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.onItemHover($event));
    })("itemClick", function NzOptionContainerComponent_ng_template_3_Case_1_Template_nz_option_item_itemClick_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.onItemClick($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_5_0;
    const item_r2 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("icon", ctx_r0.menuItemSelectedIcon)("customContent", item_r2.nzCustomContent)("template", (tmp_5_0 = item_r2.template) !== null && tmp_5_0 !== void 0 ? tmp_5_0 : null)("grouped", !!item_r2.groupLabel)("disabled", item_r2.nzDisabled || ctx_r0.isMaxLimitReached && !ctx_r0.listOfSelectedValue.includes(item_r2["nzValue"]))("showState", ctx_r0.mode === "tags" || ctx_r0.mode === "multiple")("title", item_r2.nzTitle)("label", item_r2.nzLabel)("compareWith", ctx_r0.compareWith)("activatedValue", ctx_r0.activatedValue)("listOfSelectedValue", ctx_r0.listOfSelectedValue)("value", item_r2.nzValue);
  }
}
function NzOptionContainerComponent_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzOptionContainerComponent_ng_template_3_Case_0_Template, 1, 1, "nz-option-item-group", 5)(1, NzOptionContainerComponent_ng_template_3_Case_1_Template, 1, 12, "nz-option-item", 6);
  }
  if (rf & 2) {
    let tmp_2_0;
    const item_r2 = ctx.$implicit;
    \u0275\u0275conditional((tmp_2_0 = item_r2.type) === "group" ? 0 : tmp_2_0 === "item" ? 1 : -1);
  }
}
function NzOptionContainerComponent_ng_template_4_Template(rf, ctx) {
}
function NzOptionComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275projection(0);
  }
}
function NzSelectArrowComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate2("", ctx_r0.listOfValue.length, " / ", ctx_r0.nzMaxMultipleCount, "");
  }
}
function NzSelectArrowComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-icon", 0);
  }
}
function NzSelectArrowComponent_Conditional_2_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-icon", 2);
  }
}
function NzSelectArrowComponent_Conditional_2_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-icon", 3);
  }
}
function NzSelectArrowComponent_Conditional_2_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzSelectArrowComponent_Conditional_2_Conditional_0_Conditional_0_Template, 1, 0, "nz-icon", 2)(1, NzSelectArrowComponent_Conditional_2_Conditional_0_Conditional_1_Template, 1, 0, "nz-icon", 3);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275conditional(ctx_r0.search ? 0 : 1);
  }
}
function NzSelectArrowComponent_Conditional_2_Conditional_1_ng_container_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-icon", 4);
  }
  if (rf & 2) {
    const suffixIcon_r2 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("nzType", suffixIcon_r2);
  }
}
function NzSelectArrowComponent_Conditional_2_Conditional_1_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzSelectArrowComponent_Conditional_2_Conditional_1_ng_container_0_Conditional_1_Template, 1, 1, "nz-icon", 4);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const suffixIcon_r2 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275conditional(suffixIcon_r2 ? 1 : -1);
  }
}
function NzSelectArrowComponent_Conditional_2_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzSelectArrowComponent_Conditional_2_Conditional_1_ng_container_0_Template, 2, 1, "ng-container", 1);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r0.suffixIcon);
  }
}
function NzSelectArrowComponent_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzSelectArrowComponent_Conditional_2_Conditional_0_Template, 2, 1)(1, NzSelectArrowComponent_Conditional_2_Conditional_1_Template, 1, 1, "ng-container");
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r0.showArrow && !ctx_r0.suffixIcon ? 0 : 1);
  }
}
function NzSelectArrowComponent_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.feedbackIcon);
  }
}
function NzSelectClearComponent_Conditional_0_ng_template_0_Template(rf, ctx) {
}
function NzSelectClearComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzSelectClearComponent_Conditional_0_ng_template_0_Template, 0, 0, "ng-template", 0);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("ngTemplateOutlet", ctx_r0.clearIcon);
  }
}
function NzSelectClearComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-icon", 1);
  }
}
function NzSelectItemComponent_ng_container_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 2);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.label);
  }
}
function NzSelectItemComponent_ng_container_0_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.label, " ");
  }
}
function NzSelectItemComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzSelectItemComponent_ng_container_0_Conditional_1_Template, 2, 1, "div", 2)(2, NzSelectItemComponent_ng_container_0_Conditional_2_Template, 1, 1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r0.deletable ? 1 : 2);
  }
}
function NzSelectItemComponent_Conditional_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-icon", 4);
  }
}
function NzSelectItemComponent_Conditional_1_Conditional_2_ng_template_0_Template(rf, ctx) {
}
function NzSelectItemComponent_Conditional_1_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzSelectItemComponent_Conditional_1_Conditional_2_ng_template_0_Template, 0, 0, "ng-template", 5);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("ngTemplateOutlet", ctx_r0.removeIcon);
  }
}
function NzSelectItemComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 3);
    \u0275\u0275listener("click", function NzSelectItemComponent_Conditional_1_Template_span_click_0_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onDelete($event));
    });
    \u0275\u0275template(1, NzSelectItemComponent_Conditional_1_Conditional_1_Template, 1, 0, "nz-icon", 4)(2, NzSelectItemComponent_Conditional_1_Conditional_2_Template, 1, 1, null, 5);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275conditional(!ctx_r0.removeIcon ? 1 : 2);
  }
}
function NzSelectPlaceholderComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.placeholder, " ");
  }
}
var _c19 = ["inputElement"];
var _c26 = ["mirrorElement"];
function NzSelectSearchComponent_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 3, 1);
  }
}
var _forTrack04 = ($index, $item) => $item.nzValue;
function NzSelectTopControlComponent_Case_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-select-item", 2);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("deletable", false)("disabled", false)("removeIcon", ctx_r1.removeIcon)("label", ctx_r1.listOfTopItem[0].nzLabel)("contentTemplateOutlet", ctx_r1.customTemplate)("contentTemplateOutletContext", ctx_r1.listOfTopItem[0]);
  }
}
function NzSelectTopControlComponent_Case_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "nz-select-search", 1);
    \u0275\u0275listener("isComposingChange", function NzSelectTopControlComponent_Case_0_Template_nz_select_search_isComposingChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.isComposingChange($event));
    })("valueChange", function NzSelectTopControlComponent_Case_0_Template_nz_select_search_valueChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onInputValueChange($event));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275template(1, NzSelectTopControlComponent_Case_0_Conditional_1_Template, 1, 6, "nz-select-item", 2);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("nzId", ctx_r1.nzId)("disabled", ctx_r1.disabled)("value", ctx_r1.inputValue)("showInput", ctx_r1.showSearch)("mirrorSync", false)("autofocus", ctx_r1.autofocus)("focusTrigger", ctx_r1.open);
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r1.isShowSingleLabel ? 1 : -1);
  }
}
function NzSelectTopControlComponent_Case_1_For_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "nz-select-item", 5);
    \u0275\u0275listener("delete", function NzSelectTopControlComponent_Case_1_For_1_Template_nz_select_item_delete_0_listener() {
      const item_r5 = \u0275\u0275restoreView(_r4).$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onDeleteItem(item_r5.contentTemplateOutletContext));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const item_r5 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("removeIcon", ctx_r1.removeIcon)("label", item_r5.nzLabel)("disabled", item_r5.nzDisabled || ctx_r1.disabled)("contentTemplateOutlet", item_r5.contentTemplateOutlet)("deletable", true)("contentTemplateOutletContext", item_r5.contentTemplateOutletContext);
  }
}
function NzSelectTopControlComponent_Case_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275repeaterCreate(0, NzSelectTopControlComponent_Case_1_For_1_Template, 1, 6, "nz-select-item", 3, _forTrack04);
    \u0275\u0275elementStart(2, "nz-select-search", 4);
    \u0275\u0275listener("isComposingChange", function NzSelectTopControlComponent_Case_1_Template_nz_select_search_isComposingChange_2_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.isComposingChange($event));
    })("valueChange", function NzSelectTopControlComponent_Case_1_Template_nz_select_search_valueChange_2_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onInputValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275repeater(ctx_r1.listOfSlicedItem);
    \u0275\u0275advance(2);
    \u0275\u0275property("nzId", ctx_r1.nzId)("disabled", ctx_r1.disabled)("value", ctx_r1.inputValue)("autofocus", ctx_r1.autofocus)("showInput", true)("mirrorSync", true)("focusTrigger", ctx_r1.open);
  }
}
function NzSelectTopControlComponent_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-select-placeholder", 0);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("placeholder", ctx_r1.placeHolder);
  }
}
function NzSelectComponent_Conditional_2_ng_template_1_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-form-item-feedback-icon", 6);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275property("status", ctx_r1.status);
  }
}
function NzSelectComponent_Conditional_2_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzSelectComponent_Conditional_2_ng_template_1_Conditional_0_Template, 1, 1, "nz-form-item-feedback-icon", 6);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275conditional(ctx_r1.hasFeedback && !!ctx_r1.status ? 0 : -1);
  }
}
function NzSelectComponent_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-select-arrow", 3);
    \u0275\u0275template(1, NzSelectComponent_Conditional_2_ng_template_1_Template, 1, 1, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const feedbackIconTpl_r3 = \u0275\u0275reference(2);
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("showArrow", ctx_r1.nzShowArrow)("loading", ctx_r1.nzLoading)("search", ctx_r1.nzOpen && ctx_r1.nzShowSearch)("suffixIcon", ctx_r1.nzSuffixIcon)("feedbackIcon", feedbackIconTpl_r3)("nzMaxMultipleCount", ctx_r1.nzMaxMultipleCount)("listOfValue", ctx_r1.listOfValue)("isMaxTagCountSet", ctx_r1.isMaxTagCountSet);
  }
}
function NzSelectComponent_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "nz-select-clear", 7);
    \u0275\u0275listener("clear", function NzSelectComponent_Conditional_3_Template_nz_select_clear_clear_0_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onClearSelection());
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("clearIcon", ctx_r1.nzClearIcon);
  }
}
function NzSelectComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "nz-option-container", 8);
    \u0275\u0275listener("keydown", function NzSelectComponent_ng_template_4_Template_nz_option_container_keydown_0_listener($event) {
      \u0275\u0275restoreView(_r5);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onKeyDown($event));
    })("itemClick", function NzSelectComponent_ng_template_4_Template_nz_option_container_itemClick_0_listener($event) {
      \u0275\u0275restoreView(_r5);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onItemClick($event));
    })("scrollToBottom", function NzSelectComponent_ng_template_4_Template_nz_option_container_scrollToBottom_0_listener() {
      \u0275\u0275restoreView(_r5);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.nzScrollToBottom.emit());
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275styleMap(ctx_r1.nzDropdownStyle);
    \u0275\u0275classProp("ant-select-dropdown-placement-bottomLeft", ctx_r1.dropdownPosition === "bottomLeft")("ant-select-dropdown-placement-topLeft", ctx_r1.dropdownPosition === "topLeft")("ant-select-dropdown-placement-bottomRight", ctx_r1.dropdownPosition === "bottomRight")("ant-select-dropdown-placement-topRight", ctx_r1.dropdownPosition === "topRight");
    \u0275\u0275property("itemSize", ctx_r1.nzOptionHeightPx)("maxItemLength", ctx_r1.nzOptionOverflowSize)("matchWidth", ctx_r1.nzDropdownMatchSelectWidth)("@slideMotion", "enter")("@.disabled", !!(ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation))("nzNoAnimation", ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation)("listOfContainerItem", ctx_r1.listOfContainerItem)("menuItemSelectedIcon", ctx_r1.nzMenuItemSelectedIcon)("notFoundContent", ctx_r1.nzNotFoundContent)("activatedValue", ctx_r1.activatedValue)("listOfSelectedValue", ctx_r1.listOfValue)("dropdownRender", ctx_r1.nzDropdownRender)("compareWith", ctx_r1.compareWith)("mode", ctx_r1.nzMode)("isMaxLimitReached", ctx_r1.isMaxLimitReached);
  }
}
var NzOptionGroupComponent = class _NzOptionGroupComponent {
  constructor() {
    this.nzLabel = null;
    this.changes = new Subject();
  }
  ngOnChanges() {
    this.changes.next();
  }
  static {
    this.\u0275fac = function NzOptionGroupComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzOptionGroupComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzOptionGroupComponent,
      selectors: [["nz-option-group"]],
      inputs: {
        nzLabel: "nzLabel"
      },
      exportAs: ["nzOptionGroup"],
      features: [\u0275\u0275NgOnChangesFeature],
      ngContentSelectors: _c015,
      decls: 1,
      vars: 0,
      template: function NzOptionGroupComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275projection(0);
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzOptionGroupComponent, [{
    type: Component,
    args: [{
      selector: "nz-option-group",
      exportAs: "nzOptionGroup",
      template: `<ng-content></ng-content>`,
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], null, {
    nzLabel: [{
      type: Input
    }]
  });
})();
var NzOptionItemGroupComponent = class _NzOptionItemGroupComponent {
  constructor() {
    this.nzLabel = null;
  }
  static {
    this.\u0275fac = function NzOptionItemGroupComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzOptionItemGroupComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzOptionItemGroupComponent,
      selectors: [["nz-option-item-group"]],
      hostAttrs: [1, "ant-select-item", "ant-select-item-group"],
      inputs: {
        nzLabel: "nzLabel"
      },
      decls: 1,
      vars: 1,
      consts: [[4, "nzStringTemplateOutlet"]],
      template: function NzOptionItemGroupComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275template(0, NzOptionItemGroupComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        }
        if (rf & 2) {
          \u0275\u0275property("nzStringTemplateOutlet", ctx.nzLabel);
        }
      },
      dependencies: [NzOutletModule, NzStringTemplateOutletDirective],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzOptionItemGroupComponent, [{
    type: Component,
    args: [{
      selector: "nz-option-item-group",
      template: ` <ng-container *nzStringTemplateOutlet="nzLabel">{{ nzLabel }}</ng-container> `,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      host: {
        class: "ant-select-item ant-select-item-group"
      },
      imports: [NzOutletModule]
    }]
  }], null, {
    nzLabel: [{
      type: Input
    }]
  });
})();
var NzOptionItemComponent = class _NzOptionItemComponent {
  constructor(elementRef, ngZone, destroy$) {
    this.elementRef = elementRef;
    this.ngZone = ngZone;
    this.destroy$ = destroy$;
    this.selected = false;
    this.activated = false;
    this.grouped = false;
    this.customContent = false;
    this.template = null;
    this.disabled = false;
    this.showState = false;
    this.label = null;
    this.value = null;
    this.activatedValue = null;
    this.listOfSelectedValue = [];
    this.icon = null;
    this.itemClick = new EventEmitter();
    this.itemHover = new EventEmitter();
  }
  ngOnChanges(changes) {
    const {
      value,
      activatedValue,
      listOfSelectedValue
    } = changes;
    if (value || listOfSelectedValue) {
      this.selected = this.listOfSelectedValue.some((v) => this.compareWith(v, this.value));
    }
    if (value || activatedValue) {
      this.activated = this.compareWith(this.activatedValue, this.value);
    }
  }
  ngOnInit() {
    fromEventOutsideAngular(this.elementRef.nativeElement, "click").pipe(takeUntil(this.destroy$)).subscribe(() => {
      if (!this.disabled) {
        this.ngZone.run(() => this.itemClick.emit(this.value));
      }
    });
    fromEventOutsideAngular(this.elementRef.nativeElement, "mouseenter").pipe(takeUntil(this.destroy$)).subscribe(() => {
      if (!this.disabled) {
        this.ngZone.run(() => this.itemHover.emit(this.value));
      }
    });
  }
  static {
    this.\u0275fac = function NzOptionItemComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzOptionItemComponent)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(NzDestroyService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzOptionItemComponent,
      selectors: [["nz-option-item"]],
      hostAttrs: [1, "ant-select-item", "ant-select-item-option"],
      hostVars: 9,
      hostBindings: function NzOptionItemComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275attribute("title", ctx.title);
          \u0275\u0275classProp("ant-select-item-option-grouped", ctx.grouped)("ant-select-item-option-selected", ctx.selected && !ctx.disabled)("ant-select-item-option-disabled", ctx.disabled)("ant-select-item-option-active", ctx.activated && !ctx.disabled);
        }
      },
      inputs: {
        grouped: "grouped",
        customContent: [2, "customContent", "customContent", booleanAttribute],
        template: "template",
        disabled: "disabled",
        showState: "showState",
        title: "title",
        label: "label",
        value: "value",
        activatedValue: "activatedValue",
        listOfSelectedValue: "listOfSelectedValue",
        icon: "icon",
        compareWith: "compareWith"
      },
      outputs: {
        itemClick: "itemClick",
        itemHover: "itemHover"
      },
      features: [\u0275\u0275ProvidersFeature([NzDestroyService]), \u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature],
      decls: 4,
      vars: 2,
      consts: [[1, "ant-select-item-option-content"], [3, "ngTemplateOutlet"], ["unselectable", "on", 1, "ant-select-item-option-state"], ["nzType", "check", 1, "ant-select-selected-icon"]],
      template: function NzOptionItemComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275elementStart(0, "div", 0);
          \u0275\u0275template(1, NzOptionItemComponent_Conditional_1_Template, 1, 1, null, 1)(2, NzOptionItemComponent_Conditional_2_Template, 1, 1);
          \u0275\u0275elementEnd();
          \u0275\u0275template(3, NzOptionItemComponent_Conditional_3_Template, 3, 1, "div", 2);
        }
        if (rf & 2) {
          \u0275\u0275advance();
          \u0275\u0275conditional(ctx.customContent ? 1 : 2);
          \u0275\u0275advance(2);
          \u0275\u0275conditional(ctx.showState && ctx.selected ? 3 : -1);
        }
      },
      dependencies: [NgTemplateOutlet, NzIconModule, NzIconDirective],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzOptionItemComponent, [{
    type: Component,
    args: [{
      selector: "nz-option-item",
      template: `
    <div class="ant-select-item-option-content">
      @if (customContent) {
        <ng-template [ngTemplateOutlet]="template"></ng-template>
      } @else {
        {{ label }}
      }
    </div>
    @if (showState && selected) {
      <div class="ant-select-item-option-state" unselectable="on">
        @if (!icon) {
          <nz-icon nzType="check" class="ant-select-selected-icon" />
        } @else {
          <ng-template [ngTemplateOutlet]="icon"></ng-template>
        }
      </div>
    }
  `,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      host: {
        class: "ant-select-item ant-select-item-option",
        "[attr.title]": "title",
        "[class.ant-select-item-option-grouped]": "grouped",
        "[class.ant-select-item-option-selected]": "selected && !disabled",
        "[class.ant-select-item-option-disabled]": "disabled",
        "[class.ant-select-item-option-active]": "activated && !disabled"
      },
      providers: [NzDestroyService],
      imports: [NgTemplateOutlet, NzIconModule]
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: NgZone
  }, {
    type: NzDestroyService
  }], {
    grouped: [{
      type: Input
    }],
    customContent: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    template: [{
      type: Input
    }],
    disabled: [{
      type: Input
    }],
    showState: [{
      type: Input
    }],
    title: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    value: [{
      type: Input
    }],
    activatedValue: [{
      type: Input
    }],
    listOfSelectedValue: [{
      type: Input
    }],
    icon: [{
      type: Input
    }],
    compareWith: [{
      type: Input
    }],
    itemClick: [{
      type: Output
    }],
    itemHover: [{
      type: Output
    }]
  });
})();
var NzOptionContainerComponent = class _NzOptionContainerComponent {
  constructor() {
    this.notFoundContent = void 0;
    this.menuItemSelectedIcon = null;
    this.dropdownRender = null;
    this.activatedValue = null;
    this.listOfSelectedValue = [];
    this.mode = "default";
    this.matchWidth = true;
    this.itemSize = 32;
    this.maxItemLength = 8;
    this.isMaxLimitReached = false;
    this.listOfContainerItem = [];
    this.itemClick = new EventEmitter();
    this.scrollToBottom = new EventEmitter();
    this.scrolledIndex = 0;
    this.ngZone = inject(NgZone);
    this.platformId = inject(PLATFORM_ID);
  }
  onItemClick(value) {
    this.itemClick.emit(value);
  }
  onItemHover(value) {
    this.activatedValue = value;
  }
  trackValue(_index, option) {
    return option.key;
  }
  onScrolledIndexChange(index) {
    this.scrolledIndex = index;
    if (index === this.listOfContainerItem.length - this.maxItemLength - 1) {
      this.scrollToBottom.emit();
    }
  }
  scrollToActivatedValue() {
    const index = this.listOfContainerItem.findIndex((item) => this.compareWith(item.key, this.activatedValue));
    if (index < this.scrolledIndex || index >= this.scrolledIndex + this.maxItemLength) {
      this.cdkVirtualScrollViewport.scrollToIndex(index || 0);
    }
  }
  ngOnChanges(changes) {
    const {
      listOfContainerItem,
      activatedValue
    } = changes;
    if (listOfContainerItem || activatedValue) {
      this.scrollToActivatedValue();
    }
  }
  ngAfterViewInit() {
    if (isPlatformBrowser(this.platformId)) {
      this.ngZone.runOutsideAngular(() => setTimeout(() => this.scrollToActivatedValue()));
    }
  }
  static {
    this.\u0275fac = function NzOptionContainerComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzOptionContainerComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzOptionContainerComponent,
      selectors: [["nz-option-container"]],
      viewQuery: function NzOptionContainerComponent_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(CdkVirtualScrollViewport, 7);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.cdkVirtualScrollViewport = _t.first);
        }
      },
      hostAttrs: [1, "ant-select-dropdown"],
      inputs: {
        notFoundContent: "notFoundContent",
        menuItemSelectedIcon: "menuItemSelectedIcon",
        dropdownRender: "dropdownRender",
        activatedValue: "activatedValue",
        listOfSelectedValue: "listOfSelectedValue",
        compareWith: "compareWith",
        mode: "mode",
        matchWidth: "matchWidth",
        itemSize: "itemSize",
        maxItemLength: "maxItemLength",
        isMaxLimitReached: "isMaxLimitReached",
        listOfContainerItem: "listOfContainerItem"
      },
      outputs: {
        itemClick: "itemClick",
        scrollToBottom: "scrollToBottom"
      },
      exportAs: ["nzOptionContainer"],
      features: [\u0275\u0275NgOnChangesFeature],
      decls: 5,
      vars: 14,
      consts: [[1, "ant-select-item-empty"], [3, "scrolledIndexChange", "itemSize", "maxBufferPx", "minBufferPx"], ["cdkVirtualFor", "", 3, "cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplateCacheSize"], [3, "ngTemplateOutlet"], ["nzComponentName", "select", 3, "specificContent"], [3, "nzLabel"], [3, "icon", "customContent", "template", "grouped", "disabled", "showState", "title", "label", "compareWith", "activatedValue", "listOfSelectedValue", "value"], [3, "itemHover", "itemClick", "icon", "customContent", "template", "grouped", "disabled", "showState", "title", "label", "compareWith", "activatedValue", "listOfSelectedValue", "value"]],
      template: function NzOptionContainerComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275elementStart(0, "div");
          \u0275\u0275template(1, NzOptionContainerComponent_Conditional_1_Template, 2, 1, "div", 0);
          \u0275\u0275elementStart(2, "cdk-virtual-scroll-viewport", 1);
          \u0275\u0275listener("scrolledIndexChange", function NzOptionContainerComponent_Template_cdk_virtual_scroll_viewport_scrolledIndexChange_2_listener($event) {
            return ctx.onScrolledIndexChange($event);
          });
          \u0275\u0275template(3, NzOptionContainerComponent_ng_template_3_Template, 2, 1, "ng-template", 2);
          \u0275\u0275elementEnd();
          \u0275\u0275template(4, NzOptionContainerComponent_ng_template_4_Template, 0, 0, "ng-template", 3);
          \u0275\u0275elementEnd();
        }
        if (rf & 2) {
          \u0275\u0275advance();
          \u0275\u0275conditional(ctx.listOfContainerItem.length === 0 ? 1 : -1);
          \u0275\u0275advance();
          \u0275\u0275styleProp("height", ctx.listOfContainerItem.length * ctx.itemSize, "px")("max-height", ctx.itemSize * ctx.maxItemLength, "px");
          \u0275\u0275classProp("full-width", !ctx.matchWidth);
          \u0275\u0275property("itemSize", ctx.itemSize)("maxBufferPx", ctx.itemSize * ctx.maxItemLength)("minBufferPx", ctx.itemSize * ctx.maxItemLength);
          \u0275\u0275advance();
          \u0275\u0275property("cdkVirtualForOf", ctx.listOfContainerItem)("cdkVirtualForTrackBy", ctx.trackValue)("cdkVirtualForTemplateCacheSize", 0);
          \u0275\u0275advance();
          \u0275\u0275property("ngTemplateOutlet", ctx.dropdownRender);
        }
      },
      dependencies: [NzEmptyModule, NzEmbedEmptyComponent, NzOptionItemGroupComponent, NzOptionItemComponent, NgTemplateOutlet, OverlayModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport, NzOverlayModule],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzOptionContainerComponent, [{
    type: Component,
    args: [{
      selector: "nz-option-container",
      exportAs: "nzOptionContainer",
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      preserveWhitespaces: false,
      template: `
    <div>
      @if (listOfContainerItem.length === 0) {
        <div class="ant-select-item-empty">
          <nz-embed-empty nzComponentName="select" [specificContent]="notFoundContent!"></nz-embed-empty>
        </div>
      }
      <cdk-virtual-scroll-viewport
        [class.full-width]="!matchWidth"
        [itemSize]="itemSize"
        [maxBufferPx]="itemSize * maxItemLength"
        [minBufferPx]="itemSize * maxItemLength"
        (scrolledIndexChange)="onScrolledIndexChange($event)"
        [style.height.px]="listOfContainerItem.length * itemSize"
        [style.max-height.px]="itemSize * maxItemLength"
      >
        <ng-template
          cdkVirtualFor
          [cdkVirtualForOf]="listOfContainerItem"
          [cdkVirtualForTrackBy]="trackValue"
          [cdkVirtualForTemplateCacheSize]="0"
          let-item
        >
          @switch (item.type) {
            @case ('group') {
              <nz-option-item-group [nzLabel]="item.groupLabel ?? null"></nz-option-item-group>
            }
            @case ('item') {
              <nz-option-item
                [icon]="menuItemSelectedIcon"
                [customContent]="item.nzCustomContent"
                [template]="item.template ?? null"
                [grouped]="!!item.groupLabel"
                [disabled]="item.nzDisabled || (isMaxLimitReached && !listOfSelectedValue.includes(item['nzValue']))"
                [showState]="mode === 'tags' || mode === 'multiple'"
                [title]="item.nzTitle"
                [label]="item.nzLabel"
                [compareWith]="compareWith"
                [activatedValue]="activatedValue"
                [listOfSelectedValue]="listOfSelectedValue"
                [value]="item.nzValue"
                (itemHover)="onItemHover($event)"
                (itemClick)="onItemClick($event)"
              ></nz-option-item>
            }
          }
        </ng-template>
      </cdk-virtual-scroll-viewport>
      <ng-template [ngTemplateOutlet]="dropdownRender"></ng-template>
    </div>
  `,
      host: {
        class: "ant-select-dropdown"
      },
      imports: [NzEmptyModule, NzOptionItemGroupComponent, NzOptionItemComponent, NgTemplateOutlet, OverlayModule, NzOverlayModule]
    }]
  }], null, {
    notFoundContent: [{
      type: Input
    }],
    menuItemSelectedIcon: [{
      type: Input
    }],
    dropdownRender: [{
      type: Input
    }],
    activatedValue: [{
      type: Input
    }],
    listOfSelectedValue: [{
      type: Input
    }],
    compareWith: [{
      type: Input
    }],
    mode: [{
      type: Input
    }],
    matchWidth: [{
      type: Input
    }],
    itemSize: [{
      type: Input
    }],
    maxItemLength: [{
      type: Input
    }],
    isMaxLimitReached: [{
      type: Input
    }],
    listOfContainerItem: [{
      type: Input
    }],
    itemClick: [{
      type: Output
    }],
    scrollToBottom: [{
      type: Output
    }],
    cdkVirtualScrollViewport: [{
      type: ViewChild,
      args: [CdkVirtualScrollViewport, {
        static: true
      }]
    }]
  });
})();
var NzOptionComponent = class _NzOptionComponent {
  constructor(destroy$) {
    this.destroy$ = destroy$;
    this.changes = new Subject();
    this.groupLabel = null;
    this.nzLabel = null;
    this.nzValue = null;
    this.nzDisabled = false;
    this.nzHide = false;
    this.nzCustomContent = false;
    this.nzOptionGroupComponent = inject(NzOptionGroupComponent, {
      optional: true
    });
  }
  ngOnInit() {
    if (this.nzOptionGroupComponent) {
      this.nzOptionGroupComponent.changes.pipe(startWith(true), takeUntil(this.destroy$)).subscribe(() => {
        this.groupLabel = this.nzOptionGroupComponent?.nzLabel;
      });
    }
  }
  ngOnChanges() {
    this.changes.next();
  }
  static {
    this.\u0275fac = function NzOptionComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzOptionComponent)(\u0275\u0275directiveInject(NzDestroyService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzOptionComponent,
      selectors: [["nz-option"]],
      viewQuery: function NzOptionComponent_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(TemplateRef, 7);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.template = _t.first);
        }
      },
      inputs: {
        nzTitle: "nzTitle",
        nzLabel: "nzLabel",
        nzValue: "nzValue",
        nzKey: "nzKey",
        nzDisabled: [2, "nzDisabled", "nzDisabled", booleanAttribute],
        nzHide: [2, "nzHide", "nzHide", booleanAttribute],
        nzCustomContent: [2, "nzCustomContent", "nzCustomContent", booleanAttribute]
      },
      exportAs: ["nzOption"],
      features: [\u0275\u0275ProvidersFeature([NzDestroyService]), \u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature],
      ngContentSelectors: _c015,
      decls: 1,
      vars: 0,
      template: function NzOptionComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275template(0, NzOptionComponent_ng_template_0_Template, 1, 0, "ng-template");
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzOptionComponent, [{
    type: Component,
    args: [{
      selector: "nz-option",
      exportAs: "nzOption",
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [NzDestroyService],
      template: `
    <ng-template>
      <ng-content></ng-content>
    </ng-template>
  `
    }]
  }], () => [{
    type: NzDestroyService
  }], {
    template: [{
      type: ViewChild,
      args: [TemplateRef, {
        static: true
      }]
    }],
    nzTitle: [{
      type: Input
    }],
    nzLabel: [{
      type: Input
    }],
    nzValue: [{
      type: Input
    }],
    nzKey: [{
      type: Input
    }],
    nzDisabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzHide: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzCustomContent: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
var NzSelectArrowComponent = class _NzSelectArrowComponent {
  constructor() {
    this.listOfValue = [];
    this.loading = false;
    this.search = false;
    this.showArrow = false;
    this.isMaxTagCountSet = false;
    this.suffixIcon = null;
    this.feedbackIcon = null;
    this.nzMaxMultipleCount = Infinity;
  }
  static {
    this.\u0275fac = function NzSelectArrowComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSelectArrowComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzSelectArrowComponent,
      selectors: [["nz-select-arrow"]],
      hostAttrs: [1, "ant-select-arrow"],
      hostVars: 2,
      hostBindings: function NzSelectArrowComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-select-arrow-loading", ctx.loading);
        }
      },
      inputs: {
        listOfValue: "listOfValue",
        loading: "loading",
        search: "search",
        showArrow: "showArrow",
        isMaxTagCountSet: "isMaxTagCountSet",
        suffixIcon: "suffixIcon",
        feedbackIcon: "feedbackIcon",
        nzMaxMultipleCount: [2, "nzMaxMultipleCount", "nzMaxMultipleCount", numberAttribute]
      },
      features: [\u0275\u0275InputTransformsFeature],
      decls: 4,
      vars: 3,
      consts: [["nzType", "loading"], [4, "nzStringTemplateOutlet"], ["nzType", "search"], ["nzType", "down"], [3, "nzType"]],
      template: function NzSelectArrowComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275template(0, NzSelectArrowComponent_Conditional_0_Template, 2, 2, "span")(1, NzSelectArrowComponent_Conditional_1_Template, 1, 0, "nz-icon", 0)(2, NzSelectArrowComponent_Conditional_2_Template, 2, 1)(3, NzSelectArrowComponent_ng_container_3_Template, 2, 1, "ng-container", 1);
        }
        if (rf & 2) {
          \u0275\u0275conditional(ctx.isMaxTagCountSet ? 0 : -1);
          \u0275\u0275advance();
          \u0275\u0275conditional(ctx.loading ? 1 : 2);
          \u0275\u0275advance(2);
          \u0275\u0275property("nzStringTemplateOutlet", ctx.feedbackIcon);
        }
      },
      dependencies: [NzIconModule, NzIconDirective, NzOutletModule, NzStringTemplateOutletDirective],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSelectArrowComponent, [{
    type: Component,
    args: [{
      selector: "nz-select-arrow",
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    @if (isMaxTagCountSet) {
      <span>{{ listOfValue.length }} / {{ nzMaxMultipleCount }}</span>
    }
    @if (loading) {
      <nz-icon nzType="loading" />
    } @else {
      @if (showArrow && !suffixIcon) {
        @if (search) {
          <nz-icon nzType="search" />
        } @else {
          <nz-icon nzType="down" />
        }
      } @else {
        <ng-container *nzStringTemplateOutlet="suffixIcon; let suffixIcon">
          @if (suffixIcon) {
            <nz-icon [nzType]="suffixIcon" />
          }
        </ng-container>
      }
    }
    <ng-container *nzStringTemplateOutlet="feedbackIcon">{{ feedbackIcon }}</ng-container>
  `,
      host: {
        class: "ant-select-arrow",
        "[class.ant-select-arrow-loading]": "loading"
      },
      imports: [NzIconModule, NzOutletModule]
    }]
  }], null, {
    listOfValue: [{
      type: Input
    }],
    loading: [{
      type: Input
    }],
    search: [{
      type: Input
    }],
    showArrow: [{
      type: Input
    }],
    isMaxTagCountSet: [{
      type: Input
    }],
    suffixIcon: [{
      type: Input
    }],
    feedbackIcon: [{
      type: Input
    }],
    nzMaxMultipleCount: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }]
  });
})();
var NzSelectClearComponent = class _NzSelectClearComponent {
  constructor() {
    this.clearIcon = null;
    this.clear = new EventEmitter();
  }
  onClick(e) {
    e.preventDefault();
    e.stopPropagation();
    this.clear.emit(e);
  }
  static {
    this.\u0275fac = function NzSelectClearComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSelectClearComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzSelectClearComponent,
      selectors: [["nz-select-clear"]],
      hostAttrs: [1, "ant-select-clear"],
      hostBindings: function NzSelectClearComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275listener("click", function NzSelectClearComponent_click_HostBindingHandler($event) {
            return ctx.onClick($event);
          });
        }
      },
      inputs: {
        clearIcon: "clearIcon"
      },
      outputs: {
        clear: "clear"
      },
      decls: 2,
      vars: 1,
      consts: [[3, "ngTemplateOutlet"], ["nzType", "close-circle", "nzTheme", "fill", 1, "ant-select-close-icon"]],
      template: function NzSelectClearComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275template(0, NzSelectClearComponent_Conditional_0_Template, 1, 1, null, 0)(1, NzSelectClearComponent_Conditional_1_Template, 1, 0, "nz-icon", 1);
        }
        if (rf & 2) {
          \u0275\u0275conditional(ctx.clearIcon ? 0 : 1);
        }
      },
      dependencies: [NgTemplateOutlet, NzIconModule, NzIconDirective],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSelectClearComponent, [{
    type: Component,
    args: [{
      selector: "nz-select-clear",
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    @if (clearIcon) {
      <ng-template [ngTemplateOutlet]="clearIcon"></ng-template>
    } @else {
      <nz-icon nzType="close-circle" nzTheme="fill" class="ant-select-close-icon" />
    }
  `,
      host: {
        class: "ant-select-clear",
        "(click)": "onClick($event)"
      },
      imports: [NgTemplateOutlet, NzIconModule]
    }]
  }], null, {
    clearIcon: [{
      type: Input
    }],
    clear: [{
      type: Output
    }]
  });
})();
var NzSelectItemComponent = class _NzSelectItemComponent {
  constructor() {
    this.disabled = false;
    this.label = null;
    this.deletable = false;
    this.removeIcon = null;
    this.contentTemplateOutletContext = null;
    this.contentTemplateOutlet = null;
    this.delete = new EventEmitter();
  }
  get templateOutletContext() {
    return __spreadValues({
      $implicit: this.contentTemplateOutletContext
    }, this.contentTemplateOutletContext);
  }
  onDelete(e) {
    e.preventDefault();
    e.stopPropagation();
    if (!this.disabled) {
      this.delete.next(e);
    }
  }
  static {
    this.\u0275fac = function NzSelectItemComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSelectItemComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzSelectItemComponent,
      selectors: [["nz-select-item"]],
      hostAttrs: [1, "ant-select-selection-item"],
      hostVars: 3,
      hostBindings: function NzSelectItemComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275attribute("title", ctx.label);
          \u0275\u0275classProp("ant-select-selection-item-disabled", ctx.disabled);
        }
      },
      inputs: {
        disabled: "disabled",
        label: "label",
        deletable: "deletable",
        removeIcon: "removeIcon",
        contentTemplateOutletContext: "contentTemplateOutletContext",
        contentTemplateOutlet: "contentTemplateOutlet"
      },
      outputs: {
        delete: "delete"
      },
      decls: 2,
      vars: 3,
      consts: [[4, "nzStringTemplateOutlet", "nzStringTemplateOutletContext"], [1, "ant-select-selection-item-remove"], [1, "ant-select-selection-item-content"], [1, "ant-select-selection-item-remove", 3, "click"], ["nzType", "close"], [3, "ngTemplateOutlet"]],
      template: function NzSelectItemComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275template(0, NzSelectItemComponent_ng_container_0_Template, 3, 1, "ng-container", 0)(1, NzSelectItemComponent_Conditional_1_Template, 3, 1, "span", 1);
        }
        if (rf & 2) {
          \u0275\u0275property("nzStringTemplateOutlet", ctx.contentTemplateOutlet)("nzStringTemplateOutletContext", ctx.templateOutletContext);
          \u0275\u0275advance();
          \u0275\u0275conditional(ctx.deletable && !ctx.disabled ? 1 : -1);
        }
      },
      dependencies: [NgTemplateOutlet, NzOutletModule, NzStringTemplateOutletDirective, NzIconModule, NzIconDirective],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSelectItemComponent, [{
    type: Component,
    args: [{
      selector: "nz-select-item",
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    <ng-container *nzStringTemplateOutlet="contentTemplateOutlet; context: templateOutletContext">
      @if (deletable) {
        <div class="ant-select-selection-item-content">{{ label }}</div>
      } @else {
        {{ label }}
      }
    </ng-container>
    @if (deletable && !disabled) {
      <span class="ant-select-selection-item-remove" (click)="onDelete($event)">
        @if (!removeIcon) {
          <nz-icon nzType="close" />
        } @else {
          <ng-template [ngTemplateOutlet]="removeIcon"></ng-template>
        }
      </span>
    }
  `,
      host: {
        class: "ant-select-selection-item",
        "[attr.title]": "label",
        "[class.ant-select-selection-item-disabled]": "disabled"
      },
      imports: [NgTemplateOutlet, NzOutletModule, NzIconModule]
    }]
  }], null, {
    disabled: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    deletable: [{
      type: Input
    }],
    removeIcon: [{
      type: Input
    }],
    contentTemplateOutletContext: [{
      type: Input
    }],
    contentTemplateOutlet: [{
      type: Input
    }],
    delete: [{
      type: Output
    }]
  });
})();
var NzSelectPlaceholderComponent = class _NzSelectPlaceholderComponent {
  constructor() {
    this.placeholder = null;
  }
  static {
    this.\u0275fac = function NzSelectPlaceholderComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSelectPlaceholderComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzSelectPlaceholderComponent,
      selectors: [["nz-select-placeholder"]],
      hostAttrs: [1, "ant-select-selection-placeholder"],
      inputs: {
        placeholder: "placeholder"
      },
      decls: 1,
      vars: 1,
      consts: [[4, "nzStringTemplateOutlet"]],
      template: function NzSelectPlaceholderComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275template(0, NzSelectPlaceholderComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        }
        if (rf & 2) {
          \u0275\u0275property("nzStringTemplateOutlet", ctx.placeholder);
        }
      },
      dependencies: [NzOutletModule, NzStringTemplateOutletDirective],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSelectPlaceholderComponent, [{
    type: Component,
    args: [{
      selector: "nz-select-placeholder",
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    <ng-container *nzStringTemplateOutlet="placeholder">
      {{ placeholder }}
    </ng-container>
  `,
      host: {
        class: "ant-select-selection-placeholder"
      },
      imports: [NzOutletModule]
    }]
  }], null, {
    placeholder: [{
      type: Input
    }]
  });
})();
var NzSelectSearchComponent = class _NzSelectSearchComponent {
  setCompositionState(isComposing) {
    this.isComposingChange.next(isComposing);
  }
  onValueChange(value) {
    this.value = value;
    this.valueChange.next(value);
    if (this.mirrorSync) {
      this.syncMirrorWidth();
    }
  }
  clearInputValue() {
    const inputDOM = this.inputElement.nativeElement;
    inputDOM.value = "";
    this.onValueChange("");
  }
  syncMirrorWidth() {
    reqAnimFrame(() => {
      const mirrorDOM = this.mirrorElement.nativeElement;
      const hostDOM = this.elementRef.nativeElement;
      const inputDOM = this.inputElement.nativeElement;
      this.renderer.removeStyle(hostDOM, "width");
      this.renderer.setProperty(mirrorDOM, "textContent", `${inputDOM.value}\xA0`);
      this.renderer.setStyle(hostDOM, "width", `${mirrorDOM.scrollWidth}px`);
    });
  }
  focus() {
    this.focusMonitor.focusVia(this.inputElement, "keyboard");
  }
  blur() {
    this.inputElement.nativeElement.blur();
  }
  constructor(elementRef, renderer, focusMonitor) {
    this.elementRef = elementRef;
    this.renderer = renderer;
    this.focusMonitor = focusMonitor;
    this.nzId = null;
    this.disabled = false;
    this.mirrorSync = false;
    this.showInput = true;
    this.focusTrigger = false;
    this.value = "";
    this.autofocus = false;
    this.valueChange = new EventEmitter();
    this.isComposingChange = new EventEmitter();
  }
  ngOnChanges(changes) {
    const inputDOM = this.inputElement.nativeElement;
    const {
      focusTrigger,
      showInput
    } = changes;
    if (showInput) {
      if (this.showInput) {
        this.renderer.removeAttribute(inputDOM, "readonly");
      } else {
        this.renderer.setAttribute(inputDOM, "readonly", "readonly");
      }
    }
    if (focusTrigger && focusTrigger.currentValue === true && focusTrigger.previousValue === false) {
      inputDOM.focus();
    }
  }
  ngAfterViewInit() {
    if (this.mirrorSync) {
      this.syncMirrorWidth();
    }
    if (this.autofocus) {
      this.focus();
    }
  }
  static {
    this.\u0275fac = function NzSelectSearchComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSelectSearchComponent)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(FocusMonitor));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzSelectSearchComponent,
      selectors: [["nz-select-search"]],
      viewQuery: function NzSelectSearchComponent_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(_c19, 7);
          \u0275\u0275viewQuery(_c26, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.inputElement = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.mirrorElement = _t.first);
        }
      },
      hostAttrs: [1, "ant-select-selection-search"],
      inputs: {
        nzId: "nzId",
        disabled: "disabled",
        mirrorSync: "mirrorSync",
        showInput: "showInput",
        focusTrigger: "focusTrigger",
        value: "value",
        autofocus: "autofocus"
      },
      outputs: {
        valueChange: "valueChange",
        isComposingChange: "isComposingChange"
      },
      features: [\u0275\u0275ProvidersFeature([{
        provide: COMPOSITION_BUFFER_MODE,
        useValue: false
      }]), \u0275\u0275NgOnChangesFeature],
      decls: 3,
      vars: 7,
      consts: [["inputElement", ""], ["mirrorElement", ""], ["autocomplete", "off", 1, "ant-select-selection-search-input", 3, "ngModelChange", "compositionstart", "compositionend", "ngModel", "disabled"], [1, "ant-select-selection-search-mirror"]],
      template: function NzSelectSearchComponent_Template(rf, ctx) {
        if (rf & 1) {
          const _r1 = \u0275\u0275getCurrentView();
          \u0275\u0275elementStart(0, "input", 2, 0);
          \u0275\u0275listener("ngModelChange", function NzSelectSearchComponent_Template_input_ngModelChange_0_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.onValueChange($event));
          })("compositionstart", function NzSelectSearchComponent_Template_input_compositionstart_0_listener() {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.setCompositionState(true));
          })("compositionend", function NzSelectSearchComponent_Template_input_compositionend_0_listener() {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.setCompositionState(false));
          });
          \u0275\u0275elementEnd();
          \u0275\u0275template(2, NzSelectSearchComponent_Conditional_2_Template, 2, 0, "span", 3);
        }
        if (rf & 2) {
          \u0275\u0275styleProp("opacity", ctx.showInput ? null : 0);
          \u0275\u0275property("ngModel", ctx.value)("disabled", ctx.disabled);
          \u0275\u0275attribute("id", ctx.nzId)("autofocus", ctx.autofocus ? "autofocus" : null);
          \u0275\u0275advance(2);
          \u0275\u0275conditional(ctx.mirrorSync ? 2 : -1);
        }
      },
      dependencies: [FormsModule, DefaultValueAccessor, NgControlStatus, NgModel],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSelectSearchComponent, [{
    type: Component,
    args: [{
      selector: "nz-select-search",
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    <input
      #inputElement
      [attr.id]="nzId"
      autocomplete="off"
      class="ant-select-selection-search-input"
      [ngModel]="value"
      [attr.autofocus]="autofocus ? 'autofocus' : null"
      [disabled]="disabled"
      [style.opacity]="showInput ? null : 0"
      (ngModelChange)="onValueChange($event)"
      (compositionstart)="setCompositionState(true)"
      (compositionend)="setCompositionState(false)"
    />
    @if (mirrorSync) {
      <span #mirrorElement class="ant-select-selection-search-mirror"></span>
    }
  `,
      host: {
        class: "ant-select-selection-search"
      },
      providers: [{
        provide: COMPOSITION_BUFFER_MODE,
        useValue: false
      }],
      imports: [FormsModule]
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: Renderer2
  }, {
    type: FocusMonitor
  }], {
    nzId: [{
      type: Input
    }],
    disabled: [{
      type: Input
    }],
    mirrorSync: [{
      type: Input
    }],
    showInput: [{
      type: Input
    }],
    focusTrigger: [{
      type: Input
    }],
    value: [{
      type: Input
    }],
    autofocus: [{
      type: Input
    }],
    valueChange: [{
      type: Output
    }],
    isComposingChange: [{
      type: Output
    }],
    inputElement: [{
      type: ViewChild,
      args: ["inputElement", {
        static: true
      }]
    }],
    mirrorElement: [{
      type: ViewChild,
      args: ["mirrorElement", {
        static: false
      }]
    }]
  });
})();
var NzSelectTopControlComponent = class _NzSelectTopControlComponent {
  updateTemplateVariable() {
    const isSelectedValueEmpty = this.listOfTopItem.length === 0;
    this.isShowPlaceholder = isSelectedValueEmpty && !this.isComposing && !this.inputValue;
    this.isShowSingleLabel = !isSelectedValueEmpty && !this.isComposing && !this.inputValue;
  }
  isComposingChange(isComposing) {
    this.isComposing = isComposing;
    this.updateTemplateVariable();
  }
  onInputValueChange(value) {
    if (value !== this.inputValue) {
      this.inputValue = value;
      this.updateTemplateVariable();
      this.inputValueChange.emit(value);
      this.tokenSeparate(value, this.tokenSeparators);
    }
  }
  tokenSeparate(inputValue, tokenSeparators) {
    const includesSeparators = (str, separators) => {
      for (let i = 0; i < separators.length; ++i) {
        if (str.lastIndexOf(separators[i]) > 0) {
          return true;
        }
      }
      return false;
    };
    const splitBySeparators = (str, separators) => {
      const reg = new RegExp(`[${separators.join()}]`);
      const array = str.split(reg).filter((token) => token);
      return [...new Set(array)];
    };
    if (inputValue && inputValue.length && tokenSeparators.length && this.mode !== "default" && includesSeparators(inputValue, tokenSeparators)) {
      const listOfLabel = splitBySeparators(inputValue, tokenSeparators);
      this.tokenize.next(listOfLabel);
    }
  }
  clearInputValue() {
    if (this.nzSelectSearchComponent) {
      this.nzSelectSearchComponent.clearInputValue();
    }
  }
  focus() {
    if (this.nzSelectSearchComponent) {
      this.nzSelectSearchComponent.focus();
    }
  }
  blur() {
    if (this.nzSelectSearchComponent) {
      this.nzSelectSearchComponent.blur();
    }
  }
  onDeleteItem(item) {
    if (!this.disabled && !item.nzDisabled) {
      this.deleteItem.next(item);
    }
  }
  constructor(elementRef, ngZone) {
    this.elementRef = elementRef;
    this.ngZone = ngZone;
    this.nzId = null;
    this.showSearch = false;
    this.placeHolder = null;
    this.open = false;
    this.maxTagCount = Infinity;
    this.autofocus = false;
    this.disabled = false;
    this.mode = "default";
    this.customTemplate = null;
    this.maxTagPlaceholder = null;
    this.removeIcon = null;
    this.listOfTopItem = [];
    this.tokenSeparators = [];
    this.tokenize = new EventEmitter();
    this.inputValueChange = new EventEmitter();
    this.deleteItem = new EventEmitter();
    this.listOfSlicedItem = [];
    this.isShowPlaceholder = true;
    this.isShowSingleLabel = false;
    this.isComposing = false;
    this.inputValue = null;
    this.destroy$ = new Subject();
    this.noAnimation = inject(NzNoAnimationDirective, {
      host: true,
      optional: true
    });
  }
  ngOnChanges(changes) {
    const {
      listOfTopItem,
      maxTagCount,
      customTemplate,
      maxTagPlaceholder
    } = changes;
    if (listOfTopItem) {
      this.updateTemplateVariable();
    }
    if (listOfTopItem || maxTagCount || customTemplate || maxTagPlaceholder) {
      const listOfSlicedItem = this.listOfTopItem.slice(0, this.maxTagCount).map((o) => ({
        nzLabel: o.nzLabel,
        nzValue: o.nzValue,
        nzDisabled: o.nzDisabled,
        contentTemplateOutlet: this.customTemplate,
        contentTemplateOutletContext: o
      }));
      if (this.listOfTopItem.length > this.maxTagCount) {
        const exceededLabel = `+ ${this.listOfTopItem.length - this.maxTagCount} ...`;
        const listOfSelectedValue = this.listOfTopItem.map((item) => item.nzValue);
        const exceededItem = {
          nzLabel: exceededLabel,
          nzValue: "$$__nz_exceeded_item",
          nzDisabled: true,
          contentTemplateOutlet: this.maxTagPlaceholder,
          contentTemplateOutletContext: listOfSelectedValue.slice(this.maxTagCount)
        };
        listOfSlicedItem.push(exceededItem);
      }
      this.listOfSlicedItem = listOfSlicedItem;
    }
  }
  ngOnInit() {
    fromEventOutsideAngular(this.elementRef.nativeElement, "click").pipe(takeUntil(this.destroy$)).subscribe((event2) => {
      if (event2.target !== this.nzSelectSearchComponent.inputElement.nativeElement) {
        this.nzSelectSearchComponent.focus();
      }
    });
    fromEventOutsideAngular(this.elementRef.nativeElement, "keydown").pipe(takeUntil(this.destroy$)).subscribe((event2) => {
      if (event2.target instanceof HTMLInputElement) {
        const inputValue = event2.target.value;
        if (event2.keyCode === BACKSPACE && this.mode !== "default" && !inputValue && this.listOfTopItem.length > 0) {
          event2.preventDefault();
          this.ngZone.run(() => this.onDeleteItem(this.listOfTopItem[this.listOfTopItem.length - 1]));
        }
      }
    });
  }
  ngOnDestroy() {
    this.destroy$.next();
  }
  static {
    this.\u0275fac = function NzSelectTopControlComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSelectTopControlComponent)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(NgZone));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzSelectTopControlComponent,
      selectors: [["nz-select-top-control"]],
      viewQuery: function NzSelectTopControlComponent_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(NzSelectSearchComponent, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.nzSelectSearchComponent = _t.first);
        }
      },
      hostAttrs: [1, "ant-select-selector"],
      inputs: {
        nzId: "nzId",
        showSearch: "showSearch",
        placeHolder: "placeHolder",
        open: "open",
        maxTagCount: [2, "maxTagCount", "maxTagCount", numberAttribute],
        autofocus: "autofocus",
        disabled: "disabled",
        mode: "mode",
        customTemplate: "customTemplate",
        maxTagPlaceholder: "maxTagPlaceholder",
        removeIcon: "removeIcon",
        listOfTopItem: "listOfTopItem",
        tokenSeparators: "tokenSeparators"
      },
      outputs: {
        tokenize: "tokenize",
        inputValueChange: "inputValueChange",
        deleteItem: "deleteItem"
      },
      exportAs: ["nzSelectTopControl"],
      features: [\u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature],
      decls: 3,
      vars: 2,
      consts: [[3, "placeholder"], [3, "isComposingChange", "valueChange", "nzId", "disabled", "value", "showInput", "mirrorSync", "autofocus", "focusTrigger"], [3, "deletable", "disabled", "removeIcon", "label", "contentTemplateOutlet", "contentTemplateOutletContext"], [3, "removeIcon", "label", "disabled", "contentTemplateOutlet", "deletable", "contentTemplateOutletContext"], [3, "isComposingChange", "valueChange", "nzId", "disabled", "value", "autofocus", "showInput", "mirrorSync", "focusTrigger"], [3, "delete", "removeIcon", "label", "disabled", "contentTemplateOutlet", "deletable", "contentTemplateOutletContext"]],
      template: function NzSelectTopControlComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275template(0, NzSelectTopControlComponent_Case_0_Template, 2, 8)(1, NzSelectTopControlComponent_Case_1_Template, 3, 7)(2, NzSelectTopControlComponent_Conditional_2_Template, 1, 1, "nz-select-placeholder", 0);
        }
        if (rf & 2) {
          let tmp_0_0;
          \u0275\u0275conditional((tmp_0_0 = ctx.mode) === "default" ? 0 : 1);
          \u0275\u0275advance(2);
          \u0275\u0275conditional(ctx.isShowPlaceholder ? 2 : -1);
        }
      },
      dependencies: [NzSelectSearchComponent, NzSelectItemComponent, NzSelectPlaceholderComponent],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSelectTopControlComponent, [{
    type: Component,
    args: [{
      selector: "nz-select-top-control",
      exportAs: "nzSelectTopControl",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      template: `
    <!--single mode-->
    @switch (mode) {
      @case ('default') {
        <nz-select-search
          [nzId]="nzId"
          [disabled]="disabled"
          [value]="inputValue!"
          [showInput]="showSearch"
          [mirrorSync]="false"
          [autofocus]="autofocus"
          [focusTrigger]="open"
          (isComposingChange)="isComposingChange($event)"
          (valueChange)="onInputValueChange($event)"
        ></nz-select-search>
        @if (isShowSingleLabel) {
          <nz-select-item
            [deletable]="false"
            [disabled]="false"
            [removeIcon]="removeIcon"
            [label]="listOfTopItem[0].nzLabel"
            [contentTemplateOutlet]="customTemplate"
            [contentTemplateOutletContext]="listOfTopItem[0]"
          ></nz-select-item>
        }
      }
      @default {
        <!--multiple or tags mode-->
        @for (item of listOfSlicedItem; track item.nzValue) {
          <nz-select-item
            [removeIcon]="removeIcon"
            [label]="item.nzLabel"
            [disabled]="item.nzDisabled || disabled"
            [contentTemplateOutlet]="item.contentTemplateOutlet"
            [deletable]="true"
            [contentTemplateOutletContext]="item.contentTemplateOutletContext"
            (delete)="onDeleteItem(item.contentTemplateOutletContext)"
          ></nz-select-item>
        }
        <nz-select-search
          [nzId]="nzId"
          [disabled]="disabled"
          [value]="inputValue!"
          [autofocus]="autofocus"
          [showInput]="true"
          [mirrorSync]="true"
          [focusTrigger]="open"
          (isComposingChange)="isComposingChange($event)"
          (valueChange)="onInputValueChange($event)"
        ></nz-select-search>
      }
    }
    @if (isShowPlaceholder) {
      <nz-select-placeholder [placeholder]="placeHolder"></nz-select-placeholder>
    }
  `,
      host: {
        class: "ant-select-selector"
      },
      imports: [NzSelectSearchComponent, NzSelectItemComponent, NzSelectPlaceholderComponent]
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: NgZone
  }], {
    nzId: [{
      type: Input
    }],
    showSearch: [{
      type: Input
    }],
    placeHolder: [{
      type: Input
    }],
    open: [{
      type: Input
    }],
    maxTagCount: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    autofocus: [{
      type: Input
    }],
    disabled: [{
      type: Input
    }],
    mode: [{
      type: Input
    }],
    customTemplate: [{
      type: Input
    }],
    maxTagPlaceholder: [{
      type: Input
    }],
    removeIcon: [{
      type: Input
    }],
    listOfTopItem: [{
      type: Input
    }],
    tokenSeparators: [{
      type: Input
    }],
    tokenize: [{
      type: Output
    }],
    inputValueChange: [{
      type: Output
    }],
    deleteItem: [{
      type: Output
    }],
    nzSelectSearchComponent: [{
      type: ViewChild,
      args: [NzSelectSearchComponent]
    }]
  });
})();
var defaultFilterOption = (searchValue, item) => {
  if (item && item.nzLabel) {
    return item.nzLabel.toString().toLowerCase().indexOf(searchValue.toLowerCase()) > -1;
  } else {
    return false;
  }
};
var NZ_CONFIG_MODULE_NAME4 = "select";
var NzSelectComponent = (() => {
  let _nzOptionHeightPx_decorators;
  let _nzOptionHeightPx_initializers = [];
  let _nzOptionHeightPx_extraInitializers = [];
  let _nzSuffixIcon_decorators;
  let _nzSuffixIcon_initializers = [];
  let _nzSuffixIcon_extraInitializers = [];
  let _nzBorderless_decorators;
  let _nzBorderless_initializers = [];
  let _nzBorderless_extraInitializers = [];
  let _nzBackdrop_decorators;
  let _nzBackdrop_initializers = [];
  let _nzBackdrop_extraInitializers = [];
  return class NzSelectComponent2 {
    static {
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
      _nzOptionHeightPx_decorators = [WithConfig()];
      _nzSuffixIcon_decorators = [WithConfig()];
      _nzBorderless_decorators = [WithConfig()];
      _nzBackdrop_decorators = [WithConfig()];
      __esDecorate(null, null, _nzOptionHeightPx_decorators, {
        kind: "field",
        name: "nzOptionHeightPx",
        static: false,
        private: false,
        access: {
          has: (obj) => "nzOptionHeightPx" in obj,
          get: (obj) => obj.nzOptionHeightPx,
          set: (obj, value) => {
            obj.nzOptionHeightPx = value;
          }
        },
        metadata: _metadata
      }, _nzOptionHeightPx_initializers, _nzOptionHeightPx_extraInitializers);
      __esDecorate(null, null, _nzSuffixIcon_decorators, {
        kind: "field",
        name: "nzSuffixIcon",
        static: false,
        private: false,
        access: {
          has: (obj) => "nzSuffixIcon" in obj,
          get: (obj) => obj.nzSuffixIcon,
          set: (obj, value) => {
            obj.nzSuffixIcon = value;
          }
        },
        metadata: _metadata
      }, _nzSuffixIcon_initializers, _nzSuffixIcon_extraInitializers);
      __esDecorate(null, null, _nzBorderless_decorators, {
        kind: "field",
        name: "nzBorderless",
        static: false,
        private: false,
        access: {
          has: (obj) => "nzBorderless" in obj,
          get: (obj) => obj.nzBorderless,
          set: (obj, value) => {
            obj.nzBorderless = value;
          }
        },
        metadata: _metadata
      }, _nzBorderless_initializers, _nzBorderless_extraInitializers);
      __esDecorate(null, null, _nzBackdrop_decorators, {
        kind: "field",
        name: "nzBackdrop",
        static: false,
        private: false,
        access: {
          has: (obj) => "nzBackdrop" in obj,
          get: (obj) => obj.nzBackdrop,
          set: (obj, value) => {
            obj.nzBackdrop = value;
          }
        },
        metadata: _metadata
      }, _nzBackdrop_initializers, _nzBackdrop_extraInitializers);
      if (_metadata) Object.defineProperty(this, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    }
    set nzShowArrow(value) {
      this._nzShowArrow = value;
    }
    get nzShowArrow() {
      return this._nzShowArrow === void 0 ? this.nzMode === "default" : this._nzShowArrow;
    }
    get isMaxTagCountSet() {
      return this.nzMaxMultipleCount !== Infinity;
    }
    generateTagItem(value) {
      return {
        nzValue: value,
        nzLabel: value,
        type: "item"
      };
    }
    onItemClick(value) {
      this.activatedValue = value;
      if (this.nzMode === "default") {
        if (this.listOfValue.length === 0 || !this.compareWith(this.listOfValue[0], value)) {
          this.updateListOfValue([value]);
        }
        this.setOpenState(false);
      } else {
        const targetIndex = this.listOfValue.findIndex((o) => this.compareWith(o, value));
        if (targetIndex !== -1) {
          const listOfValueAfterRemoved = this.listOfValue.filter((_3, i) => i !== targetIndex);
          this.updateListOfValue(listOfValueAfterRemoved);
        } else if (this.listOfValue.length < this.nzMaxMultipleCount) {
          const listOfValueAfterAdded = [...this.listOfValue, value];
          this.updateListOfValue(listOfValueAfterAdded);
        }
        this.focus();
        if (this.nzAutoClearSearchValue) {
          this.clearInput();
        }
      }
    }
    onItemDelete(item) {
      const listOfSelectedValue = this.listOfValue.filter((v) => !this.compareWith(v, item.nzValue));
      this.updateListOfValue(listOfSelectedValue);
      this.clearInput();
    }
    updateListOfContainerItem() {
      let listOfContainerItem = this.listOfTagAndTemplateItem.filter((item) => !item.nzHide).filter((item) => {
        if (!this.nzServerSearch && this.searchValue) {
          return this.nzFilterOption(this.searchValue, item);
        } else {
          return true;
        }
      });
      if (this.nzMode === "tags" && this.searchValue) {
        const matchedItem = this.listOfTagAndTemplateItem.find((item) => item.nzLabel === this.searchValue);
        if (!matchedItem) {
          const tagItem = this.generateTagItem(this.searchValue);
          listOfContainerItem = [tagItem, ...listOfContainerItem];
          this.activatedValue = tagItem.nzValue;
        } else {
          this.activatedValue = matchedItem.nzValue;
        }
      }
      const activatedItem = listOfContainerItem.find((item) => item.nzLabel === this.searchValue) || listOfContainerItem.find((item) => this.compareWith(item.nzValue, this.activatedValue)) || listOfContainerItem.find((item) => this.compareWith(item.nzValue, this.listOfValue[0])) || listOfContainerItem[0];
      this.activatedValue = activatedItem && activatedItem.nzValue || null;
      let listOfGroupLabel = [];
      if (this.isReactiveDriven) {
        listOfGroupLabel = [...new Set(this.nzOptions.filter((o) => o.groupLabel).map((o) => o.groupLabel))];
      } else {
        if (this.listOfNzOptionGroupComponent) {
          listOfGroupLabel = this.listOfNzOptionGroupComponent.map((o) => o.nzLabel);
        }
      }
      listOfGroupLabel.forEach((label) => {
        const index = listOfContainerItem.findIndex((item) => label === item.groupLabel);
        if (index > -1) {
          const groupItem = {
            groupLabel: label,
            type: "group",
            key: label
          };
          listOfContainerItem.splice(index, 0, groupItem);
        }
      });
      this.listOfContainerItem = [...listOfContainerItem];
      this.updateCdkConnectedOverlayPositions();
    }
    clearInput() {
      this.nzSelectTopControlComponent.clearInputValue();
    }
    updateListOfValue(listOfValue) {
      const covertListToModel = (list, mode) => {
        if (mode === "default") {
          if (list.length > 0) {
            return list[0];
          } else {
            return null;
          }
        } else {
          return list;
        }
      };
      const model = covertListToModel(listOfValue, this.nzMode);
      if (this.value !== model) {
        this.listOfValue = listOfValue;
        this.listOfValue$.next(listOfValue);
        this.value = model;
        this.onChange(this.value);
      }
      this.isMaxLimitReached = this.nzMaxMultipleCount !== Infinity && this.listOfValue.length === this.nzMaxMultipleCount;
    }
    onTokenSeparate(listOfLabel) {
      const listOfMatchedValue = this.listOfTagAndTemplateItem.filter((item) => listOfLabel.findIndex((label) => label === item.nzLabel) !== -1).map((item) => item.nzValue).filter((item) => this.listOfValue.findIndex((v) => this.compareWith(v, item)) === -1);
      if (this.nzMode === "multiple") {
        this.updateListOfValue([...this.listOfValue, ...listOfMatchedValue]);
      } else if (this.nzMode === "tags") {
        const listOfUnMatchedLabel = listOfLabel.filter((label) => this.listOfTagAndTemplateItem.findIndex((item) => item.nzLabel === label) === -1);
        this.updateListOfValue([...this.listOfValue, ...listOfMatchedValue, ...listOfUnMatchedLabel]);
      }
      this.clearInput();
    }
    onKeyDown(e) {
      if (this.nzDisabled) {
        return;
      }
      const listOfFilteredOptionNotDisabled = this.listOfContainerItem.filter((item) => item.type === "item").filter((item) => !item.nzDisabled);
      const activatedIndex = listOfFilteredOptionNotDisabled.findIndex((item) => this.compareWith(item.nzValue, this.activatedValue));
      switch (e.keyCode) {
        case UP_ARROW:
          e.preventDefault();
          if (this.nzOpen && listOfFilteredOptionNotDisabled.length > 0) {
            const preIndex = activatedIndex > 0 ? activatedIndex - 1 : listOfFilteredOptionNotDisabled.length - 1;
            this.activatedValue = listOfFilteredOptionNotDisabled[preIndex].nzValue;
          }
          break;
        case DOWN_ARROW:
          e.preventDefault();
          if (this.nzOpen && listOfFilteredOptionNotDisabled.length > 0) {
            const nextIndex = activatedIndex < listOfFilteredOptionNotDisabled.length - 1 ? activatedIndex + 1 : 0;
            this.activatedValue = listOfFilteredOptionNotDisabled[nextIndex].nzValue;
          } else {
            this.setOpenState(true);
          }
          break;
        case ENTER:
          e.preventDefault();
          if (this.nzOpen) {
            if (isNotNil(this.activatedValue) && activatedIndex !== -1) {
              this.onItemClick(this.activatedValue);
            }
          } else {
            this.setOpenState(true);
          }
          break;
        case SPACE:
          if (!this.nzOpen) {
            this.setOpenState(true);
            e.preventDefault();
          }
          break;
        case TAB:
          if (this.nzSelectOnTab) {
            if (this.nzOpen) {
              e.preventDefault();
              if (isNotNil(this.activatedValue)) {
                this.onItemClick(this.activatedValue);
              }
            }
          } else {
            this.setOpenState(false);
          }
          break;
        case ESCAPE:
          break;
        default:
          if (!this.nzOpen) {
            this.setOpenState(true);
          }
      }
    }
    setOpenState(value) {
      if (this.nzOpen !== value) {
        this.nzOpen = value;
        this.nzOpenChange.emit(value);
        this.onOpenChange();
        this.cdr.markForCheck();
      }
    }
    onOpenChange() {
      this.updateCdkConnectedOverlayStatus();
      if (this.nzAutoClearSearchValue) {
        this.clearInput();
      }
    }
    onInputValueChange(value) {
      this.searchValue = value;
      this.updateListOfContainerItem();
      this.nzOnSearch.emit(value);
      this.updateCdkConnectedOverlayPositions();
    }
    onClearSelection() {
      this.updateListOfValue([]);
    }
    onClickOutside(event2) {
      const target = _getEventTarget(event2);
      if (!this.host.nativeElement.contains(target)) {
        this.setOpenState(false);
      }
    }
    focus() {
      this.nzSelectTopControlComponent.focus();
    }
    blur() {
      this.nzSelectTopControlComponent.blur();
    }
    onPositionChange(position) {
      const placement = getPlacementName(position);
      this.dropdownPosition = placement;
    }
    updateCdkConnectedOverlayStatus() {
      if (this.platform.isBrowser && this.originElement.nativeElement) {
        const triggerWidth = this.triggerWidth;
        cancelRequestAnimationFrame(this.requestId);
        this.requestId = reqAnimFrame(() => {
          this.triggerWidth = this.originElement.nativeElement.getBoundingClientRect().width;
          if (triggerWidth !== this.triggerWidth) {
            this.cdr.detectChanges();
          }
        });
      }
    }
    updateCdkConnectedOverlayPositions() {
      reqAnimFrame(() => {
        this.cdkConnectedOverlay?.overlayRef?.updatePosition();
      });
    }
    constructor(ngZone, destroy$, nzConfigService, cdr, host, renderer, platform, focusMonitor, directionality) {
      this.ngZone = ngZone;
      this.destroy$ = destroy$;
      this.nzConfigService = nzConfigService;
      this.cdr = cdr;
      this.host = host;
      this.renderer = renderer;
      this.platform = platform;
      this.focusMonitor = focusMonitor;
      this.directionality = directionality;
      this._nzModuleName = NZ_CONFIG_MODULE_NAME4;
      this.nzId = null;
      this.nzSize = "default";
      this.nzStatus = "";
      this.nzOptionHeightPx = __runInitializers(this, _nzOptionHeightPx_initializers, 32);
      this.nzOptionOverflowSize = (__runInitializers(this, _nzOptionHeightPx_extraInitializers), 8);
      this.nzDropdownClassName = null;
      this.nzDropdownMatchSelectWidth = true;
      this.nzDropdownStyle = null;
      this.nzNotFoundContent = void 0;
      this.nzPlaceHolder = null;
      this.nzPlacement = null;
      this.nzMaxTagCount = Infinity;
      this.nzDropdownRender = null;
      this.nzCustomTemplate = null;
      this.nzSuffixIcon = __runInitializers(this, _nzSuffixIcon_initializers, null);
      this.nzClearIcon = (__runInitializers(this, _nzSuffixIcon_extraInitializers), null);
      this.nzRemoveIcon = null;
      this.nzMenuItemSelectedIcon = null;
      this.nzTokenSeparators = [];
      this.nzMaxTagPlaceholder = null;
      this.nzMaxMultipleCount = Infinity;
      this.nzMode = "default";
      this.nzFilterOption = defaultFilterOption;
      this.compareWith = (o1, o2) => o1 === o2;
      this.nzAllowClear = false;
      this.nzBorderless = __runInitializers(this, _nzBorderless_initializers, false);
      this.nzShowSearch = (__runInitializers(this, _nzBorderless_extraInitializers), false);
      this.nzLoading = false;
      this.nzAutoFocus = false;
      this.nzAutoClearSearchValue = true;
      this.nzServerSearch = false;
      this.nzDisabled = false;
      this.nzOpen = false;
      this.nzSelectOnTab = false;
      this.nzBackdrop = __runInitializers(this, _nzBackdrop_initializers, false);
      this.nzOptions = (__runInitializers(this, _nzBackdrop_extraInitializers), []);
      this.nzOnSearch = new EventEmitter();
      this.nzScrollToBottom = new EventEmitter();
      this.nzOpenChange = new EventEmitter();
      this.nzBlur = new EventEmitter();
      this.nzFocus = new EventEmitter();
      this.finalSize = computed(() => {
        if (this.compactSize) {
          return this.compactSize();
        }
        return this.size();
      });
      this.size = signal(this.nzSize);
      this.compactSize = inject(NZ_SPACE_COMPACT_SIZE, {
        optional: true
      });
      this.listOfValue$ = new BehaviorSubject([]);
      this.listOfTemplateItem$ = new BehaviorSubject([]);
      this.listOfTagAndTemplateItem = [];
      this.searchValue = "";
      this.isReactiveDriven = false;
      this.requestId = -1;
      this.isNzDisableFirstChange = true;
      this.onChange = () => {
      };
      this.onTouched = () => {
      };
      this.dropdownPosition = "bottomLeft";
      this.triggerWidth = null;
      this.listOfContainerItem = [];
      this.listOfTopItem = [];
      this.activatedValue = null;
      this.listOfValue = [];
      this.focused = false;
      this.dir = "ltr";
      this.positions = [];
      this.isMaxLimitReached = false;
      this.prefixCls = "ant-select";
      this.statusCls = {};
      this.status = "";
      this.hasFeedback = false;
      this.noAnimation = inject(NzNoAnimationDirective, {
        host: true,
        optional: true
      });
      this.nzFormStatusService = inject(NzFormStatusService, {
        optional: true
      });
      this.nzFormNoStatusService = inject(NzFormNoStatusService, {
        optional: true
      });
    }
    writeValue(modelValue) {
      if (this.value !== modelValue) {
        this.value = modelValue;
        const covertModelToList = (model, mode) => {
          if (model === null || model === void 0) {
            return [];
          } else if (mode === "default") {
            return [model];
          } else {
            return model;
          }
        };
        const listOfValue = covertModelToList(modelValue, this.nzMode);
        this.listOfValue = listOfValue;
        this.listOfValue$.next(listOfValue);
        this.cdr.markForCheck();
      }
    }
    registerOnChange(fn) {
      this.onChange = fn;
    }
    registerOnTouched(fn) {
      this.onTouched = fn;
    }
    setDisabledState(disabled) {
      this.nzDisabled = this.isNzDisableFirstChange && this.nzDisabled || disabled;
      this.isNzDisableFirstChange = false;
      if (this.nzDisabled) {
        this.setOpenState(false);
      }
      this.cdr.markForCheck();
    }
    ngOnChanges({
      nzOpen,
      nzDisabled,
      nzOptions,
      nzStatus,
      nzPlacement,
      nzSize
    }) {
      if (nzOpen) {
        this.onOpenChange();
      }
      if (nzDisabled && this.nzDisabled) {
        this.setOpenState(false);
      }
      if (nzOptions) {
        this.isReactiveDriven = true;
        const listOfOptions = this.nzOptions || [];
        const listOfTransformedItem = listOfOptions.map((item) => {
          return {
            template: item.label instanceof TemplateRef ? item.label : null,
            nzTitle: this.getTitle(item.title, item.label),
            nzLabel: typeof item.label === "string" || typeof item.label === "number" ? item.label : null,
            nzValue: item.value,
            nzDisabled: item.disabled || false,
            nzHide: item.hide || false,
            nzCustomContent: item.label instanceof TemplateRef,
            groupLabel: item.groupLabel || null,
            type: "item",
            key: item.key === void 0 ? item.value : item.key
          };
        });
        this.listOfTemplateItem$.next(listOfTransformedItem);
      }
      if (nzStatus) {
        this.setStatusStyles(this.nzStatus, this.hasFeedback);
      }
      if (nzPlacement) {
        const {
          currentValue
        } = nzPlacement;
        this.dropdownPosition = currentValue;
        const listOfPlacement = ["bottomLeft", "topLeft", "bottomRight", "topRight"];
        if (currentValue && listOfPlacement.includes(currentValue)) {
          this.positions = [POSITION_MAP[currentValue]];
        } else {
          this.positions = listOfPlacement.map((e) => POSITION_MAP[e]);
        }
      }
      if (nzSize) {
        this.size.set(nzSize.currentValue);
      }
    }
    ngOnInit() {
      this.nzFormStatusService?.formStatusChanges.pipe(distinctUntilChanged((pre, cur) => {
        return pre.status === cur.status && pre.hasFeedback === cur.hasFeedback;
      }), withLatestFrom(this.nzFormNoStatusService ? this.nzFormNoStatusService.noFormStatus : of(false)), map(([{
        status,
        hasFeedback
      }, noStatus]) => ({
        status: noStatus ? "" : status,
        hasFeedback
      })), takeUntil(this.destroy$)).subscribe(({
        status,
        hasFeedback
      }) => {
        this.setStatusStyles(status, hasFeedback);
      });
      this.focusMonitor.monitor(this.host, true).pipe(takeUntil(this.destroy$)).subscribe((focusOrigin) => {
        if (!focusOrigin) {
          this.focused = false;
          this.cdr.markForCheck();
          this.nzBlur.emit();
          Promise.resolve().then(() => {
            this.onTouched();
          });
        } else {
          this.focused = true;
          this.cdr.markForCheck();
          this.nzFocus.emit();
        }
      });
      combineLatest([this.listOfValue$, this.listOfTemplateItem$]).pipe(takeUntil(this.destroy$)).subscribe(([listOfSelectedValue, listOfTemplateItem]) => {
        const listOfTagItem = listOfSelectedValue.filter(() => this.nzMode === "tags").filter((value) => listOfTemplateItem.findIndex((o) => this.compareWith(o.nzValue, value)) === -1).map((value) => this.listOfTopItem.find((o) => this.compareWith(o.nzValue, value)) || this.generateTagItem(value));
        this.listOfTagAndTemplateItem = [...listOfTemplateItem, ...listOfTagItem];
        this.listOfTopItem = this.listOfValue.map((v) => [...this.listOfTagAndTemplateItem, ...this.listOfTopItem].find((item) => this.compareWith(v, item.nzValue))).filter((item) => !!item);
        this.updateListOfContainerItem();
      });
      this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
        this.dir = direction;
        this.cdr.detectChanges();
      });
      this.nzConfigService.getConfigChangeEventForComponent("select").pipe(takeUntil(this.destroy$)).subscribe(() => {
        this.size.set(this.nzSize);
        this.cdr.markForCheck();
      });
      this.dir = this.directionality.value;
      fromEventOutsideAngular(this.host.nativeElement, "click").pipe(takeUntil(this.destroy$)).subscribe(() => {
        if (this.nzOpen && this.nzShowSearch || this.nzDisabled) {
          return;
        }
        this.ngZone.run(() => this.setOpenState(!this.nzOpen));
      });
      this.cdkConnectedOverlay.overlayKeydown.pipe(takeUntil(this.destroy$)).subscribe((event2) => {
        if (event2.keyCode === ESCAPE) {
          this.setOpenState(false);
        }
      });
    }
    ngAfterContentInit() {
      if (!this.isReactiveDriven) {
        merge(this.listOfNzOptionGroupComponent.changes, this.listOfNzOptionComponent.changes).pipe(startWith(true), switchMap(() => merge(...[this.listOfNzOptionComponent.changes, this.listOfNzOptionGroupComponent.changes, ...this.listOfNzOptionComponent.map((option) => option.changes), ...this.listOfNzOptionGroupComponent.map((option) => option.changes)]).pipe(startWith(true))), takeUntil(this.destroy$)).subscribe(() => {
          const listOfOptionInterface = this.listOfNzOptionComponent.toArray().map((item) => {
            const {
              template,
              nzLabel,
              nzValue,
              nzKey,
              nzDisabled,
              nzHide,
              nzCustomContent,
              groupLabel
            } = item;
            return {
              template,
              nzLabel,
              nzValue,
              nzDisabled,
              nzHide,
              nzCustomContent,
              groupLabel,
              nzTitle: this.getTitle(item.nzTitle, item.nzLabel),
              type: "item",
              key: nzKey === void 0 ? nzValue : nzKey
            };
          });
          this.listOfTemplateItem$.next(listOfOptionInterface);
          this.cdr.markForCheck();
        });
      }
    }
    ngOnDestroy() {
      cancelRequestAnimationFrame(this.requestId);
      this.focusMonitor.stopMonitoring(this.host);
    }
    setStatusStyles(status, hasFeedback) {
      this.status = status;
      this.hasFeedback = hasFeedback;
      this.cdr.markForCheck();
      this.statusCls = getStatusClassNames(this.prefixCls, status, hasFeedback);
      Object.keys(this.statusCls).forEach((status2) => {
        if (this.statusCls[status2]) {
          this.renderer.addClass(this.host.nativeElement, status2);
        } else {
          this.renderer.removeClass(this.host.nativeElement, status2);
        }
      });
    }
    getTitle(title, label) {
      let rawTitle = void 0;
      if (title === void 0) {
        if (typeof label === "string" || typeof label === "number") {
          rawTitle = label.toString();
        }
      } else if (typeof title === "string" || typeof title === "number") {
        rawTitle = title.toString();
      }
      return rawTitle;
    }
    static {
      this.\u0275fac = function NzSelectComponent_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || NzSelectComponent2)(\u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(NzDestroyService), \u0275\u0275directiveInject(NzConfigService), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(Platform), \u0275\u0275directiveInject(FocusMonitor), \u0275\u0275directiveInject(Directionality));
      };
    }
    static {
      this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
        type: NzSelectComponent2,
        selectors: [["nz-select"]],
        contentQueries: function NzSelectComponent_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            \u0275\u0275contentQuery(dirIndex, NzOptionComponent, 5);
            \u0275\u0275contentQuery(dirIndex, NzOptionGroupComponent, 5);
          }
          if (rf & 2) {
            let _t;
            \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.listOfNzOptionComponent = _t);
            \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.listOfNzOptionGroupComponent = _t);
          }
        },
        viewQuery: function NzSelectComponent_Query(rf, ctx) {
          if (rf & 1) {
            \u0275\u0275viewQuery(CdkOverlayOrigin, 7, ElementRef);
            \u0275\u0275viewQuery(CdkConnectedOverlay, 7);
            \u0275\u0275viewQuery(NzSelectTopControlComponent, 7);
            \u0275\u0275viewQuery(NzOptionGroupComponent, 7, ElementRef);
            \u0275\u0275viewQuery(NzSelectTopControlComponent, 7, ElementRef);
          }
          if (rf & 2) {
            let _t;
            \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.originElement = _t.first);
            \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.cdkConnectedOverlay = _t.first);
            \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.nzSelectTopControlComponent = _t.first);
            \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.nzOptionGroupComponentElement = _t.first);
            \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.nzSelectTopControlComponentElement = _t.first);
          }
        },
        hostAttrs: [1, "ant-select"],
        hostVars: 26,
        hostBindings: function NzSelectComponent_HostBindings(rf, ctx) {
          if (rf & 2) {
            \u0275\u0275classProp("ant-select-in-form-item", !!ctx.nzFormStatusService)("ant-select-lg", ctx.finalSize() === "large")("ant-select-sm", ctx.finalSize() === "small")("ant-select-show-arrow", ctx.nzShowArrow)("ant-select-disabled", ctx.nzDisabled)("ant-select-show-search", (ctx.nzShowSearch || ctx.nzMode !== "default") && !ctx.nzDisabled)("ant-select-allow-clear", ctx.nzAllowClear)("ant-select-borderless", ctx.nzBorderless)("ant-select-open", ctx.nzOpen)("ant-select-focused", ctx.nzOpen || ctx.focused)("ant-select-single", ctx.nzMode === "default")("ant-select-multiple", ctx.nzMode !== "default")("ant-select-rtl", ctx.dir === "rtl");
          }
        },
        inputs: {
          nzId: "nzId",
          nzSize: "nzSize",
          nzStatus: "nzStatus",
          nzOptionHeightPx: "nzOptionHeightPx",
          nzOptionOverflowSize: "nzOptionOverflowSize",
          nzDropdownClassName: "nzDropdownClassName",
          nzDropdownMatchSelectWidth: "nzDropdownMatchSelectWidth",
          nzDropdownStyle: "nzDropdownStyle",
          nzNotFoundContent: "nzNotFoundContent",
          nzPlaceHolder: "nzPlaceHolder",
          nzPlacement: "nzPlacement",
          nzMaxTagCount: "nzMaxTagCount",
          nzDropdownRender: "nzDropdownRender",
          nzCustomTemplate: "nzCustomTemplate",
          nzSuffixIcon: "nzSuffixIcon",
          nzClearIcon: "nzClearIcon",
          nzRemoveIcon: "nzRemoveIcon",
          nzMenuItemSelectedIcon: "nzMenuItemSelectedIcon",
          nzTokenSeparators: "nzTokenSeparators",
          nzMaxTagPlaceholder: "nzMaxTagPlaceholder",
          nzMaxMultipleCount: "nzMaxMultipleCount",
          nzMode: "nzMode",
          nzFilterOption: "nzFilterOption",
          compareWith: "compareWith",
          nzAllowClear: [2, "nzAllowClear", "nzAllowClear", booleanAttribute],
          nzBorderless: [2, "nzBorderless", "nzBorderless", booleanAttribute],
          nzShowSearch: [2, "nzShowSearch", "nzShowSearch", booleanAttribute],
          nzLoading: [2, "nzLoading", "nzLoading", booleanAttribute],
          nzAutoFocus: [2, "nzAutoFocus", "nzAutoFocus", booleanAttribute],
          nzAutoClearSearchValue: [2, "nzAutoClearSearchValue", "nzAutoClearSearchValue", booleanAttribute],
          nzServerSearch: [2, "nzServerSearch", "nzServerSearch", booleanAttribute],
          nzDisabled: [2, "nzDisabled", "nzDisabled", booleanAttribute],
          nzOpen: [2, "nzOpen", "nzOpen", booleanAttribute],
          nzSelectOnTab: [2, "nzSelectOnTab", "nzSelectOnTab", booleanAttribute],
          nzBackdrop: [2, "nzBackdrop", "nzBackdrop", booleanAttribute],
          nzOptions: "nzOptions",
          nzShowArrow: [2, "nzShowArrow", "nzShowArrow", booleanAttribute]
        },
        outputs: {
          nzOnSearch: "nzOnSearch",
          nzScrollToBottom: "nzScrollToBottom",
          nzOpenChange: "nzOpenChange",
          nzBlur: "nzBlur",
          nzFocus: "nzFocus"
        },
        exportAs: ["nzSelect"],
        features: [\u0275\u0275ProvidersFeature([NzDestroyService, {
          provide: NG_VALUE_ACCESSOR,
          useExisting: forwardRef(() => NzSelectComponent2),
          multi: true
        }, {
          provide: NZ_SPACE_COMPACT_ITEM_TYPE,
          useValue: "select"
        }]), \u0275\u0275InputTransformsFeature, \u0275\u0275HostDirectivesFeature([NzSpaceCompactItemDirective]), \u0275\u0275NgOnChangesFeature],
        decls: 5,
        vars: 25,
        consts: [["origin", "cdkOverlayOrigin"], ["feedbackIconTpl", ""], ["cdkOverlayOrigin", "", 3, "inputValueChange", "tokenize", "deleteItem", "keydown", "nzId", "open", "disabled", "mode", "nzNoAnimation", "maxTagPlaceholder", "removeIcon", "placeHolder", "maxTagCount", "customTemplate", "tokenSeparators", "showSearch", "autofocus", "listOfTopItem"], [3, "showArrow", "loading", "search", "suffixIcon", "feedbackIcon", "nzMaxMultipleCount", "listOfValue", "isMaxTagCountSet"], [3, "clearIcon"], ["cdkConnectedOverlay", "", "nzConnectedOverlay", "", 3, "overlayOutsideClick", "detach", "positionChange", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayWidth", "cdkConnectedOverlayOrigin", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayOpen", "cdkConnectedOverlayPositions"], [3, "status"], [3, "clear", "clearIcon"], [3, "keydown", "itemClick", "scrollToBottom", "itemSize", "maxItemLength", "matchWidth", "nzNoAnimation", "listOfContainerItem", "menuItemSelectedIcon", "notFoundContent", "activatedValue", "listOfSelectedValue", "dropdownRender", "compareWith", "mode", "isMaxLimitReached"]],
        template: function NzSelectComponent_Template(rf, ctx) {
          if (rf & 1) {
            const _r1 = \u0275\u0275getCurrentView();
            \u0275\u0275elementStart(0, "nz-select-top-control", 2, 0);
            \u0275\u0275listener("inputValueChange", function NzSelectComponent_Template_nz_select_top_control_inputValueChange_0_listener($event) {
              \u0275\u0275restoreView(_r1);
              return \u0275\u0275resetView(ctx.onInputValueChange($event));
            })("tokenize", function NzSelectComponent_Template_nz_select_top_control_tokenize_0_listener($event) {
              \u0275\u0275restoreView(_r1);
              return \u0275\u0275resetView(ctx.onTokenSeparate($event));
            })("deleteItem", function NzSelectComponent_Template_nz_select_top_control_deleteItem_0_listener($event) {
              \u0275\u0275restoreView(_r1);
              return \u0275\u0275resetView(ctx.onItemDelete($event));
            })("keydown", function NzSelectComponent_Template_nz_select_top_control_keydown_0_listener($event) {
              \u0275\u0275restoreView(_r1);
              return \u0275\u0275resetView(ctx.onKeyDown($event));
            });
            \u0275\u0275elementEnd();
            \u0275\u0275template(2, NzSelectComponent_Conditional_2_Template, 3, 8, "nz-select-arrow", 3)(3, NzSelectComponent_Conditional_3_Template, 1, 1, "nz-select-clear", 4)(4, NzSelectComponent_ng_template_4_Template, 1, 25, "ng-template", 5);
            \u0275\u0275listener("overlayOutsideClick", function NzSelectComponent_Template_ng_template_overlayOutsideClick_4_listener($event) {
              \u0275\u0275restoreView(_r1);
              return \u0275\u0275resetView(ctx.onClickOutside($event));
            })("detach", function NzSelectComponent_Template_ng_template_detach_4_listener() {
              \u0275\u0275restoreView(_r1);
              return \u0275\u0275resetView(ctx.setOpenState(false));
            })("positionChange", function NzSelectComponent_Template_ng_template_positionChange_4_listener($event) {
              \u0275\u0275restoreView(_r1);
              return \u0275\u0275resetView(ctx.onPositionChange($event));
            });
          }
          if (rf & 2) {
            const origin_r6 = \u0275\u0275reference(1);
            \u0275\u0275property("nzId", ctx.nzId)("open", ctx.nzOpen)("disabled", ctx.nzDisabled)("mode", ctx.nzMode)("@.disabled", !!(ctx.noAnimation == null ? null : ctx.noAnimation.nzNoAnimation))("nzNoAnimation", ctx.noAnimation == null ? null : ctx.noAnimation.nzNoAnimation)("maxTagPlaceholder", ctx.nzMaxTagPlaceholder)("removeIcon", ctx.nzRemoveIcon)("placeHolder", ctx.nzPlaceHolder)("maxTagCount", ctx.nzMaxTagCount)("customTemplate", ctx.nzCustomTemplate)("tokenSeparators", ctx.nzTokenSeparators)("showSearch", ctx.nzShowSearch)("autofocus", ctx.nzAutoFocus)("listOfTopItem", ctx.listOfTopItem);
            \u0275\u0275advance(2);
            \u0275\u0275conditional(ctx.nzShowArrow || ctx.hasFeedback && !!ctx.status || ctx.isMaxTagCountSet ? 2 : -1);
            \u0275\u0275advance();
            \u0275\u0275conditional(ctx.nzAllowClear && !ctx.nzDisabled && ctx.listOfValue.length ? 3 : -1);
            \u0275\u0275advance();
            \u0275\u0275property("cdkConnectedOverlayHasBackdrop", ctx.nzBackdrop)("cdkConnectedOverlayMinWidth", ctx.nzDropdownMatchSelectWidth ? null : ctx.triggerWidth)("cdkConnectedOverlayWidth", ctx.nzDropdownMatchSelectWidth ? ctx.triggerWidth : null)("cdkConnectedOverlayOrigin", origin_r6)("cdkConnectedOverlayTransformOriginOn", ".ant-select-dropdown")("cdkConnectedOverlayPanelClass", ctx.nzDropdownClassName)("cdkConnectedOverlayOpen", ctx.nzOpen)("cdkConnectedOverlayPositions", ctx.positions);
          }
        },
        dependencies: [NzSelectTopControlComponent, CdkOverlayOrigin, NzNoAnimationDirective, NzSelectArrowComponent, NzFormItemFeedbackIconComponent, NzSelectClearComponent, CdkConnectedOverlay, NzOverlayModule, NzConnectedOverlayDirective, NzOptionContainerComponent],
        encapsulation: 2,
        data: {
          animation: [slideMotion]
        },
        changeDetection: 0
      });
    }
  };
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSelectComponent, [{
    type: Component,
    args: [{
      selector: "nz-select",
      exportAs: "nzSelect",
      preserveWhitespaces: false,
      providers: [NzDestroyService, {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => NzSelectComponent),
        multi: true
      }, {
        provide: NZ_SPACE_COMPACT_ITEM_TYPE,
        useValue: "select"
      }],
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      animations: [slideMotion],
      template: `
    <nz-select-top-control
      cdkOverlayOrigin
      #origin="cdkOverlayOrigin"
      [nzId]="nzId"
      [open]="nzOpen"
      [disabled]="nzDisabled"
      [mode]="nzMode"
      [@.disabled]="!!noAnimation?.nzNoAnimation"
      [nzNoAnimation]="noAnimation?.nzNoAnimation"
      [maxTagPlaceholder]="nzMaxTagPlaceholder"
      [removeIcon]="nzRemoveIcon"
      [placeHolder]="nzPlaceHolder"
      [maxTagCount]="nzMaxTagCount"
      [customTemplate]="nzCustomTemplate"
      [tokenSeparators]="nzTokenSeparators"
      [showSearch]="nzShowSearch"
      [autofocus]="nzAutoFocus"
      [listOfTopItem]="listOfTopItem"
      (inputValueChange)="onInputValueChange($event)"
      (tokenize)="onTokenSeparate($event)"
      (deleteItem)="onItemDelete($event)"
      (keydown)="onKeyDown($event)"
    ></nz-select-top-control>
    @if (nzShowArrow || (hasFeedback && !!status) || isMaxTagCountSet) {
      <nz-select-arrow
        [showArrow]="nzShowArrow"
        [loading]="nzLoading"
        [search]="nzOpen && nzShowSearch"
        [suffixIcon]="nzSuffixIcon"
        [feedbackIcon]="feedbackIconTpl"
        [nzMaxMultipleCount]="nzMaxMultipleCount"
        [listOfValue]="listOfValue"
        [isMaxTagCountSet]="isMaxTagCountSet"
      >
        <ng-template #feedbackIconTpl>
          @if (hasFeedback && !!status) {
            <nz-form-item-feedback-icon [status]="status"></nz-form-item-feedback-icon>
          }
        </ng-template>
      </nz-select-arrow>
    }

    @if (nzAllowClear && !nzDisabled && listOfValue.length) {
      <nz-select-clear [clearIcon]="nzClearIcon" (clear)="onClearSelection()"></nz-select-clear>
    }
    <ng-template
      cdkConnectedOverlay
      nzConnectedOverlay
      [cdkConnectedOverlayHasBackdrop]="nzBackdrop"
      [cdkConnectedOverlayMinWidth]="$any(nzDropdownMatchSelectWidth ? null : triggerWidth)"
      [cdkConnectedOverlayWidth]="$any(nzDropdownMatchSelectWidth ? triggerWidth : null)"
      [cdkConnectedOverlayOrigin]="origin"
      [cdkConnectedOverlayTransformOriginOn]="'.ant-select-dropdown'"
      [cdkConnectedOverlayPanelClass]="nzDropdownClassName!"
      [cdkConnectedOverlayOpen]="nzOpen"
      [cdkConnectedOverlayPositions]="positions"
      (overlayOutsideClick)="onClickOutside($event)"
      (detach)="setOpenState(false)"
      (positionChange)="onPositionChange($event)"
    >
      <nz-option-container
        [style]="nzDropdownStyle"
        [itemSize]="nzOptionHeightPx"
        [maxItemLength]="nzOptionOverflowSize"
        [matchWidth]="nzDropdownMatchSelectWidth"
        [class.ant-select-dropdown-placement-bottomLeft]="dropdownPosition === 'bottomLeft'"
        [class.ant-select-dropdown-placement-topLeft]="dropdownPosition === 'topLeft'"
        [class.ant-select-dropdown-placement-bottomRight]="dropdownPosition === 'bottomRight'"
        [class.ant-select-dropdown-placement-topRight]="dropdownPosition === 'topRight'"
        [@slideMotion]="'enter'"
        [@.disabled]="!!noAnimation?.nzNoAnimation"
        [nzNoAnimation]="noAnimation?.nzNoAnimation"
        [listOfContainerItem]="listOfContainerItem"
        [menuItemSelectedIcon]="nzMenuItemSelectedIcon"
        [notFoundContent]="nzNotFoundContent"
        [activatedValue]="activatedValue"
        [listOfSelectedValue]="listOfValue"
        [dropdownRender]="nzDropdownRender"
        [compareWith]="compareWith"
        [mode]="nzMode"
        [isMaxLimitReached]="isMaxLimitReached"
        (keydown)="onKeyDown($event)"
        (itemClick)="onItemClick($event)"
        (scrollToBottom)="nzScrollToBottom.emit()"
      ></nz-option-container>
    </ng-template>
  `,
      host: {
        class: "ant-select",
        "[class.ant-select-in-form-item]": "!!nzFormStatusService",
        "[class.ant-select-lg]": 'finalSize() === "large"',
        "[class.ant-select-sm]": 'finalSize() === "small"',
        "[class.ant-select-show-arrow]": `nzShowArrow`,
        "[class.ant-select-disabled]": "nzDisabled",
        "[class.ant-select-show-search]": `(nzShowSearch || nzMode !== 'default') && !nzDisabled`,
        "[class.ant-select-allow-clear]": "nzAllowClear",
        "[class.ant-select-borderless]": "nzBorderless",
        "[class.ant-select-open]": "nzOpen",
        "[class.ant-select-focused]": "nzOpen || focused",
        "[class.ant-select-single]": `nzMode === 'default'`,
        "[class.ant-select-multiple]": `nzMode !== 'default'`,
        "[class.ant-select-rtl]": `dir === 'rtl'`
      },
      hostDirectives: [NzSpaceCompactItemDirective],
      imports: [NzSelectTopControlComponent, CdkOverlayOrigin, NzNoAnimationDirective, NzSelectArrowComponent, NzFormItemFeedbackIconComponent, NzSelectClearComponent, CdkConnectedOverlay, NzOverlayModule, NzOptionContainerComponent]
    }]
  }], () => [{
    type: NgZone
  }, {
    type: NzDestroyService
  }, {
    type: NzConfigService
  }, {
    type: ChangeDetectorRef
  }, {
    type: ElementRef
  }, {
    type: Renderer2
  }, {
    type: Platform
  }, {
    type: FocusMonitor
  }, {
    type: Directionality
  }], {
    nzId: [{
      type: Input
    }],
    nzSize: [{
      type: Input
    }],
    nzStatus: [{
      type: Input
    }],
    nzOptionHeightPx: [{
      type: Input
    }],
    nzOptionOverflowSize: [{
      type: Input
    }],
    nzDropdownClassName: [{
      type: Input
    }],
    nzDropdownMatchSelectWidth: [{
      type: Input
    }],
    nzDropdownStyle: [{
      type: Input
    }],
    nzNotFoundContent: [{
      type: Input
    }],
    nzPlaceHolder: [{
      type: Input
    }],
    nzPlacement: [{
      type: Input
    }],
    nzMaxTagCount: [{
      type: Input
    }],
    nzDropdownRender: [{
      type: Input
    }],
    nzCustomTemplate: [{
      type: Input
    }],
    nzSuffixIcon: [{
      type: Input
    }],
    nzClearIcon: [{
      type: Input
    }],
    nzRemoveIcon: [{
      type: Input
    }],
    nzMenuItemSelectedIcon: [{
      type: Input
    }],
    nzTokenSeparators: [{
      type: Input
    }],
    nzMaxTagPlaceholder: [{
      type: Input
    }],
    nzMaxMultipleCount: [{
      type: Input
    }],
    nzMode: [{
      type: Input
    }],
    nzFilterOption: [{
      type: Input
    }],
    compareWith: [{
      type: Input
    }],
    nzAllowClear: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzBorderless: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzShowSearch: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzLoading: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzAutoFocus: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzAutoClearSearchValue: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzServerSearch: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzDisabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzOpen: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzSelectOnTab: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzBackdrop: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzOptions: [{
      type: Input
    }],
    nzShowArrow: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzOnSearch: [{
      type: Output
    }],
    nzScrollToBottom: [{
      type: Output
    }],
    nzOpenChange: [{
      type: Output
    }],
    nzBlur: [{
      type: Output
    }],
    nzFocus: [{
      type: Output
    }],
    originElement: [{
      type: ViewChild,
      args: [CdkOverlayOrigin, {
        static: true,
        read: ElementRef
      }]
    }],
    cdkConnectedOverlay: [{
      type: ViewChild,
      args: [CdkConnectedOverlay, {
        static: true
      }]
    }],
    nzSelectTopControlComponent: [{
      type: ViewChild,
      args: [NzSelectTopControlComponent, {
        static: true
      }]
    }],
    listOfNzOptionComponent: [{
      type: ContentChildren,
      args: [NzOptionComponent, {
        descendants: true
      }]
    }],
    listOfNzOptionGroupComponent: [{
      type: ContentChildren,
      args: [NzOptionGroupComponent, {
        descendants: true
      }]
    }],
    nzOptionGroupComponentElement: [{
      type: ViewChild,
      args: [NzOptionGroupComponent, {
        static: true,
        read: ElementRef
      }]
    }],
    nzSelectTopControlComponentElement: [{
      type: ViewChild,
      args: [NzSelectTopControlComponent, {
        static: true,
        read: ElementRef
      }]
    }]
  });
})();
var NzSelectModule = class _NzSelectModule {
  static {
    this.\u0275fac = function NzSelectModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSelectModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzSelectModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      imports: [NzSelectComponent, NzOptionContainerComponent, NzOptionItemComponent, NzSelectTopControlComponent, NzSelectSearchComponent, NzSelectItemComponent, NzSelectClearComponent, NzSelectArrowComponent, NzSelectPlaceholderComponent, NzOptionItemGroupComponent]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSelectModule, [{
    type: NgModule,
    args: [{
      imports: [NzOptionComponent, NzSelectComponent, NzOptionContainerComponent, NzOptionGroupComponent, NzOptionItemComponent, NzSelectTopControlComponent, NzSelectSearchComponent, NzSelectItemComponent, NzSelectClearComponent, NzSelectArrowComponent, NzSelectPlaceholderComponent, NzOptionItemGroupComponent],
      exports: [NzOptionComponent, NzSelectComponent, NzOptionGroupComponent, NzSelectArrowComponent, NzSelectClearComponent, NzSelectItemComponent, NzSelectPlaceholderComponent, NzSelectSearchComponent]
    }]
  }], null, null);
})();

// src/app/modules/management/pages/bus-stations/component/create-edit-bus-station-dialog/create-bus-station-dialog.component.ts
var _forTrack05 = ($index, $item) => $item._id;
var _c016 = (a0) => ({ "!border-red-500": a0 });
function CreateEditBusStationDialogComponent_p_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 15);
    \u0275\u0275text(1, " Vui l\xF2ng \u0111i\u1EC1n v\xE0o tr\u01B0\u1EDDng n\xE0y ");
    \u0275\u0275elementEnd();
  }
}
function CreateEditBusStationDialogComponent_For_18_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-option", 12);
  }
  if (rf & 2) {
    const busProvice_r1 = ctx.$implicit;
    \u0275\u0275property("nzLabel", busProvice_r1.name)("nzValue", busProvice_r1._id);
  }
}
var CreateEditBusStationDialogComponent = class _CreateEditBusStationDialogComponent {
  constructor(fb, utils) {
    this.fb = fb;
    this.utils = utils;
    this.dialogRef = inject(MatDialogRef);
    this.data = inject(MAT_DIALOG_DATA);
    this.busStation = this.data.busStation ?? new BusStation2Create();
    this.busProvices = this.data.busProvices ?? [];
  }
  ngOnInit() {
    this.initForm();
  }
  initForm() {
    return __async(this, null, function* () {
      const busProvice = this.busProvices.find((busProvice2) => busProvice2._id === this.busStation.provinceId);
      this.busStationForm = this.fb.group({
        name: [this.busStation.name, [Validators.required]],
        busProvice: [busProvice?._id]
      });
    });
  }
  closeDialog() {
    this.dialogRef.close();
  }
  onSubmit() {
    if (!this.busStationForm.valid) {
      this.utils.markFormGroupTouched(this.busStationForm);
      return;
    }
    const { name: name2 } = this.busStationForm.getRawValue();
    const data = __spreadProps(__spreadValues({}, this.busStation), {
      name: name2
    });
    this.dialogRef.close(data);
  }
  static {
    this.\u0275fac = function CreateEditBusStationDialogComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _CreateEditBusStationDialogComponent)(\u0275\u0275directiveInject(FormBuilder), \u0275\u0275directiveInject(Utils));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _CreateEditBusStationDialogComponent, selectors: [["app-create-bus-station-dialog"]], standalone: false, decls: 22, vars: 7, consts: [[1, "text-center"], [1, "text-xl", "font-bold"], [1, "absolute", "right-3", 3, "matDialogClose"], ["xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 24 24", "fill", "currentColor", 1, "size-6"], ["fill-rule", "evenodd", "d", "M5.47 5.47a.75.75 0 0 1 1.06 0L12 10.94l5.47-5.47a.75.75 0 1 1 1.06 1.06L13.06 12l5.47 5.47a.75.75 0 1 1-1.06 1.06L12 13.06l-5.47 5.47a.75.75 0 0 1-1.06-1.06L10.94 12 5.47 6.53a.75.75 0 0 1 0-1.06Z", "clip-rule", "evenodd"], [1, "pb-5", "pt-3"], [1, "sm:min-w-36", "md:min-w-96", "mx-auto", 3, "ngSubmit", "formGroup"], [1, "mb-5"], ["for", "base-input", 1, "mb-2", "block", "text-sm", "font-medium", "text-gray-900", "dark:text-white"], ["type", "text", "id", "busType-name", "formControlName", "name", 1, "block", "w-full", "rounded-lg", "border", "border-gray-300", "bg-gray-50", "p-2.5", "text-sm", "text-gray-900", "focus:border-blue-500", "focus:ring-blue-500", "dark:border-gray-600", "dark:bg-gray-700", "dark:text-white", "dark:placeholder-gray-400", "dark:focus:border-blue-500", "dark:focus:ring-blue-500", 3, "ngClass"], ["class", "mt-1 text-xs text-red-500", 4, "ngIf"], ["nzShowSearch", "", "formControlName", "busProvice", "nzPlaceHolder", "Vui l\xF2ng ch\u1ECDn 1 T\u1EC9nh", 1, "border-border", "block", "w-full", "rounded-md", "border", "p-2", "text-sm"], [3, "nzLabel", "nzValue"], [1, "line-block", "space-x-4", "text-center"], [1, "bg-primary", "text-primary-foreground", "flex-none", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold", 3, "click", "matDialogClose"], [1, "mt-1", "text-xs", "text-red-500"]], template: function CreateEditBusStationDialogComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "mat-dialog-title", 0)(1, "span", 1);
        \u0275\u0275text(2);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(3, "button", 2);
        \u0275\u0275namespaceSVG();
        \u0275\u0275elementStart(4, "svg", 3);
        \u0275\u0275element(5, "path", 4);
        \u0275\u0275elementEnd()()();
        \u0275\u0275namespaceHTML();
        \u0275\u0275elementStart(6, "mat-dialog-content", 5)(7, "form", 6);
        \u0275\u0275listener("ngSubmit", function CreateEditBusStationDialogComponent_Template_form_ngSubmit_7_listener() {
          return ctx.onSubmit();
        });
        \u0275\u0275elementStart(8, "div", 7)(9, "label", 8);
        \u0275\u0275text(10, "NAME");
        \u0275\u0275elementEnd();
        \u0275\u0275element(11, "input", 9);
        \u0275\u0275template(12, CreateEditBusStationDialogComponent_p_12_Template, 2, 0, "p", 10);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(13, "div", 7)(14, "label", 8);
        \u0275\u0275text(15, "Province");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(16, "nz-select", 11);
        \u0275\u0275repeaterCreate(17, CreateEditBusStationDialogComponent_For_18_Template, 1, 2, "nz-option", 12, _forTrack05);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(19, "mat-dialog-actions", 13)(20, "button", 14);
        \u0275\u0275listener("click", function CreateEditBusStationDialogComponent_Template_button_click_20_listener() {
          return ctx.onSubmit();
        });
        \u0275\u0275text(21, " SAVE ");
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.data.title);
        \u0275\u0275advance(5);
        \u0275\u0275property("formGroup", ctx.busStationForm);
        \u0275\u0275advance(4);
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c016, (ctx.busStationForm.controls["name"].errors == null ? null : ctx.busStationForm.controls["name"].errors["required"]) && ctx.busStationForm.controls["name"].touched));
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", (ctx.busStationForm.controls["name"].errors == null ? null : ctx.busStationForm.controls["name"].errors["required"]) && ctx.busStationForm.controls["name"].touched);
        \u0275\u0275advance(5);
        \u0275\u0275repeater(ctx.busProvices);
        \u0275\u0275advance(3);
        \u0275\u0275property("matDialogClose", ctx.busStation);
      }
    }, dependencies: [NgClass, NgIf, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, FormGroupDirective, FormControlName, MatDialogClose, MatDialogActions, MatDialogContent, NzOptionComponent, NzSelectComponent], styles: ["\n\n.action-preview-img[_ngcontent-%COMP%]:hover {\n  opacity: 1;\n  background: rgba(0, 0, 0, 0.5);\n}\n/*# sourceMappingURL=create-bus-station-dialog.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(CreateEditBusStationDialogComponent, { className: "CreateEditBusStationDialogComponent", filePath: "src/app/modules/management/pages/bus-stations/component/create-edit-bus-station-dialog/create-bus-station-dialog.component.ts", lineNumber: 20 });
})();

// src/app/modules/management/pages/bus-stations/service/bus-stations.servive.ts
var BusStationsService = class _BusStationsService {
  constructor(apiGatewayService) {
    this.apiGatewayService = apiGatewayService;
    this.url = "/bus-station";
  }
  findAll() {
    const url = `${this.url}/findAll`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  searchBusStation(pageIdx = 0, pageSize = 999, keyword = "", sortBy = "") {
    const url = `${this.url}/search?pageIdx=${pageIdx}&pageSize=${pageSize}&keyword=${keyword}&sortBy=${sortBy}`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  createBusStation(busServiceIconFile, busService2Create) {
    const url = this.url;
    return this.apiGatewayService.post(url, busService2Create).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  updateBusStation(busStation2Update) {
    const url = this.url;
    return this.apiGatewayService.put(url, busStation2Update).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  updateBusStations(busStations2Update) {
    console.log("\u{1F680} ~ BusStationsService ~ updateBusStationFollowProvinceId ~ busStations2Update:", busStations2Update);
    const url = `${this.url}/updates`;
    return this.apiGatewayService.put(url, busStations2Update).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  deleteBusStation(id) {
    const deleteOptionUrl = this.url + `/${id}`;
    return this.apiGatewayService.delete(deleteOptionUrl).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  static {
    this.\u0275fac = function BusStationsService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusStationsService)(\u0275\u0275inject(ApiGatewayService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _BusStationsService, factory: _BusStationsService.\u0275fac, providedIn: "root" });
  }
};

// src/app/modules/management/pages/bus-provices/service/bus-provinces.servive.ts
var BusProvincesService = class _BusProvincesService {
  constructor(apiGatewayService) {
    this.apiGatewayService = apiGatewayService;
    this.url = "/bus-province";
  }
  findAll() {
    const url = `${this.url}/findAll`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  searchBusProvince(pageIdx = 0, pageSize = 999, keyword = "", sortBy = "") {
    const url = `${this.url}/search?pageIdx=${pageIdx}&pageSize=${pageSize}&keyword=${keyword}&sortBy=${sortBy}`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  createBusProvince(busServiceIconFile, busService2Create) {
    const url = this.url;
    return this.apiGatewayService.post(url, busService2Create).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  updateBusProvince(busService2Update) {
    const url = this.url;
    return this.apiGatewayService.put(url, busService2Update).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  deleteBusProvince(id) {
    const deleteOptionUrl = this.url + `/${id}`;
    return this.apiGatewayService.delete(deleteOptionUrl).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  static {
    this.\u0275fac = function BusProvincesService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusProvincesService)(\u0275\u0275inject(ApiGatewayService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _BusProvincesService, factory: _BusProvincesService.\u0275fac, providedIn: "root" });
  }
};

// src/app/modules/management/pages/bus-stations/bus-stations.component.ts
var _forTrack06 = ($index, $item) => $item._id;
function BusStationsComponent_For_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr", 13)(1, "td", 15)(2, "input", 16);
    \u0275\u0275twoWayListener("ngModelChange", function BusStationsComponent_For_20_Template_input_ngModelChange_2_listener($event) {
      const busStation_r2 = \u0275\u0275restoreView(_r1).$implicit;
      \u0275\u0275twoWayBindingSet(busStation_r2.selected, $event) || (busStation_r2.selected = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function BusStationsComponent_For_20_Template_input_change_2_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.checkSelectAll());
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(3, "td");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "td", 15)(6, "button", 17);
    \u0275\u0275listener("click", function BusStationsComponent_For_20_Template_button_click_6_listener() {
      const busStation_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.editBusStation(busStation_r2));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(7, "svg", 18);
    \u0275\u0275element(8, "path", 19);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(9, "button", 20);
    \u0275\u0275listener("click", function BusStationsComponent_For_20_Template_button_click_9_listener() {
      const busStation_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.deleteBusStation(busStation_r2._id));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(10, "svg", 18);
    \u0275\u0275element(11, "path", 21);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const busStation_r2 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", busStation_r2.selected);
    \u0275\u0275attribute("aria-label", "Select " + busStation_r2.name);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(busStation_r2.name);
  }
}
function BusStationsComponent_ForEmpty_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr")(1, "td", 22);
    \u0275\u0275text(2, "No busStations found");
    \u0275\u0275elementEnd()();
  }
}
var BusStationsComponent = class _BusStationsComponent {
  constructor(busStationsService, dialog, busProvincesService, utils) {
    this.busStationsService = busStationsService;
    this.dialog = dialog;
    this.busProvincesService = busProvincesService;
    this.utils = utils;
    this.searchBusStation = new SearchBusStation();
    this.selectAll = false;
    this.busProvices = [];
    this.pageIdx = 1;
    this.pageSize = 5;
    this.totalPage = 0;
    this.totalItem = 0;
    this.keyword = "";
    this.sortBy = "";
    this.isLoadingBusStation = false;
  }
  ngOnInit() {
    this.loadData();
  }
  loadData() {
    this.isLoadingBusStation = true;
    this.busStationsService.searchBusStation(this.pageIdx, this.pageSize, this.keyword, this.sortBy).subscribe({
      next: (res) => {
        if (res) {
          this.searchBusStation = res;
          this.totalItem = this.searchBusStation.totalItem;
          this.totalPage = this.searchBusStation.totalPage;
        }
        this.isLoadingBusStation = false;
      },
      error: (error2) => {
        this.utils.handleRequestError(error2);
        this.isLoadingBusStation = false;
      }
    });
    this.busProvincesService.findAll().subscribe({
      next: (res) => {
        if (res) {
          this.busProvices = res;
        }
      },
      error: (error2) => {
        this.utils.handleRequestError(error2);
      }
    });
  }
  toggleBusStation(event2) {
    const checked = event2.target.checked;
    this.searchBusStation.busStations = this.searchBusStation.busStations.map((busStation) => __spreadProps(__spreadValues({}, busStation), {
      selected: checked
    }));
  }
  checkSelectAll() {
    this.selectAll = !this.searchBusStation.busStations.some((busStation) => !busStation.selected);
  }
  deleteBusStation(id) {
    const dialogRef = this.dialog.open(MaterialDialogComponent, {
      data: {
        icon: {
          type: "dangerous"
        },
        title: "Delete BusStation",
        content: "Are you sure you want to delete this busStation? All of your data will be permanently removed. This action cannot be undone.",
        btn: [
          {
            label: "NO",
            type: "cancel"
          },
          {
            label: "YES",
            type: "submit"
          }
        ]
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        this.busStationsService.deleteBusStation(id).subscribe({
          next: (res) => {
            if (res) {
              this.searchBusStation.busStations = this.searchBusStation.busStations.filter((busStation) => busStation._id !== id);
              toast.success("BusStation deleted successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  editBusStation(busStation) {
    const dialogRef = this.dialog.open(CreateEditBusStationDialogComponent, {
      data: {
        title: "Edit BusStation",
        busStation: __spreadValues({}, busStation),
        busProvices: this.busProvices
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        this.busStationsService.updateBusStation(result).subscribe({
          next: (res) => {
            if (res) {
              this.searchBusStation.busStations = this.searchBusStation.busStations.map((busStation2) => busStation2._id === res._id ? __spreadValues(__spreadValues({}, busStation2), res) : busStation2);
              toast.success("BusStation updated successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  addBusStation() {
    const dialogRef = this.dialog.open(CreateEditBusStationDialogComponent, {
      data: {
        title: "Add New BusStation",
        busProvices: this.busProvices
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        const busStation2Create = new BusStation2Create();
        busStation2Create.name = result.name;
        this.busStationsService.createBusStation(result.file, busStation2Create).subscribe({
          next: (res) => {
            if (res) {
              this.loadData();
              toast.success("BusStation added successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  reloadBusStationPage(data) {
    this.pageIdx = data.pageIdx;
    this.pageSize = data.pageSize;
    this.loadData();
  }
  searchBusStationPage(keyword) {
    this.pageIdx = 1;
    this.keyword = keyword;
    this.loadData();
  }
  sortBusStationPage(sortBy) {
    this.sortBy = sortBy;
    this.loadData();
  }
  handleRequestError(error2) {
    const msg = "An error occurred while processing your request";
    toast.error(msg, {
      position: "bottom-right",
      description: error2.message || "Please try again later",
      action: {
        label: "Dismiss",
        onClick: () => {
        }
      },
      actionButtonStyle: "background-color:#DC2626; color:white;"
    });
  }
  static {
    this.\u0275fac = function BusStationsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusStationsComponent)(\u0275\u0275directiveInject(BusStationsService), \u0275\u0275directiveInject(MatDialog), \u0275\u0275directiveInject(BusProvincesService), \u0275\u0275directiveInject(Utils));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _BusStationsComponent, selectors: [["app-bus-stations"]], standalone: false, decls: 23, vars: 9, consts: [[1, "mb-4", "flex", "justify-end"], [1, "inline-block", "space-x-4"], ["aria-label", "Import CSV", 1, "bg-muted", "text-muted-foreground", "hover:text-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold"], ["aria-label", "Add BusStation", 1, "bg-primary", "text-primary-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold", 3, "click"], [1, "border-muted/20", "bg-background", "flex", "min-w-full", "flex-col", "rounded-xl", "border", "p-2"], [3, "sortDataEvent", "searchDataEvent", "title", "totalItem"], [1, "overflow-x-auto"], [1, "text-muted-foreground", "w-full", "table-auto", "border-collapse", "text-left", "align-middle", "leading-5"], [1, "border-muted/20", "text-muted-foreground", "border", "text-xs"], [1, "w-[50px]"], ["type", "checkbox", "aria-label", "Select all busStations", 1, "checkbox", "checkbox-sm", 3, "change", "ngModelChange", "ngModel"], [1, "min-w-[200px]"], [1, "w-[100px]", "text-center"], [1, "hover:bg-card/50"], [3, "reloadDataAndPageEvent", "pageIdx", "pageSize", "totalItem", "isLoading", "totalPage"], [1, "text-center"], ["type", "checkbox", 1, "checkbox", "checkbox-sm", 3, "ngModelChange", "change", "ngModel"], ["aria-label", "Edit busStation", 1, "text-muted-foreground", "hover:bg-card", "hover:text-foreground", "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", 3, "click"], ["viewBox", "0 0 20 20", "fill", "currentColor", 1, "size-5"], ["d", "m2.695 14.762-1.262 3.155a.5.5 0 0 0 .65.65l3.155-1.262a4 4 0 0 0 1.343-.886L17.5 5.501a2.121 2.121 0 0 0-3-3L3.58 13.419a4 4 0 0 0-.885 1.343Z"], ["aria-label", "Delete busStation", 1, "text-muted-foreground", "hover:bg-card", "hover:text-foreground", "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", 3, "click"], ["fill-rule", "evenodd", "d", "M8.75 1A2.75 2.75 0 0 0 6 3.75v.443c-.795.077-1.584.176-2.365.298a.75.75 0 1 0 .23 1.482l.149-.022.841 10.518A2.75 2.75 0 0 0 7.596 19h4.807a2.75 2.75 0 0 0 2.742-2.53l.841-10.52.149.023a.75.75 0 0 0 .23-1.482A41.03 41.03 0 0 0 14 4.193V3.75A2.75 2.75 0 0 0 11.25 1h-2.5ZM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25v.325C8.327 4.025 9.16 4 10 4ZM8.58 7.72a.75.75 0 0 0-1.5.06l.3 7.5a.75.75 0 1 0 1.5-.06l-.3-7.5Zm4.34.06a.75.75 0 1 0-1.5-.06l-.3 7.5a.75.75 0 1 0 1.5.06l.3-7.5Z", "clip-rule", "evenodd"], ["colspan", "4", 1, "py-4", "text-center", "text-sm"]], template: function BusStationsComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "button", 2);
        \u0275\u0275text(3, " Import CSV ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(4, "button", 3);
        \u0275\u0275listener("click", function BusStationsComponent_Template_button_click_4_listener() {
          return ctx.addBusStation();
        });
        \u0275\u0275text(5, " Add BusStation ");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(6, "div", 4)(7, "app-table-action", 5);
        \u0275\u0275listener("sortDataEvent", function BusStationsComponent_Template_app_table_action_sortDataEvent_7_listener($event) {
          return ctx.sortBusStationPage($event);
        })("searchDataEvent", function BusStationsComponent_Template_app_table_action_searchDataEvent_7_listener($event) {
          return ctx.searchBusStationPage($event);
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "div", 6)(9, "table", 7)(10, "thead", 8)(11, "tr")(12, "th", 9)(13, "input", 10);
        \u0275\u0275listener("change", function BusStationsComponent_Template_input_change_13_listener($event) {
          return ctx.toggleBusStation($event);
        });
        \u0275\u0275twoWayListener("ngModelChange", function BusStationsComponent_Template_input_ngModelChange_13_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.selectAll, $event) || (ctx.selectAll = $event);
          return $event;
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(14, "th", 11);
        \u0275\u0275text(15, "Name");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(16, "th", 12);
        \u0275\u0275text(17, "Actions");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(18, "tbody");
        \u0275\u0275repeaterCreate(19, BusStationsComponent_For_20_Template, 12, 3, "tr", 13, _forTrack06, false, BusStationsComponent_ForEmpty_21_Template, 3, 0, "tr");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(22, "app-table-footer", 14);
        \u0275\u0275listener("reloadDataAndPageEvent", function BusStationsComponent_Template_app_table_footer_reloadDataAndPageEvent_22_listener($event) {
          return ctx.reloadBusStationPage($event);
        });
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(7);
        \u0275\u0275property("title", "BusStation")("totalItem", ctx.totalItem);
        \u0275\u0275advance(6);
        \u0275\u0275twoWayProperty("ngModel", ctx.selectAll);
        \u0275\u0275advance(6);
        \u0275\u0275repeater(ctx.searchBusStation.busStations);
        \u0275\u0275advance(3);
        \u0275\u0275property("pageIdx", ctx.pageIdx)("pageSize", ctx.pageSize)("totalItem", ctx.totalItem)("isLoading", ctx.isLoadingBusStation)("totalPage", ctx.totalPage);
      }
    }, dependencies: [CheckboxControlValueAccessor, NgControlStatus, NgModel, TableFooterComponent, TableActionComponent], styles: ["\n\ntd[_ngcontent-%COMP%] {\n  padding: 0.75rem 1rem;\n  font-size: 0.85rem;\n}\nth[_ngcontent-%COMP%] {\n  font-weight: 500;\n  padding: 0.625rem 1rem;\n  font-weight: 500;\n  font-size: 0.8125rem;\n  line-height: 1.125rem;\n  vertical-align: middle;\n  @apply border-b border-r;\n}\n/*# sourceMappingURL=bus-stations.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(BusStationsComponent, { className: "BusStationsComponent", filePath: "src/app/modules/management/pages/bus-stations/bus-stations.component.ts", lineNumber: 18 });
})();

// src/app/modules/management/pages/bus-provices/model/bus-province.model.ts
var SearchBusProvince = class {
  constructor() {
    this.busProvinces = [];
    this.pageIdx = 0;
    this.totalItem = 0;
    this.totalPage = 0;
  }
};
var BusProvince2Create = class {
  constructor() {
    this._id = "";
    this.name = "";
  }
};

// src/app/modules/management/pages/bus-provices/component/create-edit-bus-province-dialog/create-bus-province-dialog.component.ts
var import_lodash2 = __toESM(require_lodash());
var _c017 = (a0) => ({ "!border-red-500": a0 });
var _c110 = (a0) => [a0];
var _c27 = (a0) => ({ "rotate-180": a0 });
var _c33 = (a0) => ({ "drag-drop-box-selected": a0 });
function CreateEditBusProvinceDialogComponent_p_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 21);
    \u0275\u0275text(1, " Vui l\xF2ng \u0111i\u1EC1n v\xE0o tr\u01B0\u1EDDng n\xE0y ");
    \u0275\u0275elementEnd();
  }
}
function CreateEditBusProvinceDialogComponent_For_21_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 22);
    \u0275\u0275listener("click", function CreateEditBusProvinceDialogComponent_For_21_Template_div_click_0_listener() {
      const item_r3 = \u0275\u0275restoreView(_r2).$implicit;
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.toggleBusStation(item_r3));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const item_r3 = ctx.$implicit;
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(2, _c33, item_r3.selected));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", item_r3.name, " ");
  }
}
function CreateEditBusProvinceDialogComponent_For_28_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 22);
    \u0275\u0275listener("click", function CreateEditBusProvinceDialogComponent_For_28_Template_div_click_0_listener() {
      const busStation_r6 = \u0275\u0275restoreView(_r5).$implicit;
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.toggleBusStation(busStation_r6));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const busStation_r6 = ctx.$implicit;
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(2, _c33, busStation_r6.selected));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", busStation_r6.name, " ");
  }
}
var BusProvince2CreateUI = class extends BusProvince2Create {
  constructor() {
    super(...arguments);
    this.busStations = [];
  }
};
var CreateEditBusProvinceDialogComponent = class _CreateEditBusProvinceDialogComponent {
  constructor(fb, utils) {
    this.fb = fb;
    this.utils = utils;
    this.dialogRef = inject(MatDialogRef);
    this.data = inject(MAT_DIALOG_DATA);
    this.busProvince = __spreadValues(__spreadValues({}, new BusProvince2CreateUI()), this.data.busProvince);
    this.busStations = this.data.busStations ?? new BusStation();
    this.isRotated = false;
    this.filteredBusStations = [];
    this.filteredBusProvinceStations = [];
  }
  ngOnInit() {
    return __async(this, null, function* () {
      yield this.initData();
      this.initForm();
    });
  }
  initForm() {
    return __async(this, null, function* () {
      this.busProvinceForm = this.fb.group({
        name: [this.busProvince.name, [Validators.required]]
      });
    });
  }
  initData() {
    return __async(this, null, function* () {
      this.busStations = yield import_lodash2.default.difference(this.busStations, this.busProvince.busStations);
      this.busStations = this.busStations.map((busStation) => __spreadProps(__spreadValues({}, busStation), {
        selected: false
      }));
      this.filteredBusStations = this.busStations;
      this.filteredBusProvinceStations = this.busProvince.busStations;
    });
  }
  closeDialog() {
    this.dialogRef.close();
  }
  onSubmit() {
    if (!this.busProvinceForm.valid) {
      this.utils.markFormGroupTouched(this.busProvinceForm);
      return;
    }
    const { name: name2 } = this.busProvinceForm.getRawValue();
    const busStationsOfProvince = this.filteredBusProvinceStations.map((busStation) => __spreadProps(__spreadValues({}, busStation), {
      provinceId: this.busProvince._id
    }));
    const busStationNotAsssign = import_lodash2.default.difference(this.busProvince.busStations, this.filteredBusProvinceStations).map((busStation) => __spreadProps(__spreadValues({}, busStation), {
      provinceId: ""
    }));
    const data = {
      busProvince: __spreadProps(__spreadValues({}, this.busProvince), {
        name: name2
      }),
      busStations2Update: import_lodash2.default.union(busStationsOfProvince, busStationNotAsssign)
    };
    this.dialogRef.close(data);
  }
  searchBusStations($event) {
    const keyword = $event.target.value;
    ;
    const lowerKeyword = keyword.toLowerCase();
    this.filteredBusStations = this.busStations.filter((station) => station.name.toLowerCase().includes(lowerKeyword));
  }
  searchBusProvinceStations($event) {
    const keyword = $event.target.value;
    ;
    const lowerKeyword = keyword.toLowerCase();
    this.filteredBusProvinceStations = this.busProvince.busStations.filter((station) => station.name.toLowerCase().includes(lowerKeyword));
  }
  toggleRotationBusStation() {
    this.isRotated = !this.isRotated;
    let busStationsOfProvince = this.filteredBusProvinceStations?.filter((b) => b.selected) || [];
    let busStations = this.filteredBusStations?.filter((bt) => bt.selected) || [];
    this.filteredBusStations = [...busStationsOfProvince, ...this.filteredBusStations?.filter((bt) => !bt.selected) || []];
    this.filteredBusProvinceStations = [...busStations, ...this.filteredBusProvinceStations?.filter((b) => !b.selected) || []];
    this.filteredBusStations = this.filteredBusStations.map((bt) => __spreadProps(__spreadValues({}, bt), { selected: false }));
    this.filteredBusProvinceStations = this.filteredBusProvinceStations.map((b) => __spreadProps(__spreadValues({}, b), {
      selected: false
    }));
  }
  toggleBusStation(busStation) {
    busStation.selected = !busStation.selected;
  }
  drop(event2) {
    if (event2.previousContainer === event2.container) {
      moveItemInArray(event2.container.data, event2.previousIndex, event2.currentIndex);
    } else {
      transferArrayItem(event2.previousContainer.data, event2.container.data, event2.previousIndex, event2.currentIndex);
    }
  }
  static {
    this.\u0275fac = function CreateEditBusProvinceDialogComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _CreateEditBusProvinceDialogComponent)(\u0275\u0275directiveInject(FormBuilder), \u0275\u0275directiveInject(Utils));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _CreateEditBusProvinceDialogComponent, selectors: [["app-create-bus-province-dialog"]], standalone: false, decls: 32, vars: 18, consts: [["list1", "cdkDropList"], ["list2", "cdkDropList"], [1, "text-center"], [1, "text-xl", "font-bold"], [1, "absolute", "right-3", 3, "matDialogClose"], ["xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 24 24", "fill", "currentColor", 1, "size-6"], ["fill-rule", "evenodd", "d", "M5.47 5.47a.75.75 0 0 1 1.06 0L12 10.94l5.47-5.47a.75.75 0 1 1 1.06 1.06L13.06 12l5.47 5.47a.75.75 0 1 1-1.06 1.06L12 13.06l-5.47 5.47a.75.75 0 0 1-1.06-1.06L10.94 12 5.47 6.53a.75.75 0 0 1 0-1.06Z", "clip-rule", "evenodd"], [1, "pb-5", "pt-3"], [1, "sm:min-w-36", "md:min-w-96", "mx-auto", 3, "ngSubmit", "formGroup"], [1, "mb-5"], ["for", "base-input", 1, "mb-2", "block", "text-sm", "font-medium", "text-gray-900", "dark:text-white"], ["type", "text", "id", "busType-name", "formControlName", "name", 1, "block", "w-full", "rounded-lg", "border", "border-gray-300", "bg-gray-50", "p-2.5", "text-sm", "text-gray-900", "focus:border-blue-500", "focus:ring-blue-500", "dark:border-gray-600", "dark:bg-gray-700", "dark:text-white", "dark:placeholder-gray-400", "dark:focus:border-blue-500", "dark:focus:ring-blue-500", 3, "ngClass"], ["class", "mt-1 text-xs text-red-500", 4, "ngIf"], [1, "flex", "items-center", "justify-center", "gap-4"], [1, "drag-drop-container"], ["cdkDropList", "", 1, "drag-drop-list", 3, "cdkDropListDropped", "cdkDropListData", "cdkDropListConnectedTo"], ["cdkDrag", "", 1, "drag-drop-box", 3, "ngClass"], [1, "switch-location", "inline-block", 3, "click", "ngClass"], ["svgClass", "w-4 h-4 cursor-pointer", "src", "./assets/icons/repeat.svg"], [1, "line-block", "space-x-4", "text-center"], [1, "bg-primary", "text-primary-foreground", "flex-none", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold", 3, "click", "matDialogClose"], [1, "mt-1", "text-xs", "text-red-500"], ["cdkDrag", "", 1, "drag-drop-box", 3, "click", "ngClass"]], template: function CreateEditBusProvinceDialogComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "mat-dialog-title", 2)(1, "span", 3);
        \u0275\u0275text(2);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(3, "button", 4);
        \u0275\u0275namespaceSVG();
        \u0275\u0275elementStart(4, "svg", 5);
        \u0275\u0275element(5, "path", 6);
        \u0275\u0275elementEnd()()();
        \u0275\u0275namespaceHTML();
        \u0275\u0275elementStart(6, "mat-dialog-content", 7)(7, "form", 8);
        \u0275\u0275listener("ngSubmit", function CreateEditBusProvinceDialogComponent_Template_form_ngSubmit_7_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onSubmit());
        });
        \u0275\u0275elementStart(8, "div", 9)(9, "label", 10);
        \u0275\u0275text(10, "Name");
        \u0275\u0275elementEnd();
        \u0275\u0275element(11, "input", 11);
        \u0275\u0275template(12, CreateEditBusProvinceDialogComponent_p_12_Template, 2, 0, "p", 12);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(13, "div", 9)(14, "label", 10);
        \u0275\u0275text(15, "Bus Stations");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(16, "diV", 13)(17, "div", 14)(18, "div", 15, 0);
        \u0275\u0275listener("cdkDropListDropped", function CreateEditBusProvinceDialogComponent_Template_div_cdkDropListDropped_18_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.drop($event));
        });
        \u0275\u0275repeaterCreate(20, CreateEditBusProvinceDialogComponent_For_21_Template, 2, 4, "div", 16, \u0275\u0275repeaterTrackByIdentity);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(22, "div", 17);
        \u0275\u0275listener("click", function CreateEditBusProvinceDialogComponent_Template_div_click_22_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.toggleRotationBusStation());
        });
        \u0275\u0275element(23, "svg-icon", 18);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(24, "div", 14)(25, "div", 15, 1);
        \u0275\u0275listener("cdkDropListDropped", function CreateEditBusProvinceDialogComponent_Template_div_cdkDropListDropped_25_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.drop($event));
        });
        \u0275\u0275repeaterCreate(27, CreateEditBusProvinceDialogComponent_For_28_Template, 2, 4, "div", 16, \u0275\u0275repeaterTrackByIdentity);
        \u0275\u0275elementEnd()()()()()();
        \u0275\u0275elementStart(29, "mat-dialog-actions", 19)(30, "button", 20);
        \u0275\u0275listener("click", function CreateEditBusProvinceDialogComponent_Template_button_click_30_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onSubmit());
        });
        \u0275\u0275text(31, " SAVE ");
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        const list1_r7 = \u0275\u0275reference(19);
        const list2_r8 = \u0275\u0275reference(26);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.data.title);
        \u0275\u0275advance(5);
        \u0275\u0275property("formGroup", ctx.busProvinceForm);
        \u0275\u0275advance(4);
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(10, _c017, (ctx.busProvinceForm.controls["name"].errors == null ? null : ctx.busProvinceForm.controls["name"].errors["required"]) && ctx.busProvinceForm.controls["name"].touched));
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", (ctx.busProvinceForm.controls["name"].errors == null ? null : ctx.busProvinceForm.controls["name"].errors["required"]) && ctx.busProvinceForm.controls["name"].touched);
        \u0275\u0275advance(6);
        \u0275\u0275property("cdkDropListData", ctx.filteredBusProvinceStations)("cdkDropListConnectedTo", \u0275\u0275pureFunction1(12, _c110, list2_r8));
        \u0275\u0275advance(2);
        \u0275\u0275repeater(ctx.filteredBusProvinceStations);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(14, _c27, ctx.isRotated));
        \u0275\u0275advance(3);
        \u0275\u0275property("cdkDropListData", ctx.filteredBusStations)("cdkDropListConnectedTo", \u0275\u0275pureFunction1(16, _c110, list1_r7));
        \u0275\u0275advance(2);
        \u0275\u0275repeater(ctx.filteredBusStations);
        \u0275\u0275advance(3);
        \u0275\u0275property("matDialogClose", ctx.busProvince);
      }
    }, dependencies: [NgClass, NgIf, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, FormGroupDirective, FormControlName, SvgIconComponent, CdkDropList, CdkDrag, MatDialogClose, MatDialogActions, MatDialogContent], styles: ["\n\n.switch-location[_ngcontent-%COMP%] {\n  border: 1px solid #ccc;\n  border-radius: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 38px;\n  height: 38px;\n  background-color: white;\n  box-shadow: 0px 0px 3px 2px #e5e5e5;\n  transition: transform 0.5s;\n}\n.switch-location.rotate-180[_ngcontent-%COMP%] {\n  transform: rotate(180deg);\n}\n.switch-location.rotate-360[_ngcontent-%COMP%] {\n  transform: rotate(0deg);\n}\n.drag-drop-container[_ngcontent-%COMP%] {\n  max-width: 100%;\n  display: inline-block;\n  vertical-align: top;\n}\n.drag-drop-list[_ngcontent-%COMP%] {\n  border: solid 1px #ccc;\n  min-height: 60px;\n  background: white;\n  border-radius: 4px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  height: 400px;\n  max-height: 100%;\n  width: 300px;\n  border-radius: 5px;\n}\n.drag-drop-box[_ngcontent-%COMP%] {\n  padding: 8px 10px;\n  border-bottom: solid 1px #ccc;\n  color: rgba(0, 0, 0, 0.87);\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  box-sizing: border-box;\n  cursor: move;\n  background: white;\n  font-size: 14px;\n}\n.drag-drop-box-selected[_ngcontent-%COMP%] {\n  background-color: #c3e0ff;\n  border-bottom: 1px solid #0054ad;\n}\n.cdk-drag-preview[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow:\n    0 5px 5px -3px rgba(0, 0, 0, 0.2),\n    0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  opacity: 0;\n}\n.cdk-drag-animating[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n.drag-drop-box[_ngcontent-%COMP%]:last-child {\n  border: none;\n}\n.drag-drop-list.cdk-drop-list-dragging[_ngcontent-%COMP%]   .drag-drop-box[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n/*# sourceMappingURL=create-bus-province-dialog.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(CreateEditBusProvinceDialogComponent, { className: "CreateEditBusProvinceDialogComponent", filePath: "src/app/modules/management/pages/bus-provices/component/create-edit-bus-province-dialog/create-bus-province-dialog.component.ts", lineNumber: 26 });
})();

// src/app/modules/management/pages/bus-provices/bus-provinces.component.ts
var _forTrack07 = ($index, $item) => $item._id;
function BusProvincesComponent_For_20_span_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 23);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const busStation_r4 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(busStation_r4.name);
  }
}
function BusProvincesComponent_For_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr", 13)(1, "td", 15)(2, "input", 16);
    \u0275\u0275twoWayListener("ngModelChange", function BusProvincesComponent_For_20_Template_input_ngModelChange_2_listener($event) {
      const busProvince_r2 = \u0275\u0275restoreView(_r1).$implicit;
      \u0275\u0275twoWayBindingSet(busProvince_r2.selected, $event) || (busProvince_r2.selected = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function BusProvincesComponent_For_20_Template_input_change_2_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.checkSelectAll());
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(3, "td")(4, "div");
    \u0275\u0275text(5);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "div");
    \u0275\u0275template(7, BusProvincesComponent_For_20_span_7_Template, 2, 1, "span", 17);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(8, "td", 15)(9, "button", 18);
    \u0275\u0275listener("click", function BusProvincesComponent_For_20_Template_button_click_9_listener() {
      const busProvince_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.editBusProvince(busProvince_r2));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(10, "svg", 19);
    \u0275\u0275element(11, "path", 20);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(12, "button", 21);
    \u0275\u0275listener("click", function BusProvincesComponent_For_20_Template_button_click_12_listener() {
      const busProvince_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.deleteBusProvince(busProvince_r2._id));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(13, "svg", 19);
    \u0275\u0275element(14, "path", 22);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const busProvince_r2 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", busProvince_r2.selected);
    \u0275\u0275attribute("aria-label", "Select " + busProvince_r2.name);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", busProvince_r2.name, " ");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", busProvince_r2.busStations);
  }
}
function BusProvincesComponent_ForEmpty_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr")(1, "td", 24);
    \u0275\u0275text(2, "No busProvinces found");
    \u0275\u0275elementEnd()();
  }
}
var BusProvincesComponent = class _BusProvincesComponent {
  constructor(busProvincesService, busStationsService, utilsModal, utils) {
    this.busProvincesService = busProvincesService;
    this.busStationsService = busStationsService;
    this.utilsModal = utilsModal;
    this.utils = utils;
    this.searchBusProvince = new SearchBusProvince();
    this.selectAll = false;
    this.pageIdx = 1;
    this.pageSize = 5;
    this.totalPage = 0;
    this.totalItem = 0;
    this.keyword = "";
    this.sortBy = "";
    this.isLoadingBusProvince = false;
    this.busStations = [];
    this.filteredProvinces = [];
    this.searchKeyword = "";
  }
  ngOnInit() {
    this.loadData();
  }
  loadData() {
    this.isLoadingBusProvince = true;
    const searchBusProvince$ = this.busProvincesService.searchBusProvince(this.pageIdx, this.pageSize, this.keyword, this.sortBy);
    const searchBusStation$ = this.busStationsService.findAll();
    let request = [searchBusProvince$, searchBusStation$];
    combineLatest(request).subscribe((_0) => __async(this, [_0], function* ([searchBusProvinceRes, busStations]) {
      this.searchBusProvince = searchBusProvinceRes;
      if (this.searchBusProvince && this.busStations) {
        this.totalItem = this.searchBusProvince.totalItem;
        this.totalPage = this.searchBusProvince.totalPage;
        this.busStations = busStations;
        this.filterProvinces();
      }
      this.isLoadingBusProvince = false;
    }));
  }
  filterProvinces() {
    clearTimeout(this.timeout);
    this.timeout = setTimeout(() => {
      this.isLoadingBusProvince = true;
      const keyword = this.searchKeyword.toLowerCase();
      this.filteredProvinces = this.searchBusProvince.busProvinces.map((province) => {
        const matchingBusStations = this.busStations.filter((busStation) => busStation.provinceId === province._id && busStation.name.toLowerCase().includes(keyword));
        const remainingBusStations = this.busStations.filter((busStation) => busStation.provinceId === province._id && !busStation.name.toLowerCase().includes(keyword));
        return __spreadProps(__spreadValues({}, province), {
          busStations: [...matchingBusStations, ...remainingBusStations]
        });
      }).filter((province) => province.name.toLowerCase().includes(keyword) || province.busStations.some((busStation) => busStation.name.toLowerCase().includes(keyword))).sort((a, b) => {
        const aMatches = a.name.toLowerCase().includes(keyword) ? -1 : 1;
        const bMatches = b.name.toLowerCase().includes(keyword) ? -1 : 1;
        return aMatches - bMatches;
      });
      this.isLoadingBusProvince = false;
      this.expandMatchingAccordions();
      console.log("\u{1F680} ~ BusStationsComponent ~ this.timeout=setTimeout ~ this.filteredProvinces:", this.filteredProvinces);
    }, 300);
  }
  expandMatchingAccordions() {
  }
  toggleBusProvince(event2) {
    const checked = event2.target.checked;
    this.searchBusProvince.busProvinces = this.searchBusProvince.busProvinces.map((busProvince) => __spreadProps(__spreadValues({}, busProvince), {
      selected: checked
    }));
  }
  checkSelectAll() {
    this.selectAll = !this.searchBusProvince.busProvinces.some((busProvince) => !busProvince.selected);
  }
  deleteBusProvince(id) {
  }
  editBusProvince(busProvince) {
    console.log("\u{1F680} ~ BusProvincesComponent ~ editBusProvince ~ busProvince:", busProvince);
    const data = {
      title: "Edit Bus Province",
      busProvince: __spreadValues({}, busProvince),
      busStations: this.busStations
    };
    this.utilsModal.openModal(CreateEditBusProvinceDialogComponent, data, "medium").subscribe((result) => {
      if (result) {
        console.log("\u{1F680} ~ BusProvincesComponent ~ this.utilsModal.openModal ~ result:", result);
        const updateBusProvince$ = this.busProvincesService.updateBusProvince(result.busProvince);
        const updateBusStations$ = this.busStationsService.updateBusStations(result.busStations2Update);
        let request = [updateBusProvince$, updateBusStations$];
        combineLatest(request).subscribe({
          next: ([updateBusProvinceRes, updateBusStationsRes]) => {
            if (updateBusProvinceRes && updateBusStationsRes) {
              this.loadData();
              toast.success("C\u1EADp nh\u1EADp th\xE0nh c\xF4ng ");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  addBusProvince() {
  }
  reloadBusProvincePage(data) {
    this.pageIdx = data.pageIdx;
    this.pageSize = data.pageSize;
    this.loadData();
  }
  searchBusProvincePage(keyword) {
    this.pageIdx = 1;
    this.keyword = keyword;
    this.loadData();
  }
  sortBusProvincePage(sortBy) {
    this.sortBy = sortBy;
    this.loadData();
  }
  handleRequestError(error2) {
    const msg = "An error occurred while processing your request";
    toast.error(msg, {
      position: "bottom-right",
      description: error2.message || "Please try again later",
      action: {
        label: "Dismiss",
        onClick: () => {
        }
      },
      actionButtonStyle: "background-color:#DC2626; color:white;"
    });
  }
  static {
    this.\u0275fac = function BusProvincesComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusProvincesComponent)(\u0275\u0275directiveInject(BusProvincesService), \u0275\u0275directiveInject(BusStationsService), \u0275\u0275directiveInject(UtilsModal), \u0275\u0275directiveInject(Utils));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _BusProvincesComponent, selectors: [["app-bus-provinces"]], standalone: false, decls: 23, vars: 9, consts: [[1, "mb-4", "flex", "justify-end"], [1, "inline-block", "space-x-4"], ["aria-label", "Import CSV", 1, "bg-muted", "text-muted-foreground", "hover:text-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold"], ["aria-label", "Add BusProvince", 1, "bg-primary", "text-primary-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold", 3, "click"], [1, "border-muted/20", "bg-background", "flex", "min-w-full", "flex-col", "rounded-xl", "border", "p-2"], [3, "sortDataEvent", "searchDataEvent", "title", "totalItem"], [1, "overflow-x-auto"], [1, "text-muted-foreground", "w-full", "table-auto", "border-collapse", "text-left", "align-middle", "leading-5"], [1, "border-muted/20", "text-muted-foreground", "border", "text-xs"], [1, "w-[50px]"], ["type", "checkbox", "aria-label", "Select all busProvinces", 1, "checkbox", "checkbox-sm", 3, "change", "ngModelChange", "ngModel"], [1, "min-w-[200px]"], [1, "w-[100px]", "text-center"], [1, "hover:bg-card/50"], [3, "reloadDataAndPageEvent", "pageIdx", "pageSize", "totalItem", "isLoading", "totalPage"], [1, "flex", "text-center"], ["type", "checkbox", 1, "checkbox", "checkbox-sm", 3, "ngModelChange", "change", "ngModel"], ["class", "text-muted-foreground block pl-4 pt-2 text-xs", 4, "ngFor", "ngForOf"], ["aria-label", "Edit busProvince", 1, "text-muted-foreground", "hover:bg-card", "hover:text-foreground", "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", 3, "click"], ["viewBox", "0 0 20 20", "fill", "currentColor", 1, "size-5"], ["d", "m2.695 14.762-1.262 3.155a.5.5 0 0 0 .65.65l3.155-1.262a4 4 0 0 0 1.343-.886L17.5 5.501a2.121 2.121 0 0 0-3-3L3.58 13.419a4 4 0 0 0-.885 1.343Z"], ["aria-label", "Delete busProvince", 1, "text-muted-foreground", "hover:bg-card", "hover:text-foreground", "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", 3, "click"], ["fill-rule", "evenodd", "d", "M8.75 1A2.75 2.75 0 0 0 6 3.75v.443c-.795.077-1.584.176-2.365.298a.75.75 0 1 0 .23 1.482l.149-.022.841 10.518A2.75 2.75 0 0 0 7.596 19h4.807a2.75 2.75 0 0 0 2.742-2.53l.841-10.52.149.023a.75.75 0 0 0 .23-1.482A41.03 41.03 0 0 0 14 4.193V3.75A2.75 2.75 0 0 0 11.25 1h-2.5ZM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25v.325C8.327 4.025 9.16 4 10 4ZM8.58 7.72a.75.75 0 0 0-1.5.06l.3 7.5a.75.75 0 1 0 1.5-.06l-.3-7.5Zm4.34.06a.75.75 0 1 0-1.5-.06l-.3 7.5a.75.75 0 1 0 1.5.06l.3-7.5Z", "clip-rule", "evenodd"], [1, "text-muted-foreground", "block", "pl-4", "pt-2", "text-xs"], ["colspan", "4", 1, "py-4", "text-center", "text-sm"]], template: function BusProvincesComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "button", 2);
        \u0275\u0275text(3, " Import CSV ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(4, "button", 3);
        \u0275\u0275listener("click", function BusProvincesComponent_Template_button_click_4_listener() {
          return ctx.addBusProvince();
        });
        \u0275\u0275text(5, " Add BusProvince ");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(6, "div", 4)(7, "app-table-action", 5);
        \u0275\u0275listener("sortDataEvent", function BusProvincesComponent_Template_app_table_action_sortDataEvent_7_listener($event) {
          return ctx.sortBusProvincePage($event);
        })("searchDataEvent", function BusProvincesComponent_Template_app_table_action_searchDataEvent_7_listener($event) {
          return ctx.searchBusProvincePage($event);
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "div", 6)(9, "table", 7)(10, "thead", 8)(11, "tr")(12, "th", 9)(13, "input", 10);
        \u0275\u0275listener("change", function BusProvincesComponent_Template_input_change_13_listener($event) {
          return ctx.toggleBusProvince($event);
        });
        \u0275\u0275twoWayListener("ngModelChange", function BusProvincesComponent_Template_input_ngModelChange_13_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.selectAll, $event) || (ctx.selectAll = $event);
          return $event;
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(14, "th", 11);
        \u0275\u0275text(15, "Name");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(16, "th", 12);
        \u0275\u0275text(17, "Actions");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(18, "tbody");
        \u0275\u0275repeaterCreate(19, BusProvincesComponent_For_20_Template, 15, 4, "tr", 13, _forTrack07, false, BusProvincesComponent_ForEmpty_21_Template, 3, 0, "tr");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(22, "app-table-footer", 14);
        \u0275\u0275listener("reloadDataAndPageEvent", function BusProvincesComponent_Template_app_table_footer_reloadDataAndPageEvent_22_listener($event) {
          return ctx.reloadBusProvincePage($event);
        });
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(7);
        \u0275\u0275property("title", "BusProvince")("totalItem", ctx.totalItem);
        \u0275\u0275advance(6);
        \u0275\u0275twoWayProperty("ngModel", ctx.selectAll);
        \u0275\u0275advance(6);
        \u0275\u0275repeater(ctx.filteredProvinces);
        \u0275\u0275advance(3);
        \u0275\u0275property("pageIdx", ctx.pageIdx)("pageSize", ctx.pageSize)("totalItem", ctx.totalItem)("isLoading", ctx.isLoadingBusProvince)("totalPage", ctx.totalPage);
      }
    }, dependencies: [NgForOf, CheckboxControlValueAccessor, NgControlStatus, NgModel, TableFooterComponent, TableActionComponent], styles: ["\n\ntd[_ngcontent-%COMP%] {\n  padding: 0.75rem 1rem;\n  font-size: 0.85rem;\n}\nth[_ngcontent-%COMP%] {\n  font-weight: 500;\n  padding: 0.625rem 1rem;\n  font-weight: 500;\n  font-size: 0.8125rem;\n  line-height: 1.125rem;\n  vertical-align: middle;\n  @apply border-b border-r;\n}\n/*# sourceMappingURL=bus-provinces.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(BusProvincesComponent, { className: "BusProvincesComponent", filePath: "src/app/modules/management/pages/bus-provices/bus-provinces.component.ts", lineNumber: 25 });
})();

// src/app/modules/management/pages/bus-templates/model/bus-template.model.ts
var SearchBusTemplate = class {
  constructor() {
    this.busTemplates = [];
    this.pageIdx = 0;
    this.totalItem = 0;
    this.totalPage = 0;
  }
};
var BusTemplateSeat = class {
  constructor() {
    this._id = "";
    this.index = 0;
    this.typeId = "";
    this.name = "";
    this.status = "";
  }
};
var BusTemplateSeatLayout = class {
  constructor() {
    this.name = "";
    this.seats = [];
  }
};
var BusTemplate2Create = class {
};

// src/app/modules/management/pages/bus-templates/service/bus-templates.servive.ts
var BusTemplatesService = class _BusTemplatesService {
  constructor(apiGatewayService) {
    this.apiGatewayService = apiGatewayService;
    this.url = "/bus-templates";
  }
  findAll() {
    const url = `${this.url}/findAll`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  searchBusTemplate(pageIdx = 0, pageSize = 999, keyword = "", sortBy = "") {
    const url = `${this.url}/search?pageIdx=${pageIdx}&pageSize=${pageSize}&keyword=${keyword}&sortBy=${sortBy}`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  createBusTemplate(busService2Create) {
    const url = this.url;
    return this.apiGatewayService.post(url, busService2Create).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  updateBusTemplate(busService2Update) {
    const url = this.url;
    return this.apiGatewayService.put(url, busService2Update).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  deleteBusTemplate(id) {
    const deleteOptionUrl = this.url + `/${id}`;
    return this.apiGatewayService.delete(deleteOptionUrl).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  static {
    this.\u0275fac = function BusTemplatesService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusTemplatesService)(\u0275\u0275inject(ApiGatewayService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _BusTemplatesService, factory: _BusTemplatesService.\u0275fac, providedIn: "root" });
  }
};

// src/app/modules/management/pages/bus-templates/bus-templates.component.ts
var _forTrack08 = ($index, $item) => $item._id;
function BusTemplatesComponent_For_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr", 13)(1, "td", 15)(2, "input", 16);
    \u0275\u0275twoWayListener("ngModelChange", function BusTemplatesComponent_For_20_Template_input_ngModelChange_2_listener($event) {
      const busService_r2 = \u0275\u0275restoreView(_r1).$implicit;
      \u0275\u0275twoWayBindingSet(busService_r2.selected, $event) || (busService_r2.selected = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function BusTemplatesComponent_For_20_Template_input_change_2_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.checkSelectAll());
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(3, "td");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "td", 15)(6, "button", 17);
    \u0275\u0275listener("click", function BusTemplatesComponent_For_20_Template_button_click_6_listener() {
      const busService_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.editBusTemplate(busService_r2));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(7, "svg", 18);
    \u0275\u0275element(8, "path", 19);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(9, "button", 20);
    \u0275\u0275listener("click", function BusTemplatesComponent_For_20_Template_button_click_9_listener() {
      const busService_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.deleteBusTemplate(busService_r2._id));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(10, "svg", 18);
    \u0275\u0275element(11, "path", 21);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const busService_r2 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", busService_r2.selected);
    \u0275\u0275attribute("aria-label", "Select " + busService_r2.name);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(busService_r2.name);
  }
}
function BusTemplatesComponent_ForEmpty_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr")(1, "td", 22);
    \u0275\u0275text(2, "No busTemplates found");
    \u0275\u0275elementEnd()();
  }
}
var BusTemplatesComponent = class _BusTemplatesComponent {
  constructor(busTemplateService, dialog, router, utils) {
    this.busTemplateService = busTemplateService;
    this.dialog = dialog;
    this.router = router;
    this.utils = utils;
    this.searchBusTemplate = new SearchBusTemplate();
    this.selectAll = false;
    this.pageIdx = 1;
    this.pageSize = 5;
    this.totalPage = 0;
    this.totalItem = 0;
    this.keyword = "";
    this.sortBy = "";
    this.isLoadingBusTemplate = false;
  }
  ngOnInit() {
    this.loadData();
  }
  loadData() {
    this.isLoadingBusTemplate = true;
    this.busTemplateService.searchBusTemplate(this.pageIdx, this.pageSize, this.keyword, this.sortBy).subscribe({
      next: (res) => {
        if (res) {
          this.searchBusTemplate = res;
          this.totalItem = this.searchBusTemplate.totalItem;
          this.totalPage = this.searchBusTemplate.totalPage;
        }
        this.isLoadingBusTemplate = false;
      },
      error: (error2) => {
        this.utils.handleRequestError(error2);
        this.isLoadingBusTemplate = false;
      }
    });
  }
  toggleBusTemplate(event2) {
    const checked = event2.target.checked;
    this.searchBusTemplate.busTemplates = this.searchBusTemplate.busTemplates.map((busTemplate) => __spreadProps(__spreadValues({}, busTemplate), {
      selected: checked
    }));
  }
  checkSelectAll() {
    this.selectAll = !this.searchBusTemplate.busTemplates.some((busTemplate) => !busTemplate.selected);
  }
  deleteBusTemplate(id) {
    const dialogRef = this.dialog.open(MaterialDialogComponent, {
      data: {
        icon: {
          type: "dangerous"
        },
        title: "Delete BusTemplate",
        content: "Are you sure you want to delete this busTemplate? All of your data will be permanently removed. This action cannot be undone.",
        btn: [
          {
            label: "NO",
            type: "cancel"
          },
          {
            label: "YES",
            type: "submit"
          }
        ]
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        this.busTemplateService.deleteBusTemplate(id).subscribe({
          next: (res) => {
            if (res) {
              this.searchBusTemplate.busTemplates = this.searchBusTemplate.busTemplates.filter((busTemplate) => busTemplate._id !== id);
              toast.success("BusTemplate deleted successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  editBusTemplate(busTemplate) {
    const params = { busTemplate: JSON.stringify(busTemplate) };
    this.router.navigateByUrl("/management/bus-templates/bus-tempalte-detail", { state: params });
  }
  addBusTemplate() {
    this.router.navigate(["/management/bus-templates/bus-tempalte-detail"]);
  }
  reloadBusTemplatePage(data) {
    this.pageIdx = data.pageIdx;
    this.pageSize = data.pageSize;
    this.loadData();
  }
  searchBusTemplatePage(keyword) {
    this.pageIdx = 1;
    this.keyword = keyword;
    this.loadData();
  }
  sortBusTemplatePage(sortBy) {
    this.sortBy = sortBy;
    this.loadData();
  }
  handleRequestError(error2) {
    const msg = "An error occurred while processing your request";
    toast.error(msg, {
      position: "bottom-right",
      description: error2.message || "Please try again later",
      action: {
        label: "Dismiss",
        onClick: () => {
        }
      },
      actionButtonStyle: "background-color:#DC2626; color:white;"
    });
  }
  static {
    this.\u0275fac = function BusTemplatesComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusTemplatesComponent)(\u0275\u0275directiveInject(BusTemplatesService), \u0275\u0275directiveInject(MatDialog), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(Utils));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _BusTemplatesComponent, selectors: [["app-bus-templates"]], standalone: false, decls: 23, vars: 9, consts: [[1, "mb-4", "flex", "justify-end"], [1, "inline-block", "space-x-4"], ["aria-label", "Import CSV", 1, "bg-muted", "text-muted-foreground", "hover:text-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold"], ["aria-label", "Add BusTemplate", 1, "bg-primary", "text-primary-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold", 3, "click"], [1, "border-muted/20", "bg-background", "flex", "min-w-full", "flex-col", "rounded-xl", "border", "p-2"], [3, "sortDataEvent", "searchDataEvent", "title", "totalItem"], [1, "overflow-x-auto"], [1, "text-muted-foreground", "w-full", "table-auto", "border-collapse", "text-left", "align-middle", "leading-5"], [1, "border-muted/20", "text-muted-foreground", "border", "text-xs"], [1, "w-[50px]"], ["type", "checkbox", "aria-label", "Select all busTemplates", 1, "checkbox", "checkbox-sm", 3, "change", "ngModelChange", "ngModel"], [1, "min-w-[200px]"], [1, "w-[100px]", "text-center"], [1, "hover:bg-card/50"], [3, "reloadDataAndPageEvent", "pageIdx", "pageSize", "totalItem", "isLoading", "totalPage"], [1, "text-center"], ["type", "checkbox", 1, "checkbox", "checkbox-sm", 3, "ngModelChange", "change", "ngModel"], ["aria-label", "Edit busService", 1, "text-muted-foreground", "hover:bg-card", "hover:text-foreground", "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", 3, "click"], ["viewBox", "0 0 20 20", "fill", "currentColor", 1, "size-5"], ["d", "m2.695 14.762-1.262 3.155a.5.5 0 0 0 .65.65l3.155-1.262a4 4 0 0 0 1.343-.886L17.5 5.501a2.121 2.121 0 0 0-3-3L3.58 13.419a4 4 0 0 0-.885 1.343Z"], ["aria-label", "Delete busService", 1, "text-muted-foreground", "hover:bg-card", "hover:text-foreground", "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", 3, "click"], ["fill-rule", "evenodd", "d", "M8.75 1A2.75 2.75 0 0 0 6 3.75v.443c-.795.077-1.584.176-2.365.298a.75.75 0 1 0 .23 1.482l.149-.022.841 10.518A2.75 2.75 0 0 0 7.596 19h4.807a2.75 2.75 0 0 0 2.742-2.53l.841-10.52.149.023a.75.75 0 0 0 .23-1.482A41.03 41.03 0 0 0 14 4.193V3.75A2.75 2.75 0 0 0 11.25 1h-2.5ZM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25v.325C8.327 4.025 9.16 4 10 4ZM8.58 7.72a.75.75 0 0 0-1.5.06l.3 7.5a.75.75 0 1 0 1.5-.06l-.3-7.5Zm4.34.06a.75.75 0 1 0-1.5-.06l-.3 7.5a.75.75 0 1 0 1.5.06l.3-7.5Z", "clip-rule", "evenodd"], ["colspan", "4", 1, "py-4", "text-center", "text-sm"]], template: function BusTemplatesComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "button", 2);
        \u0275\u0275text(3, " Import CSV ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(4, "button", 3);
        \u0275\u0275listener("click", function BusTemplatesComponent_Template_button_click_4_listener() {
          return ctx.addBusTemplate();
        });
        \u0275\u0275text(5, " Add BusTemplate ");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(6, "div", 4)(7, "app-table-action", 5);
        \u0275\u0275listener("sortDataEvent", function BusTemplatesComponent_Template_app_table_action_sortDataEvent_7_listener($event) {
          return ctx.sortBusTemplatePage($event);
        })("searchDataEvent", function BusTemplatesComponent_Template_app_table_action_searchDataEvent_7_listener($event) {
          return ctx.searchBusTemplatePage($event);
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "div", 6)(9, "table", 7)(10, "thead", 8)(11, "tr")(12, "th", 9)(13, "input", 10);
        \u0275\u0275listener("change", function BusTemplatesComponent_Template_input_change_13_listener($event) {
          return ctx.toggleBusTemplate($event);
        });
        \u0275\u0275twoWayListener("ngModelChange", function BusTemplatesComponent_Template_input_ngModelChange_13_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.selectAll, $event) || (ctx.selectAll = $event);
          return $event;
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(14, "th", 11);
        \u0275\u0275text(15, "Name");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(16, "th", 12);
        \u0275\u0275text(17, "Actions");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(18, "tbody");
        \u0275\u0275repeaterCreate(19, BusTemplatesComponent_For_20_Template, 12, 3, "tr", 13, _forTrack08, false, BusTemplatesComponent_ForEmpty_21_Template, 3, 0, "tr");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(22, "app-table-footer", 14);
        \u0275\u0275listener("reloadDataAndPageEvent", function BusTemplatesComponent_Template_app_table_footer_reloadDataAndPageEvent_22_listener($event) {
          return ctx.reloadBusTemplatePage($event);
        });
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(7);
        \u0275\u0275property("title", "BusTemplate")("totalItem", ctx.totalItem);
        \u0275\u0275advance(6);
        \u0275\u0275twoWayProperty("ngModel", ctx.selectAll);
        \u0275\u0275advance(6);
        \u0275\u0275repeater(ctx.searchBusTemplate.busTemplates);
        \u0275\u0275advance(3);
        \u0275\u0275property("pageIdx", ctx.pageIdx)("pageSize", ctx.pageSize)("totalItem", ctx.totalItem)("isLoading", ctx.isLoadingBusTemplate)("totalPage", ctx.totalPage);
      }
    }, dependencies: [CheckboxControlValueAccessor, NgControlStatus, NgModel, TableFooterComponent, TableActionComponent], styles: ["\n\ntd[_ngcontent-%COMP%] {\n  padding: 0.75rem 1rem;\n  font-size: 0.85rem;\n}\nth[_ngcontent-%COMP%] {\n  font-weight: 500;\n  padding: 0.625rem 1rem;\n  font-weight: 500;\n  font-size: 0.8125rem;\n  line-height: 1.125rem;\n  vertical-align: middle;\n  @apply border-b border-r;\n}\n/*# sourceMappingURL=bus-templates.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(BusTemplatesComponent, { className: "BusTemplatesComponent", filePath: "src/app/modules/management/pages/bus-templates/bus-templates.component.ts", lineNumber: 16 });
})();

// src/app/modules/management/pages/seat-types/service/seat-types.servive.ts
var SeatTypesService = class _SeatTypesService {
  constructor(apiGatewayService, filesService) {
    this.apiGatewayService = apiGatewayService;
    this.filesService = filesService;
    this.url = "/seat-types";
  }
  findAll() {
    const url = `${this.url}`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  searchSeatType(pageIdx = 0, pageSize = 999, keyword = "", sortBy = "") {
    const url = `${this.url}/search?pageIdx=${pageIdx}&pageSize=${pageSize}&keyword=${keyword}&sortBy=${sortBy}`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  createSeatType(seatTypeIconFile, seatType2Create) {
    const url = this.url;
    return this.filesService.uploadFiles(seatTypeIconFile).pipe(switchMap((res) => {
      seatType2Create.icon = res[0].link;
      if (!seatType2Create.isEnv) {
        seatType2Create.blockIcon = res[1].link;
        seatType2Create.selectedIcon = res[2].link;
      }
      return this.apiGatewayService.post(url, seatType2Create).pipe(tap((res2) => {
      }), catchError((error2) => {
        return of([]);
      }));
    }));
  }
  processUpdateSeatType(seatTypeIconFile, seatType2Update) {
    const url = this.url;
    if (seatTypeIconFile.length > 0) {
      return this.filesService.uploadFiles(seatTypeIconFile).pipe(switchMap((res) => {
        seatType2Update.icon = res[0].link;
        if (!seatType2Update.isEnv) {
          seatType2Update.blockIcon = res[1].link;
          seatType2Update.selectedIcon = res[2].link;
        }
        return this.updateSeatType(seatType2Update);
      }));
    } else {
      return this.updateSeatType(seatType2Update);
    }
  }
  updateSeatType(seatType2Update) {
    const url = this.url;
    return this.apiGatewayService.put(url, seatType2Update).pipe(tap((res) => {
    }), catchError((error2) => {
      console.error(error2);
      return of([]);
    }));
  }
  deleteSeatType(id) {
    const deleteOptionUrl = this.url + `/${id}`;
    return this.apiGatewayService.delete(deleteOptionUrl).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  static {
    this.\u0275fac = function SeatTypesService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _SeatTypesService)(\u0275\u0275inject(ApiGatewayService), \u0275\u0275inject(FilesService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _SeatTypesService, factory: _SeatTypesService.\u0275fac, providedIn: "root" });
  }
};

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-menu.mjs
var _c018 = ["nz-menu-item", ""];
var _c111 = ["*"];
var _c28 = ["nz-submenu-inline-child", ""];
function NzSubmenuInlineChildComponent_ng_template_0_Template(rf, ctx) {
}
var _c34 = ["nz-submenu-none-inline-child", ""];
function NzSubmenuNoneInlineChildComponent_ng_template_1_Template(rf, ctx) {
}
var _c43 = ["nz-submenu-title", ""];
function NzSubMenuTitleComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-icon", 0);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("nzType", ctx_r0.nzIcon);
  }
}
function NzSubMenuTitleComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "span", 4);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r0.nzTitle);
  }
}
function NzSubMenuTitleComponent_Conditional_3_Case_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-icon", 5);
  }
}
function NzSubMenuTitleComponent_Conditional_3_Case_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-icon", 6);
  }
}
function NzSubMenuTitleComponent_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 2);
    \u0275\u0275template(1, NzSubMenuTitleComponent_Conditional_3_Case_1_Template, 1, 0, "nz-icon", 5)(2, NzSubMenuTitleComponent_Conditional_3_Case_2_Template, 1, 0, "nz-icon", 6);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_1_0;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275conditional((tmp_1_0 = ctx_r0.dir) === "rtl" ? 1 : 2);
  }
}
function NzSubMenuTitleComponent_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 3);
  }
}
var _c5 = ["nz-submenu", ""];
var _c6 = [[["", "title", ""]], "*"];
var _c7 = ["[title]", "*"];
function NzSubMenuComponent_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275projection(0);
  }
}
function NzSubMenuComponent_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "div", 3);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    const subMenuTemplate_r3 = \u0275\u0275reference(6);
    \u0275\u0275property("mode", ctx_r1.mode)("nzOpen", ctx_r1.nzOpen)("@.disabled", !!(ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation))("nzNoAnimation", ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation)("menuClass", ctx_r1.nzMenuClassName)("templateOutlet", subMenuTemplate_r3);
  }
}
function NzSubMenuComponent_Conditional_4_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6);
    \u0275\u0275listener("subMenuMouseState", function NzSubMenuComponent_Conditional_4_ng_template_0_Template_div_subMenuMouseState_0_listener($event) {
      \u0275\u0275restoreView(_r5);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.setMouseEnterState($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    const subMenuTemplate_r3 = \u0275\u0275reference(6);
    \u0275\u0275property("theme", ctx_r1.theme)("mode", ctx_r1.mode)("nzOpen", ctx_r1.nzOpen)("position", ctx_r1.position)("nzDisabled", ctx_r1.nzDisabled)("isMenuInsideDropDown", ctx_r1.isMenuInsideDropDown)("nzTriggerSubMenuAction", ctx_r1.nzTriggerSubMenuAction)("templateOutlet", subMenuTemplate_r3)("menuClass", ctx_r1.nzMenuClassName)("@.disabled", !!(ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation))("nzNoAnimation", ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation);
  }
}
function NzSubMenuComponent_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275template(0, NzSubMenuComponent_Conditional_4_ng_template_0_Template, 1, 11, "ng-template", 5);
    \u0275\u0275listener("positionChange", function NzSubMenuComponent_Conditional_4_Template_ng_template_positionChange_0_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onPositionChange($event));
    })("overlayOutsideClick", function NzSubMenuComponent_Conditional_4_Template_ng_template_overlayOutsideClick_0_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.setMouseEnterState(false));
    });
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    const origin_r6 = \u0275\u0275reference(1);
    \u0275\u0275property("cdkConnectedOverlayPositions", ctx_r1.overlayPositions)("cdkConnectedOverlayOrigin", origin_r6)("cdkConnectedOverlayWidth", ctx_r1.triggerWidth)("cdkConnectedOverlayOpen", ctx_r1.nzOpen)("cdkConnectedOverlayTransformOriginOn", ".ant-menu-submenu");
  }
}
function NzSubMenuComponent_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275projection(0, 1);
  }
}
var _c8 = ["titleElement"];
var _c9 = ["nz-menu-group", ""];
var _c10 = ["*", [["", "title", ""]]];
var _c11 = ["*", "[title]"];
function NzMenuGroupComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.nzTitle);
  }
}
function NzMenuGroupComponent_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275projection(0, 1);
  }
}
var NzIsMenuInsideDropDownToken = new InjectionToken("NzIsInDropDownMenuToken");
var NzMenuServiceLocalToken = new InjectionToken("NzMenuServiceLocalToken");
var MenuService = class _MenuService {
  constructor() {
    this.descendantMenuItemClick$ = new Subject();
    this.childMenuItemClick$ = new Subject();
    this.theme$ = new BehaviorSubject("light");
    this.mode$ = new BehaviorSubject("vertical");
    this.inlineIndent$ = new BehaviorSubject(24);
    this.isChildSubMenuOpen$ = new BehaviorSubject(false);
  }
  onDescendantMenuItemClick(menu) {
    this.descendantMenuItemClick$.next(menu);
  }
  onChildMenuItemClick(menu) {
    this.childMenuItemClick$.next(menu);
  }
  setMode(mode) {
    this.mode$.next(mode);
  }
  setTheme(theme) {
    this.theme$.next(theme);
  }
  setInlineIndent(indent) {
    this.inlineIndent$.next(indent);
  }
  static {
    this.\u0275fac = function MenuService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MenuService)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _MenuService,
      factory: _MenuService.\u0275fac
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MenuService, [{
    type: Injectable
  }], null, null);
})();
var NzSubmenuService = class _NzSubmenuService {
  /**
   * menu item inside submenu clicked
   *
   * @param menu
   */
  onChildMenuItemClick(menu) {
    this.childMenuItemClick$.next(menu);
  }
  setOpenStateWithoutDebounce(value) {
    this.isCurrentSubMenuOpen$.next(value);
  }
  setMouseEnterTitleOrOverlayState(value) {
    this.isMouseEnterTitleOrOverlay$.next(value);
  }
  constructor(nzMenuService) {
    this.nzMenuService = nzMenuService;
    this.mode$ = this.nzMenuService.mode$.pipe(map((mode) => {
      if (mode === "inline") {
        return "inline";
      } else if (mode === "vertical" || this.nzHostSubmenuService) {
        return "vertical";
      } else {
        return "horizontal";
      }
    }));
    this.level = 1;
    this.isMenuInsideDropDown = inject(NzIsMenuInsideDropDownToken);
    this.isCurrentSubMenuOpen$ = new BehaviorSubject(false);
    this.isChildSubMenuOpen$ = new BehaviorSubject(false);
    this.isMouseEnterTitleOrOverlay$ = new Subject();
    this.childMenuItemClick$ = new Subject();
    this.destroy$ = new Subject();
    this.nzHostSubmenuService = inject(_NzSubmenuService, {
      optional: true,
      skipSelf: true
    });
    if (this.nzHostSubmenuService) {
      this.level = this.nzHostSubmenuService.level + 1;
    }
    const isClosedByMenuItemClick = this.childMenuItemClick$.pipe(mergeMap(() => this.mode$), filter((mode) => mode !== "inline" || this.isMenuInsideDropDown), mapTo(false));
    const isCurrentSubmenuOpen$ = merge(this.isMouseEnterTitleOrOverlay$, isClosedByMenuItemClick);
    const isSubMenuOpenWithDebounce$ = combineLatest([this.isChildSubMenuOpen$, isCurrentSubmenuOpen$]).pipe(map(([isChildSubMenuOpen, isCurrentSubmenuOpen]) => isChildSubMenuOpen || isCurrentSubmenuOpen), auditTime(150), distinctUntilChanged(), takeUntil(this.destroy$));
    isSubMenuOpenWithDebounce$.pipe(distinctUntilChanged()).subscribe((data) => {
      this.setOpenStateWithoutDebounce(data);
      if (this.nzHostSubmenuService) {
        this.nzHostSubmenuService.isChildSubMenuOpen$.next(data);
      } else {
        this.nzMenuService.isChildSubMenuOpen$.next(data);
      }
    });
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  static {
    this.\u0275fac = function NzSubmenuService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSubmenuService)(\u0275\u0275inject(MenuService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _NzSubmenuService,
      factory: _NzSubmenuService.\u0275fac
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSubmenuService, [{
    type: Injectable
  }], () => [{
    type: MenuService
  }], null);
})();
var NzMenuItemComponent = class _NzMenuItemComponent {
  /** clear all item selected status except this */
  clickMenuItem(e) {
    if (this.nzDisabled) {
      e.preventDefault();
      e.stopPropagation();
    } else {
      this.nzMenuService.onDescendantMenuItemClick(this);
      if (this.nzSubmenuService) {
        this.nzSubmenuService.onChildMenuItemClick(this);
      } else {
        this.nzMenuService.onChildMenuItemClick(this);
      }
    }
  }
  setSelectedState(value) {
    this.nzSelected = value;
    this.selected$.next(value);
  }
  updateRouterActive() {
    if (!this.listOfRouterLink || !this.router || !this.router.navigated || !this.nzMatchRouter) {
      return;
    }
    Promise.resolve().then(() => {
      const hasActiveLinks = this.hasActiveLinks();
      if (this.nzSelected !== hasActiveLinks) {
        this.nzSelected = hasActiveLinks;
        this.setSelectedState(this.nzSelected);
        this.cdr.markForCheck();
      }
    });
  }
  hasActiveLinks() {
    const isActiveCheckFn = this.isLinkActive(this.router);
    return this.routerLink && isActiveCheckFn(this.routerLink) || this.listOfRouterLink.some(isActiveCheckFn);
  }
  isLinkActive(router) {
    return (link) => router.isActive(link.urlTree || "", {
      paths: this.nzMatchRouterExact ? "exact" : "subset",
      queryParams: this.nzMatchRouterExact ? "exact" : "subset",
      fragment: "ignored",
      matrixParams: "ignored"
    });
  }
  constructor(nzMenuService, cdr) {
    this.nzMenuService = nzMenuService;
    this.cdr = cdr;
    this.destroy$ = new Subject();
    this.nzSubmenuService = inject(NzSubmenuService, {
      optional: true
    });
    this.directionality = inject(Directionality);
    this.routerLink = inject(RouterLink, {
      optional: true
    });
    this.router = inject(Router, {
      optional: true
    });
    this.isMenuInsideDropDown = inject(NzIsMenuInsideDropDownToken);
    this.level = this.nzSubmenuService ? this.nzSubmenuService.level + 1 : 1;
    this.selected$ = new Subject();
    this.inlinePaddingLeft = null;
    this.dir = "ltr";
    this.nzDisabled = false;
    this.nzSelected = false;
    this.nzDanger = false;
    this.nzMatchRouterExact = false;
    this.nzMatchRouter = false;
    if (this.router) {
      this.router.events.pipe(takeUntil(this.destroy$), filter((e) => e instanceof NavigationEnd)).subscribe(() => {
        this.updateRouterActive();
      });
    }
  }
  ngOnInit() {
    combineLatest([this.nzMenuService.mode$, this.nzMenuService.inlineIndent$]).pipe(takeUntil(this.destroy$)).subscribe(([mode, inlineIndent]) => {
      this.inlinePaddingLeft = mode === "inline" ? this.level * inlineIndent : null;
    });
    this.dir = this.directionality.value;
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
    });
  }
  ngAfterContentInit() {
    this.listOfRouterLink.changes.pipe(takeUntil(this.destroy$)).subscribe(() => this.updateRouterActive());
    this.updateRouterActive();
  }
  ngOnChanges(changes) {
    if (changes.nzSelected) {
      this.setSelectedState(this.nzSelected);
    }
  }
  ngOnDestroy() {
    this.destroy$.next(true);
    this.destroy$.complete();
  }
  static {
    this.\u0275fac = function NzMenuItemComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzMenuItemComponent)(\u0275\u0275directiveInject(MenuService), \u0275\u0275directiveInject(ChangeDetectorRef));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzMenuItemComponent,
      selectors: [["", "nz-menu-item", ""]],
      contentQueries: function NzMenuItemComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          \u0275\u0275contentQuery(dirIndex, RouterLink, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.listOfRouterLink = _t);
        }
      },
      hostVars: 20,
      hostBindings: function NzMenuItemComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275listener("click", function NzMenuItemComponent_click_HostBindingHandler($event) {
            return ctx.clickMenuItem($event);
          });
        }
        if (rf & 2) {
          \u0275\u0275styleProp("padding-left", ctx.dir === "rtl" ? null : ctx.nzPaddingLeft || ctx.inlinePaddingLeft, "px")("padding-right", ctx.dir === "rtl" ? ctx.nzPaddingLeft || ctx.inlinePaddingLeft : null, "px");
          \u0275\u0275classProp("ant-dropdown-menu-item", ctx.isMenuInsideDropDown)("ant-dropdown-menu-item-selected", ctx.isMenuInsideDropDown && ctx.nzSelected)("ant-dropdown-menu-item-danger", ctx.isMenuInsideDropDown && ctx.nzDanger)("ant-dropdown-menu-item-disabled", ctx.isMenuInsideDropDown && ctx.nzDisabled)("ant-menu-item", !ctx.isMenuInsideDropDown)("ant-menu-item-selected", !ctx.isMenuInsideDropDown && ctx.nzSelected)("ant-menu-item-danger", !ctx.isMenuInsideDropDown && ctx.nzDanger)("ant-menu-item-disabled", !ctx.isMenuInsideDropDown && ctx.nzDisabled);
        }
      },
      inputs: {
        nzPaddingLeft: [2, "nzPaddingLeft", "nzPaddingLeft", numberAttributeWithZeroFallback],
        nzDisabled: [2, "nzDisabled", "nzDisabled", booleanAttribute],
        nzSelected: [2, "nzSelected", "nzSelected", booleanAttribute],
        nzDanger: [2, "nzDanger", "nzDanger", booleanAttribute],
        nzMatchRouterExact: [2, "nzMatchRouterExact", "nzMatchRouterExact", booleanAttribute],
        nzMatchRouter: [2, "nzMatchRouter", "nzMatchRouter", booleanAttribute]
      },
      exportAs: ["nzMenuItem"],
      features: [\u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature],
      attrs: _c018,
      ngContentSelectors: _c111,
      decls: 2,
      vars: 0,
      consts: [[1, "ant-menu-title-content"]],
      template: function NzMenuItemComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275elementStart(0, "span", 0);
          \u0275\u0275projection(1);
          \u0275\u0275elementEnd();
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzMenuItemComponent, [{
    type: Component,
    args: [{
      selector: "[nz-menu-item]",
      exportAs: "nzMenuItem",
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      preserveWhitespaces: false,
      template: `
    <span class="ant-menu-title-content">
      <ng-content></ng-content>
    </span>
  `,
      host: {
        "[class.ant-dropdown-menu-item]": `isMenuInsideDropDown`,
        "[class.ant-dropdown-menu-item-selected]": `isMenuInsideDropDown && nzSelected`,
        "[class.ant-dropdown-menu-item-danger]": `isMenuInsideDropDown && nzDanger`,
        "[class.ant-dropdown-menu-item-disabled]": `isMenuInsideDropDown && nzDisabled`,
        "[class.ant-menu-item]": `!isMenuInsideDropDown`,
        "[class.ant-menu-item-selected]": `!isMenuInsideDropDown && nzSelected`,
        "[class.ant-menu-item-danger]": `!isMenuInsideDropDown && nzDanger`,
        "[class.ant-menu-item-disabled]": `!isMenuInsideDropDown && nzDisabled`,
        "[style.paddingLeft.px]": `dir === 'rtl' ? null : nzPaddingLeft || inlinePaddingLeft`,
        "[style.paddingRight.px]": `dir === 'rtl' ? nzPaddingLeft || inlinePaddingLeft : null`,
        "(click)": "clickMenuItem($event)"
      }
    }]
  }], () => [{
    type: MenuService
  }, {
    type: ChangeDetectorRef
  }], {
    nzPaddingLeft: [{
      type: Input,
      args: [{
        transform: numberAttributeWithZeroFallback
      }]
    }],
    nzDisabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzSelected: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzDanger: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzMatchRouterExact: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzMatchRouter: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    listOfRouterLink: [{
      type: ContentChildren,
      args: [RouterLink, {
        descendants: true
      }]
    }]
  });
})();
var NzSubmenuInlineChildComponent = class _NzSubmenuInlineChildComponent {
  constructor(elementRef, renderer, directionality) {
    this.elementRef = elementRef;
    this.renderer = renderer;
    this.directionality = directionality;
    this.templateOutlet = null;
    this.menuClass = "";
    this.mode = "vertical";
    this.nzOpen = false;
    this.listOfCacheClassName = [];
    this.expandState = "collapsed";
    this.dir = "ltr";
    this.destroy$ = new Subject();
  }
  calcMotionState() {
    if (this.nzOpen) {
      this.expandState = "expanded";
    } else {
      this.expandState = "collapsed";
    }
  }
  ngOnInit() {
    this.calcMotionState();
    this.dir = this.directionality.value;
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
    });
  }
  ngOnChanges(changes) {
    const {
      mode,
      nzOpen,
      menuClass
    } = changes;
    if (mode || nzOpen) {
      this.calcMotionState();
    }
    if (menuClass) {
      if (this.listOfCacheClassName.length) {
        this.listOfCacheClassName.filter((item) => !!item).forEach((className) => {
          this.renderer.removeClass(this.elementRef.nativeElement, className);
        });
      }
      if (this.menuClass) {
        this.listOfCacheClassName = this.menuClass.split(" ");
        this.listOfCacheClassName.filter((item) => !!item).forEach((className) => {
          this.renderer.addClass(this.elementRef.nativeElement, className);
        });
      }
    }
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  static {
    this.\u0275fac = function NzSubmenuInlineChildComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSubmenuInlineChildComponent)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(Directionality));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzSubmenuInlineChildComponent,
      selectors: [["", "nz-submenu-inline-child", ""]],
      hostAttrs: [1, "ant-menu", "ant-menu-inline", "ant-menu-sub"],
      hostVars: 3,
      hostBindings: function NzSubmenuInlineChildComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275syntheticHostProperty("@collapseMotion", ctx.expandState);
          \u0275\u0275classProp("ant-menu-rtl", ctx.dir === "rtl");
        }
      },
      inputs: {
        templateOutlet: "templateOutlet",
        menuClass: "menuClass",
        mode: "mode",
        nzOpen: "nzOpen"
      },
      exportAs: ["nzSubmenuInlineChild"],
      features: [\u0275\u0275NgOnChangesFeature],
      attrs: _c28,
      decls: 1,
      vars: 1,
      consts: [[3, "ngTemplateOutlet"]],
      template: function NzSubmenuInlineChildComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275template(0, NzSubmenuInlineChildComponent_ng_template_0_Template, 0, 0, "ng-template", 0);
        }
        if (rf & 2) {
          \u0275\u0275property("ngTemplateOutlet", ctx.templateOutlet);
        }
      },
      dependencies: [NgTemplateOutlet],
      encapsulation: 2,
      data: {
        animation: [collapseMotion]
      },
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSubmenuInlineChildComponent, [{
    type: Component,
    args: [{
      selector: "[nz-submenu-inline-child]",
      animations: [collapseMotion],
      exportAs: "nzSubmenuInlineChild",
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: ` <ng-template [ngTemplateOutlet]="templateOutlet"></ng-template> `,
      host: {
        class: "ant-menu ant-menu-inline ant-menu-sub",
        "[class.ant-menu-rtl]": `dir === 'rtl'`,
        "[@collapseMotion]": "expandState"
      },
      imports: [NgTemplateOutlet]
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: Renderer2
  }, {
    type: Directionality
  }], {
    templateOutlet: [{
      type: Input
    }],
    menuClass: [{
      type: Input
    }],
    mode: [{
      type: Input
    }],
    nzOpen: [{
      type: Input
    }]
  });
})();
var NzSubmenuNoneInlineChildComponent = class _NzSubmenuNoneInlineChildComponent {
  constructor(directionality) {
    this.directionality = directionality;
    this.menuClass = "";
    this.theme = "light";
    this.templateOutlet = null;
    this.isMenuInsideDropDown = false;
    this.mode = "vertical";
    this.nzTriggerSubMenuAction = "hover";
    this.position = "right";
    this.nzDisabled = false;
    this.nzOpen = false;
    this.subMenuMouseState = new EventEmitter();
    this.expandState = "collapsed";
    this.dir = "ltr";
    this.destroy$ = new Subject();
  }
  setMouseState(state2) {
    if (!this.nzDisabled && this.nzTriggerSubMenuAction === "hover") {
      this.subMenuMouseState.next(state2);
    }
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  calcMotionState() {
    if (this.nzOpen) {
      if (this.mode === "horizontal") {
        this.expandState = "bottom";
      } else if (this.mode === "vertical") {
        this.expandState = "active";
      }
    } else {
      this.expandState = "collapsed";
    }
  }
  ngOnInit() {
    this.calcMotionState();
    this.dir = this.directionality.value;
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
    });
  }
  ngOnChanges(changes) {
    const {
      mode,
      nzOpen
    } = changes;
    if (mode || nzOpen) {
      this.calcMotionState();
    }
  }
  static {
    this.\u0275fac = function NzSubmenuNoneInlineChildComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSubmenuNoneInlineChildComponent)(\u0275\u0275directiveInject(Directionality));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzSubmenuNoneInlineChildComponent,
      selectors: [["", "nz-submenu-none-inline-child", ""]],
      hostAttrs: [1, "ant-menu-submenu", "ant-menu-submenu-popup"],
      hostVars: 14,
      hostBindings: function NzSubmenuNoneInlineChildComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275listener("mouseenter", function NzSubmenuNoneInlineChildComponent_mouseenter_HostBindingHandler() {
            return ctx.setMouseState(true);
          })("mouseleave", function NzSubmenuNoneInlineChildComponent_mouseleave_HostBindingHandler() {
            return ctx.setMouseState(false);
          });
        }
        if (rf & 2) {
          \u0275\u0275syntheticHostProperty("@slideMotion", ctx.expandState)("@zoomBigMotion", ctx.expandState);
          \u0275\u0275classProp("ant-menu-light", ctx.theme === "light")("ant-menu-dark", ctx.theme === "dark")("ant-menu-submenu-placement-bottom", ctx.mode === "horizontal")("ant-menu-submenu-placement-right", ctx.mode === "vertical" && ctx.position === "right")("ant-menu-submenu-placement-left", ctx.mode === "vertical" && ctx.position === "left")("ant-menu-submenu-rtl", ctx.dir === "rtl");
        }
      },
      inputs: {
        menuClass: "menuClass",
        theme: "theme",
        templateOutlet: "templateOutlet",
        isMenuInsideDropDown: "isMenuInsideDropDown",
        mode: "mode",
        nzTriggerSubMenuAction: "nzTriggerSubMenuAction",
        position: "position",
        nzDisabled: "nzDisabled",
        nzOpen: "nzOpen"
      },
      outputs: {
        subMenuMouseState: "subMenuMouseState"
      },
      exportAs: ["nzSubmenuNoneInlineChild"],
      features: [\u0275\u0275NgOnChangesFeature],
      attrs: _c34,
      decls: 2,
      vars: 17,
      consts: [[3, "ngTemplateOutlet"]],
      template: function NzSubmenuNoneInlineChildComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275elementStart(0, "div");
          \u0275\u0275template(1, NzSubmenuNoneInlineChildComponent_ng_template_1_Template, 0, 0, "ng-template", 0);
          \u0275\u0275elementEnd();
        }
        if (rf & 2) {
          \u0275\u0275classMap(ctx.menuClass);
          \u0275\u0275classProp("ant-dropdown-menu", ctx.isMenuInsideDropDown)("ant-menu", !ctx.isMenuInsideDropDown)("ant-dropdown-menu-vertical", ctx.isMenuInsideDropDown)("ant-menu-vertical", !ctx.isMenuInsideDropDown)("ant-dropdown-menu-sub", ctx.isMenuInsideDropDown)("ant-menu-sub", !ctx.isMenuInsideDropDown)("ant-menu-rtl", ctx.dir === "rtl");
          \u0275\u0275advance();
          \u0275\u0275property("ngTemplateOutlet", ctx.templateOutlet);
        }
      },
      dependencies: [NgTemplateOutlet],
      encapsulation: 2,
      data: {
        animation: [zoomBigMotion, slideMotion]
      },
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSubmenuNoneInlineChildComponent, [{
    type: Component,
    args: [{
      selector: "[nz-submenu-none-inline-child]",
      exportAs: "nzSubmenuNoneInlineChild",
      encapsulation: ViewEncapsulation.None,
      animations: [zoomBigMotion, slideMotion],
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    <div
      [class.ant-dropdown-menu]="isMenuInsideDropDown"
      [class.ant-menu]="!isMenuInsideDropDown"
      [class.ant-dropdown-menu-vertical]="isMenuInsideDropDown"
      [class.ant-menu-vertical]="!isMenuInsideDropDown"
      [class.ant-dropdown-menu-sub]="isMenuInsideDropDown"
      [class.ant-menu-sub]="!isMenuInsideDropDown"
      [class.ant-menu-rtl]="dir === 'rtl'"
      [class]="menuClass"
    >
      <ng-template [ngTemplateOutlet]="templateOutlet"></ng-template>
    </div>
  `,
      host: {
        class: "ant-menu-submenu ant-menu-submenu-popup",
        "[class.ant-menu-light]": "theme === 'light'",
        "[class.ant-menu-dark]": "theme === 'dark'",
        "[class.ant-menu-submenu-placement-bottom]": "mode === 'horizontal'",
        "[class.ant-menu-submenu-placement-right]": "mode === 'vertical' && position === 'right'",
        "[class.ant-menu-submenu-placement-left]": "mode === 'vertical' && position === 'left'",
        "[class.ant-menu-submenu-rtl]": 'dir ==="rtl"',
        "[@slideMotion]": "expandState",
        "[@zoomBigMotion]": "expandState",
        "(mouseenter)": "setMouseState(true)",
        "(mouseleave)": "setMouseState(false)"
      },
      imports: [NgTemplateOutlet]
    }]
  }], () => [{
    type: Directionality
  }], {
    menuClass: [{
      type: Input
    }],
    theme: [{
      type: Input
    }],
    templateOutlet: [{
      type: Input
    }],
    isMenuInsideDropDown: [{
      type: Input
    }],
    mode: [{
      type: Input
    }],
    nzTriggerSubMenuAction: [{
      type: Input
    }],
    position: [{
      type: Input
    }],
    nzDisabled: [{
      type: Input
    }],
    nzOpen: [{
      type: Input
    }],
    subMenuMouseState: [{
      type: Output
    }]
  });
})();
var NzSubMenuTitleComponent = class _NzSubMenuTitleComponent {
  constructor(cdr, directionality) {
    this.cdr = cdr;
    this.directionality = directionality;
    this.nzIcon = null;
    this.nzTitle = null;
    this.isMenuInsideDropDown = false;
    this.nzDisabled = false;
    this.paddingLeft = null;
    this.mode = "vertical";
    this.nzTriggerSubMenuAction = "hover";
    this.toggleSubMenu = new EventEmitter();
    this.subMenuMouseState = new EventEmitter();
    this.dir = "ltr";
    this.destroy$ = new Subject();
  }
  ngOnInit() {
    this.dir = this.directionality.value;
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.cdr.detectChanges();
    });
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  setMouseState(state2) {
    if (!this.nzDisabled && this.nzTriggerSubMenuAction === "hover") {
      this.subMenuMouseState.next(state2);
    }
  }
  clickTitle() {
    if ((this.mode === "inline" || this.nzTriggerSubMenuAction === "click") && !this.nzDisabled) {
      this.subMenuMouseState.next(true);
      this.toggleSubMenu.emit();
    }
  }
  static {
    this.\u0275fac = function NzSubMenuTitleComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSubMenuTitleComponent)(\u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(Directionality));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzSubMenuTitleComponent,
      selectors: [["", "nz-submenu-title", ""]],
      hostVars: 8,
      hostBindings: function NzSubMenuTitleComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275listener("click", function NzSubMenuTitleComponent_click_HostBindingHandler() {
            return ctx.clickTitle();
          })("mouseenter", function NzSubMenuTitleComponent_mouseenter_HostBindingHandler() {
            return ctx.setMouseState(true);
          })("mouseleave", function NzSubMenuTitleComponent_mouseleave_HostBindingHandler() {
            return ctx.setMouseState(false);
          });
        }
        if (rf & 2) {
          \u0275\u0275styleProp("padding-left", ctx.dir === "rtl" ? null : ctx.paddingLeft, "px")("padding-right", ctx.dir === "rtl" ? ctx.paddingLeft : null, "px");
          \u0275\u0275classProp("ant-dropdown-menu-submenu-title", ctx.isMenuInsideDropDown)("ant-menu-submenu-title", !ctx.isMenuInsideDropDown);
        }
      },
      inputs: {
        nzIcon: "nzIcon",
        nzTitle: "nzTitle",
        isMenuInsideDropDown: "isMenuInsideDropDown",
        nzDisabled: "nzDisabled",
        paddingLeft: "paddingLeft",
        mode: "mode",
        nzTriggerSubMenuAction: "nzTriggerSubMenuAction"
      },
      outputs: {
        toggleSubMenu: "toggleSubMenu",
        subMenuMouseState: "subMenuMouseState"
      },
      exportAs: ["nzSubmenuTitle"],
      attrs: _c43,
      ngContentSelectors: _c111,
      decls: 5,
      vars: 3,
      consts: [[3, "nzType"], [4, "nzStringTemplateOutlet"], [1, "ant-dropdown-menu-submenu-expand-icon"], [1, "ant-menu-submenu-arrow"], [1, "ant-menu-title-content"], ["nzType", "left", 1, "ant-dropdown-menu-submenu-arrow-icon"], ["nzType", "right", 1, "ant-dropdown-menu-submenu-arrow-icon"]],
      template: function NzSubMenuTitleComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275template(0, NzSubMenuTitleComponent_Conditional_0_Template, 1, 1, "nz-icon", 0)(1, NzSubMenuTitleComponent_ng_container_1_Template, 3, 1, "ng-container", 1);
          \u0275\u0275projection(2);
          \u0275\u0275template(3, NzSubMenuTitleComponent_Conditional_3_Template, 3, 1, "span", 2)(4, NzSubMenuTitleComponent_Conditional_4_Template, 1, 0, "span", 3);
        }
        if (rf & 2) {
          \u0275\u0275conditional(ctx.nzIcon ? 0 : -1);
          \u0275\u0275advance();
          \u0275\u0275property("nzStringTemplateOutlet", ctx.nzTitle);
          \u0275\u0275advance(2);
          \u0275\u0275conditional(ctx.isMenuInsideDropDown ? 3 : 4);
        }
      },
      dependencies: [NzIconModule, NzIconDirective, NzOutletModule, NzStringTemplateOutletDirective],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSubMenuTitleComponent, [{
    type: Component,
    args: [{
      selector: "[nz-submenu-title]",
      exportAs: "nzSubmenuTitle",
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    @if (nzIcon) {
      <nz-icon [nzType]="nzIcon" />
    }
    <ng-container *nzStringTemplateOutlet="nzTitle">
      <span class="ant-menu-title-content">{{ nzTitle }}</span>
    </ng-container>
    <ng-content />
    @if (isMenuInsideDropDown) {
      <span class="ant-dropdown-menu-submenu-expand-icon">
        @switch (dir) {
          @case ('rtl') {
            <nz-icon nzType="left" class="ant-dropdown-menu-submenu-arrow-icon" />
          }
          @default {
            <nz-icon nzType="right" class="ant-dropdown-menu-submenu-arrow-icon" />
          }
        }
      </span>
    } @else {
      <span class="ant-menu-submenu-arrow"></span>
    }
  `,
      host: {
        "[class.ant-dropdown-menu-submenu-title]": "isMenuInsideDropDown",
        "[class.ant-menu-submenu-title]": "!isMenuInsideDropDown",
        "[style.paddingLeft.px]": `dir === 'rtl' ? null : paddingLeft `,
        "[style.paddingRight.px]": `dir === 'rtl' ? paddingLeft : null`,
        "(click)": "clickTitle()",
        "(mouseenter)": "setMouseState(true)",
        "(mouseleave)": "setMouseState(false)"
      },
      imports: [NzIconModule, NzOutletModule]
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: Directionality
  }], {
    nzIcon: [{
      type: Input
    }],
    nzTitle: [{
      type: Input
    }],
    isMenuInsideDropDown: [{
      type: Input
    }],
    nzDisabled: [{
      type: Input
    }],
    paddingLeft: [{
      type: Input
    }],
    mode: [{
      type: Input
    }],
    nzTriggerSubMenuAction: [{
      type: Input
    }],
    toggleSubMenu: [{
      type: Output
    }],
    subMenuMouseState: [{
      type: Output
    }]
  });
})();
var listOfVerticalPositions = [POSITION_MAP.rightTop, POSITION_MAP.right, POSITION_MAP.rightBottom, POSITION_MAP.leftTop, POSITION_MAP.left, POSITION_MAP.leftBottom];
var listOfHorizontalPositions = [POSITION_MAP.bottomLeft, POSITION_MAP.bottomRight, POSITION_MAP.topRight, POSITION_MAP.topLeft];
var NzSubMenuComponent = class _NzSubMenuComponent {
  /** set the submenu host open status directly **/
  setOpenStateWithoutDebounce(open) {
    this.nzSubmenuService.setOpenStateWithoutDebounce(open);
  }
  toggleSubMenu() {
    this.setOpenStateWithoutDebounce(!this.nzOpen);
  }
  setMouseEnterState(value) {
    this.isActive = value;
    if (this.mode !== "inline") {
      this.nzSubmenuService.setMouseEnterTitleOrOverlayState(value);
    }
  }
  setTriggerWidth() {
    if (this.mode === "horizontal" && this.platform.isBrowser && this.cdkOverlayOrigin && this.nzPlacement === "bottomLeft") {
      this.triggerWidth = this.cdkOverlayOrigin.nativeElement.getBoundingClientRect().width;
    }
  }
  onPositionChange(position) {
    const placement = getPlacementName(position);
    if (placement === "rightTop" || placement === "rightBottom" || placement === "right") {
      this.position = "right";
    } else if (placement === "leftTop" || placement === "leftBottom" || placement === "left") {
      this.position = "left";
    }
  }
  constructor(nzMenuService, cdr, nzSubmenuService, platform) {
    this.nzMenuService = nzMenuService;
    this.cdr = cdr;
    this.nzSubmenuService = nzSubmenuService;
    this.platform = platform;
    this.nzMenuClassName = "";
    this.nzPaddingLeft = null;
    this.nzTitle = null;
    this.nzIcon = null;
    this.nzTriggerSubMenuAction = "hover";
    this.nzOpen = false;
    this.nzDisabled = false;
    this.nzPlacement = "bottomLeft";
    this.nzOpenChange = new EventEmitter();
    this.cdkOverlayOrigin = null;
    this.listOfNzSubMenuComponent = null;
    this.listOfNzMenuItemDirective = null;
    this.level = this.nzSubmenuService.level;
    this.destroy$ = new Subject();
    this.position = "right";
    this.triggerWidth = null;
    this.theme = "light";
    this.mode = "vertical";
    this.inlinePaddingLeft = null;
    this.overlayPositions = listOfVerticalPositions;
    this.isSelected = false;
    this.isActive = false;
    this.dir = "ltr";
    this.isMenuInsideDropDown = inject(NzIsMenuInsideDropDownToken);
    this.noAnimation = inject(NzNoAnimationDirective, {
      optional: true,
      host: true
    });
    this.directionality = inject(Directionality);
  }
  ngOnInit() {
    this.nzMenuService.theme$.pipe(takeUntil(this.destroy$)).subscribe((theme) => {
      this.theme = theme;
      this.cdr.markForCheck();
    });
    this.nzSubmenuService.mode$.pipe(takeUntil(this.destroy$)).subscribe((mode) => {
      this.mode = mode;
      if (mode === "horizontal") {
        this.overlayPositions = [POSITION_MAP[this.nzPlacement], ...listOfHorizontalPositions];
      } else if (mode === "vertical") {
        this.overlayPositions = listOfVerticalPositions;
      }
      this.cdr.markForCheck();
    });
    combineLatest([this.nzSubmenuService.mode$, this.nzMenuService.inlineIndent$]).pipe(takeUntil(this.destroy$)).subscribe(([mode, inlineIndent]) => {
      this.inlinePaddingLeft = mode === "inline" ? this.level * inlineIndent : null;
      this.cdr.markForCheck();
    });
    this.nzSubmenuService.isCurrentSubMenuOpen$.pipe(takeUntil(this.destroy$)).subscribe((open) => {
      this.isActive = open;
      if (open !== this.nzOpen) {
        this.setTriggerWidth();
        this.nzOpen = open;
        this.nzOpenChange.emit(this.nzOpen);
        this.cdr.markForCheck();
      }
    });
    this.dir = this.directionality.value;
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.cdr.markForCheck();
    });
  }
  ngAfterContentInit() {
    this.setTriggerWidth();
    const listOfNzMenuItemDirective = this.listOfNzMenuItemDirective;
    const changes = listOfNzMenuItemDirective.changes;
    const mergedObservable = merge(...[changes, ...listOfNzMenuItemDirective.map((menu) => menu.selected$)]);
    changes.pipe(startWith(listOfNzMenuItemDirective), switchMap(() => mergedObservable), startWith(true), map(() => listOfNzMenuItemDirective.some((e) => e.nzSelected)), takeUntil(this.destroy$)).subscribe((selected) => {
      this.isSelected = selected;
      this.cdr.markForCheck();
    });
  }
  ngOnChanges(changes) {
    const {
      nzOpen
    } = changes;
    if (nzOpen) {
      this.nzSubmenuService.setOpenStateWithoutDebounce(this.nzOpen);
      this.setTriggerWidth();
    }
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  static {
    this.\u0275fac = function NzSubMenuComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSubMenuComponent)(\u0275\u0275directiveInject(MenuService), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(NzSubmenuService), \u0275\u0275directiveInject(Platform));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzSubMenuComponent,
      selectors: [["", "nz-submenu", ""]],
      contentQueries: function NzSubMenuComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          \u0275\u0275contentQuery(dirIndex, _NzSubMenuComponent, 5);
          \u0275\u0275contentQuery(dirIndex, NzMenuItemComponent, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.listOfNzSubMenuComponent = _t);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.listOfNzMenuItemDirective = _t);
        }
      },
      viewQuery: function NzSubMenuComponent_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(CdkOverlayOrigin, 7, ElementRef);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.cdkOverlayOrigin = _t.first);
        }
      },
      hostVars: 34,
      hostBindings: function NzSubMenuComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-dropdown-menu-submenu", ctx.isMenuInsideDropDown)("ant-dropdown-menu-submenu-disabled", ctx.isMenuInsideDropDown && ctx.nzDisabled)("ant-dropdown-menu-submenu-open", ctx.isMenuInsideDropDown && ctx.nzOpen)("ant-dropdown-menu-submenu-selected", ctx.isMenuInsideDropDown && ctx.isSelected)("ant-dropdown-menu-submenu-vertical", ctx.isMenuInsideDropDown && ctx.mode === "vertical")("ant-dropdown-menu-submenu-horizontal", ctx.isMenuInsideDropDown && ctx.mode === "horizontal")("ant-dropdown-menu-submenu-inline", ctx.isMenuInsideDropDown && ctx.mode === "inline")("ant-dropdown-menu-submenu-active", ctx.isMenuInsideDropDown && ctx.isActive)("ant-menu-submenu", !ctx.isMenuInsideDropDown)("ant-menu-submenu-disabled", !ctx.isMenuInsideDropDown && ctx.nzDisabled)("ant-menu-submenu-open", !ctx.isMenuInsideDropDown && ctx.nzOpen)("ant-menu-submenu-selected", !ctx.isMenuInsideDropDown && ctx.isSelected)("ant-menu-submenu-vertical", !ctx.isMenuInsideDropDown && ctx.mode === "vertical")("ant-menu-submenu-horizontal", !ctx.isMenuInsideDropDown && ctx.mode === "horizontal")("ant-menu-submenu-inline", !ctx.isMenuInsideDropDown && ctx.mode === "inline")("ant-menu-submenu-active", !ctx.isMenuInsideDropDown && ctx.isActive)("ant-menu-submenu-rtl", ctx.dir === "rtl");
        }
      },
      inputs: {
        nzMenuClassName: "nzMenuClassName",
        nzPaddingLeft: "nzPaddingLeft",
        nzTitle: "nzTitle",
        nzIcon: "nzIcon",
        nzTriggerSubMenuAction: "nzTriggerSubMenuAction",
        nzOpen: [2, "nzOpen", "nzOpen", booleanAttribute],
        nzDisabled: [2, "nzDisabled", "nzDisabled", booleanAttribute],
        nzPlacement: "nzPlacement"
      },
      outputs: {
        nzOpenChange: "nzOpenChange"
      },
      exportAs: ["nzSubmenu"],
      features: [\u0275\u0275ProvidersFeature([NzSubmenuService]), \u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature],
      attrs: _c5,
      ngContentSelectors: _c7,
      decls: 7,
      vars: 9,
      consts: [["origin", "cdkOverlayOrigin"], ["subMenuTemplate", ""], ["nz-submenu-title", "", "cdkOverlayOrigin", "", 3, "subMenuMouseState", "toggleSubMenu", "nzIcon", "nzTitle", "mode", "nzDisabled", "isMenuInsideDropDown", "paddingLeft", "nzTriggerSubMenuAction"], ["nz-submenu-inline-child", "", 3, "mode", "nzOpen", "nzNoAnimation", "menuClass", "templateOutlet"], ["cdkConnectedOverlay", "", 3, "cdkConnectedOverlayPositions", "cdkConnectedOverlayOrigin", "cdkConnectedOverlayWidth", "cdkConnectedOverlayOpen", "cdkConnectedOverlayTransformOriginOn"], ["cdkConnectedOverlay", "", 3, "positionChange", "overlayOutsideClick", "cdkConnectedOverlayPositions", "cdkConnectedOverlayOrigin", "cdkConnectedOverlayWidth", "cdkConnectedOverlayOpen", "cdkConnectedOverlayTransformOriginOn"], ["nz-submenu-none-inline-child", "", 3, "subMenuMouseState", "theme", "mode", "nzOpen", "position", "nzDisabled", "isMenuInsideDropDown", "nzTriggerSubMenuAction", "templateOutlet", "menuClass", "nzNoAnimation"]],
      template: function NzSubMenuComponent_Template(rf, ctx) {
        if (rf & 1) {
          const _r1 = \u0275\u0275getCurrentView();
          \u0275\u0275projectionDef(_c6);
          \u0275\u0275elementStart(0, "div", 2, 0);
          \u0275\u0275listener("subMenuMouseState", function NzSubMenuComponent_Template_div_subMenuMouseState_0_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.setMouseEnterState($event));
          })("toggleSubMenu", function NzSubMenuComponent_Template_div_toggleSubMenu_0_listener() {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.toggleSubMenu());
          });
          \u0275\u0275template(2, NzSubMenuComponent_Conditional_2_Template, 1, 0);
          \u0275\u0275elementEnd();
          \u0275\u0275template(3, NzSubMenuComponent_Conditional_3_Template, 1, 6, "div", 3)(4, NzSubMenuComponent_Conditional_4_Template, 1, 5, null, 4)(5, NzSubMenuComponent_ng_template_5_Template, 1, 0, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
        }
        if (rf & 2) {
          \u0275\u0275property("nzIcon", ctx.nzIcon)("nzTitle", ctx.nzTitle)("mode", ctx.mode)("nzDisabled", ctx.nzDisabled)("isMenuInsideDropDown", ctx.isMenuInsideDropDown)("paddingLeft", ctx.nzPaddingLeft || ctx.inlinePaddingLeft)("nzTriggerSubMenuAction", ctx.nzTriggerSubMenuAction);
          \u0275\u0275advance(2);
          \u0275\u0275conditional(!ctx.nzTitle ? 2 : -1);
          \u0275\u0275advance();
          \u0275\u0275conditional(ctx.mode === "inline" ? 3 : 4);
        }
      },
      dependencies: [NzSubMenuTitleComponent, NzSubmenuInlineChildComponent, NzNoAnimationDirective, NzSubmenuNoneInlineChildComponent, OverlayModule, CdkConnectedOverlay, CdkOverlayOrigin],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSubMenuComponent, [{
    type: Component,
    args: [{
      selector: "[nz-submenu]",
      exportAs: "nzSubmenu",
      providers: [NzSubmenuService],
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      preserveWhitespaces: false,
      template: `
    <div
      nz-submenu-title
      cdkOverlayOrigin
      #origin="cdkOverlayOrigin"
      [nzIcon]="nzIcon"
      [nzTitle]="nzTitle"
      [mode]="mode"
      [nzDisabled]="nzDisabled"
      [isMenuInsideDropDown]="isMenuInsideDropDown"
      [paddingLeft]="nzPaddingLeft || inlinePaddingLeft"
      [nzTriggerSubMenuAction]="nzTriggerSubMenuAction"
      (subMenuMouseState)="setMouseEnterState($event)"
      (toggleSubMenu)="toggleSubMenu()"
    >
      @if (!nzTitle) {
        <ng-content select="[title]" />
      }
    </div>
    @if (mode === 'inline') {
      <div
        nz-submenu-inline-child
        [mode]="mode"
        [nzOpen]="nzOpen"
        [@.disabled]="!!noAnimation?.nzNoAnimation"
        [nzNoAnimation]="noAnimation?.nzNoAnimation"
        [menuClass]="nzMenuClassName"
        [templateOutlet]="subMenuTemplate"
      ></div>
    } @else {
      <ng-template
        cdkConnectedOverlay
        (positionChange)="onPositionChange($event)"
        [cdkConnectedOverlayPositions]="overlayPositions"
        [cdkConnectedOverlayOrigin]="origin"
        [cdkConnectedOverlayWidth]="triggerWidth!"
        [cdkConnectedOverlayOpen]="nzOpen"
        [cdkConnectedOverlayTransformOriginOn]="'.ant-menu-submenu'"
        (overlayOutsideClick)="setMouseEnterState(false)"
      >
        <div
          nz-submenu-none-inline-child
          [theme]="theme"
          [mode]="mode"
          [nzOpen]="nzOpen"
          [position]="position"
          [nzDisabled]="nzDisabled"
          [isMenuInsideDropDown]="isMenuInsideDropDown"
          [nzTriggerSubMenuAction]="nzTriggerSubMenuAction"
          [templateOutlet]="subMenuTemplate"
          [menuClass]="nzMenuClassName"
          [@.disabled]="!!noAnimation?.nzNoAnimation"
          [nzNoAnimation]="noAnimation?.nzNoAnimation"
          (subMenuMouseState)="setMouseEnterState($event)"
        ></div>
      </ng-template>
    }

    <ng-template #subMenuTemplate>
      <ng-content />
    </ng-template>
  `,
      host: {
        "[class.ant-dropdown-menu-submenu]": `isMenuInsideDropDown`,
        "[class.ant-dropdown-menu-submenu-disabled]": `isMenuInsideDropDown && nzDisabled`,
        "[class.ant-dropdown-menu-submenu-open]": `isMenuInsideDropDown && nzOpen`,
        "[class.ant-dropdown-menu-submenu-selected]": `isMenuInsideDropDown && isSelected`,
        "[class.ant-dropdown-menu-submenu-vertical]": `isMenuInsideDropDown && mode === 'vertical'`,
        "[class.ant-dropdown-menu-submenu-horizontal]": `isMenuInsideDropDown && mode === 'horizontal'`,
        "[class.ant-dropdown-menu-submenu-inline]": `isMenuInsideDropDown && mode === 'inline'`,
        "[class.ant-dropdown-menu-submenu-active]": `isMenuInsideDropDown && isActive`,
        "[class.ant-menu-submenu]": `!isMenuInsideDropDown`,
        "[class.ant-menu-submenu-disabled]": `!isMenuInsideDropDown && nzDisabled`,
        "[class.ant-menu-submenu-open]": `!isMenuInsideDropDown && nzOpen`,
        "[class.ant-menu-submenu-selected]": `!isMenuInsideDropDown && isSelected`,
        "[class.ant-menu-submenu-vertical]": `!isMenuInsideDropDown && mode === 'vertical'`,
        "[class.ant-menu-submenu-horizontal]": `!isMenuInsideDropDown && mode === 'horizontal'`,
        "[class.ant-menu-submenu-inline]": `!isMenuInsideDropDown && mode === 'inline'`,
        "[class.ant-menu-submenu-active]": `!isMenuInsideDropDown && isActive`,
        "[class.ant-menu-submenu-rtl]": `dir === 'rtl'`
      },
      imports: [NzSubMenuTitleComponent, NzSubmenuInlineChildComponent, NzNoAnimationDirective, NzSubmenuNoneInlineChildComponent, OverlayModule]
    }]
  }], () => [{
    type: MenuService
  }, {
    type: ChangeDetectorRef
  }, {
    type: NzSubmenuService
  }, {
    type: Platform
  }], {
    nzMenuClassName: [{
      type: Input
    }],
    nzPaddingLeft: [{
      type: Input
    }],
    nzTitle: [{
      type: Input
    }],
    nzIcon: [{
      type: Input
    }],
    nzTriggerSubMenuAction: [{
      type: Input
    }],
    nzOpen: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzDisabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzPlacement: [{
      type: Input
    }],
    nzOpenChange: [{
      type: Output
    }],
    cdkOverlayOrigin: [{
      type: ViewChild,
      args: [CdkOverlayOrigin, {
        static: true,
        read: ElementRef
      }]
    }],
    listOfNzSubMenuComponent: [{
      type: ContentChildren,
      args: [forwardRef(() => NzSubMenuComponent), {
        descendants: true
      }]
    }],
    listOfNzMenuItemDirective: [{
      type: ContentChildren,
      args: [NzMenuItemComponent, {
        descendants: true
      }]
    }]
  });
})();
function MenuServiceFactory() {
  const serviceInsideDropDown = inject(MenuService, {
    skipSelf: true,
    optional: true
  });
  const serviceOutsideDropDown = inject(NzMenuServiceLocalToken);
  return serviceInsideDropDown ?? serviceOutsideDropDown;
}
function MenuDropDownTokenFactory() {
  const isMenuInsideDropDownToken = inject(NzIsMenuInsideDropDownToken, {
    skipSelf: true,
    optional: true
  });
  return isMenuInsideDropDownToken ?? false;
}
var NzMenuDirective = class _NzMenuDirective {
  setInlineCollapsed(inlineCollapsed) {
    this.nzInlineCollapsed = inlineCollapsed;
    this.inlineCollapsed$.next(inlineCollapsed);
  }
  updateInlineCollapse() {
    if (this.listOfNzMenuItemDirective) {
      if (this.nzInlineCollapsed) {
        this.listOfOpenedNzSubMenuComponent = this.listOfNzSubMenuComponent.filter((submenu) => submenu.nzOpen);
        this.listOfNzSubMenuComponent.forEach((submenu) => submenu.setOpenStateWithoutDebounce(false));
      } else {
        this.listOfOpenedNzSubMenuComponent.forEach((submenu) => submenu.setOpenStateWithoutDebounce(true));
        this.listOfOpenedNzSubMenuComponent = [];
      }
    }
  }
  constructor(nzMenuService, cdr) {
    this.nzMenuService = nzMenuService;
    this.cdr = cdr;
    this.isMenuInsideDropDown = inject(NzIsMenuInsideDropDownToken);
    this.nzInlineIndent = 24;
    this.nzTheme = "light";
    this.nzMode = "vertical";
    this.nzInlineCollapsed = false;
    this.nzSelectable = !this.isMenuInsideDropDown;
    this.nzClick = new EventEmitter();
    this.actualMode = "vertical";
    this.dir = "ltr";
    this.inlineCollapsed$ = new BehaviorSubject(this.nzInlineCollapsed);
    this.mode$ = new BehaviorSubject(this.nzMode);
    this.destroy$ = new Subject();
    this.listOfOpenedNzSubMenuComponent = [];
    this.directionality = inject(Directionality);
  }
  ngOnInit() {
    combineLatest([this.inlineCollapsed$, this.mode$]).pipe(takeUntil(this.destroy$)).subscribe(([inlineCollapsed, mode]) => {
      this.actualMode = inlineCollapsed ? "vertical" : mode;
      this.nzMenuService.setMode(this.actualMode);
      this.cdr.markForCheck();
    });
    this.nzMenuService.descendantMenuItemClick$.pipe(takeUntil(this.destroy$)).subscribe((menu) => {
      this.nzClick.emit(menu);
      if (this.nzSelectable && !menu.nzMatchRouter) {
        this.listOfNzMenuItemDirective.forEach((item) => item.setSelectedState(item === menu));
      }
    });
    this.dir = this.directionality.value;
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.nzMenuService.setMode(this.actualMode);
      this.cdr.markForCheck();
    });
  }
  ngAfterContentInit() {
    this.inlineCollapsed$.pipe(takeUntil(this.destroy$)).subscribe(() => {
      this.updateInlineCollapse();
      this.cdr.markForCheck();
    });
  }
  ngOnChanges(changes) {
    const {
      nzInlineCollapsed,
      nzInlineIndent,
      nzTheme,
      nzMode
    } = changes;
    if (nzInlineCollapsed) {
      this.inlineCollapsed$.next(this.nzInlineCollapsed);
    }
    if (nzInlineIndent) {
      this.nzMenuService.setInlineIndent(this.nzInlineIndent);
    }
    if (nzTheme) {
      this.nzMenuService.setTheme(this.nzTheme);
    }
    if (nzMode) {
      this.mode$.next(this.nzMode);
      if (!changes.nzMode.isFirstChange() && this.listOfNzSubMenuComponent) {
        this.listOfNzSubMenuComponent.forEach((submenu) => submenu.setOpenStateWithoutDebounce(false));
      }
    }
  }
  ngOnDestroy() {
    this.destroy$.next(true);
    this.destroy$.complete();
  }
  static {
    this.\u0275fac = function NzMenuDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzMenuDirective)(\u0275\u0275directiveInject(MenuService), \u0275\u0275directiveInject(ChangeDetectorRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzMenuDirective,
      selectors: [["", "nz-menu", ""]],
      contentQueries: function NzMenuDirective_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          \u0275\u0275contentQuery(dirIndex, NzMenuItemComponent, 5);
          \u0275\u0275contentQuery(dirIndex, NzSubMenuComponent, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.listOfNzMenuItemDirective = _t);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.listOfNzSubMenuComponent = _t);
        }
      },
      hostVars: 34,
      hostBindings: function NzMenuDirective_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-dropdown-menu", ctx.isMenuInsideDropDown)("ant-dropdown-menu-root", ctx.isMenuInsideDropDown)("ant-dropdown-menu-light", ctx.isMenuInsideDropDown && ctx.nzTheme === "light")("ant-dropdown-menu-dark", ctx.isMenuInsideDropDown && ctx.nzTheme === "dark")("ant-dropdown-menu-vertical", ctx.isMenuInsideDropDown && ctx.actualMode === "vertical")("ant-dropdown-menu-horizontal", ctx.isMenuInsideDropDown && ctx.actualMode === "horizontal")("ant-dropdown-menu-inline", ctx.isMenuInsideDropDown && ctx.actualMode === "inline")("ant-dropdown-menu-inline-collapsed", ctx.isMenuInsideDropDown && ctx.nzInlineCollapsed)("ant-menu", !ctx.isMenuInsideDropDown)("ant-menu-root", !ctx.isMenuInsideDropDown)("ant-menu-light", !ctx.isMenuInsideDropDown && ctx.nzTheme === "light")("ant-menu-dark", !ctx.isMenuInsideDropDown && ctx.nzTheme === "dark")("ant-menu-vertical", !ctx.isMenuInsideDropDown && ctx.actualMode === "vertical")("ant-menu-horizontal", !ctx.isMenuInsideDropDown && ctx.actualMode === "horizontal")("ant-menu-inline", !ctx.isMenuInsideDropDown && ctx.actualMode === "inline")("ant-menu-inline-collapsed", !ctx.isMenuInsideDropDown && ctx.nzInlineCollapsed)("ant-menu-rtl", ctx.dir === "rtl");
        }
      },
      inputs: {
        nzInlineIndent: "nzInlineIndent",
        nzTheme: "nzTheme",
        nzMode: "nzMode",
        nzInlineCollapsed: [2, "nzInlineCollapsed", "nzInlineCollapsed", booleanAttribute],
        nzSelectable: [2, "nzSelectable", "nzSelectable", booleanAttribute]
      },
      outputs: {
        nzClick: "nzClick"
      },
      exportAs: ["nzMenu"],
      features: [\u0275\u0275ProvidersFeature([
        {
          provide: NzMenuServiceLocalToken,
          useClass: MenuService
        },
        /** use the top level service **/
        {
          provide: MenuService,
          useFactory: MenuServiceFactory
        },
        /** check if menu inside dropdown-menu component **/
        {
          provide: NzIsMenuInsideDropDownToken,
          useFactory: MenuDropDownTokenFactory
        }
      ]), \u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzMenuDirective, [{
    type: Directive,
    args: [{
      selector: "[nz-menu]",
      exportAs: "nzMenu",
      providers: [
        {
          provide: NzMenuServiceLocalToken,
          useClass: MenuService
        },
        /** use the top level service **/
        {
          provide: MenuService,
          useFactory: MenuServiceFactory
        },
        /** check if menu inside dropdown-menu component **/
        {
          provide: NzIsMenuInsideDropDownToken,
          useFactory: MenuDropDownTokenFactory
        }
      ],
      host: {
        "[class.ant-dropdown-menu]": `isMenuInsideDropDown`,
        "[class.ant-dropdown-menu-root]": `isMenuInsideDropDown`,
        "[class.ant-dropdown-menu-light]": `isMenuInsideDropDown && nzTheme === 'light'`,
        "[class.ant-dropdown-menu-dark]": `isMenuInsideDropDown && nzTheme === 'dark'`,
        "[class.ant-dropdown-menu-vertical]": `isMenuInsideDropDown && actualMode === 'vertical'`,
        "[class.ant-dropdown-menu-horizontal]": `isMenuInsideDropDown && actualMode === 'horizontal'`,
        "[class.ant-dropdown-menu-inline]": `isMenuInsideDropDown && actualMode === 'inline'`,
        "[class.ant-dropdown-menu-inline-collapsed]": `isMenuInsideDropDown && nzInlineCollapsed`,
        "[class.ant-menu]": `!isMenuInsideDropDown`,
        "[class.ant-menu-root]": `!isMenuInsideDropDown`,
        "[class.ant-menu-light]": `!isMenuInsideDropDown && nzTheme === 'light'`,
        "[class.ant-menu-dark]": `!isMenuInsideDropDown && nzTheme === 'dark'`,
        "[class.ant-menu-vertical]": `!isMenuInsideDropDown && actualMode === 'vertical'`,
        "[class.ant-menu-horizontal]": `!isMenuInsideDropDown && actualMode === 'horizontal'`,
        "[class.ant-menu-inline]": `!isMenuInsideDropDown && actualMode === 'inline'`,
        "[class.ant-menu-inline-collapsed]": `!isMenuInsideDropDown && nzInlineCollapsed`,
        "[class.ant-menu-rtl]": `dir === 'rtl'`
      }
    }]
  }], () => [{
    type: MenuService
  }, {
    type: ChangeDetectorRef
  }], {
    listOfNzMenuItemDirective: [{
      type: ContentChildren,
      args: [NzMenuItemComponent, {
        descendants: true
      }]
    }],
    listOfNzSubMenuComponent: [{
      type: ContentChildren,
      args: [NzSubMenuComponent, {
        descendants: true
      }]
    }],
    nzInlineIndent: [{
      type: Input
    }],
    nzTheme: [{
      type: Input
    }],
    nzMode: [{
      type: Input
    }],
    nzInlineCollapsed: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzSelectable: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzClick: [{
      type: Output
    }]
  });
})();
function MenuGroupFactory() {
  const isMenuInsideDropDownToken = inject(NzIsMenuInsideDropDownToken, {
    optional: true,
    skipSelf: true
  });
  return isMenuInsideDropDownToken ?? false;
}
var NzMenuGroupComponent = class _NzMenuGroupComponent {
  constructor(elementRef, renderer) {
    this.elementRef = elementRef;
    this.renderer = renderer;
    this.isMenuInsideDropDown = inject(NzIsMenuInsideDropDownToken);
    const className = this.isMenuInsideDropDown ? "ant-dropdown-menu-item-group" : "ant-menu-item-group";
    this.renderer.addClass(elementRef.nativeElement, className);
  }
  ngAfterViewInit() {
    const ulElement = this.titleElement.nativeElement.nextElementSibling;
    if (ulElement) {
      const className = this.isMenuInsideDropDown ? "ant-dropdown-menu-item-group-list" : "ant-menu-item-group-list";
      this.renderer.addClass(ulElement, className);
    }
  }
  static {
    this.\u0275fac = function NzMenuGroupComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzMenuGroupComponent)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzMenuGroupComponent,
      selectors: [["", "nz-menu-group", ""]],
      viewQuery: function NzMenuGroupComponent_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(_c8, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.titleElement = _t.first);
        }
      },
      inputs: {
        nzTitle: "nzTitle"
      },
      exportAs: ["nzMenuGroup"],
      features: [\u0275\u0275ProvidersFeature([
        /** check if menu inside dropdown-menu component **/
        {
          provide: NzIsMenuInsideDropDownToken,
          useFactory: MenuGroupFactory
        }
      ])],
      attrs: _c9,
      ngContentSelectors: _c11,
      decls: 5,
      vars: 6,
      consts: [["titleElement", ""], [4, "nzStringTemplateOutlet"]],
      template: function NzMenuGroupComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef(_c10);
          \u0275\u0275elementStart(0, "div", null, 0);
          \u0275\u0275template(2, NzMenuGroupComponent_ng_container_2_Template, 2, 1, "ng-container", 1)(3, NzMenuGroupComponent_Conditional_3_Template, 1, 0);
          \u0275\u0275elementEnd();
          \u0275\u0275projection(4);
        }
        if (rf & 2) {
          \u0275\u0275classProp("ant-menu-item-group-title", !ctx.isMenuInsideDropDown)("ant-dropdown-menu-item-group-title", ctx.isMenuInsideDropDown);
          \u0275\u0275advance(2);
          \u0275\u0275property("nzStringTemplateOutlet", ctx.nzTitle);
          \u0275\u0275advance();
          \u0275\u0275conditional(!ctx.nzTitle ? 3 : -1);
        }
      },
      dependencies: [NzOutletModule, NzStringTemplateOutletDirective],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzMenuGroupComponent, [{
    type: Component,
    args: [{
      selector: "[nz-menu-group]",
      exportAs: "nzMenuGroup",
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [
        /** check if menu inside dropdown-menu component **/
        {
          provide: NzIsMenuInsideDropDownToken,
          useFactory: MenuGroupFactory
        }
      ],
      encapsulation: ViewEncapsulation.None,
      template: `
    <div
      [class.ant-menu-item-group-title]="!isMenuInsideDropDown"
      [class.ant-dropdown-menu-item-group-title]="isMenuInsideDropDown"
      #titleElement
    >
      <ng-container *nzStringTemplateOutlet="nzTitle">{{ nzTitle }}</ng-container>
      @if (!nzTitle) {
        <ng-content select="[title]" />
      }
    </div>
    <ng-content></ng-content>
  `,
      preserveWhitespaces: false,
      imports: [NzOutletModule]
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: Renderer2
  }], {
    nzTitle: [{
      type: Input
    }],
    titleElement: [{
      type: ViewChild,
      args: ["titleElement"]
    }]
  });
})();
var NzMenuDividerDirective = class _NzMenuDividerDirective {
  constructor(elementRef) {
    this.elementRef = elementRef;
  }
  static {
    this.\u0275fac = function NzMenuDividerDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzMenuDividerDirective)(\u0275\u0275directiveInject(ElementRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzMenuDividerDirective,
      selectors: [["", "nz-menu-divider", ""]],
      hostAttrs: [1, "ant-dropdown-menu-item-divider"],
      exportAs: ["nzMenuDivider"]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzMenuDividerDirective, [{
    type: Directive,
    args: [{
      selector: "[nz-menu-divider]",
      exportAs: "nzMenuDivider",
      host: {
        class: "ant-dropdown-menu-item-divider"
      }
    }]
  }], () => [{
    type: ElementRef
  }], null);
})();
var NzMenuModule = class _NzMenuModule {
  static {
    this.\u0275fac = function NzMenuModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzMenuModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzMenuModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      imports: [NzSubMenuComponent, NzMenuGroupComponent, NzSubMenuTitleComponent]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzMenuModule, [{
    type: NgModule,
    args: [{
      imports: [NzMenuDirective, NzMenuItemComponent, NzSubMenuComponent, NzMenuDividerDirective, NzMenuGroupComponent, NzSubMenuTitleComponent, NzSubmenuInlineChildComponent, NzSubmenuNoneInlineChildComponent],
      exports: [NzMenuDirective, NzMenuItemComponent, NzSubMenuComponent, NzMenuDividerDirective, NzMenuGroupComponent]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-core-wave.mjs
var NzWaveRenderer = class {
  get waveAttributeName() {
    return this.insertExtraNode ? "ant-click-animating" : "ant-click-animating-without-extra-node";
  }
  constructor(triggerElement, ngZone, insertExtraNode, platform, cspNonce) {
    this.triggerElement = triggerElement;
    this.ngZone = ngZone;
    this.insertExtraNode = insertExtraNode;
    this.platform = platform;
    this.cspNonce = cspNonce;
    this.waveTransitionDuration = 400;
    this.styleForPseudo = null;
    this.extraNode = null;
    this.lastTime = 0;
    this.onClick = (event2) => {
      if (!this.triggerElement || !this.triggerElement.getAttribute || this.triggerElement.getAttribute("disabled") || event2.target.tagName === "INPUT" || this.triggerElement.className.indexOf("disabled") >= 0) {
        return;
      }
      this.fadeOutWave();
    };
    this.clickHandler = this.onClick.bind(this);
    this.bindTriggerEvent();
  }
  bindTriggerEvent() {
    if (this.platform.isBrowser) {
      this.ngZone.runOutsideAngular(() => {
        this.removeTriggerEvent();
        if (this.triggerElement) {
          this.triggerElement.addEventListener("click", this.clickHandler, true);
        }
      });
    }
  }
  removeTriggerEvent() {
    if (this.triggerElement) {
      this.triggerElement.removeEventListener("click", this.clickHandler, true);
    }
  }
  removeStyleAndExtraNode() {
    if (this.styleForPseudo && document.body.contains(this.styleForPseudo)) {
      document.body.removeChild(this.styleForPseudo);
      this.styleForPseudo = null;
    }
    if (this.insertExtraNode && this.triggerElement.contains(this.extraNode)) {
      this.triggerElement.removeChild(this.extraNode);
    }
  }
  destroy() {
    this.removeTriggerEvent();
    this.removeStyleAndExtraNode();
  }
  fadeOutWave() {
    const node = this.triggerElement;
    const waveColor = this.getWaveColor(node);
    node.setAttribute(this.waveAttributeName, "true");
    if (Date.now() < this.lastTime + this.waveTransitionDuration) {
      return;
    }
    if (this.isValidColor(waveColor)) {
      if (!this.styleForPseudo) {
        this.styleForPseudo = document.createElement("style");
        if (this.cspNonce) {
          this.styleForPseudo.nonce = this.cspNonce;
        }
      }
      this.styleForPseudo.innerHTML = `
      [ant-click-animating-without-extra-node='true']::after, .ant-click-animating-node {
        --antd-wave-shadow-color: ${waveColor};
      }`;
      document.body.appendChild(this.styleForPseudo);
    }
    if (this.insertExtraNode) {
      if (!this.extraNode) {
        this.extraNode = document.createElement("div");
      }
      this.extraNode.className = "ant-click-animating-node";
      node.appendChild(this.extraNode);
    }
    this.lastTime = Date.now();
    this.runTimeoutOutsideZone(() => {
      node.removeAttribute(this.waveAttributeName);
      this.removeStyleAndExtraNode();
    }, this.waveTransitionDuration);
  }
  isValidColor(color) {
    return !!color && color !== "#ffffff" && color !== "rgb(255, 255, 255)" && this.isNotGrey(color) && !/rgba\(\d*, \d*, \d*, 0\)/.test(color) && color !== "transparent";
  }
  isNotGrey(color) {
    const match = color.match(/rgba?\((\d*), (\d*), (\d*)(, [\.\d]*)?\)/);
    if (match && match[1] && match[2] && match[3]) {
      return !(match[1] === match[2] && match[2] === match[3]);
    }
    return true;
  }
  getWaveColor(node) {
    const nodeStyle = getComputedStyle(node);
    return nodeStyle.getPropertyValue("border-top-color") || // Firefox Compatible
    nodeStyle.getPropertyValue("border-color") || nodeStyle.getPropertyValue("background-color");
  }
  runTimeoutOutsideZone(fn, delay2) {
    this.ngZone.runOutsideAngular(() => setTimeout(fn, delay2));
  }
};
var NZ_WAVE_GLOBAL_DEFAULT_CONFIG = {
  disabled: false
};
var NZ_WAVE_GLOBAL_CONFIG = new InjectionToken("nz-wave-global-options");
function provideNzWave(config) {
  return makeEnvironmentProviders([{
    provide: NZ_WAVE_GLOBAL_CONFIG,
    useValue: config
  }]);
}
var NzWaveDirective = class _NzWaveDirective {
  get disabled() {
    return this.waveDisabled;
  }
  get rendererRef() {
    return this.waveRenderer;
  }
  constructor(ngZone, elementRef) {
    this.ngZone = ngZone;
    this.elementRef = elementRef;
    this.nzWaveExtraNode = false;
    this.waveDisabled = false;
    this.cspNonce = inject(CSP_NONCE, {
      optional: true
    });
    this.platform = inject(Platform);
    this.config = inject(NZ_WAVE_GLOBAL_CONFIG, {
      optional: true
    });
    this.animationType = inject(ANIMATION_MODULE_TYPE, {
      optional: true
    });
    this.waveDisabled = this.isConfigDisabled();
  }
  isConfigDisabled() {
    let disabled = false;
    if (this.config && typeof this.config.disabled === "boolean") {
      disabled = this.config.disabled;
    }
    if (this.animationType === "NoopAnimations") {
      disabled = true;
    }
    return disabled;
  }
  ngOnDestroy() {
    if (this.waveRenderer) {
      this.waveRenderer.destroy();
    }
  }
  ngOnInit() {
    this.renderWaveIfEnabled();
  }
  renderWaveIfEnabled() {
    if (!this.waveDisabled && this.elementRef.nativeElement) {
      this.waveRenderer = new NzWaveRenderer(this.elementRef.nativeElement, this.ngZone, this.nzWaveExtraNode, this.platform, this.cspNonce);
    }
  }
  disable() {
    this.waveDisabled = true;
    if (this.waveRenderer) {
      this.waveRenderer.removeTriggerEvent();
      this.waveRenderer.removeStyleAndExtraNode();
    }
  }
  enable() {
    this.waveDisabled = this.isConfigDisabled() || false;
    if (this.waveRenderer) {
      this.waveRenderer.bindTriggerEvent();
    }
  }
  static {
    this.\u0275fac = function NzWaveDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzWaveDirective)(\u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ElementRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzWaveDirective,
      selectors: [["", "nz-wave", ""], ["button", "nz-button", "", 3, "nzType", "link", 3, "nzType", "text"]],
      inputs: {
        nzWaveExtraNode: "nzWaveExtraNode"
      },
      exportAs: ["nzWave"]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzWaveDirective, [{
    type: Directive,
    args: [{
      selector: '[nz-wave],button[nz-button]:not([nzType="link"]):not([nzType="text"])',
      exportAs: "nzWave"
    }]
  }], () => [{
    type: NgZone
  }, {
    type: ElementRef
  }], {
    nzWaveExtraNode: [{
      type: Input
    }]
  });
})();
var NzWaveModule = class _NzWaveModule {
  static {
    this.\u0275fac = function NzWaveModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzWaveModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzWaveModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      providers: [provideNzWave(NZ_WAVE_GLOBAL_DEFAULT_CONFIG)]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzWaveModule, [{
    type: NgModule,
    args: [{
      imports: [NzWaveDirective],
      exports: [NzWaveDirective],
      providers: [provideNzWave(NZ_WAVE_GLOBAL_DEFAULT_CONFIG)]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-button.mjs
var _c019 = ["nz-button", ""];
var _c112 = ["*"];
function NzButtonComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-icon", 0);
  }
}
var NZ_CONFIG_MODULE_NAME5 = "button";
var NzButtonComponent = (() => {
  let _nzSize_decorators;
  let _nzSize_initializers = [];
  let _nzSize_extraInitializers = [];
  return class NzButtonComponent2 {
    static {
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
      _nzSize_decorators = [WithConfig()];
      __esDecorate(null, null, _nzSize_decorators, {
        kind: "field",
        name: "nzSize",
        static: false,
        private: false,
        access: {
          has: (obj) => "nzSize" in obj,
          get: (obj) => obj.nzSize,
          set: (obj, value) => {
            obj.nzSize = value;
          }
        },
        metadata: _metadata
      }, _nzSize_initializers, _nzSize_extraInitializers);
      if (_metadata) Object.defineProperty(this, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    }
    insertSpan(nodes, renderer) {
      nodes.forEach((node) => {
        if (node.nodeName === "#text") {
          const span = renderer.createElement("span");
          const parent = renderer.parentNode(node);
          renderer.insertBefore(parent, span, node);
          renderer.appendChild(span, node);
        }
      });
    }
    get iconOnly() {
      const listOfNode = Array.from(this.elementRef?.nativeElement?.childNodes || []);
      const noText = listOfNode.every((node) => node.nodeName !== "#text");
      const noSpan = listOfNode.filter((node) => {
        return !(node.nodeName === "#comment" || !!node?.classList?.contains("anticon"));
      }).length == 0;
      return !!this.nzIconDirectiveElement && noSpan && noText;
    }
    constructor(elementRef, cdr, renderer, nzConfigService, directionality) {
      this.elementRef = elementRef;
      this.cdr = cdr;
      this.renderer = renderer;
      this.nzConfigService = nzConfigService;
      this.directionality = directionality;
      this._nzModuleName = NZ_CONFIG_MODULE_NAME5;
      this.nzBlock = false;
      this.nzGhost = false;
      this.nzSearch = false;
      this.nzLoading = false;
      this.nzDanger = false;
      this.disabled = false;
      this.tabIndex = null;
      this.nzType = null;
      this.nzShape = null;
      this.nzSize = __runInitializers(this, _nzSize_initializers, "default");
      this.dir = (__runInitializers(this, _nzSize_extraInitializers), "ltr");
      this.finalSize = computed(() => {
        if (this.compactSize) {
          return this.compactSize();
        }
        return this.size();
      });
      this.size = signal(this.nzSize);
      this.compactSize = inject(NZ_SPACE_COMPACT_SIZE, {
        optional: true
      });
      this.destroy$ = inject(NzDestroyService);
      this.loading$ = new Subject();
    }
    ngOnInit() {
      this.size.set(this.nzSize);
      this.nzConfigService.getConfigChangeEventForComponent(NZ_CONFIG_MODULE_NAME5).pipe(takeUntil(this.destroy$)).subscribe(() => {
        this.size.set(this.nzSize);
        this.cdr.markForCheck();
      });
      this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
        this.dir = direction;
        this.cdr.detectChanges();
      });
      this.dir = this.directionality.value;
      fromEventOutsideAngular(this.elementRef.nativeElement, "click", {
        capture: true
      }).pipe(takeUntil(this.destroy$)).subscribe((event2) => {
        if (this.disabled && event2.target?.tagName === "A" || this.nzLoading) {
          event2.preventDefault();
          event2.stopImmediatePropagation();
        }
      });
    }
    ngOnChanges({
      nzLoading,
      nzSize
    }) {
      if (nzLoading) {
        this.loading$.next(this.nzLoading);
      }
      if (nzSize) {
        this.size.set(nzSize.currentValue);
      }
    }
    ngAfterViewInit() {
      this.insertSpan(this.elementRef.nativeElement.childNodes, this.renderer);
    }
    ngAfterContentInit() {
      this.loading$.pipe(startWith(this.nzLoading), filter(() => !!this.nzIconDirectiveElement), takeUntil(this.destroy$)).subscribe((loading) => {
        const nativeElement = this.nzIconDirectiveElement.nativeElement;
        if (loading) {
          this.renderer.setStyle(nativeElement, "display", "none");
        } else {
          this.renderer.removeStyle(nativeElement, "display");
        }
      });
    }
    static {
      this.\u0275fac = function NzButtonComponent_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || NzButtonComponent2)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(NzConfigService), \u0275\u0275directiveInject(Directionality));
      };
    }
    static {
      this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
        type: NzButtonComponent2,
        selectors: [["button", "nz-button", ""], ["a", "nz-button", ""]],
        contentQueries: function NzButtonComponent_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            \u0275\u0275contentQuery(dirIndex, NzIconDirective, 5, ElementRef);
          }
          if (rf & 2) {
            let _t;
            \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.nzIconDirectiveElement = _t.first);
          }
        },
        hostAttrs: [1, "ant-btn"],
        hostVars: 34,
        hostBindings: function NzButtonComponent_HostBindings(rf, ctx) {
          if (rf & 2) {
            \u0275\u0275attribute("tabindex", ctx.disabled ? -1 : ctx.tabIndex === null ? null : ctx.tabIndex)("disabled", ctx.disabled || null);
            \u0275\u0275classProp("ant-btn-default", ctx.nzType === "default")("ant-btn-primary", ctx.nzType === "primary")("ant-btn-dashed", ctx.nzType === "dashed")("ant-btn-link", ctx.nzType === "link")("ant-btn-text", ctx.nzType === "text")("ant-btn-circle", ctx.nzShape === "circle")("ant-btn-round", ctx.nzShape === "round")("ant-btn-lg", ctx.finalSize() === "large")("ant-btn-sm", ctx.finalSize() === "small")("ant-btn-dangerous", ctx.nzDanger)("ant-btn-loading", ctx.nzLoading)("ant-btn-background-ghost", ctx.nzGhost)("ant-btn-block", ctx.nzBlock)("ant-input-search-button", ctx.nzSearch)("ant-btn-rtl", ctx.dir === "rtl")("ant-btn-icon-only", ctx.iconOnly);
          }
        },
        inputs: {
          nzBlock: [2, "nzBlock", "nzBlock", booleanAttribute],
          nzGhost: [2, "nzGhost", "nzGhost", booleanAttribute],
          nzSearch: [2, "nzSearch", "nzSearch", booleanAttribute],
          nzLoading: [2, "nzLoading", "nzLoading", booleanAttribute],
          nzDanger: [2, "nzDanger", "nzDanger", booleanAttribute],
          disabled: [2, "disabled", "disabled", booleanAttribute],
          tabIndex: "tabIndex",
          nzType: "nzType",
          nzShape: "nzShape",
          nzSize: "nzSize"
        },
        exportAs: ["nzButton"],
        features: [\u0275\u0275ProvidersFeature([NzDestroyService, {
          provide: NZ_SPACE_COMPACT_ITEM_TYPE,
          useValue: "btn"
        }]), \u0275\u0275InputTransformsFeature, \u0275\u0275HostDirectivesFeature([NzSpaceCompactItemDirective]), \u0275\u0275NgOnChangesFeature],
        attrs: _c019,
        ngContentSelectors: _c112,
        decls: 2,
        vars: 1,
        consts: [["nzType", "loading"]],
        template: function NzButtonComponent_Template(rf, ctx) {
          if (rf & 1) {
            \u0275\u0275projectionDef();
            \u0275\u0275template(0, NzButtonComponent_Conditional_0_Template, 1, 0, "nz-icon", 0);
            \u0275\u0275projection(1);
          }
          if (rf & 2) {
            \u0275\u0275conditional(ctx.nzLoading ? 0 : -1);
          }
        },
        dependencies: [NzIconModule, NzIconDirective],
        encapsulation: 2,
        changeDetection: 0
      });
    }
  };
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzButtonComponent, [{
    type: Component,
    args: [{
      selector: "button[nz-button], a[nz-button]",
      exportAs: "nzButton",
      imports: [NzIconModule],
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      template: `
    @if (nzLoading) {
      <nz-icon nzType="loading" />
    }
    <ng-content></ng-content>
  `,
      host: {
        class: "ant-btn",
        "[class.ant-btn-default]": `nzType === 'default'`,
        "[class.ant-btn-primary]": `nzType === 'primary'`,
        "[class.ant-btn-dashed]": `nzType === 'dashed'`,
        "[class.ant-btn-link]": `nzType === 'link'`,
        "[class.ant-btn-text]": `nzType === 'text'`,
        "[class.ant-btn-circle]": `nzShape === 'circle'`,
        "[class.ant-btn-round]": `nzShape === 'round'`,
        "[class.ant-btn-lg]": `finalSize() === 'large'`,
        "[class.ant-btn-sm]": `finalSize() === 'small'`,
        "[class.ant-btn-dangerous]": `nzDanger`,
        "[class.ant-btn-loading]": `nzLoading`,
        "[class.ant-btn-background-ghost]": `nzGhost`,
        "[class.ant-btn-block]": `nzBlock`,
        "[class.ant-input-search-button]": `nzSearch`,
        "[class.ant-btn-rtl]": `dir === 'rtl'`,
        "[class.ant-btn-icon-only]": `iconOnly`,
        "[attr.tabindex]": "disabled ? -1 : (tabIndex === null ? null : tabIndex)",
        "[attr.disabled]": "disabled || null"
      },
      hostDirectives: [NzSpaceCompactItemDirective],
      providers: [NzDestroyService, {
        provide: NZ_SPACE_COMPACT_ITEM_TYPE,
        useValue: "btn"
      }]
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: ChangeDetectorRef
  }, {
    type: Renderer2
  }, {
    type: NzConfigService
  }, {
    type: Directionality
  }], {
    nzIconDirectiveElement: [{
      type: ContentChild,
      args: [NzIconDirective, {
        read: ElementRef
      }]
    }],
    nzBlock: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzGhost: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzSearch: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzLoading: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzDanger: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    disabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    tabIndex: [{
      type: Input
    }],
    nzType: [{
      type: Input
    }],
    nzShape: [{
      type: Input
    }],
    nzSize: [{
      type: Input
    }]
  });
})();
var NzButtonGroupComponent = class _NzButtonGroupComponent {
  constructor(directionality) {
    this.directionality = directionality;
    this.nzSize = "default";
    this.dir = "ltr";
    this.destroy$ = new Subject();
  }
  ngOnInit() {
    this.dir = this.directionality.value;
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
    });
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  static {
    this.\u0275fac = function NzButtonGroupComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzButtonGroupComponent)(\u0275\u0275directiveInject(Directionality));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzButtonGroupComponent,
      selectors: [["nz-button-group"]],
      hostAttrs: [1, "ant-btn-group"],
      hostVars: 6,
      hostBindings: function NzButtonGroupComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-btn-group-lg", ctx.nzSize === "large")("ant-btn-group-sm", ctx.nzSize === "small")("ant-btn-group-rtl", ctx.dir === "rtl");
        }
      },
      inputs: {
        nzSize: "nzSize"
      },
      exportAs: ["nzButtonGroup"],
      ngContentSelectors: _c112,
      decls: 1,
      vars: 0,
      template: function NzButtonGroupComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275projection(0);
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzButtonGroupComponent, [{
    type: Component,
    args: [{
      selector: "nz-button-group",
      exportAs: "nzButtonGroup",
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      host: {
        class: "ant-btn-group",
        "[class.ant-btn-group-lg]": `nzSize === 'large'`,
        "[class.ant-btn-group-sm]": `nzSize === 'small'`,
        "[class.ant-btn-group-rtl]": `dir === 'rtl'`
      },
      preserveWhitespaces: false,
      template: `<ng-content></ng-content>`
    }]
  }], () => [{
    type: Directionality
  }], {
    nzSize: [{
      type: Input
    }]
  });
})();
var NzButtonModule = class _NzButtonModule {
  static {
    this.\u0275fac = function NzButtonModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzButtonModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzButtonModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      imports: [NzButtonComponent, NzTransitionPatchModule, NzWaveModule]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzButtonModule, [{
    type: NgModule,
    args: [{
      imports: [NzButtonComponent, NzButtonGroupComponent],
      exports: [NzButtonComponent, NzButtonGroupComponent, NzTransitionPatchModule, NzWaveModule]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-dropdown.mjs
var _c020 = ["*"];
function NzDropdownMenuComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 0);
    \u0275\u0275listener("@slideMotion.done", function NzDropdownMenuComponent_ng_template_0_Template_div_animation_slideMotion_done_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onAnimationEvent($event));
    })("mouseenter", function NzDropdownMenuComponent_ng_template_0_Template_div_mouseenter_0_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.setMouseState(true));
    })("mouseleave", function NzDropdownMenuComponent_ng_template_0_Template_div_mouseleave_0_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.setMouseState(false));
    });
    \u0275\u0275projection(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275styleMap(ctx_r1.nzOverlayStyle);
    \u0275\u0275classMap(ctx_r1.nzOverlayClassName);
    \u0275\u0275classProp("ant-dropdown-rtl", ctx_r1.dir === "rtl");
    \u0275\u0275property("@slideMotion", void 0)("@.disabled", !!(ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation))("nzNoAnimation", ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation);
  }
}
var NZ_CONFIG_MODULE_NAME6 = "dropDown";
var listOfPositions = [POSITION_MAP.bottomLeft, POSITION_MAP.bottomRight, POSITION_MAP.topRight, POSITION_MAP.topLeft];
var NzDropDownDirective = (() => {
  let _nzBackdrop_decorators;
  let _nzBackdrop_initializers = [];
  let _nzBackdrop_extraInitializers = [];
  return class NzDropDownDirective2 {
    static {
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
      _nzBackdrop_decorators = [WithConfig()];
      __esDecorate(null, null, _nzBackdrop_decorators, {
        kind: "field",
        name: "nzBackdrop",
        static: false,
        private: false,
        access: {
          has: (obj) => "nzBackdrop" in obj,
          get: (obj) => obj.nzBackdrop,
          set: (obj, value) => {
            obj.nzBackdrop = value;
          }
        },
        metadata: _metadata
      }, _nzBackdrop_initializers, _nzBackdrop_extraInitializers);
      if (_metadata) Object.defineProperty(this, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    }
    setDropdownMenuValue(key, value) {
      if (this.nzDropdownMenu) {
        this.nzDropdownMenu.setValue(key, value);
      }
    }
    constructor(nzConfigService, elementRef, overlay, renderer, viewContainerRef, platform) {
      this.nzConfigService = nzConfigService;
      this.elementRef = elementRef;
      this.overlay = overlay;
      this.renderer = renderer;
      this.viewContainerRef = viewContainerRef;
      this.platform = platform;
      this._nzModuleName = NZ_CONFIG_MODULE_NAME6;
      this.overlayRef = null;
      this.destroy$ = new Subject();
      this.positionStrategy = this.overlay.position().flexibleConnectedTo(this.elementRef.nativeElement).withLockedPosition().withTransformOriginOn(".ant-dropdown");
      this.inputVisible$ = new BehaviorSubject(false);
      this.nzTrigger$ = new BehaviorSubject("hover");
      this.overlayClose$ = new Subject();
      this.nzDropdownMenu = null;
      this.nzTrigger = "hover";
      this.nzMatchWidthElement = null;
      this.nzBackdrop = __runInitializers(this, _nzBackdrop_initializers, false);
      this.nzClickHide = (__runInitializers(this, _nzBackdrop_extraInitializers), true);
      this.nzDisabled = false;
      this.nzVisible = false;
      this.nzOverlayClassName = "";
      this.nzOverlayStyle = {};
      this.nzPlacement = "bottomLeft";
      this.nzVisibleChange = new EventEmitter();
    }
    ngAfterViewInit() {
      if (this.nzDropdownMenu) {
        const nativeElement = this.elementRef.nativeElement;
        const hostMouseState$ = merge(fromEvent(nativeElement, "mouseenter").pipe(map(() => true)), fromEvent(nativeElement, "mouseleave").pipe(map(() => false)));
        const menuMouseState$ = this.nzDropdownMenu.mouseState$;
        const mergedMouseState$ = merge(menuMouseState$, hostMouseState$);
        const hostClickState$ = fromEvent(nativeElement, "click").pipe(map(() => !this.nzVisible));
        const visibleStateByTrigger$ = this.nzTrigger$.pipe(switchMap((trigger2) => {
          if (trigger2 === "hover") {
            return mergedMouseState$;
          } else if (trigger2 === "click") {
            return hostClickState$;
          } else {
            return EMPTY;
          }
        }));
        const descendantMenuItemClick$ = this.nzDropdownMenu.descendantMenuItemClick$.pipe(filter(() => this.nzClickHide), map(() => false));
        const domTriggerVisible$ = merge(visibleStateByTrigger$, descendantMenuItemClick$, this.overlayClose$).pipe(filter(() => !this.nzDisabled));
        const visible$ = merge(this.inputVisible$, domTriggerVisible$);
        combineLatest([visible$, this.nzDropdownMenu.isChildSubMenuOpen$]).pipe(map(([visible, sub]) => visible || sub), auditTime(150), distinctUntilChanged(), filter(() => this.platform.isBrowser), takeUntil(this.destroy$)).subscribe((visible) => {
          const element = this.nzMatchWidthElement ? this.nzMatchWidthElement.nativeElement : nativeElement;
          const triggerWidth = element.getBoundingClientRect().width;
          if (this.nzVisible !== visible) {
            this.nzVisibleChange.emit(visible);
          }
          this.nzVisible = visible;
          if (visible) {
            if (!this.overlayRef) {
              this.overlayRef = this.overlay.create({
                positionStrategy: this.positionStrategy,
                minWidth: triggerWidth,
                disposeOnNavigation: true,
                hasBackdrop: this.nzBackdrop && this.nzTrigger === "click",
                scrollStrategy: this.overlay.scrollStrategies.reposition()
              });
              merge(this.overlayRef.backdropClick(), this.overlayRef.detachments(), this.overlayRef.outsidePointerEvents().pipe(filter((e) => !this.elementRef.nativeElement.contains(e.target))), this.overlayRef.keydownEvents().pipe(filter((e) => e.keyCode === ESCAPE && !hasModifierKey(e)))).pipe(takeUntil(this.destroy$)).subscribe(() => {
                this.overlayClose$.next(false);
              });
            } else {
              const overlayConfig = this.overlayRef.getConfig();
              overlayConfig.minWidth = triggerWidth;
            }
            this.positionStrategy.withPositions([POSITION_MAP[this.nzPlacement], ...listOfPositions]);
            if (!this.portal || this.portal.templateRef !== this.nzDropdownMenu.templateRef) {
              this.portal = new TemplatePortal(this.nzDropdownMenu.templateRef, this.viewContainerRef);
            }
            this.overlayRef.attach(this.portal);
          } else {
            if (this.overlayRef) {
              this.overlayRef.detach();
            }
          }
        });
        this.nzDropdownMenu.animationStateChange$.pipe(takeUntil(this.destroy$)).subscribe((event2) => {
          if (event2.toState === "void") {
            if (this.overlayRef) {
              this.overlayRef.dispose();
            }
            this.overlayRef = null;
          }
        });
      }
    }
    ngOnDestroy() {
      this.destroy$.next(true);
      this.destroy$.complete();
      if (this.overlayRef) {
        this.overlayRef.dispose();
        this.overlayRef = null;
      }
    }
    ngOnChanges(changes) {
      const {
        nzVisible,
        nzDisabled,
        nzOverlayClassName,
        nzOverlayStyle,
        nzTrigger
      } = changes;
      if (nzTrigger) {
        this.nzTrigger$.next(this.nzTrigger);
      }
      if (nzVisible) {
        this.inputVisible$.next(this.nzVisible);
      }
      if (nzDisabled) {
        const nativeElement = this.elementRef.nativeElement;
        if (this.nzDisabled) {
          this.renderer.setAttribute(nativeElement, "disabled", "");
          this.inputVisible$.next(false);
        } else {
          this.renderer.removeAttribute(nativeElement, "disabled");
        }
      }
      if (nzOverlayClassName) {
        this.setDropdownMenuValue("nzOverlayClassName", this.nzOverlayClassName);
      }
      if (nzOverlayStyle) {
        this.setDropdownMenuValue("nzOverlayStyle", this.nzOverlayStyle);
      }
    }
    static {
      this.\u0275fac = function NzDropDownDirective_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || NzDropDownDirective2)(\u0275\u0275directiveInject(NzConfigService), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Overlay), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(Platform));
      };
    }
    static {
      this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
        type: NzDropDownDirective2,
        selectors: [["", "nz-dropdown", ""]],
        hostAttrs: [1, "ant-dropdown-trigger"],
        inputs: {
          nzDropdownMenu: "nzDropdownMenu",
          nzTrigger: "nzTrigger",
          nzMatchWidthElement: "nzMatchWidthElement",
          nzBackdrop: [2, "nzBackdrop", "nzBackdrop", booleanAttribute],
          nzClickHide: [2, "nzClickHide", "nzClickHide", booleanAttribute],
          nzDisabled: [2, "nzDisabled", "nzDisabled", booleanAttribute],
          nzVisible: [2, "nzVisible", "nzVisible", booleanAttribute],
          nzOverlayClassName: "nzOverlayClassName",
          nzOverlayStyle: "nzOverlayStyle",
          nzPlacement: "nzPlacement"
        },
        outputs: {
          nzVisibleChange: "nzVisibleChange"
        },
        exportAs: ["nzDropdown"],
        features: [\u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature]
      });
    }
  };
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzDropDownDirective, [{
    type: Directive,
    args: [{
      selector: "[nz-dropdown]",
      exportAs: "nzDropdown",
      host: {
        class: "ant-dropdown-trigger"
      }
    }]
  }], () => [{
    type: NzConfigService
  }, {
    type: ElementRef
  }, {
    type: Overlay
  }, {
    type: Renderer2
  }, {
    type: ViewContainerRef
  }, {
    type: Platform
  }], {
    nzDropdownMenu: [{
      type: Input
    }],
    nzTrigger: [{
      type: Input
    }],
    nzMatchWidthElement: [{
      type: Input
    }],
    nzBackdrop: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzClickHide: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzDisabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzVisible: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzOverlayClassName: [{
      type: Input
    }],
    nzOverlayStyle: [{
      type: Input
    }],
    nzPlacement: [{
      type: Input
    }],
    nzVisibleChange: [{
      type: Output
    }]
  });
})();
var NzContextMenuServiceModule = class _NzContextMenuServiceModule {
  static {
    this.\u0275fac = function NzContextMenuServiceModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzContextMenuServiceModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzContextMenuServiceModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzContextMenuServiceModule, [{
    type: NgModule
  }], null, null);
})();
var NzDropDownADirective = class _NzDropDownADirective {
  static {
    this.\u0275fac = function NzDropDownADirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzDropDownADirective)();
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzDropDownADirective,
      selectors: [["a", "nz-dropdown", ""]],
      hostAttrs: [1, "ant-dropdown-link"]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzDropDownADirective, [{
    type: Directive,
    args: [{
      selector: "a[nz-dropdown]",
      host: {
        class: "ant-dropdown-link"
      }
    }]
  }], null, null);
})();
var NzDropdownButtonDirective = class _NzDropdownButtonDirective {
  constructor(renderer, elementRef) {
    this.renderer = renderer;
    this.elementRef = elementRef;
    this.nzButtonGroupComponent = inject(NzButtonGroupComponent, {
      host: true,
      optional: true
    });
  }
  ngAfterViewInit() {
    const parentElement = this.renderer.parentNode(this.elementRef.nativeElement);
    if (this.nzButtonGroupComponent && parentElement) {
      this.renderer.addClass(parentElement, "ant-dropdown-button");
    }
  }
  static {
    this.\u0275fac = function NzDropdownButtonDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzDropdownButtonDirective)(\u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ElementRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzDropdownButtonDirective,
      selectors: [["", "nz-button", "", "nz-dropdown", ""]]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzDropdownButtonDirective, [{
    type: Directive,
    args: [{
      selector: "[nz-button][nz-dropdown]"
    }]
  }], () => [{
    type: Renderer2
  }, {
    type: ElementRef
  }], null);
})();
var NzDropdownMenuComponent = class _NzDropdownMenuComponent {
  onAnimationEvent(event2) {
    this.animationStateChange$.emit(event2);
  }
  setMouseState(visible) {
    this.mouseState$.next(visible);
  }
  setValue(key, value) {
    this[key] = value;
    this.cdr.markForCheck();
  }
  constructor(cdr, elementRef, renderer, viewContainerRef, nzMenuService, directionality) {
    this.cdr = cdr;
    this.elementRef = elementRef;
    this.renderer = renderer;
    this.viewContainerRef = viewContainerRef;
    this.nzMenuService = nzMenuService;
    this.directionality = directionality;
    this.mouseState$ = new BehaviorSubject(false);
    this.isChildSubMenuOpen$ = this.nzMenuService.isChildSubMenuOpen$;
    this.descendantMenuItemClick$ = this.nzMenuService.descendantMenuItemClick$;
    this.animationStateChange$ = new EventEmitter();
    this.nzOverlayClassName = "";
    this.nzOverlayStyle = {};
    this.dir = "ltr";
    this.destroy$ = new Subject();
    this.noAnimation = inject(NzNoAnimationDirective, {
      host: true,
      optional: true
    });
  }
  ngOnInit() {
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.cdr.detectChanges();
    });
    this.dir = this.directionality.value;
  }
  ngAfterContentInit() {
    this.renderer.removeChild(this.renderer.parentNode(this.elementRef.nativeElement), this.elementRef.nativeElement);
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  static {
    this.\u0275fac = function NzDropdownMenuComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzDropdownMenuComponent)(\u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(MenuService), \u0275\u0275directiveInject(Directionality));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzDropdownMenuComponent,
      selectors: [["nz-dropdown-menu"]],
      viewQuery: function NzDropdownMenuComponent_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(TemplateRef, 7);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.templateRef = _t.first);
        }
      },
      exportAs: ["nzDropdownMenu"],
      features: [\u0275\u0275ProvidersFeature([
        MenuService,
        /** menu is inside dropdown-menu component **/
        {
          provide: NzIsMenuInsideDropDownToken,
          useValue: true
        }
      ])],
      ngContentSelectors: _c020,
      decls: 1,
      vars: 0,
      consts: [[1, "ant-dropdown", 3, "mouseenter", "mouseleave", "nzNoAnimation"]],
      template: function NzDropdownMenuComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275template(0, NzDropdownMenuComponent_ng_template_0_Template, 2, 9, "ng-template");
        }
      },
      dependencies: [NzNoAnimationDirective],
      encapsulation: 2,
      data: {
        animation: [slideMotion]
      },
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzDropdownMenuComponent, [{
    type: Component,
    args: [{
      selector: `nz-dropdown-menu`,
      exportAs: `nzDropdownMenu`,
      animations: [slideMotion],
      providers: [
        MenuService,
        /** menu is inside dropdown-menu component **/
        {
          provide: NzIsMenuInsideDropDownToken,
          useValue: true
        }
      ],
      template: `
    <ng-template>
      <div
        class="ant-dropdown"
        [class.ant-dropdown-rtl]="dir === 'rtl'"
        [class]="nzOverlayClassName"
        [style]="nzOverlayStyle"
        @slideMotion
        (@slideMotion.done)="onAnimationEvent($event)"
        [@.disabled]="!!noAnimation?.nzNoAnimation"
        [nzNoAnimation]="noAnimation?.nzNoAnimation"
        (mouseenter)="setMouseState(true)"
        (mouseleave)="setMouseState(false)"
      >
        <ng-content></ng-content>
      </div>
    </ng-template>
  `,
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      imports: [NzNoAnimationDirective]
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: ElementRef
  }, {
    type: Renderer2
  }, {
    type: ViewContainerRef
  }, {
    type: MenuService
  }, {
    type: Directionality
  }], {
    templateRef: [{
      type: ViewChild,
      args: [TemplateRef, {
        static: true
      }]
    }]
  });
})();
var NzDropDownModule = class _NzDropDownModule {
  static {
    this.\u0275fac = function NzDropDownModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzDropDownModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzDropDownModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      imports: [NzContextMenuServiceModule, NzMenuModule]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzDropDownModule, [{
    type: NgModule,
    args: [{
      imports: [NzDropDownDirective, NzDropDownADirective, NzDropdownMenuComponent, NzDropdownButtonDirective, NzContextMenuServiceModule],
      exports: [NzMenuModule, NzDropDownDirective, NzDropDownADirective, NzDropdownMenuComponent, NzDropdownButtonDirective]
    }]
  }], null, null);
})();
var LIST_OF_POSITIONS = [new ConnectionPositionPair({
  originX: "start",
  originY: "top"
}, {
  overlayX: "start",
  overlayY: "top"
}), new ConnectionPositionPair({
  originX: "start",
  originY: "top"
}, {
  overlayX: "start",
  overlayY: "bottom"
}), new ConnectionPositionPair({
  originX: "start",
  originY: "top"
}, {
  overlayX: "end",
  overlayY: "bottom"
}), new ConnectionPositionPair({
  originX: "start",
  originY: "top"
}, {
  overlayX: "end",
  overlayY: "top"
})];
var NzContextMenuService = class _NzContextMenuService {
  constructor(ngZone, overlay) {
    this.ngZone = ngZone;
    this.overlay = overlay;
    this.overlayRef = null;
    this.closeSubscription = Subscription.EMPTY;
  }
  create($event, nzDropdownMenuComponent) {
    this.close(true);
    const {
      x,
      y
    } = $event;
    if ($event instanceof MouseEvent) {
      $event.preventDefault();
    }
    const positionStrategy = this.overlay.position().flexibleConnectedTo({
      x,
      y
    }).withPositions(LIST_OF_POSITIONS).withTransformOriginOn(".ant-dropdown");
    this.overlayRef = this.overlay.create({
      positionStrategy,
      disposeOnNavigation: true,
      scrollStrategy: this.overlay.scrollStrategies.close()
    });
    this.closeSubscription = new Subscription();
    this.closeSubscription.add(nzDropdownMenuComponent.descendantMenuItemClick$.subscribe(() => this.close()));
    this.closeSubscription.add(merge(fromEventOutsideAngular(document, "click").pipe(
      filter((event2) => !!this.overlayRef && !this.overlayRef.overlayElement.contains(event2.target)),
      /** handle firefox contextmenu event **/
      filter((event2) => event2.button !== 2)
    ), fromEventOutsideAngular(document, "keydown").pipe(filter((event2) => event2.key === "Escape"))).pipe(first()).subscribe(() => this.ngZone.run(() => this.close())));
    return this.overlayRef.attach(new TemplatePortal(nzDropdownMenuComponent.templateRef, nzDropdownMenuComponent.viewContainerRef));
  }
  close(clear = false) {
    if (this.overlayRef) {
      this.overlayRef.detach();
      if (clear) {
        this.overlayRef.dispose();
      }
      this.overlayRef = null;
      this.closeSubscription.unsubscribe();
    }
  }
  static {
    this.\u0275fac = function NzContextMenuService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzContextMenuService)(\u0275\u0275inject(NgZone), \u0275\u0275inject(Overlay));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _NzContextMenuService,
      factory: _NzContextMenuService.\u0275fac,
      providedIn: NzContextMenuServiceModule
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzContextMenuService, [{
    type: Injectable,
    args: [{
      providedIn: NzContextMenuServiceModule
    }]
  }], () => [{
    type: NgZone
  }, {
    type: Overlay
  }], null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-cdk-resize-observer.mjs
var NzResizeObserverFactory = class _NzResizeObserverFactory {
  create(callback) {
    return typeof ResizeObserver === "undefined" ? null : new ResizeObserver(callback);
  }
  static {
    this.\u0275fac = function NzResizeObserverFactory_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzResizeObserverFactory)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _NzResizeObserverFactory,
      factory: _NzResizeObserverFactory.\u0275fac,
      providedIn: "root"
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzResizeObserverFactory, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var NzResizeObserver = class _NzResizeObserver {
  constructor(nzResizeObserverFactory) {
    this.nzResizeObserverFactory = nzResizeObserverFactory;
    this.observedElements = /* @__PURE__ */ new Map();
  }
  ngOnDestroy() {
    this.observedElements.forEach((_3, element) => this.cleanupObserver(element));
  }
  observe(elementOrRef) {
    const element = coerceElement(elementOrRef);
    return new Observable((observer) => {
      const stream = this.observeElement(element);
      const subscription = stream.subscribe(observer);
      return () => {
        subscription.unsubscribe();
        this.unobserveElement(element);
      };
    });
  }
  /**
   * Observes the given element by using the existing ResizeObserver if available, or creating a
   * new one if not.
   */
  observeElement(element) {
    if (!this.observedElements.has(element)) {
      const stream = new Subject();
      const observer = this.nzResizeObserverFactory.create((mutations) => stream.next(mutations));
      if (observer) {
        observer.observe(element);
      }
      this.observedElements.set(element, {
        observer,
        stream,
        count: 1
      });
    } else {
      this.observedElements.get(element).count++;
    }
    return this.observedElements.get(element).stream;
  }
  /**
   * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is
   * observing this element.
   */
  unobserveElement(element) {
    if (this.observedElements.has(element)) {
      this.observedElements.get(element).count--;
      if (!this.observedElements.get(element).count) {
        this.cleanupObserver(element);
      }
    }
  }
  /** Clean up the underlying ResizeObserver for the specified element. */
  cleanupObserver(element) {
    if (this.observedElements.has(element)) {
      const {
        observer,
        stream
      } = this.observedElements.get(element);
      if (observer) {
        observer.disconnect();
      }
      stream.complete();
      this.observedElements.delete(element);
    }
  }
  static {
    this.\u0275fac = function NzResizeObserver_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzResizeObserver)(\u0275\u0275inject(NzResizeObserverFactory));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _NzResizeObserver,
      factory: _NzResizeObserver.\u0275fac,
      providedIn: "root"
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzResizeObserver, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: NzResizeObserverFactory
  }], null);
})();
var NzResizeObserverDirective = class _NzResizeObserverDirective {
  subscribe() {
    this.unsubscribe();
    this.currentSubscription = this.nzResizeObserver.observe(this.elementRef).subscribe(this.nzResizeObserve);
  }
  unsubscribe() {
    this.currentSubscription?.unsubscribe();
  }
  constructor(nzResizeObserver, elementRef) {
    this.nzResizeObserver = nzResizeObserver;
    this.elementRef = elementRef;
    this.nzResizeObserve = new EventEmitter();
    this.nzResizeObserverDisabled = false;
    this.currentSubscription = null;
  }
  ngAfterContentInit() {
    if (!this.currentSubscription && !this.nzResizeObserverDisabled) {
      this.subscribe();
    }
  }
  ngOnDestroy() {
    this.unsubscribe();
  }
  ngOnChanges(changes) {
    const {
      nzResizeObserve
    } = changes;
    if (nzResizeObserve) {
      if (this.nzResizeObserverDisabled) {
        this.unsubscribe();
      } else {
        this.subscribe();
      }
    }
  }
  static {
    this.\u0275fac = function NzResizeObserverDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzResizeObserverDirective)(\u0275\u0275directiveInject(NzResizeObserver), \u0275\u0275directiveInject(ElementRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzResizeObserverDirective,
      selectors: [["", "nzResizeObserver", ""]],
      inputs: {
        nzResizeObserverDisabled: [2, "nzResizeObserverDisabled", "nzResizeObserverDisabled", booleanAttribute]
      },
      outputs: {
        nzResizeObserve: "nzResizeObserve"
      },
      features: [\u0275\u0275ProvidersFeature([NzResizeObserverFactory]), \u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzResizeObserverDirective, [{
    type: Directive,
    args: [{
      selector: "[nzResizeObserver]",
      providers: [NzResizeObserverFactory]
    }]
  }], () => [{
    type: NzResizeObserver
  }, {
    type: ElementRef
  }], {
    nzResizeObserve: [{
      type: Output
    }],
    nzResizeObserverDisabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
var NzResizeObserverModule = class _NzResizeObserverModule {
  static {
    this.\u0275fac = function NzResizeObserverModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzResizeObserverModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzResizeObserverModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzResizeObserverModule, [{
    type: NgModule,
    args: [{
      imports: [NzResizeObserverDirective],
      exports: [NzResizeObserverDirective]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-tabs.mjs
function NzTabAddButtonComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "nz-icon", 1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const icon_r1 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("nzType", icon_r1);
  }
}
var _c021 = () => ({
  minWidth: "46px"
});
var _c113 = () => ({
  visible: false
});
function NzTabNavOperationComponent_Conditional_5_For_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const item_r3 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", item_r3.tab.label, " ");
  }
}
function NzTabNavOperationComponent_Conditional_5_For_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li", 7);
    \u0275\u0275listener("click", function NzTabNavOperationComponent_Conditional_5_For_2_Template_li_click_0_listener() {
      const item_r3 = \u0275\u0275restoreView(_r2).$implicit;
      const ctx_r3 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r3.onSelect(item_r3));
    })("contextmenu", function NzTabNavOperationComponent_Conditional_5_For_2_Template_li_contextmenu_0_listener($event) {
      const item_r3 = \u0275\u0275restoreView(_r2).$implicit;
      const ctx_r3 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r3.onContextmenu(item_r3, $event));
    });
    \u0275\u0275template(1, NzTabNavOperationComponent_Conditional_5_For_2_ng_container_1_Template, 2, 1, "ng-container", 8);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const item_r3 = ctx.$implicit;
    \u0275\u0275classProp("ant-tabs-dropdown-menu-item-disabled", item_r3.disabled);
    \u0275\u0275property("nzSelected", item_r3.active)("nzDisabled", item_r3.disabled);
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", item_r3.tab.label)("nzStringTemplateOutletContext", \u0275\u0275pureFunction0(6, _c113));
  }
}
function NzTabNavOperationComponent_Conditional_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "ul", 4);
    \u0275\u0275repeaterCreate(1, NzTabNavOperationComponent_Conditional_5_For_2_Template, 2, 7, "li", 6, \u0275\u0275repeaterTrackByIdentity);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx_r3.items);
  }
}
function NzTabNavOperationComponent_Conditional_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 9);
    \u0275\u0275listener("click", function NzTabNavOperationComponent_Conditional_6_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r5);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.addClicked.emit());
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275property("addIcon", ctx_r3.addIcon);
  }
}
var _c29 = ["navWarp"];
var _c35 = ["navList"];
var _c44 = ["*"];
function NzTabNavBarComponent_Conditional_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 8);
    \u0275\u0275listener("click", function NzTabNavBarComponent_Conditional_5_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.addClicked.emit());
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275property("addIcon", ctx_r2.addIcon);
    \u0275\u0275attribute("tabindex", -1);
  }
}
function NzTabNavBarComponent_Conditional_8_ng_template_1_Template(rf, ctx) {
}
function NzTabNavBarComponent_Conditional_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 7);
    \u0275\u0275template(1, NzTabNavBarComponent_Conditional_8_ng_template_1_Template, 0, 0, "ng-template", 9);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", ctx_r2.extraTemplate);
  }
}
var _c52 = ["nz-tab-body", ""];
function NzTabBodyComponent_ng_template_0_Template(rf, ctx) {
}
function NzTabCloseButtonComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "nz-icon", 1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const icon_r1 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("nzType", icon_r1);
  }
}
var _c62 = ["contentTemplate"];
var _c72 = [[["", "nz-tab-link", ""]], "*"];
var _c82 = ["[nz-tab-link]", "*"];
function NzTabComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275projection(0);
  }
}
function NzTabComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275projection(0, 1);
  }
}
var _c92 = () => ({
  visible: true
});
function NzTabSetComponent_Conditional_0_For_2_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const tab_r5 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(tab_r5.label);
  }
}
function NzTabSetComponent_Conditional_0_For_2_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 10);
    \u0275\u0275listener("click", function NzTabSetComponent_Conditional_0_For_2_Conditional_3_Template_button_click_0_listener($event) {
      \u0275\u0275restoreView(_r7);
      const \u0275$index_4_r6 = \u0275\u0275nextContext().$index;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onClose(\u0275$index_4_r6, $event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const tab_r5 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("closeIcon", tab_r5.nzCloseIcon);
  }
}
function NzTabSetComponent_Conditional_0_For_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6);
    \u0275\u0275listener("click", function NzTabSetComponent_Conditional_0_For_2_Template_div_click_0_listener($event) {
      const ctx_r3 = \u0275\u0275restoreView(_r3);
      const tab_r5 = ctx_r3.$implicit;
      const \u0275$index_4_r6 = ctx_r3.$index;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.clickNavItem(tab_r5, \u0275$index_4_r6, $event));
    })("contextmenu", function NzTabSetComponent_Conditional_0_For_2_Template_div_contextmenu_0_listener($event) {
      const tab_r5 = \u0275\u0275restoreView(_r3).$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.contextmenuNavItem(tab_r5, $event));
    });
    \u0275\u0275elementStart(1, "button", 7);
    \u0275\u0275template(2, NzTabSetComponent_Conditional_0_For_2_ng_container_2_Template, 2, 1, "ng-container", 8)(3, NzTabSetComponent_Conditional_0_For_2_Conditional_3_Template, 1, 1, "button", 9);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const tab_r5 = ctx.$implicit;
    const \u0275$index_4_r6 = ctx.$index;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275styleProp("margin-right", ctx_r1.position === "horizontal" ? ctx_r1.nzTabBarGutter : null, "px")("margin-bottom", ctx_r1.position === "vertical" ? ctx_r1.nzTabBarGutter : null, "px");
    \u0275\u0275classProp("ant-tabs-tab-active", ctx_r1.nzSelectedIndex === \u0275$index_4_r6)("ant-tabs-tab-disabled", tab_r5.nzDisabled);
    \u0275\u0275advance();
    \u0275\u0275property("id", ctx_r1.getTabContentId(\u0275$index_4_r6))("disabled", tab_r5.nzDisabled)("tab", tab_r5)("active", ctx_r1.nzSelectedIndex === \u0275$index_4_r6);
    \u0275\u0275attribute("tabIndex", ctx_r1.getTabIndex(tab_r5, \u0275$index_4_r6))("aria-disabled", tab_r5.nzDisabled)("aria-selected", ctx_r1.nzSelectedIndex === \u0275$index_4_r6 && !ctx_r1.nzHideAll)("aria-controls", ctx_r1.getTabContentId(\u0275$index_4_r6));
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", tab_r5.label)("nzStringTemplateOutletContext", \u0275\u0275pureFunction0(19, _c92));
    \u0275\u0275advance();
    \u0275\u0275conditional(tab_r5.nzClosable && ctx_r1.closable && !tab_r5.nzDisabled ? 3 : -1);
  }
}
function NzTabSetComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "nz-tabs-nav", 4);
    \u0275\u0275listener("tabScroll", function NzTabSetComponent_Conditional_0_Template_nz_tabs_nav_tabScroll_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.nzTabListScroll.emit($event));
    })("selectFocusedIndex", function NzTabSetComponent_Conditional_0_Template_nz_tabs_nav_selectFocusedIndex_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.setSelectedIndex($event));
    })("addClicked", function NzTabSetComponent_Conditional_0_Template_nz_tabs_nav_addClicked_0_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onAdd());
    });
    \u0275\u0275repeaterCreate(1, NzTabSetComponent_Conditional_0_For_2_Template, 4, 20, "div", 5, \u0275\u0275repeaterTrackByIdentity);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275styleMap(ctx_r1.nzTabBarStyle);
    \u0275\u0275property("selectedIndex", ctx_r1.nzSelectedIndex || 0)("inkBarAnimated", ctx_r1.inkBarAnimated)("addable", ctx_r1.addable)("addIcon", ctx_r1.nzAddIcon)("hideBar", ctx_r1.nzHideAll)("position", ctx_r1.position)("extraTemplate", ctx_r1.nzTabBarExtraContent);
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx_r1.tabs);
  }
}
function NzTabSetComponent_Conditional_3_For_1_Conditional_0_ng_template_0_Template(rf, ctx) {
}
function NzTabSetComponent_Conditional_3_For_1_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzTabSetComponent_Conditional_3_For_1_Conditional_0_ng_template_0_Template, 0, 0, "ng-template", 11);
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const tabpaneTmpl_r8 = \u0275\u0275reference(4);
    \u0275\u0275property("ngTemplateOutlet", tabpaneTmpl_r8);
  }
}
function NzTabSetComponent_Conditional_3_For_1_Conditional_1_Conditional_0_ng_template_0_Template(rf, ctx) {
}
function NzTabSetComponent_Conditional_3_For_1_Conditional_1_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzTabSetComponent_Conditional_3_For_1_Conditional_1_Conditional_0_ng_template_0_Template, 0, 0, "ng-template", 11);
  }
  if (rf & 2) {
    \u0275\u0275nextContext(2);
    const tabpaneTmpl_r8 = \u0275\u0275reference(4);
    \u0275\u0275property("ngTemplateOutlet", tabpaneTmpl_r8);
  }
}
function NzTabSetComponent_Conditional_3_For_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzTabSetComponent_Conditional_3_For_1_Conditional_1_Conditional_0_Template, 1, 1, null, 11);
  }
  if (rf & 2) {
    const \u0275$index_22_r9 = \u0275\u0275nextContext().$index;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275conditional(ctx_r1.nzSelectedIndex === \u0275$index_22_r9 ? 0 : -1);
  }
}
function NzTabSetComponent_Conditional_3_For_1_Conditional_2_Conditional_0_ng_template_0_Template(rf, ctx) {
}
function NzTabSetComponent_Conditional_3_For_1_Conditional_2_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzTabSetComponent_Conditional_3_For_1_Conditional_2_Conditional_0_ng_template_0_Template, 0, 0, "ng-template", 11);
  }
  if (rf & 2) {
    \u0275\u0275nextContext(2);
    const tabpaneTmpl_r8 = \u0275\u0275reference(4);
    \u0275\u0275property("ngTemplateOutlet", tabpaneTmpl_r8);
  }
}
function NzTabSetComponent_Conditional_3_For_1_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzTabSetComponent_Conditional_3_For_1_Conditional_2_Conditional_0_Template, 1, 1, null, 11);
  }
  if (rf & 2) {
    const ctx_r9 = \u0275\u0275nextContext();
    const tab_r11 = ctx_r9.$implicit;
    const \u0275$index_22_r9 = ctx_r9.$index;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275conditional(ctx_r1.nzSelectedIndex === \u0275$index_22_r9 || tab_r11.hasBeenActive ? 0 : -1);
  }
}
function NzTabSetComponent_Conditional_3_For_1_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "div", 12);
  }
  if (rf & 2) {
    const ctx_r9 = \u0275\u0275nextContext();
    const tab_r11 = ctx_r9.$implicit;
    const \u0275$index_22_r9 = ctx_r9.$index;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("id", ctx_r1.getTabContentId(\u0275$index_22_r9))("active", ctx_r1.nzSelectedIndex === \u0275$index_22_r9)("content", tab_r11.content)("animated", ctx_r1.tabPaneAnimated);
    \u0275\u0275attribute("aria-labelledby", ctx_r1.getTabContentId(\u0275$index_22_r9));
  }
}
function NzTabSetComponent_Conditional_3_For_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzTabSetComponent_Conditional_3_For_1_Conditional_0_Template, 1, 1, null, 11)(1, NzTabSetComponent_Conditional_3_For_1_Conditional_1_Template, 1, 1)(2, NzTabSetComponent_Conditional_3_For_1_Conditional_2_Template, 1, 1)(3, NzTabSetComponent_Conditional_3_For_1_ng_template_3_Template, 1, 5, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
  }
  if (rf & 2) {
    const tab_r11 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275conditional(tab_r11.nzForceRender ? 0 : ctx_r1.nzDestroyInactiveTabPane ? 1 : 2);
  }
}
function NzTabSetComponent_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275repeaterCreate(0, NzTabSetComponent_Conditional_3_For_1_Template, 5, 1, null, null, \u0275\u0275repeaterTrackByIdentity);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275repeater(ctx_r1.tabs);
  }
}
var NzTabAddButtonComponent = class _NzTabAddButtonComponent {
  constructor(elementRef) {
    this.elementRef = elementRef;
    this.addIcon = "plus";
    this.element = this.elementRef.nativeElement;
  }
  getElementWidth() {
    return this.element?.offsetWidth || 0;
  }
  getElementHeight() {
    return this.element?.offsetHeight || 0;
  }
  static {
    this.\u0275fac = function NzTabAddButtonComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTabAddButtonComponent)(\u0275\u0275directiveInject(ElementRef));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzTabAddButtonComponent,
      selectors: [["nz-tab-add-button"], ["button", "nz-tab-add-button", ""]],
      hostAttrs: ["aria-label", "Add tab", "type", "button", 1, "ant-tabs-nav-add"],
      inputs: {
        addIcon: "addIcon"
      },
      decls: 1,
      vars: 1,
      consts: [[4, "nzStringTemplateOutlet"], ["nzTheme", "outline", 3, "nzType"]],
      template: function NzTabAddButtonComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275template(0, NzTabAddButtonComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        }
        if (rf & 2) {
          \u0275\u0275property("nzStringTemplateOutlet", ctx.addIcon);
        }
      },
      dependencies: [NzOutletModule, NzStringTemplateOutletDirective, NzIconModule, NzIconDirective],
      encapsulation: 2
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTabAddButtonComponent, [{
    type: Component,
    args: [{
      selector: "nz-tab-add-button, button[nz-tab-add-button]",
      template: `
    <ng-container *nzStringTemplateOutlet="addIcon; let icon">
      <nz-icon [nzType]="icon" nzTheme="outline" />
    </ng-container>
  `,
      host: {
        class: "ant-tabs-nav-add",
        "aria-label": "Add tab",
        type: "button"
      },
      imports: [NzOutletModule, NzIconModule]
    }]
  }], () => [{
    type: ElementRef
  }], {
    addIcon: [{
      type: Input
    }]
  });
})();
var NzTabsInkBarDirective = class _NzTabsInkBarDirective {
  get _animated() {
    return this.animationMode !== "NoopAnimations" && this.animated;
  }
  constructor(elementRef, ngZone) {
    this.elementRef = elementRef;
    this.ngZone = ngZone;
    this.position = "horizontal";
    this.animated = true;
    this.animationMode = inject(ANIMATION_MODULE_TYPE, {
      optional: true
    });
  }
  alignToElement(element) {
    this.ngZone.runOutsideAngular(() => {
      reqAnimFrame(() => this.setStyles(element));
    });
  }
  setStyles(element) {
    const inkBar = this.elementRef.nativeElement;
    if (this.position === "horizontal") {
      inkBar.style.top = "";
      inkBar.style.height = "";
      inkBar.style.left = this.getLeftPosition(element);
      inkBar.style.width = this.getElementWidth(element);
    } else {
      inkBar.style.left = "";
      inkBar.style.width = "";
      inkBar.style.top = this.getTopPosition(element);
      inkBar.style.height = this.getElementHeight(element);
    }
  }
  getLeftPosition(element) {
    return element ? `${element.offsetLeft || 0}px` : "0";
  }
  getElementWidth(element) {
    return element ? `${element.offsetWidth || 0}px` : "0";
  }
  getTopPosition(element) {
    return element ? `${element.offsetTop || 0}px` : "0";
  }
  getElementHeight(element) {
    return element ? `${element.offsetHeight || 0}px` : "0";
  }
  static {
    this.\u0275fac = function NzTabsInkBarDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTabsInkBarDirective)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(NgZone));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTabsInkBarDirective,
      selectors: [["nz-tabs-ink-bar"], ["", "nz-tabs-ink-bar", ""]],
      hostAttrs: [1, "ant-tabs-ink-bar"],
      hostVars: 2,
      hostBindings: function NzTabsInkBarDirective_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-tabs-ink-bar-animated", ctx._animated);
        }
      },
      inputs: {
        position: "position",
        animated: "animated"
      }
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTabsInkBarDirective, [{
    type: Directive,
    args: [{
      selector: "nz-tabs-ink-bar, [nz-tabs-ink-bar]",
      host: {
        class: "ant-tabs-ink-bar",
        "[class.ant-tabs-ink-bar-animated]": "_animated"
      }
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: NgZone
  }], {
    position: [{
      type: Input
    }],
    animated: [{
      type: Input
    }]
  });
})();
var NzTabNavItemDirective = class _NzTabNavItemDirective {
  constructor(elementRef) {
    this.elementRef = elementRef;
    this.disabled = false;
    this.active = false;
    this.el = elementRef.nativeElement;
    this.parentElement = this.el.parentElement;
  }
  focus() {
    this.el.focus();
  }
  get width() {
    return this.parentElement.offsetWidth;
  }
  get height() {
    return this.parentElement.offsetHeight;
  }
  get left() {
    return this.parentElement.offsetLeft;
  }
  get top() {
    return this.parentElement.offsetTop;
  }
  static {
    this.\u0275fac = function NzTabNavItemDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTabNavItemDirective)(\u0275\u0275directiveInject(ElementRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTabNavItemDirective,
      selectors: [["", "nzTabNavItem", ""]],
      inputs: {
        disabled: [2, "disabled", "disabled", booleanAttribute],
        tab: "tab",
        active: [2, "active", "active", booleanAttribute]
      },
      features: [\u0275\u0275InputTransformsFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTabNavItemDirective, [{
    type: Directive,
    args: [{
      selector: "[nzTabNavItem]"
    }]
  }], () => [{
    type: ElementRef
  }], {
    disabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    tab: [{
      type: Input
    }],
    active: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
var NzTabNavOperationComponent = class _NzTabNavOperationComponent {
  constructor(cdr, elementRef) {
    this.cdr = cdr;
    this.elementRef = elementRef;
    this.items = [];
    this.addable = false;
    this.addIcon = "plus";
    this.addClicked = new EventEmitter();
    this.selected = new EventEmitter();
    this.menuOpened = false;
    this.element = this.elementRef.nativeElement;
  }
  onSelect(item) {
    if (!item.disabled) {
      item.tab.nzClick.emit();
      this.selected.emit(item);
    }
  }
  onContextmenu(item, e) {
    if (!item.disabled) {
      item.tab.nzContextmenu.emit(e);
    }
  }
  showItems() {
    clearTimeout(this.closeAnimationWaitTimeoutId);
    this.menuOpened = true;
    this.cdr.markForCheck();
  }
  menuVisChange(visible) {
    if (!visible) {
      this.closeAnimationWaitTimeoutId = setTimeout(() => {
        this.menuOpened = false;
        this.cdr.markForCheck();
      }, 150);
    }
  }
  getElementWidth() {
    return this.element?.offsetWidth || 0;
  }
  getElementHeight() {
    return this.element?.offsetHeight || 0;
  }
  ngOnDestroy() {
    clearTimeout(this.closeAnimationWaitTimeoutId);
  }
  static {
    this.\u0275fac = function NzTabNavOperationComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTabNavOperationComponent)(\u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(ElementRef));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzTabNavOperationComponent,
      selectors: [["nz-tab-nav-operation"]],
      hostAttrs: [1, "ant-tabs-nav-operations"],
      hostVars: 2,
      hostBindings: function NzTabNavOperationComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-tabs-nav-operations-hidden", ctx.items.length === 0);
        }
      },
      inputs: {
        items: "items",
        addable: [2, "addable", "addable", booleanAttribute],
        addIcon: "addIcon"
      },
      outputs: {
        addClicked: "addClicked",
        selected: "selected"
      },
      exportAs: ["nzTabNavOperation"],
      features: [\u0275\u0275InputTransformsFeature],
      decls: 7,
      vars: 6,
      consts: [["dropdownTrigger", "nzDropdown"], ["menu", "nzDropdownMenu"], ["nz-dropdown", "", "type", "button", "tabindex", "-1", "aria-hidden", "true", "nzOverlayClassName", "nz-tabs-dropdown", 1, "ant-tabs-nav-more", 3, "nzVisibleChange", "mouseenter", "nzDropdownMenu", "nzOverlayStyle", "nzMatchWidthElement"], ["nzType", "ellipsis"], ["nz-menu", ""], ["nz-tab-add-button", "", 3, "addIcon"], ["nz-menu-item", "", 1, "ant-tabs-dropdown-menu-item", 3, "ant-tabs-dropdown-menu-item-disabled", "nzSelected", "nzDisabled"], ["nz-menu-item", "", 1, "ant-tabs-dropdown-menu-item", 3, "click", "contextmenu", "nzSelected", "nzDisabled"], [4, "nzStringTemplateOutlet", "nzStringTemplateOutletContext"], ["nz-tab-add-button", "", 3, "click", "addIcon"]],
      template: function NzTabNavOperationComponent_Template(rf, ctx) {
        if (rf & 1) {
          const _r1 = \u0275\u0275getCurrentView();
          \u0275\u0275elementStart(0, "button", 2, 0);
          \u0275\u0275listener("nzVisibleChange", function NzTabNavOperationComponent_Template_button_nzVisibleChange_0_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.menuVisChange($event));
          })("mouseenter", function NzTabNavOperationComponent_Template_button_mouseenter_0_listener() {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.showItems());
          });
          \u0275\u0275element(2, "nz-icon", 3);
          \u0275\u0275elementEnd();
          \u0275\u0275elementStart(3, "nz-dropdown-menu", null, 1);
          \u0275\u0275template(5, NzTabNavOperationComponent_Conditional_5_Template, 3, 0, "ul", 4);
          \u0275\u0275elementEnd();
          \u0275\u0275template(6, NzTabNavOperationComponent_Conditional_6_Template, 1, 1, "button", 5);
        }
        if (rf & 2) {
          const menu_r6 = \u0275\u0275reference(4);
          \u0275\u0275property("nzDropdownMenu", menu_r6)("nzOverlayStyle", \u0275\u0275pureFunction0(5, _c021))("nzMatchWidthElement", null);
          \u0275\u0275advance(5);
          \u0275\u0275conditional(ctx.menuOpened ? 5 : -1);
          \u0275\u0275advance();
          \u0275\u0275conditional(ctx.addable ? 6 : -1);
        }
      },
      dependencies: [NzIconModule, NzIconDirective, NzOutletModule, NzStringTemplateOutletDirective, NzTabAddButtonComponent, NzDropdownMenuComponent, NzMenuModule, NzMenuDirective, NzMenuItemComponent, NzDropDownDirective],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTabNavOperationComponent, [{
    type: Component,
    args: [{
      selector: "nz-tab-nav-operation",
      exportAs: "nzTabNavOperation",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      template: `
    <button
      nz-dropdown
      class="ant-tabs-nav-more"
      type="button"
      tabindex="-1"
      aria-hidden="true"
      nzOverlayClassName="nz-tabs-dropdown"
      #dropdownTrigger="nzDropdown"
      [nzDropdownMenu]="menu"
      [nzOverlayStyle]="{ minWidth: '46px' }"
      [nzMatchWidthElement]="null"
      (nzVisibleChange)="menuVisChange($event)"
      (mouseenter)="showItems()"
    >
      <nz-icon nzType="ellipsis" />
    </button>
    <nz-dropdown-menu #menu="nzDropdownMenu">
      @if (menuOpened) {
        <ul nz-menu>
          @for (item of items; track item) {
            <li
              nz-menu-item
              class="ant-tabs-dropdown-menu-item"
              [class.ant-tabs-dropdown-menu-item-disabled]="item.disabled"
              [nzSelected]="item.active"
              [nzDisabled]="item.disabled"
              (click)="onSelect(item)"
              (contextmenu)="onContextmenu(item, $event)"
            >
              <ng-container *nzStringTemplateOutlet="item.tab.label; context: { visible: false }">
                {{ item.tab.label }}
              </ng-container>
            </li>
          }
        </ul>
      }
    </nz-dropdown-menu>
    @if (addable) {
      <button nz-tab-add-button [addIcon]="addIcon" (click)="addClicked.emit()"></button>
    }
  `,
      host: {
        class: "ant-tabs-nav-operations",
        "[class.ant-tabs-nav-operations-hidden]": "items.length === 0"
      },
      imports: [NzIconModule, NzOutletModule, NzTabAddButtonComponent, NzDropdownMenuComponent, NzMenuModule, NzDropDownDirective]
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: ElementRef
  }], {
    items: [{
      type: Input
    }],
    addable: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    addIcon: [{
      type: Input
    }],
    addClicked: [{
      type: Output
    }],
    selected: [{
      type: Output
    }]
  });
})();
var MIN_SWIPE_DISTANCE = 0.1;
var STOP_SWIPE_DISTANCE = 0.01;
var REFRESH_INTERVAL = 20;
var SPEED_OFF_MULTIPLE = 0.995 ** REFRESH_INTERVAL;
var NzTabScrollListDirective = class _NzTabScrollListDirective {
  constructor(ngZone, elementRef) {
    this.ngZone = ngZone;
    this.elementRef = elementRef;
    this.lastWheelDirection = null;
    this.lastWheelTimestamp = 0;
    this.lastTimestamp = 0;
    this.lastTimeDiff = 0;
    this.lastMixedWheel = 0;
    this.lastWheelPrevent = false;
    this.touchPosition = null;
    this.lastOffset = null;
    this.motion = -1;
    this.unsubscribe = () => void 0;
    this.offsetChange = new EventEmitter();
    this.tabScroll = new EventEmitter();
    this.onTouchEnd = (e) => {
      if (!this.touchPosition) {
        return;
      }
      const lastOffset = this.lastOffset;
      const lastTimeDiff = this.lastTimeDiff;
      this.lastOffset = this.touchPosition = null;
      if (lastOffset) {
        const distanceX = lastOffset.x / lastTimeDiff;
        const distanceY = lastOffset.y / lastTimeDiff;
        const absX = Math.abs(distanceX);
        const absY = Math.abs(distanceY);
        if (Math.max(absX, absY) < MIN_SWIPE_DISTANCE) {
          return;
        }
        let currentX = distanceX;
        let currentY = distanceY;
        this.motion = window.setInterval(() => {
          if (Math.abs(currentX) < STOP_SWIPE_DISTANCE && Math.abs(currentY) < STOP_SWIPE_DISTANCE) {
            window.clearInterval(this.motion);
            return;
          }
          currentX *= SPEED_OFF_MULTIPLE;
          currentY *= SPEED_OFF_MULTIPLE;
          this.onOffset(currentX * REFRESH_INTERVAL, currentY * REFRESH_INTERVAL, e);
        }, REFRESH_INTERVAL);
      }
    };
    this.onTouchMove = (e) => {
      if (!this.touchPosition) {
        return;
      }
      e.preventDefault();
      const {
        screenX,
        screenY
      } = e.touches[0];
      const offsetX = screenX - this.touchPosition.x;
      const offsetY = screenY - this.touchPosition.y;
      this.onOffset(offsetX, offsetY, e);
      const now = Date.now();
      this.lastTimeDiff = now - this.lastTimestamp;
      this.lastTimestamp = now;
      this.lastOffset = {
        x: offsetX,
        y: offsetY
      };
      this.touchPosition = {
        x: screenX,
        y: screenY
      };
    };
    this.onTouchStart = (e) => {
      const {
        screenX,
        screenY
      } = e.touches[0];
      this.touchPosition = {
        x: screenX,
        y: screenY
      };
      window.clearInterval(this.motion);
    };
    this.onWheel = (e) => {
      const {
        deltaX,
        deltaY
      } = e;
      let mixed;
      const absX = Math.abs(deltaX);
      const absY = Math.abs(deltaY);
      if (absX === absY) {
        mixed = this.lastWheelDirection === "x" ? deltaX : deltaY;
      } else if (absX > absY) {
        mixed = deltaX;
        this.lastWheelDirection = "x";
      } else {
        mixed = deltaY;
        this.lastWheelDirection = "y";
      }
      const now = Date.now();
      const absMixed = Math.abs(mixed);
      if (now - this.lastWheelTimestamp > 100 || absMixed - this.lastMixedWheel > 10) {
        this.lastWheelPrevent = false;
      }
      this.onOffset(-mixed, -mixed, e);
      if (e.defaultPrevented || this.lastWheelPrevent) {
        this.lastWheelPrevent = true;
      }
      this.lastWheelTimestamp = now;
      this.lastMixedWheel = absMixed;
    };
  }
  ngOnInit() {
    this.unsubscribe = this.ngZone.runOutsideAngular(() => {
      const el = this.elementRef.nativeElement;
      const wheel$ = fromEvent(el, "wheel");
      const touchstart$ = fromEvent(el, "touchstart");
      const touchmove$ = fromEvent(el, "touchmove");
      const touchend$ = fromEvent(el, "touchend");
      const subscription = new Subscription();
      subscription.add(this.subscribeWrap("wheel", wheel$, this.onWheel));
      subscription.add(this.subscribeWrap("touchstart", touchstart$, this.onTouchStart));
      subscription.add(this.subscribeWrap("touchmove", touchmove$, this.onTouchMove));
      subscription.add(this.subscribeWrap("touchend", touchend$, this.onTouchEnd));
      return () => {
        subscription.unsubscribe();
      };
    });
  }
  subscribeWrap(type, observable, handler) {
    return observable.subscribe((event2) => {
      this.tabScroll.emit({
        type,
        event: event2
      });
      if (!event2.defaultPrevented) {
        handler(event2);
      }
    });
  }
  onOffset(x, y, event2) {
    this.ngZone.run(() => {
      this.offsetChange.emit({
        x,
        y,
        event: event2
      });
    });
  }
  ngOnDestroy() {
    this.unsubscribe();
  }
  static {
    this.\u0275fac = function NzTabScrollListDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTabScrollListDirective)(\u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ElementRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTabScrollListDirective,
      selectors: [["", "nzTabScrollList", ""]],
      outputs: {
        offsetChange: "offsetChange",
        tabScroll: "tabScroll"
      }
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTabScrollListDirective, [{
    type: Directive,
    args: [{
      selector: "[nzTabScrollList]"
    }]
  }], () => [{
    type: NgZone
  }, {
    type: ElementRef
  }], {
    offsetChange: [{
      type: Output
    }],
    tabScroll: [{
      type: Output
    }]
  });
})();
var RESIZE_SCHEDULER = typeof requestAnimationFrame !== "undefined" ? animationFrameScheduler : asapScheduler;
var CSS_TRANSFORM_TIME = 150;
var NzTabNavBarComponent = class _NzTabNavBarComponent {
  get selectedIndex() {
    return this._selectedIndex;
  }
  set selectedIndex(value) {
    const newValue = coerceNumberProperty(value);
    if (this._selectedIndex !== newValue) {
      this._selectedIndex = value;
      this.selectedIndexChanged = true;
      if (this.keyManager) {
        this.keyManager.updateActiveItem(value);
      }
    }
  }
  /** Tracks which element has focus; used for keyboard navigation */
  get focusIndex() {
    return this.keyManager ? this.keyManager.activeItemIndex : 0;
  }
  /** When the focus index is set, we must manually send focus to the correct label */
  set focusIndex(value) {
    if (!this.isValidIndex(value) || this.focusIndex === value || !this.keyManager) {
      return;
    }
    this.keyManager.setActiveItem(value);
  }
  get showAddButton() {
    return this.hiddenItems.length === 0 && this.addable;
  }
  constructor(cdr, ngZone, viewportRuler, nzResizeObserver, dir) {
    this.cdr = cdr;
    this.ngZone = ngZone;
    this.viewportRuler = viewportRuler;
    this.nzResizeObserver = nzResizeObserver;
    this.dir = dir;
    this.indexFocused = new EventEmitter();
    this.selectFocusedIndex = new EventEmitter();
    this.addClicked = new EventEmitter();
    this.tabScroll = new EventEmitter();
    this.position = "horizontal";
    this.addable = false;
    this.hideBar = false;
    this.addIcon = "plus";
    this.inkBarAnimated = true;
    this.translate = null;
    this.transformX = 0;
    this.transformY = 0;
    this.pingLeft = false;
    this.pingRight = false;
    this.pingTop = false;
    this.pingBottom = false;
    this.hiddenItems = [];
    this.destroy$ = new Subject();
    this._selectedIndex = 0;
    this.wrapperWidth = 0;
    this.wrapperHeight = 0;
    this.scrollListWidth = 0;
    this.scrollListHeight = 0;
    this.operationWidth = 0;
    this.operationHeight = 0;
    this.addButtonWidth = 0;
    this.addButtonHeight = 0;
    this.selectedIndexChanged = false;
  }
  ngAfterViewInit() {
    const dirChange = this.dir ? this.dir.change.asObservable() : of(null);
    const resize = this.viewportRuler.change(150);
    const realign = () => {
      this.updateScrollListPosition();
      this.alignInkBarToSelectedTab();
    };
    this.keyManager = new FocusKeyManager(this.items).withHorizontalOrientation(this.getLayoutDirection()).withWrap();
    this.keyManager.updateActiveItem(this.selectedIndex);
    reqAnimFrame(realign);
    merge(this.nzResizeObserver.observe(this.navWarpRef), this.nzResizeObserver.observe(this.navListRef)).pipe(takeUntil(this.destroy$), auditTime(16, RESIZE_SCHEDULER)).subscribe(() => {
      realign();
    });
    merge(dirChange, resize, this.items.changes).pipe(takeUntil(this.destroy$)).subscribe(() => {
      Promise.resolve().then(realign);
      this.keyManager.withHorizontalOrientation(this.getLayoutDirection());
    });
    this.keyManager.change.pipe(takeUntil(this.destroy$)).subscribe((newFocusIndex) => {
      this.indexFocused.emit(newFocusIndex);
      this.setTabFocus(newFocusIndex);
      this.scrollToTab(this.keyManager.activeItem);
    });
  }
  ngAfterContentChecked() {
    if (this.selectedIndexChanged) {
      this.updateScrollListPosition();
      this.alignInkBarToSelectedTab();
      this.selectedIndexChanged = false;
      this.cdr.markForCheck();
    }
  }
  ngOnDestroy() {
    clearTimeout(this.lockAnimationTimeoutId);
    clearTimeout(this.cssTransformTimeWaitingId);
    this.destroy$.next();
    this.destroy$.complete();
  }
  onSelectedFromMenu(tab) {
    const tabIndex = this.items.toArray().findIndex((e) => e === tab);
    if (tabIndex !== -1) {
      this.keyManager.updateActiveItem(tabIndex);
      if (this.focusIndex !== this.selectedIndex) {
        this.selectFocusedIndex.emit(this.focusIndex);
        this.scrollToTab(tab);
      }
    }
  }
  onOffsetChange(e) {
    if (this.position === "horizontal") {
      if (!this.lockAnimationTimeoutId) {
        if (this.transformX >= 0 && e.x > 0) {
          return;
        }
        if (this.transformX <= this.wrapperWidth - this.scrollListWidth && e.x < 0) {
          return;
        }
      }
      e.event.preventDefault();
      this.transformX = this.clampTransformX(this.transformX + e.x);
      this.setTransform(this.transformX, 0);
    } else {
      if (!this.lockAnimationTimeoutId) {
        if (this.transformY >= 0 && e.y > 0) {
          return;
        }
        if (this.transformY <= this.wrapperHeight - this.scrollListHeight && e.y < 0) {
          return;
        }
      }
      e.event.preventDefault();
      this.transformY = this.clampTransformY(this.transformY + e.y);
      this.setTransform(0, this.transformY);
    }
    this.lockAnimation();
    this.setVisibleRange();
    this.setPingStatus();
  }
  handleKeydown(event2) {
    const inNavigationList = this.navWarpRef.nativeElement.contains(event2.target);
    if (hasModifierKey(event2) || !inNavigationList) {
      return;
    }
    switch (event2.keyCode) {
      case LEFT_ARROW:
      case UP_ARROW:
      case RIGHT_ARROW:
      case DOWN_ARROW:
        this.lockAnimation();
        this.keyManager.onKeydown(event2);
        break;
      case ENTER:
      case SPACE:
        if (this.focusIndex !== this.selectedIndex) {
          this.selectFocusedIndex.emit(this.focusIndex);
        }
        break;
      default:
        this.keyManager.onKeydown(event2);
    }
  }
  isValidIndex(index) {
    if (!this.items) {
      return true;
    }
    const tab = this.items ? this.items.toArray()[index] : null;
    return !!tab && !tab.disabled;
  }
  scrollToTab(tab) {
    if (!this.items.find((e) => e === tab)) {
      return;
    }
    const tabs = this.items.toArray();
    if (this.position === "horizontal") {
      let newTransform = this.transformX;
      if (this.getLayoutDirection() === "rtl") {
        const right = tabs[0].left + tabs[0].width - tab.left - tab.width;
        if (right < this.transformX) {
          newTransform = right;
        } else if (right + tab.width > this.transformX + this.wrapperWidth) {
          newTransform = right + tab.width - this.wrapperWidth;
        }
      } else if (tab.left < -this.transformX) {
        newTransform = -tab.left;
      } else if (tab.left + tab.width > -this.transformX + this.wrapperWidth) {
        newTransform = -(tab.left + tab.width - this.wrapperWidth);
      }
      this.transformX = newTransform;
      this.transformY = 0;
      this.setTransform(newTransform, 0);
    } else {
      let newTransform = this.transformY;
      if (tab.top < -this.transformY) {
        newTransform = -tab.top;
      } else if (tab.top + tab.height > -this.transformY + this.wrapperHeight) {
        newTransform = -(tab.top + tab.height - this.wrapperHeight);
      }
      this.transformY = newTransform;
      this.transformX = 0;
      this.setTransform(0, newTransform);
    }
    clearTimeout(this.cssTransformTimeWaitingId);
    this.cssTransformTimeWaitingId = setTimeout(() => {
      this.setVisibleRange();
    }, CSS_TRANSFORM_TIME);
  }
  lockAnimation() {
    if (!this.lockAnimationTimeoutId) {
      this.ngZone.runOutsideAngular(() => {
        this.navListRef.nativeElement.style.transition = "none";
        this.lockAnimationTimeoutId = setTimeout(() => {
          this.navListRef.nativeElement.style.transition = "";
          this.lockAnimationTimeoutId = void 0;
        }, CSS_TRANSFORM_TIME);
      });
    }
  }
  setTransform(x, y) {
    this.navListRef.nativeElement.style.transform = `translate(${x}px, ${y}px)`;
  }
  clampTransformX(transform) {
    const scrollWidth = this.wrapperWidth - this.scrollListWidth;
    if (this.getLayoutDirection() === "rtl") {
      return Math.max(Math.min(scrollWidth, transform), 0);
    } else {
      return Math.min(Math.max(scrollWidth, transform), 0);
    }
  }
  clampTransformY(transform) {
    return Math.min(Math.max(this.wrapperHeight - this.scrollListHeight, transform), 0);
  }
  updateScrollListPosition() {
    this.resetSizes();
    this.transformX = this.clampTransformX(this.transformX);
    this.transformY = this.clampTransformY(this.transformY);
    this.setVisibleRange();
    this.setPingStatus();
    if (this.keyManager) {
      this.keyManager.updateActiveItem(this.keyManager.activeItemIndex);
      if (this.keyManager.activeItem) {
        this.scrollToTab(this.keyManager.activeItem);
      }
    }
  }
  resetSizes() {
    this.addButtonWidth = this.addBtnRef ? this.addBtnRef.getElementWidth() : 0;
    this.addButtonHeight = this.addBtnRef ? this.addBtnRef.getElementHeight() : 0;
    this.operationWidth = this.operationRef.getElementWidth();
    this.operationHeight = this.operationRef.getElementHeight();
    this.wrapperWidth = this.navWarpRef.nativeElement.offsetWidth || 0;
    this.wrapperHeight = this.navWarpRef.nativeElement.offsetHeight || 0;
    this.scrollListHeight = this.navListRef.nativeElement.offsetHeight || 0;
    this.scrollListWidth = this.navListRef.nativeElement.offsetWidth || 0;
  }
  alignInkBarToSelectedTab() {
    const selectedItem = this.items && this.items.length ? this.items.toArray()[this.selectedIndex] : null;
    const selectedItemElement = selectedItem ? selectedItem.elementRef.nativeElement : null;
    if (selectedItemElement) {
      this.inkBar.alignToElement(selectedItemElement.parentElement);
    }
  }
  setPingStatus() {
    const ping = {
      top: false,
      right: false,
      bottom: false,
      left: false
    };
    const navWarp = this.navWarpRef.nativeElement;
    if (this.position === "horizontal") {
      if (this.getLayoutDirection() === "rtl") {
        ping.right = this.transformX > 0;
        ping.left = this.transformX + this.wrapperWidth < this.scrollListWidth;
      } else {
        ping.left = this.transformX < 0;
        ping.right = -this.transformX + this.wrapperWidth < this.scrollListWidth;
      }
    } else {
      ping.top = this.transformY < 0;
      ping.bottom = -this.transformY + this.wrapperHeight < this.scrollListHeight;
    }
    Object.keys(ping).forEach((pos) => {
      const className = `ant-tabs-nav-wrap-ping-${pos}`;
      if (ping[pos]) {
        navWarp.classList.add(className);
      } else {
        navWarp.classList.remove(className);
      }
    });
  }
  setVisibleRange() {
    let unit;
    let position;
    let transformSize;
    let basicSize;
    let tabContentSize;
    let addSize;
    const tabs = this.items.toArray();
    const DEFAULT_SIZE2 = {
      width: 0,
      height: 0,
      left: 0,
      top: 0,
      right: 0
    };
    const getOffset = (index) => {
      let offset;
      const size = tabs[index] || DEFAULT_SIZE2;
      if (position === "right") {
        offset = tabs[0].left + tabs[0].width - tabs[index].left - tabs[index].width;
      } else {
        offset = size[position];
      }
      return offset;
    };
    if (this.position === "horizontal") {
      unit = "width";
      basicSize = this.wrapperWidth;
      tabContentSize = this.scrollListWidth - (this.hiddenItems.length ? this.operationWidth : 0);
      addSize = this.addButtonWidth;
      transformSize = Math.abs(this.transformX);
      if (this.getLayoutDirection() === "rtl") {
        position = "right";
        this.pingRight = this.transformX > 0;
        this.pingLeft = this.transformX + this.wrapperWidth < this.scrollListWidth;
      } else {
        this.pingLeft = this.transformX < 0;
        this.pingRight = -this.transformX + this.wrapperWidth < this.scrollListWidth;
        position = "left";
      }
    } else {
      unit = "height";
      basicSize = this.wrapperHeight;
      tabContentSize = this.scrollListHeight - (this.hiddenItems.length ? this.operationHeight : 0);
      addSize = this.addButtonHeight;
      position = "top";
      transformSize = -this.transformY;
      this.pingTop = this.transformY < 0;
      this.pingBottom = -this.transformY + this.wrapperHeight < this.scrollListHeight;
    }
    let mergedBasicSize = basicSize;
    if (tabContentSize + addSize > basicSize) {
      mergedBasicSize = basicSize - addSize;
    }
    if (!tabs.length) {
      this.hiddenItems = [];
      this.cdr.markForCheck();
      return;
    }
    const len = tabs.length;
    let endIndex = len;
    for (let i = 0; i < len; i += 1) {
      const offset = getOffset(i);
      const size = tabs[i] || DEFAULT_SIZE2;
      if (offset + size[unit] > transformSize + mergedBasicSize) {
        endIndex = i - 1;
        break;
      }
    }
    let startIndex = 0;
    for (let i = len - 1; i >= 0; i -= 1) {
      const offset = getOffset(i);
      if (offset < transformSize) {
        startIndex = i + 1;
        break;
      }
    }
    const startHiddenTabs = tabs.slice(0, startIndex);
    const endHiddenTabs = tabs.slice(endIndex + 1);
    this.hiddenItems = [...startHiddenTabs, ...endHiddenTabs];
    this.cdr.markForCheck();
  }
  getLayoutDirection() {
    return this.dir && this.dir.value === "rtl" ? "rtl" : "ltr";
  }
  setTabFocus(_tabIndex) {
  }
  ngOnChanges(changes) {
    const {
      position
    } = changes;
    if (position && !position.isFirstChange()) {
      this.alignInkBarToSelectedTab();
      this.lockAnimation();
      this.updateScrollListPosition();
    }
  }
  static {
    this.\u0275fac = function NzTabNavBarComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTabNavBarComponent)(\u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ViewportRuler), \u0275\u0275directiveInject(NzResizeObserver), \u0275\u0275directiveInject(Directionality));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzTabNavBarComponent,
      selectors: [["nz-tabs-nav"]],
      contentQueries: function NzTabNavBarComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          \u0275\u0275contentQuery(dirIndex, NzTabNavItemDirective, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.items = _t);
        }
      },
      viewQuery: function NzTabNavBarComponent_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(_c29, 7);
          \u0275\u0275viewQuery(_c35, 7);
          \u0275\u0275viewQuery(NzTabNavOperationComponent, 7);
          \u0275\u0275viewQuery(NzTabAddButtonComponent, 5);
          \u0275\u0275viewQuery(NzTabsInkBarDirective, 7);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.navWarpRef = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.navListRef = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.operationRef = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.addBtnRef = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.inkBar = _t.first);
        }
      },
      hostAttrs: [1, "ant-tabs-nav"],
      hostBindings: function NzTabNavBarComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275listener("keydown", function NzTabNavBarComponent_keydown_HostBindingHandler($event) {
            return ctx.handleKeydown($event);
          });
        }
      },
      inputs: {
        position: "position",
        addable: [2, "addable", "addable", booleanAttribute],
        hideBar: [2, "hideBar", "hideBar", booleanAttribute],
        addIcon: "addIcon",
        inkBarAnimated: "inkBarAnimated",
        extraTemplate: "extraTemplate",
        selectedIndex: "selectedIndex"
      },
      outputs: {
        indexFocused: "indexFocused",
        selectFocusedIndex: "selectFocusedIndex",
        addClicked: "addClicked",
        tabScroll: "tabScroll"
      },
      exportAs: ["nzTabsNav"],
      features: [\u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature],
      ngContentSelectors: _c44,
      decls: 9,
      vars: 16,
      consts: [["navWarp", ""], ["navList", ""], [1, "ant-tabs-nav-wrap"], ["nzTabScrollList", "", "role", "tablist", 1, "ant-tabs-nav-list", 3, "offsetChange", "tabScroll"], ["role", "tab", "nz-tab-add-button", "", 3, "addIcon"], ["nz-tabs-ink-bar", "", 3, "hidden", "position", "animated"], [3, "addClicked", "selected", "addIcon", "addable", "items"], [1, "ant-tabs-extra-content"], ["role", "tab", "nz-tab-add-button", "", 3, "click", "addIcon"], [3, "ngTemplateOutlet"]],
      template: function NzTabNavBarComponent_Template(rf, ctx) {
        if (rf & 1) {
          const _r1 = \u0275\u0275getCurrentView();
          \u0275\u0275projectionDef();
          \u0275\u0275elementStart(0, "div", 2, 0)(2, "div", 3, 1);
          \u0275\u0275listener("offsetChange", function NzTabNavBarComponent_Template_div_offsetChange_2_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.onOffsetChange($event));
          })("tabScroll", function NzTabNavBarComponent_Template_div_tabScroll_2_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.tabScroll.emit($event));
          });
          \u0275\u0275projection(4);
          \u0275\u0275template(5, NzTabNavBarComponent_Conditional_5_Template, 1, 2, "button", 4);
          \u0275\u0275element(6, "div", 5);
          \u0275\u0275elementEnd()();
          \u0275\u0275elementStart(7, "nz-tab-nav-operation", 6);
          \u0275\u0275listener("addClicked", function NzTabNavBarComponent_Template_nz_tab_nav_operation_addClicked_7_listener() {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.addClicked.emit());
          })("selected", function NzTabNavBarComponent_Template_nz_tab_nav_operation_selected_7_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.onSelectedFromMenu($event));
          });
          \u0275\u0275elementEnd();
          \u0275\u0275template(8, NzTabNavBarComponent_Conditional_8_Template, 2, 1, "div", 7);
        }
        if (rf & 2) {
          \u0275\u0275classProp("ant-tabs-nav-wrap-ping-left", ctx.pingLeft)("ant-tabs-nav-wrap-ping-right", ctx.pingRight)("ant-tabs-nav-wrap-ping-top", ctx.pingTop)("ant-tabs-nav-wrap-ping-bottom", ctx.pingBottom);
          \u0275\u0275advance(5);
          \u0275\u0275conditional(ctx.showAddButton ? 5 : -1);
          \u0275\u0275advance();
          \u0275\u0275property("hidden", ctx.hideBar)("position", ctx.position)("animated", ctx.inkBarAnimated);
          \u0275\u0275advance();
          \u0275\u0275property("addIcon", ctx.addIcon)("addable", ctx.addable)("items", ctx.hiddenItems);
          \u0275\u0275advance();
          \u0275\u0275conditional(ctx.extraTemplate ? 8 : -1);
        }
      },
      dependencies: [NzTabScrollListDirective, NzTabAddButtonComponent, NzTabsInkBarDirective, NzTabNavOperationComponent, NgTemplateOutlet],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTabNavBarComponent, [{
    type: Component,
    args: [{
      selector: "nz-tabs-nav",
      exportAs: "nzTabsNav",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      template: `
    <div
      class="ant-tabs-nav-wrap"
      [class.ant-tabs-nav-wrap-ping-left]="pingLeft"
      [class.ant-tabs-nav-wrap-ping-right]="pingRight"
      [class.ant-tabs-nav-wrap-ping-top]="pingTop"
      [class.ant-tabs-nav-wrap-ping-bottom]="pingBottom"
      #navWarp
    >
      <div
        class="ant-tabs-nav-list"
        #navList
        nzTabScrollList
        (offsetChange)="onOffsetChange($event)"
        (tabScroll)="tabScroll.emit($event)"
        role="tablist"
      >
        <ng-content></ng-content>
        @if (showAddButton) {
          <button
            role="tab"
            [attr.tabindex]="-1"
            nz-tab-add-button
            [addIcon]="addIcon"
            (click)="addClicked.emit()"
          ></button>
        }
        <div nz-tabs-ink-bar [hidden]="hideBar" [position]="position" [animated]="inkBarAnimated"></div>
      </div>
    </div>
    <nz-tab-nav-operation
      (addClicked)="addClicked.emit()"
      (selected)="onSelectedFromMenu($event)"
      [addIcon]="addIcon"
      [addable]="addable"
      [items]="hiddenItems"
    ></nz-tab-nav-operation>
    @if (extraTemplate) {
      <div class="ant-tabs-extra-content">
        <ng-template [ngTemplateOutlet]="extraTemplate"></ng-template>
      </div>
    }
  `,
      host: {
        class: "ant-tabs-nav",
        "(keydown)": "handleKeydown($event)"
      },
      imports: [NzTabScrollListDirective, NzTabAddButtonComponent, NzTabsInkBarDirective, NzTabNavOperationComponent, NgTemplateOutlet]
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: NgZone
  }, {
    type: ViewportRuler
  }, {
    type: NzResizeObserver
  }, {
    type: Directionality
  }], {
    indexFocused: [{
      type: Output
    }],
    selectFocusedIndex: [{
      type: Output
    }],
    addClicked: [{
      type: Output
    }],
    tabScroll: [{
      type: Output
    }],
    position: [{
      type: Input
    }],
    addable: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    hideBar: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    addIcon: [{
      type: Input
    }],
    inkBarAnimated: [{
      type: Input
    }],
    extraTemplate: [{
      type: Input
    }],
    selectedIndex: [{
      type: Input
    }],
    navWarpRef: [{
      type: ViewChild,
      args: ["navWarp", {
        static: true
      }]
    }],
    navListRef: [{
      type: ViewChild,
      args: ["navList", {
        static: true
      }]
    }],
    operationRef: [{
      type: ViewChild,
      args: [NzTabNavOperationComponent, {
        static: true
      }]
    }],
    addBtnRef: [{
      type: ViewChild,
      args: [NzTabAddButtonComponent, {
        static: false
      }]
    }],
    inkBar: [{
      type: ViewChild,
      args: [NzTabsInkBarDirective, {
        static: true
      }]
    }],
    items: [{
      type: ContentChildren,
      args: [NzTabNavItemDirective, {
        descendants: true
      }]
    }]
  });
})();
var NzTabBodyComponent = class _NzTabBodyComponent {
  constructor() {
    this.content = null;
    this.active = false;
    this.animated = true;
  }
  static {
    this.\u0275fac = function NzTabBodyComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTabBodyComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzTabBodyComponent,
      selectors: [["", "nz-tab-body", ""]],
      hostAttrs: [1, "ant-tabs-tabpane"],
      hostVars: 10,
      hostBindings: function NzTabBodyComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275syntheticHostProperty("@tabSwitchMotion", ctx.active ? "enter" : "leave")("@.disabled", !ctx.animated);
          \u0275\u0275attribute("tabindex", ctx.active ? 0 : -1)("aria-hidden", !ctx.active);
          \u0275\u0275styleProp("overflow-y", ctx.animated ? ctx.active ? null : "none" : null);
          \u0275\u0275classProp("ant-tabs-tabpane-active", ctx.active)("ant-tabs-tabpane-hidden", ctx.animated ? null : !ctx.active);
        }
      },
      inputs: {
        content: "content",
        active: "active",
        animated: "animated"
      },
      exportAs: ["nzTabBody"],
      attrs: _c52,
      decls: 1,
      vars: 1,
      consts: [[3, "ngTemplateOutlet"]],
      template: function NzTabBodyComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275template(0, NzTabBodyComponent_ng_template_0_Template, 0, 0, "ng-template", 0);
        }
        if (rf & 2) {
          \u0275\u0275property("ngTemplateOutlet", ctx.content);
        }
      },
      dependencies: [NgTemplateOutlet],
      encapsulation: 2,
      data: {
        animation: [tabSwitchMotion]
      },
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTabBodyComponent, [{
    type: Component,
    args: [{
      selector: "[nz-tab-body]",
      exportAs: "nzTabBody",
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: ` <ng-template [ngTemplateOutlet]="content"></ng-template> `,
      host: {
        class: "ant-tabs-tabpane",
        "[class.ant-tabs-tabpane-active]": "active",
        "[class.ant-tabs-tabpane-hidden]": "animated ? null : !active",
        "[attr.tabindex]": "active ? 0 : -1",
        "[attr.aria-hidden]": "!active",
        "[style.overflow-y]": 'animated ? active ? null : "none" : null',
        "[@tabSwitchMotion]": `active ? 'enter' : 'leave'`,
        "[@.disabled]": `!animated`
      },
      imports: [NgTemplateOutlet],
      animations: [tabSwitchMotion]
    }]
  }], null, {
    content: [{
      type: Input
    }],
    active: [{
      type: Input
    }],
    animated: [{
      type: Input
    }]
  });
})();
var NzTabCloseButtonComponent = class _NzTabCloseButtonComponent {
  constructor() {
    this.closeIcon = "close";
  }
  static {
    this.\u0275fac = function NzTabCloseButtonComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTabCloseButtonComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzTabCloseButtonComponent,
      selectors: [["nz-tab-close-button"], ["button", "nz-tab-close-button", ""]],
      hostAttrs: ["aria-label", "Close tab", "type", "button", 1, "ant-tabs-tab-remove"],
      inputs: {
        closeIcon: "closeIcon"
      },
      decls: 1,
      vars: 1,
      consts: [[4, "nzStringTemplateOutlet"], ["nzTheme", "outline", 3, "nzType"]],
      template: function NzTabCloseButtonComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275template(0, NzTabCloseButtonComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        }
        if (rf & 2) {
          \u0275\u0275property("nzStringTemplateOutlet", ctx.closeIcon);
        }
      },
      dependencies: [NzOutletModule, NzStringTemplateOutletDirective, NzIconModule, NzIconDirective],
      encapsulation: 2
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTabCloseButtonComponent, [{
    type: Component,
    args: [{
      selector: "nz-tab-close-button, button[nz-tab-close-button]",
      template: `
    <ng-container *nzStringTemplateOutlet="closeIcon; let icon">
      <nz-icon [nzType]="icon" nzTheme="outline" />
    </ng-container>
  `,
      host: {
        class: "ant-tabs-tab-remove",
        "aria-label": "Close tab",
        type: "button"
      },
      imports: [NzOutletModule, NzIconModule]
    }]
  }], null, {
    closeIcon: [{
      type: Input
    }]
  });
})();
var NzTabLinkTemplateDirective = class _NzTabLinkTemplateDirective {
  constructor() {
    this.templateRef = inject(TemplateRef, {
      host: true
    });
  }
  static {
    this.\u0275fac = function NzTabLinkTemplateDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTabLinkTemplateDirective)();
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTabLinkTemplateDirective,
      selectors: [["ng-template", "nzTabLink", ""]],
      exportAs: ["nzTabLinkTemplate"]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTabLinkTemplateDirective, [{
    type: Directive,
    args: [{
      selector: "ng-template[nzTabLink]",
      exportAs: "nzTabLinkTemplate"
    }]
  }], null, null);
})();
var NzTabLinkDirective = class _NzTabLinkDirective {
  constructor(elementRef) {
    this.elementRef = elementRef;
    this.routerLink = inject(RouterLink, {
      self: true,
      optional: true
    });
  }
  static {
    this.\u0275fac = function NzTabLinkDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTabLinkDirective)(\u0275\u0275directiveInject(ElementRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTabLinkDirective,
      selectors: [["a", "nz-tab-link", ""]],
      exportAs: ["nzTabLink"]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTabLinkDirective, [{
    type: Directive,
    args: [{
      selector: "a[nz-tab-link]",
      exportAs: "nzTabLink"
    }]
  }], () => [{
    type: ElementRef
  }], null);
})();
var NzTabDirective = class _NzTabDirective {
  static {
    this.\u0275fac = function NzTabDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTabDirective)();
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTabDirective,
      selectors: [["", "nz-tab", ""]],
      exportAs: ["nzTab"]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTabDirective, [{
    type: Directive,
    args: [{
      selector: "[nz-tab]",
      exportAs: "nzTab"
    }]
  }], null, null);
})();
var NZ_TAB_SET = new InjectionToken("NZ_TAB_SET");
var NzTabComponent = class _NzTabComponent {
  constructor() {
    this.nzTitle = "";
    this.nzClosable = false;
    this.nzCloseIcon = "close";
    this.nzDisabled = false;
    this.nzForceRender = false;
    this.nzSelect = new EventEmitter();
    this.nzDeselect = new EventEmitter();
    this.nzClick = new EventEmitter();
    this.nzContextmenu = new EventEmitter();
    this.template = null;
    this.isActive = false;
    this.hasBeenActive = false;
    this.position = null;
    this.origin = null;
    this.closestTabSet = inject(NZ_TAB_SET);
    this.stateChanges = new Subject();
  }
  get content() {
    return this.template || this.contentTemplate;
  }
  get label() {
    return this.nzTitle || this.nzTabLinkTemplateDirective?.templateRef;
  }
  ngOnChanges(changes) {
    const {
      nzTitle,
      nzDisabled,
      nzForceRender
    } = changes;
    if (nzTitle || nzDisabled || nzForceRender) {
      this.stateChanges.next();
    }
  }
  ngOnDestroy() {
    this.stateChanges.complete();
  }
  setActive(active) {
    this.isActive = active;
    if (active) {
      this.hasBeenActive = true;
    }
  }
  static {
    this.\u0275fac = function NzTabComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTabComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzTabComponent,
      selectors: [["nz-tab"]],
      contentQueries: function NzTabComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          \u0275\u0275contentQuery(dirIndex, NzTabLinkTemplateDirective, 5);
          \u0275\u0275contentQuery(dirIndex, NzTabDirective, 5, TemplateRef);
          \u0275\u0275contentQuery(dirIndex, NzTabLinkDirective, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.nzTabLinkTemplateDirective = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.template = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.linkDirective = _t.first);
        }
      },
      viewQuery: function NzTabComponent_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(_c62, 7);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.contentTemplate = _t.first);
        }
      },
      inputs: {
        nzTitle: "nzTitle",
        nzClosable: [2, "nzClosable", "nzClosable", booleanAttribute],
        nzCloseIcon: "nzCloseIcon",
        nzDisabled: [2, "nzDisabled", "nzDisabled", booleanAttribute],
        nzForceRender: [2, "nzForceRender", "nzForceRender", booleanAttribute]
      },
      outputs: {
        nzSelect: "nzSelect",
        nzDeselect: "nzDeselect",
        nzClick: "nzClick",
        nzContextmenu: "nzContextmenu"
      },
      exportAs: ["nzTab"],
      features: [\u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature],
      ngContentSelectors: _c82,
      decls: 4,
      vars: 0,
      consts: [["tabLinkTemplate", ""], ["contentTemplate", ""]],
      template: function NzTabComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef(_c72);
          \u0275\u0275template(0, NzTabComponent_ng_template_0_Template, 1, 0, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(2, NzTabComponent_ng_template_2_Template, 1, 0, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTabComponent, [{
    type: Component,
    args: [{
      selector: "nz-tab",
      exportAs: "nzTab",
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    <ng-template #tabLinkTemplate>
      <ng-content select="[nz-tab-link]"></ng-content>
    </ng-template>
    <ng-template #contentTemplate><ng-content></ng-content></ng-template>
  `
    }]
  }], null, {
    nzTitle: [{
      type: Input
    }],
    nzClosable: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzCloseIcon: [{
      type: Input
    }],
    nzDisabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzForceRender: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzSelect: [{
      type: Output
    }],
    nzDeselect: [{
      type: Output
    }],
    nzClick: [{
      type: Output
    }],
    nzContextmenu: [{
      type: Output
    }],
    nzTabLinkTemplateDirective: [{
      type: ContentChild,
      args: [NzTabLinkTemplateDirective, {
        static: false
      }]
    }],
    template: [{
      type: ContentChild,
      args: [NzTabDirective, {
        static: false,
        read: TemplateRef
      }]
    }],
    linkDirective: [{
      type: ContentChild,
      args: [NzTabLinkDirective, {
        static: false
      }]
    }],
    contentTemplate: [{
      type: ViewChild,
      args: ["contentTemplate", {
        static: true
      }]
    }]
  });
})();
var NzTabChangeEvent = class {
};
var NZ_CONFIG_MODULE_NAME7 = "tabs";
var nextId = 0;
var NzTabSetComponent = (() => {
  let _nzType_decorators;
  let _nzType_initializers = [];
  let _nzType_extraInitializers = [];
  let _nzSize_decorators;
  let _nzSize_initializers = [];
  let _nzSize_extraInitializers = [];
  let _nzAnimated_decorators;
  let _nzAnimated_initializers = [];
  let _nzAnimated_extraInitializers = [];
  let _nzTabBarGutter_decorators;
  let _nzTabBarGutter_initializers = [];
  let _nzTabBarGutter_extraInitializers = [];
  return class NzTabSetComponent2 {
    static {
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
      _nzType_decorators = [WithConfig()];
      _nzSize_decorators = [WithConfig()];
      _nzAnimated_decorators = [WithConfig()];
      _nzTabBarGutter_decorators = [WithConfig()];
      __esDecorate(null, null, _nzType_decorators, {
        kind: "field",
        name: "nzType",
        static: false,
        private: false,
        access: {
          has: (obj) => "nzType" in obj,
          get: (obj) => obj.nzType,
          set: (obj, value) => {
            obj.nzType = value;
          }
        },
        metadata: _metadata
      }, _nzType_initializers, _nzType_extraInitializers);
      __esDecorate(null, null, _nzSize_decorators, {
        kind: "field",
        name: "nzSize",
        static: false,
        private: false,
        access: {
          has: (obj) => "nzSize" in obj,
          get: (obj) => obj.nzSize,
          set: (obj, value) => {
            obj.nzSize = value;
          }
        },
        metadata: _metadata
      }, _nzSize_initializers, _nzSize_extraInitializers);
      __esDecorate(null, null, _nzAnimated_decorators, {
        kind: "field",
        name: "nzAnimated",
        static: false,
        private: false,
        access: {
          has: (obj) => "nzAnimated" in obj,
          get: (obj) => obj.nzAnimated,
          set: (obj, value) => {
            obj.nzAnimated = value;
          }
        },
        metadata: _metadata
      }, _nzAnimated_initializers, _nzAnimated_extraInitializers);
      __esDecorate(null, null, _nzTabBarGutter_decorators, {
        kind: "field",
        name: "nzTabBarGutter",
        static: false,
        private: false,
        access: {
          has: (obj) => "nzTabBarGutter" in obj,
          get: (obj) => obj.nzTabBarGutter,
          set: (obj, value) => {
            obj.nzTabBarGutter = value;
          }
        },
        metadata: _metadata
      }, _nzTabBarGutter_initializers, _nzTabBarGutter_extraInitializers);
      if (_metadata) Object.defineProperty(this, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    }
    get nzSelectedIndex() {
      return this.selectedIndex;
    }
    set nzSelectedIndex(value) {
      this.indexToSelect = coerceNumberProperty(value, null);
    }
    get position() {
      return ["top", "bottom"].indexOf(this.nzTabPosition) === -1 ? "vertical" : "horizontal";
    }
    get addable() {
      return this.nzType === "editable-card" && !this.nzHideAdd;
    }
    get closable() {
      return this.nzType === "editable-card";
    }
    get line() {
      return this.nzType === "line";
    }
    get inkBarAnimated() {
      return this.line && (typeof this.nzAnimated === "boolean" ? this.nzAnimated : this.nzAnimated.inkBar);
    }
    get tabPaneAnimated() {
      return typeof this.nzAnimated === "boolean" ? this.nzAnimated : this.nzAnimated.tabPane;
    }
    constructor(nzConfigService, ngZone, cdr, directionality) {
      this.nzConfigService = nzConfigService;
      this.ngZone = ngZone;
      this.cdr = cdr;
      this.directionality = directionality;
      this._nzModuleName = NZ_CONFIG_MODULE_NAME7;
      this.nzTabPosition = "top";
      this.nzCanDeactivate = null;
      this.nzAddIcon = "plus";
      this.nzTabBarStyle = null;
      this.nzType = __runInitializers(this, _nzType_initializers, "line");
      this.nzSize = (__runInitializers(this, _nzType_extraInitializers), __runInitializers(this, _nzSize_initializers, "default"));
      this.nzAnimated = (__runInitializers(this, _nzSize_extraInitializers), __runInitializers(this, _nzAnimated_initializers, true));
      this.nzTabBarGutter = (__runInitializers(this, _nzAnimated_extraInitializers), __runInitializers(this, _nzTabBarGutter_initializers, void 0));
      this.nzHideAdd = (__runInitializers(this, _nzTabBarGutter_extraInitializers), false);
      this.nzCentered = false;
      this.nzHideAll = false;
      this.nzLinkRouter = false;
      this.nzLinkExact = true;
      this.nzDestroyInactiveTabPane = false;
      this.nzSelectChange = new EventEmitter(true);
      this.nzSelectedIndexChange = new EventEmitter();
      this.nzTabListScroll = new EventEmitter();
      this.nzClose = new EventEmitter();
      this.nzAdd = new EventEmitter();
      this.allTabs = new QueryList();
      this.tabs = new QueryList();
      this.dir = "ltr";
      this.destroy$ = new Subject();
      this.indexToSelect = 0;
      this.selectedIndex = null;
      this.tabLabelSubscription = Subscription.EMPTY;
      this.tabsSubscription = Subscription.EMPTY;
      this.canDeactivateSubscription = Subscription.EMPTY;
      this.router = inject(Router, {
        optional: true
      });
      this.tabSetId = nextId++;
    }
    ngOnInit() {
      this.dir = this.directionality.value;
      this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
        this.dir = direction;
        this.cdr.detectChanges();
      });
    }
    ngOnDestroy() {
      this.destroy$.next();
      this.destroy$.complete();
      this.tabs.destroy();
      this.tabLabelSubscription.unsubscribe();
      this.tabsSubscription.unsubscribe();
      this.canDeactivateSubscription.unsubscribe();
    }
    ngAfterContentInit() {
      this.ngZone.runOutsideAngular(() => {
        Promise.resolve().then(() => this.setUpRouter());
      });
      this.subscribeToTabLabels();
      this.subscribeToAllTabChanges();
      this.tabsSubscription = this.tabs.changes.subscribe(() => {
        const indexToSelect = this.clampTabIndex(this.indexToSelect);
        if (indexToSelect === this.selectedIndex) {
          const tabs = this.tabs.toArray();
          for (let i = 0; i < tabs.length; i++) {
            if (tabs[i].isActive) {
              this.indexToSelect = this.selectedIndex = i;
              break;
            }
          }
        }
        this.subscribeToTabLabels();
        this.cdr.markForCheck();
      });
    }
    ngAfterContentChecked() {
      const indexToSelect = this.indexToSelect = this.clampTabIndex(this.indexToSelect);
      if (this.selectedIndex !== indexToSelect) {
        const isFirstRun = this.selectedIndex == null;
        if (!isFirstRun) {
          this.nzSelectChange.emit(this.createChangeEvent(indexToSelect));
        }
        Promise.resolve().then(() => {
          this.tabs.forEach((tab, index) => tab.setActive(index === indexToSelect));
          if (!isFirstRun) {
            this.nzSelectedIndexChange.emit(indexToSelect);
          }
        });
      }
      this.tabs.forEach((tab, index) => {
        tab.position = index - indexToSelect;
        if (this.selectedIndex != null && tab.position === 0 && !tab.origin) {
          tab.origin = indexToSelect - this.selectedIndex;
        }
      });
      if (this.selectedIndex !== indexToSelect) {
        this.selectedIndex = indexToSelect;
        this.cdr.markForCheck();
      }
    }
    onClose(index, e) {
      e.preventDefault();
      e.stopPropagation();
      this.nzClose.emit({
        index
      });
    }
    onAdd() {
      this.nzAdd.emit();
    }
    clampTabIndex(index) {
      return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));
    }
    createChangeEvent(index) {
      const event2 = new NzTabChangeEvent();
      event2.index = index;
      if (this.tabs && this.tabs.length) {
        event2.tab = this.tabs.toArray()[index];
        this.tabs.forEach((tab, i) => {
          if (i !== index) {
            tab.nzDeselect.emit();
          }
        });
        event2.tab.nzSelect.emit();
      }
      return event2;
    }
    subscribeToTabLabels() {
      if (this.tabLabelSubscription) {
        this.tabLabelSubscription.unsubscribe();
      }
      this.tabLabelSubscription = merge(...this.tabs.map((tab) => tab.stateChanges)).subscribe(() => this.cdr.markForCheck());
    }
    subscribeToAllTabChanges() {
      this.allTabs.changes.pipe(startWith(this.allTabs)).subscribe((tabs) => {
        this.tabs.reset(tabs.filter((tab) => tab.closestTabSet === this));
        this.tabs.notifyOnChanges();
      });
    }
    canDeactivateFun(pre, next) {
      if (typeof this.nzCanDeactivate === "function") {
        const observable = wrapIntoObservable(this.nzCanDeactivate(pre, next));
        return observable.pipe(first(), takeUntil(this.destroy$));
      } else {
        return of(true);
      }
    }
    clickNavItem(tab, index, e) {
      if (!tab.nzDisabled) {
        tab.nzClick.emit();
        if (!this.isRouterLinkClickEvent(index, e)) {
          this.setSelectedIndex(index);
        }
      }
    }
    isRouterLinkClickEvent(index, event2) {
      const target = event2.target;
      if (this.nzLinkRouter) {
        return !!this.tabs.toArray()[index]?.linkDirective?.elementRef.nativeElement.contains(target);
      } else {
        return false;
      }
    }
    contextmenuNavItem(tab, e) {
      if (!tab.nzDisabled) {
        tab.nzContextmenu.emit(e);
      }
    }
    setSelectedIndex(index) {
      this.canDeactivateSubscription.unsubscribe();
      this.canDeactivateSubscription = this.canDeactivateFun(this.selectedIndex, index).subscribe((can) => {
        if (can) {
          this.nzSelectedIndex = index;
          this.tabNavBarRef.focusIndex = index;
          this.cdr.markForCheck();
        }
      });
    }
    getTabIndex(tab, index) {
      if (tab.nzDisabled) {
        return null;
      }
      return this.selectedIndex === index ? 0 : -1;
    }
    getTabContentId(i) {
      return `nz-tabs-${this.tabSetId}-tab-${i}`;
    }
    setUpRouter() {
      if (this.nzLinkRouter) {
        if (!this.router) {
          throw new Error(`${PREFIX} you should import 'RouterModule' if you want to use 'nzLinkRouter'!`);
        }
        this.router.events.pipe(takeUntil(this.destroy$), filter((e) => e instanceof NavigationEnd), startWith(true), delay(0)).subscribe(() => {
          this.updateRouterActive();
          this.cdr.markForCheck();
        });
      }
    }
    updateRouterActive() {
      if (this.router?.navigated) {
        const index = this.findShouldActiveTabIndex();
        if (index !== this.selectedIndex) {
          this.setSelectedIndex(index);
        }
        this.nzHideAll = index === -1;
      }
    }
    findShouldActiveTabIndex() {
      const tabs = this.tabs.toArray();
      const isActive = this.isLinkActive(this.router);
      return tabs.findIndex((tab) => {
        const c = tab.linkDirective;
        return c ? isActive(c.routerLink) : false;
      });
    }
    isLinkActive(router) {
      return (link) => link ? !!router?.isActive(link.urlTree || "", {
        paths: this.nzLinkExact ? "exact" : "subset",
        queryParams: this.nzLinkExact ? "exact" : "subset",
        fragment: "ignored",
        matrixParams: "ignored"
      }) : false;
    }
    static {
      this.\u0275fac = function NzTabSetComponent_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || NzTabSetComponent2)(\u0275\u0275directiveInject(NzConfigService), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(Directionality));
      };
    }
    static {
      this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
        type: NzTabSetComponent2,
        selectors: [["nz-tabset"]],
        contentQueries: function NzTabSetComponent_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            \u0275\u0275contentQuery(dirIndex, NzTabComponent, 5);
          }
          if (rf & 2) {
            let _t;
            \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.allTabs = _t);
          }
        },
        viewQuery: function NzTabSetComponent_Query(rf, ctx) {
          if (rf & 1) {
            \u0275\u0275viewQuery(NzTabNavBarComponent, 5);
          }
          if (rf & 2) {
            let _t;
            \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.tabNavBarRef = _t.first);
          }
        },
        hostAttrs: [1, "ant-tabs"],
        hostVars: 24,
        hostBindings: function NzTabSetComponent_HostBindings(rf, ctx) {
          if (rf & 2) {
            \u0275\u0275classProp("ant-tabs-card", ctx.nzType === "card" || ctx.nzType === "editable-card")("ant-tabs-editable", ctx.nzType === "editable-card")("ant-tabs-editable-card", ctx.nzType === "editable-card")("ant-tabs-centered", ctx.nzCentered)("ant-tabs-rtl", ctx.dir === "rtl")("ant-tabs-top", ctx.nzTabPosition === "top")("ant-tabs-bottom", ctx.nzTabPosition === "bottom")("ant-tabs-left", ctx.nzTabPosition === "left")("ant-tabs-right", ctx.nzTabPosition === "right")("ant-tabs-default", ctx.nzSize === "default")("ant-tabs-small", ctx.nzSize === "small")("ant-tabs-large", ctx.nzSize === "large");
          }
        },
        inputs: {
          nzSelectedIndex: "nzSelectedIndex",
          nzTabPosition: "nzTabPosition",
          nzTabBarExtraContent: "nzTabBarExtraContent",
          nzCanDeactivate: "nzCanDeactivate",
          nzAddIcon: "nzAddIcon",
          nzTabBarStyle: "nzTabBarStyle",
          nzType: "nzType",
          nzSize: "nzSize",
          nzAnimated: "nzAnimated",
          nzTabBarGutter: "nzTabBarGutter",
          nzHideAdd: [2, "nzHideAdd", "nzHideAdd", booleanAttribute],
          nzCentered: [2, "nzCentered", "nzCentered", booleanAttribute],
          nzHideAll: [2, "nzHideAll", "nzHideAll", booleanAttribute],
          nzLinkRouter: [2, "nzLinkRouter", "nzLinkRouter", booleanAttribute],
          nzLinkExact: [2, "nzLinkExact", "nzLinkExact", booleanAttribute],
          nzDestroyInactiveTabPane: [2, "nzDestroyInactiveTabPane", "nzDestroyInactiveTabPane", booleanAttribute]
        },
        outputs: {
          nzSelectChange: "nzSelectChange",
          nzSelectedIndexChange: "nzSelectedIndexChange",
          nzTabListScroll: "nzTabListScroll",
          nzClose: "nzClose",
          nzAdd: "nzAdd"
        },
        exportAs: ["nzTabset"],
        features: [\u0275\u0275ProvidersFeature([{
          provide: NZ_TAB_SET,
          useExisting: forwardRef(() => NzTabSetComponent2)
        }]), \u0275\u0275InputTransformsFeature],
        decls: 4,
        vars: 12,
        consts: [["tabpaneTmpl", ""], [3, "style", "selectedIndex", "inkBarAnimated", "addable", "addIcon", "hideBar", "position", "extraTemplate"], [1, "ant-tabs-content-holder"], [1, "ant-tabs-content"], [3, "tabScroll", "selectFocusedIndex", "addClicked", "selectedIndex", "inkBarAnimated", "addable", "addIcon", "hideBar", "position", "extraTemplate"], [1, "ant-tabs-tab", 3, "margin-right", "margin-bottom", "ant-tabs-tab-active", "ant-tabs-tab-disabled"], [1, "ant-tabs-tab", 3, "click", "contextmenu"], ["type", "button", "role", "tab", "nzTabNavItem", "", "cdkMonitorElementFocus", "", 1, "ant-tabs-tab-btn", 3, "id", "disabled", "tab", "active"], [4, "nzStringTemplateOutlet", "nzStringTemplateOutletContext"], ["type", "button", "nz-tab-close-button", "", 3, "closeIcon"], ["type", "button", "nz-tab-close-button", "", 3, "click", "closeIcon"], [3, "ngTemplateOutlet"], ["role", "tabpanel", "nz-tab-body", "", 3, "id", "active", "content", "animated"]],
        template: function NzTabSetComponent_Template(rf, ctx) {
          if (rf & 1) {
            \u0275\u0275template(0, NzTabSetComponent_Conditional_0_Template, 3, 9, "nz-tabs-nav", 1);
            \u0275\u0275elementStart(1, "div", 2)(2, "div", 3);
            \u0275\u0275template(3, NzTabSetComponent_Conditional_3_Template, 2, 0);
            \u0275\u0275elementEnd()();
          }
          if (rf & 2) {
            \u0275\u0275conditional(ctx.tabs.length || ctx.addable ? 0 : -1);
            \u0275\u0275advance(2);
            \u0275\u0275classProp("ant-tabs-content-top", ctx.nzTabPosition === "top")("ant-tabs-content-bottom", ctx.nzTabPosition === "bottom")("ant-tabs-content-left", ctx.nzTabPosition === "left")("ant-tabs-content-right", ctx.nzTabPosition === "right")("ant-tabs-content-animated", ctx.tabPaneAnimated);
            \u0275\u0275advance();
            \u0275\u0275conditional(!ctx.nzHideAll ? 3 : -1);
          }
        },
        dependencies: [NzTabNavBarComponent, NgTemplateOutlet, NzTabNavItemDirective, A11yModule, CdkMonitorFocus, NzOutletModule, NzStringTemplateOutletDirective, NzTabCloseButtonComponent, NzTabBodyComponent],
        encapsulation: 2
      });
    }
  };
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTabSetComponent, [{
    type: Component,
    args: [{
      selector: "nz-tabset",
      exportAs: "nzTabset",
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.Default,
      providers: [{
        provide: NZ_TAB_SET,
        useExisting: forwardRef(() => NzTabSetComponent)
      }],
      template: `
    @if (tabs.length || addable) {
      <nz-tabs-nav
        [style]="nzTabBarStyle"
        [selectedIndex]="nzSelectedIndex || 0"
        [inkBarAnimated]="inkBarAnimated"
        [addable]="addable"
        [addIcon]="nzAddIcon"
        [hideBar]="nzHideAll"
        [position]="position"
        [extraTemplate]="nzTabBarExtraContent"
        (tabScroll)="nzTabListScroll.emit($event)"
        (selectFocusedIndex)="setSelectedIndex($event)"
        (addClicked)="onAdd()"
      >
        @for (tab of tabs; track tab; let i = $index) {
          <div
            class="ant-tabs-tab"
            [style.margin-right.px]="position === 'horizontal' ? nzTabBarGutter : null"
            [style.margin-bottom.px]="position === 'vertical' ? nzTabBarGutter : null"
            [class.ant-tabs-tab-active]="nzSelectedIndex === i"
            [class.ant-tabs-tab-disabled]="tab.nzDisabled"
            (click)="clickNavItem(tab, i, $event)"
            (contextmenu)="contextmenuNavItem(tab, $event)"
          >
            <button
              type="button"
              role="tab"
              [id]="getTabContentId(i)"
              [attr.tabIndex]="getTabIndex(tab, i)"
              [attr.aria-disabled]="tab.nzDisabled"
              [attr.aria-selected]="nzSelectedIndex === i && !nzHideAll"
              [attr.aria-controls]="getTabContentId(i)"
              [disabled]="tab.nzDisabled"
              [tab]="tab"
              [active]="nzSelectedIndex === i"
              class="ant-tabs-tab-btn"
              nzTabNavItem
              cdkMonitorElementFocus
            >
              <ng-container *nzStringTemplateOutlet="tab.label; context: { visible: true }">{{
                tab.label
              }}</ng-container>
              @if (tab.nzClosable && closable && !tab.nzDisabled) {
                <button
                  type="button"
                  nz-tab-close-button
                  [closeIcon]="tab.nzCloseIcon"
                  (click)="onClose(i, $event)"
                ></button>
              }
            </button>
          </div>
        }
      </nz-tabs-nav>
    }
    <div class="ant-tabs-content-holder">
      <div
        class="ant-tabs-content"
        [class.ant-tabs-content-top]="nzTabPosition === 'top'"
        [class.ant-tabs-content-bottom]="nzTabPosition === 'bottom'"
        [class.ant-tabs-content-left]="nzTabPosition === 'left'"
        [class.ant-tabs-content-right]="nzTabPosition === 'right'"
        [class.ant-tabs-content-animated]="tabPaneAnimated"
      >
        @if (!nzHideAll) {
          @for (tab of tabs; track tab; let i = $index) {
            @if (tab.nzForceRender) {
              <ng-template [ngTemplateOutlet]="tabpaneTmpl"></ng-template>
            } @else if (nzDestroyInactiveTabPane) {
              @if (nzSelectedIndex === i) {
                <ng-template [ngTemplateOutlet]="tabpaneTmpl"></ng-template>
              }
            } @else {
              @if (nzSelectedIndex === i || tab.hasBeenActive) {
                <ng-template [ngTemplateOutlet]="tabpaneTmpl"></ng-template>
              }
            }

            <ng-template #tabpaneTmpl>
              <div
                role="tabpanel"
                [id]="getTabContentId(i)"
                [attr.aria-labelledby]="getTabContentId(i)"
                nz-tab-body
                [active]="nzSelectedIndex === i"
                [content]="tab.content"
                [animated]="tabPaneAnimated"
              ></div>
            </ng-template>
          }
        }
      </div>
    </div>
  `,
      host: {
        class: "ant-tabs",
        "[class.ant-tabs-card]": `nzType === 'card' || nzType === 'editable-card'`,
        "[class.ant-tabs-editable]": `nzType === 'editable-card'`,
        "[class.ant-tabs-editable-card]": `nzType === 'editable-card'`,
        "[class.ant-tabs-centered]": `nzCentered`,
        "[class.ant-tabs-rtl]": `dir === 'rtl'`,
        "[class.ant-tabs-top]": `nzTabPosition === 'top'`,
        "[class.ant-tabs-bottom]": `nzTabPosition === 'bottom'`,
        "[class.ant-tabs-left]": `nzTabPosition === 'left'`,
        "[class.ant-tabs-right]": `nzTabPosition === 'right'`,
        "[class.ant-tabs-default]": `nzSize === 'default'`,
        "[class.ant-tabs-small]": `nzSize === 'small'`,
        "[class.ant-tabs-large]": `nzSize === 'large'`
      },
      imports: [NzTabNavBarComponent, NgTemplateOutlet, NzTabNavItemDirective, A11yModule, NzOutletModule, NzTabCloseButtonComponent, NzTabBodyComponent]
    }]
  }], () => [{
    type: NzConfigService
  }, {
    type: NgZone
  }, {
    type: ChangeDetectorRef
  }, {
    type: Directionality
  }], {
    nzSelectedIndex: [{
      type: Input
    }],
    nzTabPosition: [{
      type: Input
    }],
    nzTabBarExtraContent: [{
      type: Input
    }],
    nzCanDeactivate: [{
      type: Input
    }],
    nzAddIcon: [{
      type: Input
    }],
    nzTabBarStyle: [{
      type: Input
    }],
    nzType: [{
      type: Input
    }],
    nzSize: [{
      type: Input
    }],
    nzAnimated: [{
      type: Input
    }],
    nzTabBarGutter: [{
      type: Input
    }],
    nzHideAdd: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzCentered: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzHideAll: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzLinkRouter: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzLinkExact: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzDestroyInactiveTabPane: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzSelectChange: [{
      type: Output
    }],
    nzSelectedIndexChange: [{
      type: Output
    }],
    nzTabListScroll: [{
      type: Output
    }],
    nzClose: [{
      type: Output
    }],
    nzAdd: [{
      type: Output
    }],
    allTabs: [{
      type: ContentChildren,
      args: [NzTabComponent, {
        descendants: true
      }]
    }],
    tabNavBarRef: [{
      type: ViewChild,
      args: [NzTabNavBarComponent, {
        static: false
      }]
    }]
  });
})();
var DIRECTIVES = [NzTabSetComponent, NzTabComponent, NzTabNavBarComponent, NzTabNavItemDirective, NzTabsInkBarDirective, NzTabScrollListDirective, NzTabNavOperationComponent, NzTabAddButtonComponent, NzTabCloseButtonComponent, NzTabDirective, NzTabBodyComponent, NzTabLinkDirective, NzTabLinkTemplateDirective];
var NzTabsModule = class _NzTabsModule {
  static {
    this.\u0275fac = function NzTabsModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTabsModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzTabsModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      imports: [NzTabSetComponent, NzTabNavBarComponent, NzTabNavOperationComponent, NzTabAddButtonComponent, NzTabCloseButtonComponent]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTabsModule, [{
    type: NgModule,
    args: [{
      imports: [DIRECTIVES],
      exports: [DIRECTIVES]
    }]
  }], null, null);
})();

// src/app/modules/management/pages/bus-templates/pages/bus-template-detail/bus-template-detail.component.ts
var _c022 = ["cellInput"];
var _c114 = (a0) => ({ "!border !border-blue-500 !bg-blue-200": a0 });
var _c210 = (a0) => ({ "show-icon": a0 });
var _c36 = () => ({ standalone: true });
function BusTemplateDetailComponent_form_5_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 20);
    \u0275\u0275listener("click", function BusTemplateDetailComponent_form_5_ng_template_8_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.busTemplateDetailForm.controls["name"].patchValue(""));
    });
    \u0275\u0275elementEnd();
  }
}
function BusTemplateDetailComponent_form_5_ng_template_10_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Vui l\xF2ng nh\u1EADp tr\u01B0\u1EDDng n\xE0y ");
  }
}
function BusTemplateDetailComponent_form_5_ng_template_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 21);
    \u0275\u0275template(1, BusTemplateDetailComponent_form_5_ng_template_10_Conditional_1_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275conditional((ctx_r2.busTemplateDetailForm.controls["name"].errors == null ? null : ctx_r2.busTemplateDetailForm.controls["name"].errors["required"]) ? 1 : -1);
  }
}
function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 20);
    \u0275\u0275listener("click", function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_ng_template_7_Template_span_click_0_listener() {
      let tmp_12_0;
      \u0275\u0275restoreView(_r6);
      const layout_r7 = \u0275\u0275nextContext().$implicit;
      return \u0275\u0275resetView((tmp_12_0 = layout_r7.get("name")) == null ? null : tmp_12_0.patchValue(""));
    });
    \u0275\u0275elementEnd();
  }
}
function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_ng_template_9_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Vui l\xF2ng nh\u1EADp tr\u01B0\u1EDDng n\xE0y ");
  }
}
function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_ng_template_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 21);
    \u0275\u0275template(1, BusTemplateDetailComponent_form_5_div_12_nz_tab_2_ng_template_9_Conditional_1_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_12_0;
    const layout_r7 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275conditional(((tmp_12_0 = layout_r7.get("name")) == null ? null : tmp_12_0.errors == null ? null : tmp_12_0.errors["required"]) ? 1 : -1);
  }
}
function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_button_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 37);
    \u0275\u0275listener("click", function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_button_20_Template_button_click_0_listener() {
      const seatType_r9 = \u0275\u0275restoreView(_r8).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r2.selectSeatType(seatType_r9._id));
    });
    \u0275\u0275element(1, "svg-icon", 38);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const seatType_r9 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext(4);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(3, _c114, ctx_r2.currentSeatTypeId == seatType_r9._id));
    \u0275\u0275advance();
    \u0275\u0275property("src", seatType_r9.icon)("svgClass", "h-8 w-8");
  }
}
function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_div_22_div_1_ng_container_2_div_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 47);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r13 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", cell_r13.name, " ");
  }
}
function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_div_22_div_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "svg-icon", 45);
    \u0275\u0275template(2, BusTemplateDetailComponent_form_5_div_12_nz_tab_2_div_22_div_1_ng_container_2_div_2_Template, 2, 1, "div", 46);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const cell_r13 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("src", cell_r13.icon)("svgClass", "h-16 w-16")("ngClass", \u0275\u0275pureFunction1(4, _c210, cell_r13.isSelected));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", cell_r13.allowAutoNameEdit && !cell_r13.isEditing);
  }
}
function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_div_22_div_1_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 48)(1, "input", 49, 5);
    \u0275\u0275twoWayListener("ngModelChange", function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_div_22_div_1_div_3_Template_input_ngModelChange_1_listener($event) {
      \u0275\u0275restoreView(_r14);
      const cell_r13 = \u0275\u0275nextContext().$implicit;
      \u0275\u0275twoWayBindingSet(cell_r13.name, $event) || (cell_r13.name = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("blur", function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_div_22_div_1_div_3_Template_input_blur_1_listener() {
      \u0275\u0275restoreView(_r14);
      const j_r11 = \u0275\u0275nextContext().index;
      const i_r12 = \u0275\u0275nextContext().index;
      const ctx_r2 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r2.saveEdit(i_r12, j_r11));
    })("keydown.enter", function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_div_22_div_1_div_3_Template_input_keydown_enter_1_listener() {
      \u0275\u0275restoreView(_r14);
      const j_r11 = \u0275\u0275nextContext().index;
      const i_r12 = \u0275\u0275nextContext().index;
      const ctx_r2 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r2.saveEdit(i_r12, j_r11));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const cell_r13 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275classProp("has-error", cell_r13.hasError);
    \u0275\u0275twoWayProperty("ngModel", cell_r13.name);
    \u0275\u0275property("ngModelOptions", \u0275\u0275pureFunction0(4, _c36));
  }
}
function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_div_22_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 41)(1, "div", 42);
    \u0275\u0275listener("mousedown", function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_div_22_div_1_Template_div_mousedown_1_listener($event) {
      const j_r11 = \u0275\u0275restoreView(_r10).index;
      const i_r12 = \u0275\u0275nextContext().index;
      const ctx_r2 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r2.onMouseDown(i_r12, j_r11, $event));
    })("mouseup", function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_div_22_div_1_Template_div_mouseup_1_listener($event) {
      const j_r11 = \u0275\u0275restoreView(_r10).index;
      const i_r12 = \u0275\u0275nextContext().index;
      const ctx_r2 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r2.onMouseUp(i_r12, j_r11, $event));
    })("mouseleave", function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_div_22_div_1_Template_div_mouseleave_1_listener($event) {
      \u0275\u0275restoreView(_r10);
      const ctx_r2 = \u0275\u0275nextContext(5);
      return \u0275\u0275resetView(ctx_r2.onMouseLeave($event));
    })("contextmenu", function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_div_22_div_1_Template_div_contextmenu_1_listener($event) {
      const j_r11 = \u0275\u0275restoreView(_r10).index;
      const i_r12 = \u0275\u0275nextContext().index;
      const ctx_r2 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r2.startEdit(i_r12, j_r11, $event));
    })("click", function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_div_22_div_1_Template_div_click_1_listener($event) {
      const j_r11 = \u0275\u0275restoreView(_r10).index;
      const i_r12 = \u0275\u0275nextContext().index;
      const ctx_r2 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r2.onClick(i_r12, j_r11, $event));
    });
    \u0275\u0275template(2, BusTemplateDetailComponent_form_5_div_12_nz_tab_2_div_22_div_1_ng_container_2_Template, 3, 6, "ng-container", 43);
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, BusTemplateDetailComponent_form_5_div_12_nz_tab_2_div_22_div_1_div_3_Template, 3, 5, "div", 44);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r13 = ctx.$implicit;
    const j_r11 = ctx.index;
    const i_r12 = \u0275\u0275nextContext().index;
    \u0275\u0275classMapInterpolate1("relative flex items-center justify-center status-", cell_r13.status, "");
    \u0275\u0275propertyInterpolate2("id", "cell-", i_r12, "-", j_r11, "");
    \u0275\u0275advance();
    \u0275\u0275classProp("cell", !cell_r13.isSelected)("selected", cell_r13.isSelected)("editing", cell_r13.isEditing)("has-error", cell_r13.hasError);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", cell_r13.typeId !== "");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", cell_r13.allowAutoNameEdit && cell_r13.isEditing);
  }
}
function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_div_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 39);
    \u0275\u0275template(1, BusTemplateDetailComponent_form_5_div_12_nz_tab_2_div_22_div_1_Template, 4, 16, "div", 40);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r15 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", row_r15);
  }
}
function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "nz-tab", 25)(1, "nz-form-item")(2, "nz-form-label", 26);
    \u0275\u0275text(3, "Layout Name");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "nz-form-control", 27)(5, "nz-input-group", 28);
    \u0275\u0275element(6, "input", 16);
    \u0275\u0275elementEnd();
    \u0275\u0275template(7, BusTemplateDetailComponent_form_5_div_12_nz_tab_2_ng_template_7_Template, 1, 0, "ng-template", null, 3, \u0275\u0275templateRefExtractor)(9, BusTemplateDetailComponent_form_5_div_12_nz_tab_2_ng_template_9_Template, 2, 1, "ng-template", null, 4, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(11, "div", 29)(12, "div", 30)(13, "div")(14, "label", 31);
    \u0275\u0275text(15, "Ch\u1ECDn Ki\u1EC3u:");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(16, "div", 32)(17, "button", 33);
    \u0275\u0275listener("click", function BusTemplateDetailComponent_form_5_div_12_nz_tab_2_Template_button_click_17_listener() {
      \u0275\u0275restoreView(_r5);
      const ctx_r2 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r2.resetLayout());
    });
    \u0275\u0275text(18, " Reset ");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(19, "div", 32);
    \u0275\u0275template(20, BusTemplateDetailComponent_form_5_div_12_nz_tab_2_button_20_Template, 2, 5, "button", 34);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(21, "div", 35);
    \u0275\u0275template(22, BusTemplateDetailComponent_form_5_div_12_nz_tab_2_div_22_Template, 2, 1, "div", 36);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    let tmp_11_0;
    let tmp_16_0;
    const layout_r7 = ctx.$implicit;
    const i_r16 = ctx.index;
    const busTemplateLayoutNameClearTpl_r17 = \u0275\u0275reference(8);
    const busTemplateLayoutNameErrorTpl_r18 = \u0275\u0275reference(10);
    const ctx_r2 = \u0275\u0275nextContext(3);
    \u0275\u0275property("formGroupName", i_r16)("nzTitle", (tmp_11_0 = layout_r7.get("name")) == null ? null : tmp_11_0.value);
    \u0275\u0275advance(2);
    \u0275\u0275property("nzSpan", 6);
    \u0275\u0275advance(2);
    \u0275\u0275property("nzErrorTip", busTemplateLayoutNameErrorTpl_r18);
    \u0275\u0275advance();
    \u0275\u0275property("nzSuffix", busTemplateLayoutNameClearTpl_r17);
    \u0275\u0275advance(15);
    \u0275\u0275property("ngForOf", ctx_r2.seatTypes);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", (tmp_16_0 = layout_r7.get("seats")) == null ? null : tmp_16_0.value);
  }
}
function BusTemplateDetailComponent_form_5_div_12_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 50);
    \u0275\u0275element(1, "svg-icon", 51);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275property("svgClass", "h-5 w-5");
  }
}
function BusTemplateDetailComponent_form_5_div_12_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 22)(1, "nz-tabset", 23);
    \u0275\u0275twoWayListener("nzSelectedIndexChange", function BusTemplateDetailComponent_form_5_div_12_Template_nz_tabset_nzSelectedIndexChange_1_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r2 = \u0275\u0275nextContext(2);
      \u0275\u0275twoWayBindingSet(ctx_r2.selectedIndex, $event) || (ctx_r2.selectedIndex = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("nzAdd", function BusTemplateDetailComponent_form_5_div_12_Template_nz_tabset_nzAdd_1_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.addLayout());
    })("nzClose", function BusTemplateDetailComponent_form_5_div_12_Template_nz_tabset_nzClose_1_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.closeTab($event));
    });
    \u0275\u0275template(2, BusTemplateDetailComponent_form_5_div_12_nz_tab_2_Template, 23, 7, "nz-tab", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, BusTemplateDetailComponent_form_5_div_12_ng_template_3_Template, 2, 1, "ng-template", null, 2, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const nzAddIcon_r19 = \u0275\u0275reference(4);
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275twoWayProperty("nzSelectedIndex", ctx_r2.selectedIndex);
    \u0275\u0275property("nzAddIcon", nzAddIcon_r19);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r2.layouts.controls);
  }
}
function BusTemplateDetailComponent_form_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "form", 11)(1, "div", 12)(2, "nz-form-item")(3, "nz-form-label", 13);
    \u0275\u0275text(4, "Name");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "nz-form-control", 14)(6, "nz-input-group", 15);
    \u0275\u0275element(7, "input", 16);
    \u0275\u0275elementEnd();
    \u0275\u0275template(8, BusTemplateDetailComponent_form_5_ng_template_8_Template, 1, 0, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(10, BusTemplateDetailComponent_form_5_ng_template_10_Template, 2, 1, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()()();
    \u0275\u0275template(12, BusTemplateDetailComponent_form_5_div_12_Template, 5, 3, "div", 17);
    \u0275\u0275elementStart(13, "div", 18)(14, "button", 19);
    \u0275\u0275listener("click", function BusTemplateDetailComponent_form_5_Template_button_click_14_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onSubmit());
    });
    \u0275\u0275text(15, " SAVE ");
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const busTemplateDetailNameClearTpl_r20 = \u0275\u0275reference(9);
    const busTemplateDetailNameErrorTpl_r21 = \u0275\u0275reference(11);
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275property("formGroup", ctx_r2.busTemplateDetailForm);
    \u0275\u0275advance(3);
    \u0275\u0275property("nzSpan", 6);
    \u0275\u0275advance(2);
    \u0275\u0275property("nzErrorTip", busTemplateDetailNameErrorTpl_r21);
    \u0275\u0275advance();
    \u0275\u0275property("nzSuffix", busTemplateDetailNameClearTpl_r20);
    \u0275\u0275advance(6);
    \u0275\u0275property("ngIf", ctx_r2.layouts);
  }
}
var BusTemplateDetailComponent = class _BusTemplateDetailComponent {
  constructor(fb, location, busTemplatesService, seatTypesService, el, renderer, utils, router) {
    this.fb = fb;
    this.location = location;
    this.busTemplatesService = busTemplatesService;
    this.seatTypesService = seatTypesService;
    this.el = el;
    this.renderer = renderer;
    this.utils = utils;
    this.router = router;
    this.tabs = ["seat layout 1"];
    this.selectedIndex = 0;
    this.seatTypes = [];
    this.currentSeatTypeId = "";
    this.rows = 11;
    this.cols = 7;
    this.matrixTempalte = [];
    this.usedNames = /* @__PURE__ */ new Set();
    this.originalName = "";
  }
  ngOnInit() {
    this.getQueryParams();
    this.initData();
  }
  getQueryParams() {
    return __async(this, null, function* () {
      const params = history.state;
      if (params) {
        this.busTemplate = params["busTemplate"] ? JSON.parse(params["busTemplate"]) : null;
      }
    });
  }
  initData() {
    this.seatTypesService.findAll().subscribe((seatTypes) => {
      this.seatTypes = seatTypes;
      this.currentSeatTypeId = this.seatTypes ? this.seatTypes[0]._id : "";
      this.initForm();
    });
  }
  initForm() {
    return __async(this, null, function* () {
      this.busTemplateDetailForm = this.fb.group({
        name: [this.busTemplate?.name ?? "", [Validators.required]],
        layouts: this.fb.array([])
      });
      let layoutsForMatrixForm = this.busTemplateDetailForm.get("layouts");
      if (this.busTemplate) {
        for (const layout2 of this.busTemplate.seatLayouts) {
          const temp = yield this.initializeLayout(layout2);
          layoutsForMatrixForm.push(temp);
        }
        this.selectedIndex = 0;
        return;
      }
      const layout = yield this.initializeLayout();
      layoutsForMatrixForm.push(layout);
      this.selectedIndex = 0;
    });
  }
  // Hàm để thêm layout vào layouts FormArray
  addLayout() {
    return __async(this, null, function* () {
      const currentMatrix = this.getCurrentLayoutMatrix();
      currentMatrix.forEach((matrixRow, i) => matrixRow.forEach((cell, j) => cell.isEditing && this.saveEdit(i, j)));
      if (this.hasError())
        return;
      let layoutsForMatrixForm = this.busTemplateDetailForm.get("layouts");
      const layout = yield this.initializeLayout();
      layoutsForMatrixForm.push(layout);
      this.selectedIndex = layoutsForMatrixForm.controls.length - 1;
    });
  }
  initializeLayout(layout) {
    return __async(this, null, function* () {
      const layoutForMatrix = this.fb.group({
        name: [layout?.name ?? "New Layout", [Validators.required]],
        seats: [yield this.initializeMaTrix()]
      });
      if (layout?.seats) {
        const seatsControl = layoutForMatrix.get("seats");
        const seats = seatsControl?.value || null;
        if (!seats)
          return;
        layout.seats.forEach((cell) => {
          const row = Math.floor((cell.index - 1) / this.cols);
          const col = (cell.index - 1) % this.cols;
          const currentCellSeatType = this.seatTypes.find((item) => item._id == cell.typeId);
          const icon = cell.status === "available" ? currentCellSeatType?.icon : currentCellSeatType?.blockIcon;
          if (cell.name) {
            this.usedNames.add(cell.name);
          }
          seats[row][col] = __spreadProps(__spreadValues({}, cell), {
            name: cell.name,
            icon,
            isSelected: currentCellSeatType,
            allowAutoNameEdit: !currentCellSeatType?.isEnv
          });
        });
        seatsControl?.patchValue(seats);
      }
      return layoutForMatrix;
    });
  }
  initializeMaTrix() {
    return __async(this, null, function* () {
      return Array.from({ length: this.rows }, (_3, i) => Array.from({ length: this.cols }, (_4, j) => ({
        _id: "",
        index: i * this.cols + j + 1,
        typeId: "",
        name: "",
        icon: "",
        status: "available",
        statusChanged: false,
        statusDeselected: false,
        isEditing: false,
        isSelected: false,
        errorName: "",
        hasError: false,
        allowAutoNameEdit: false
      })));
    });
  }
  // Truy cập layouts để làm việc
  get layouts() {
    return this.busTemplateDetailForm.get("layouts");
  }
  backPage() {
    this.location.back();
  }
  closeTab({ index }) {
    this.layouts.controls.splice(index, 1);
  }
  getCurrentLayoutMatrix() {
    return this.layouts.controls[this.selectedIndex].get("seats")?.value;
  }
  selectSeatType(seatType) {
    this.currentSeatTypeId = seatType;
  }
  toggleStatus(row, col, event2) {
    event2.preventDefault();
    const currentMatrix = this.getCurrentLayoutMatrix();
    const cell = currentMatrix[row][col];
    const currentCellSeatType = this.seatTypes.find((item) => item._id == this.currentSeatTypeId);
    if (currentCellSeatType?.isEnv) {
      return;
    }
    const cellElement = this.el.nativeElement.querySelector(`#cell-${row}-${col}`);
    this.renderer.removeClass(cellElement, `status-${cell.status}`);
    setTimeout(() => {
      if (cell.status === "available") {
        cell.status = "block";
        cell.icon = currentCellSeatType?.blockIcon;
      } else if (cell.status === "block") {
        cell.status = "available";
        cell.icon = currentCellSeatType?.icon;
      }
      this.renderer.addClass(cellElement, `status-${cell.status}`);
    }, 300);
  }
  hasError() {
    const currentMatrix = this.getCurrentLayoutMatrix();
    return currentMatrix.some((row) => row.some((cell) => cell.hasError));
  }
  // Áp dụng kiểu vào ô được chọn, không cho phép bỏ chọn khi đang chỉnh sửa
  applyType(row, col) {
    const currentMatrix = this.getCurrentLayoutMatrix();
    const cell = currentMatrix[row][col];
    const selectedType = this.seatTypes.find((seatType) => seatType._id === this.currentSeatTypeId);
    currentMatrix.forEach((matrixRow, i) => matrixRow.forEach((cell2, j) => cell2.isEditing && this.saveEdit(i, j)));
    if (cell.isEditing || this.hasError())
      return;
    if (cell.typeId === this.currentSeatTypeId) {
      cell.isSelected = false;
      cell.typeId = "";
      cell.allowAutoNameEdit = false;
      this.usedNames.delete(cell.name);
      cell.name = "";
    } else {
      this.updateCellType(cell, selectedType);
    }
  }
  updateCellType(cell, selectedType) {
    cell.typeId = this.currentSeatTypeId;
    cell.isSelected = true;
    cell.allowAutoNameEdit = !selectedType?.isEnv ? true : false;
    if (selectedType.isEnv) {
      this.usedNames.delete(cell.name);
      cell.name = "";
    } else if (cell?.allowAutoNameEdit) {
      const maxNames = this.rows * this.cols;
      for (let i = 1; i <= maxNames; i++) {
        const firstCharacter = String.fromCharCode(65 + this.selectedIndex);
        const name2 = `${firstCharacter}${i.toString().padStart(2, "0")}`;
        if (!this.usedNames.has(name2)) {
          cell.name = `${firstCharacter}${i.toString().padStart(2, "0")}`;
          this.usedNames.add(cell.name);
          break;
        }
      }
    }
    console.log("\u{1F680} ~ BusTemplateDetailComponent ~ updateCellType ~ this.usedNames:", this.usedNames);
    cell.icon = selectedType.icon;
  }
  // Hàm focus vào ô đang chỉnh sửa
  focusCell() {
    setTimeout(() => {
      if (this.cellInput) {
        this.cellInput.nativeElement.focus();
      }
    }, 0);
  }
  // Bắt đầu nhấn chuột
  onMouseDown(row, col, event2) {
    if (event2.button !== 0)
      return;
    event2.preventDefault();
    this.holdTimeout = setTimeout(() => {
      this.toggleStatus(row, col, event2);
      this.holdTimeout = null;
    }, 1e3);
  }
  // Nhả chuột
  onMouseUp(row, col, event2) {
    if (event2.button !== 0)
      return;
    if (this.holdTimeout) {
      clearTimeout(this.holdTimeout);
      this.applyType(row, col);
    }
    this.holdTimeout = null;
  }
  // Di chuột ra khỏi ô
  onMouseLeave(event2) {
    if (this.holdTimeout) {
      clearTimeout(this.holdTimeout);
      this.holdTimeout = null;
    }
  }
  // Nhấn chuột
  onClick(row, col, event2) {
    if (event2.button !== 0)
      return;
    if (this.holdTimeout) {
      clearTimeout(this.holdTimeout);
      this.holdTimeout = null;
      this.applyType(row, col);
    }
  }
  getIconByType(seatTypeId, status = "available") {
    const selectedType = this.seatTypes.find((seatType) => seatType._id === seatTypeId);
    if (!selectedType?.isEnv && status === "block") {
      return selectedType?.blockIcon || "";
    }
    return selectedType?.icon || "";
  }
  // Kiểm tra xem ô có đang ở chế độ chỉnh sửa
  isEditing(row, col) {
    const currentMatrix = this.getCurrentLayoutMatrix();
    return currentMatrix[row][col].isEditing;
  }
  // Bắt đầu chỉnh sửa ô khi nhấn chuột phải
  startEdit(row, col, event2) {
    event2.preventDefault();
    const currentMatrix = this.getCurrentLayoutMatrix();
    const cell = currentMatrix[row][col];
    const currentCellSeatType = this.seatTypes.find((item) => item._id == cell.currentSeatTypeId);
    if (currentCellSeatType?.isEnv || cell.typeId === "") {
      return;
    }
    this.originalName = cell.name;
    cell.isEditing = true;
    this.focusCell();
  }
  saveEdit(row, col) {
    event?.preventDefault();
    const currentMatrix = this.getCurrentLayoutMatrix();
    const cell = currentMatrix[row][col];
    const newName = cell.name;
    const nameFormat = /^[A-Z]\d{2}$/;
    if (!nameFormat.test(newName)) {
      toast.error("T\xEAn kh\xF4ng h\u1EE3p l\u1EC7. T\xEAn ph\u1EA3i c\xF3 \u0111\u1ECBnh d\u1EA1ng A01, A02, ..., A99.");
      cell.hasError = true;
      this.focusCell();
      return;
    }
    if (newName !== this.originalName && this.usedNames.has(newName)) {
      toast.error("T\xEAn n\xE0y \u0111\xE3 \u0111\u01B0\u1EE3c s\u1EED d\u1EE5ng. Vui l\xF2ng ch\u1ECDn t\xEAn kh\xE1c.");
      cell.hasError = true;
      this.focusCell();
      return;
    }
    this.usedNames.delete(this.originalName);
    this.usedNames.add(newName);
    cell.hasError = false;
    cell.isEditing = false;
  }
  onSubmit() {
    return __async(this, null, function* () {
      const validLayout = this.processValidLayout();
      if (!validLayout)
        return;
      const data = this.busTemplateDetailForm.getRawValue();
      const busTemplate2Create = new BusTemplate2Create();
      busTemplate2Create.name = data.name;
      busTemplate2Create.seatLayouts = data.layouts.map((layout) => __spreadProps(__spreadValues({}, new BusTemplateSeatLayout()), {
        name: layout.name,
        seats: layout.seats.flat().filter((seat) => seat.typeId).map((seat) => __spreadProps(__spreadValues({}, new BusTemplateSeat()), {
          _id: seat._id,
          index: seat.index,
          typeId: seat.typeId,
          name: seat.name,
          status: seat.status
        }))
      }));
      if (this.busTemplate) {
        const busTemplate2Update = __spreadProps(__spreadValues({}, busTemplate2Create), {
          _id: this.busTemplate._id
          // Thêm thuộc tính _id
        });
        this.updateBusTemplate(busTemplate2Update);
        return;
      }
      this.createBusTemplate(busTemplate2Create);
    });
  }
  updateBusTemplate(busTemplate2Update) {
    this.busTemplatesService.updateBusTemplate(busTemplate2Update).subscribe({
      next: (res) => {
        if (res) {
          const updatedState = __spreadProps(__spreadValues({}, history.state), { busTemplate: JSON.stringify(res) });
          window.history.replaceState(updatedState, "", window.location.href);
          toast.success("BusTemplate update successfully");
        }
      },
      error: (error2) => this.utils.handleRequestError(error2)
    });
  }
  createBusTemplate(busTemplate2Create) {
    this.busTemplatesService.createBusTemplate(busTemplate2Create).subscribe({
      next: (res) => {
        if (res) {
          toast.success("BusTemplate added successfully");
        }
      },
      error: (error2) => this.utils.handleRequestError(error2)
    });
  }
  processValidLayout() {
    return __async(this, null, function* () {
      let hasErrorMatrix = false;
      let indexLayoutHasError = -1;
      yield Promise.all(this.layouts.controls.map((layout, index) => __async(this, null, function* () {
        const seats = layout.get("seats").value;
        if (!seats) {
          return;
        }
        const hasErrorInLayout = seats.some((row) => row.some((cell) => cell.hasError));
        if (hasErrorInLayout) {
          hasErrorMatrix = true;
          if (indexLayoutHasError !== 0) {
            indexLayoutHasError = index;
          }
        }
      })));
      if (hasErrorMatrix) {
        toast.error("T\xEAn kh\xF4ng h\u1EE3p l\u1EC7. T\xEAn ph\u1EA3i c\xF3 \u0111\u1ECBnh d\u1EA1ng A01, A02, ..., A99.");
        this.selectedIndex = indexLayoutHasError;
      }
      return !hasErrorMatrix;
    });
  }
  resetLayout() {
    return __async(this, null, function* () {
      this.layouts.controls[this.selectedIndex].get("seats")?.patchValue(yield this.initializeMaTrix());
    });
  }
  static {
    this.\u0275fac = function BusTemplateDetailComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusTemplateDetailComponent)(\u0275\u0275directiveInject(FormBuilder), \u0275\u0275directiveInject(Location), \u0275\u0275directiveInject(BusTemplatesService), \u0275\u0275directiveInject(SeatTypesService), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(Utils), \u0275\u0275directiveInject(Router));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _BusTemplateDetailComponent, selectors: [["app-bus-template-detail"]], viewQuery: function BusTemplateDetailComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(_c022, 5);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.cellInput = _t.first);
      }
    }, standalone: false, decls: 6, vars: 1, consts: [["busTemplateDetailNameClearTpl", ""], ["busTemplateDetailNameErrorTpl", ""], ["nzAddIcon", ""], ["busTemplateLayoutNameClearTpl", ""], ["busTemplateLayoutNameErrorTpl", ""], ["cellInput", ""], [1, "mb-4", "flex", "justify-end"], [1, "inline-block", "space-x-4"], [1, "bg-muted", "text-muted-foreground", "hover:text-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold", 3, "click"], [1, "border-muted/20", "bg-background", "flex", "min-w-full", "flex-col", "rounded-xl", "border", "px-6", "py-2"], ["nz-form", "", 3, "formGroup", 4, "ngIf"], ["nz-form", "", 3, "formGroup"], [1, "mb-5", "w-full"], ["nzFor", "name", 1, "!flex", "!h-[36px]", "!items-center", "!justify-start", 3, "nzSpan"], [1, "!flex", "!h-[56px]", "flex-col", 3, "nzErrorTip"], [1, "custom-nz-input-group", "!mt-0", "!mb-0", "!h-[36px]", 3, "nzSuffix"], ["type", "text", "nz-input", "", "formControlName", "name", "placeholder", "Nh\u1EADp Name"], ["formArrayName", "layouts", 4, "ngIf"], [1, "my-5", "flex", "w-full", "justify-end"], ["nz-button", "", "nzType", "default", 1, "!min-w-24", "!bg-primary", "!flex", "!h-max", "!justify-center", "!rounded-lg", "!py-2", "!px-3", "!text-white", "hover:!border-red-500", "hover:!bg-red-200", "hover:!text-red-500", 3, "click"], ["nz-icon", "", "nzTheme", "fill", "nzType", "close-circle", 1, "ant-input-clear-icon", 3, "click"], [1, "mt-1", "!text-xs", "text-red-500"], ["formArrayName", "layouts"], ["nzType", "editable-card", 3, "nzSelectedIndexChange", "nzAdd", "nzClose", "nzSelectedIndex", "nzAddIcon"], ["nzClosable", "", 3, "formGroupName", "nzTitle", 4, "ngFor", "ngForOf"], ["nzClosable", "", 3, "formGroupName", "nzTitle"], ["nzFor", "name", 1, "!flex", "!h-[36px]", "!items-center", "!justify-start", "!font-medium", 3, "nzSpan"], [1, "!flex", "!h-[56px]", "flex-col", "!pt-2", 3, "nzErrorTip"], [1, "!mt-0", "!mb-0", "!h-[36px]", 3, "nzSuffix"], [1, "flex", "flex-col", "pt-5"], [1, "flex", "justify-between"], [1, "font-medium"], [1, "flex", "gap-4"], ["nz-button", "", "nzType", "default", 1, "!min-w-24", "!flex", "!h-max", "!justify-center", "!rounded-lg", "!py-2", "!px-3", "hover:!border-red-500", "hover:!bg-red-200", "hover:!text-red-500", 3, "click"], ["class", "!min-w-24 !flex !h-max !justify-center !rounded-lg !py-2 !px-3 hover:!bg-blue-200", "nz-button", "", "nzType", "default", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "matrix", "justify-center", "pt-10"], ["class", "row", 4, "ngFor", "ngForOf"], ["nz-button", "", "nzType", "default", 1, "!min-w-24", "!flex", "!h-max", "!justify-center", "!rounded-lg", "!py-2", "!px-3", "hover:!bg-blue-200", 3, "click", "ngClass"], [3, "src", "svgClass"], [1, "row"], [3, "id", "class", 4, "ngFor", "ngForOf"], [3, "id"], [3, "mousedown", "mouseup", "mouseleave", "contextmenu", "click"], [4, "ngIf"], ["class", "absolute", 4, "ngIf"], [3, "src", "svgClass", "ngClass"], ["class", "cell-name", 4, "ngIf"], [1, "cell-name"], [1, "absolute"], [1, "cell-input", 3, "ngModelChange", "blur", "keydown.enter", "ngModel", "ngModelOptions"], [1, "flex", "flex-row"], ["src", "assets/icons/create-new-layout.svg", 3, "svgClass"]], template: function BusTemplateDetailComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 6)(1, "div", 7)(2, "button", 8);
        \u0275\u0275listener("click", function BusTemplateDetailComponent_Template_button_click_2_listener() {
          return ctx.backPage();
        });
        \u0275\u0275text(3, " Back ");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(4, "div", 9);
        \u0275\u0275template(5, BusTemplateDetailComponent_form_5_Template, 16, 5, "form", 10);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275advance(5);
        \u0275\u0275property("ngIf", ctx.busTemplateDetailForm);
      }
    }, dependencies: [NgClass, NgForOf, NgIf, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, NgModel, FormGroupDirective, FormControlName, FormGroupName, FormArrayName, SvgIconComponent, NzTabSetComponent, NzTabComponent, NzButtonComponent, NzTransitionPatchDirective, NzWaveDirective, NzInputDirective, NzInputGroupComponent, NzInputGroupWhitSuffixOrPrefixDirective, NzColDirective, NzRowDirective, NzFormDirective, NzFormItemComponent, NzFormLabelComponent, NzFormControlComponent, NzIconDirective], styles: ['@charset "UTF-8";\n\n\n\n.matrix[_ngcontent-%COMP%] {\n  display: grid;\n  gap: 5px;\n}\n.row[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 5px;\n  flex-direction: row;\n}\n.cell[_ngcontent-%COMP%] {\n  width: 80px;\n  height: 80px;\n  border: 1px solid #ccc;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #f9f9f9;\n  cursor: pointer;\n  position: relative;\n  text-align: center;\n}\n.selected[_ngcontent-%COMP%] {\n  width: 80px;\n  height: 80px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  cursor: pointer;\n  text-align: center;\n}\n.cell-name[_ngcontent-%COMP%] {\n  position: absolute;\n}\n.cell-input[_ngcontent-%COMP%] {\n  width: 40px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  padding: 0 2px;\n}\n.cell.editing[_ngcontent-%COMP%] {\n  background-color: #fff3cd;\n  border-color: #ffc107;\n}\n.cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 100%;\n  border: none;\n  text-align: center;\n  font-size: 14px;\n  background-color: transparent;\n}\n.cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus {\n  outline: none;\n}\n.has-error[_ngcontent-%COMP%] {\n  border: 2px solid red;\n}\n.icon[_ngcontent-%COMP%] {\n  width: 20px;\n  height: 20px;\n  margin-right: 5px;\n}\n@keyframes _ngcontent-%COMP%_showIcon {\n  from {\n    filter: blur(10px);\n    opacity: 0;\n  }\n  to {\n    filter: blur(0);\n    opacity: 1;\n  }\n}\n.show-icon[_ngcontent-%COMP%] {\n  animation: _ngcontent-%COMP%_showIcon 0.3s forwards;\n}\n@keyframes _ngcontent-%COMP%_statusChange {\n  from {\n    filter: blur(10px);\n    opacity: 0;\n  }\n  to {\n    filter: blur(0);\n    opacity: 1;\n  }\n}\n@keyframes _ngcontent-%COMP%_statusRevert {\n  from {\n    filter: blur(10px);\n    opacity: 0;\n  }\n  to {\n    filter: blur(0);\n    opacity: 1;\n  }\n}\n.status-available[_ngcontent-%COMP%] {\n  animation: _ngcontent-%COMP%_statusChange 0.3s forwards;\n}\n.status-block[_ngcontent-%COMP%] {\n  animation: _ngcontent-%COMP%_statusChange 0.3s forwards;\n}\n.status-reverting[_ngcontent-%COMP%] {\n  animation: _ngcontent-%COMP%_statusRevert 0.3s forwards;\n}\n/*# sourceMappingURL=bus-template-detail.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(BusTemplateDetailComponent, { className: "BusTemplateDetailComponent", filePath: "src/app/modules/management/pages/bus-templates/pages/bus-template-detail/bus-template-detail.component.ts", lineNumber: 18 });
})();

// src/app/modules/management/pages/seat-types/model/seat-type.model.ts
var SearchSeatType = class {
  constructor() {
    this.seatTypes = [];
    this.pageIdx = 0;
    this.totalItem = 0;
    this.totalPage = 0;
  }
};
var SeatType2Create = class {
  constructor() {
    this.isEnv = false;
    this.name = "";
  }
};

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-checkbox.mjs
var _c023 = ["*"];
var _c115 = ["inputElement"];
var _c211 = ["nz-checkbox", ""];
var _forTrack09 = ($index, $item) => $item.value;
function NzCheckboxGroupComponent_ProjectionFallback_0_For_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "label", 0);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const option_r1 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("nzValue", option_r1.value)("nzName", ctx_r1.nzName())("nzDisabled", option_r1.disabled || ctx_r1.finalDisabled());
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", option_r1.label, " ");
  }
}
function NzCheckboxGroupComponent_ProjectionFallback_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275repeaterCreate(0, NzCheckboxGroupComponent_ProjectionFallback_0_For_1_Template, 2, 4, "label", 0, _forTrack09);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275repeater(ctx_r1.normalizedOptions());
  }
}
var NzCheckboxWrapperComponent = class _NzCheckboxWrapperComponent {
  constructor() {
    this.nzOnChange = new EventEmitter();
    this.checkboxList = [];
  }
  addCheckbox(value) {
    this.checkboxList.push(value);
  }
  removeCheckbox(value) {
    this.checkboxList.splice(this.checkboxList.indexOf(value), 1);
  }
  onChange() {
    const listOfCheckedValue = this.checkboxList.filter((item) => item.nzChecked).map((item) => item.nzValue);
    this.nzOnChange.emit(listOfCheckedValue);
  }
  static {
    this.\u0275fac = function NzCheckboxWrapperComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzCheckboxWrapperComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzCheckboxWrapperComponent,
      selectors: [["nz-checkbox-wrapper"]],
      hostAttrs: [1, "ant-checkbox-group"],
      outputs: {
        nzOnChange: "nzOnChange"
      },
      exportAs: ["nzCheckboxWrapper"],
      ngContentSelectors: _c023,
      decls: 1,
      vars: 0,
      template: function NzCheckboxWrapperComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275projection(0);
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzCheckboxWrapperComponent, [{
    type: Component,
    args: [{
      selector: "nz-checkbox-wrapper",
      exportAs: "nzCheckboxWrapper",
      template: `<ng-content></ng-content>`,
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      host: {
        class: "ant-checkbox-group"
      }
    }]
  }], null, {
    nzOnChange: [{
      type: Output
    }]
  });
})();
var NZ_CHECKBOX_GROUP = new InjectionToken("NZ_CHECKBOX_GROUP");
var NzCheckboxComponent = class _NzCheckboxComponent {
  innerCheckedChange(checked) {
    if (!this.nzDisabled && !this.checkboxGroupComponent?.finalDisabled()) {
      this.setValue(checked);
      this.nzCheckboxWrapperComponent?.onChange();
      this.checkboxGroupComponent?.onCheckedChange(this.nzValue, checked);
    }
  }
  writeValue(value) {
    this.nzChecked = value;
    this.cdr.markForCheck();
  }
  registerOnChange(fn) {
    this.onChange = fn;
  }
  registerOnTouched(fn) {
    this.onTouched = fn;
  }
  setDisabledState(disabled) {
    this.nzDisabled = this.isNzDisableFirstChange && this.nzDisabled || disabled;
    this.isNzDisableFirstChange = false;
    this.cdr.markForCheck();
  }
  focus() {
    this.focusMonitor.focusVia(this.inputElement, "keyboard");
  }
  blur() {
    this.inputElement.nativeElement.blur();
  }
  constructor(ngZone, elementRef, cdr, focusMonitor, directionality) {
    this.ngZone = ngZone;
    this.elementRef = elementRef;
    this.cdr = cdr;
    this.focusMonitor = focusMonitor;
    this.directionality = directionality;
    this.dir = "ltr";
    this.destroy$ = new Subject();
    this.isNzDisableFirstChange = true;
    this.onChange = () => {
    };
    this.onTouched = () => {
    };
    this.nzCheckedChange = new EventEmitter();
    this.nzValue = null;
    this.nzAutoFocus = false;
    this.nzDisabled = false;
    this.nzIndeterminate = false;
    this.nzChecked = false;
    this.nzId = null;
    this.nzName = null;
    this.nzCheckboxWrapperComponent = inject(NzCheckboxWrapperComponent, {
      optional: true
    });
    this.checkboxGroupComponent = inject(NZ_CHECKBOX_GROUP, {
      optional: true
    });
    this.nzFormStatusService = inject(NzFormStatusService, {
      optional: true
    });
    if (this.checkboxGroupComponent) {
      effect(() => {
        const values = this.checkboxGroupComponent.value() || [];
        this.setValue(values.includes(this.nzValue));
        this.cdr.markForCheck();
      });
    }
  }
  ngOnInit() {
    this.focusMonitor.monitor(this.elementRef, true).pipe(takeUntil(this.destroy$)).subscribe((focusOrigin) => {
      if (!focusOrigin) {
        Promise.resolve().then(() => this.onTouched());
      }
    });
    this.nzCheckboxWrapperComponent?.addCheckbox(this);
    this.directionality.change.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.cdr.detectChanges();
    });
    this.dir = this.directionality.value;
    fromEventOutsideAngular(this.elementRef.nativeElement, "click").pipe(takeUntil(this.destroy$)).subscribe((event2) => {
      event2.preventDefault();
      this.focus();
      if (this.nzDisabled) {
        return;
      }
      this.ngZone.run(() => {
        this.innerCheckedChange(!this.nzChecked);
        this.cdr.markForCheck();
      });
    });
    fromEventOutsideAngular(this.inputElement.nativeElement, "click").pipe(takeUntil(this.destroy$)).subscribe((event2) => event2.stopPropagation());
  }
  ngAfterViewInit() {
    if (this.nzAutoFocus) {
      this.focus();
    }
  }
  ngOnDestroy() {
    this.focusMonitor.stopMonitoring(this.elementRef);
    this.nzCheckboxWrapperComponent?.removeCheckbox(this);
    this.destroy$.next();
    this.destroy$.complete();
  }
  setValue(value) {
    this.nzChecked = value;
    this.onChange(value);
    this.nzCheckedChange.emit(value);
  }
  static {
    this.\u0275fac = function NzCheckboxComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzCheckboxComponent)(\u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(FocusMonitor), \u0275\u0275directiveInject(Directionality));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzCheckboxComponent,
      selectors: [["", "nz-checkbox", ""]],
      viewQuery: function NzCheckboxComponent_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(_c115, 7);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.inputElement = _t.first);
        }
      },
      hostAttrs: [1, "ant-checkbox-wrapper"],
      hostVars: 10,
      hostBindings: function NzCheckboxComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-checkbox-group-item", !!ctx.checkboxGroupComponent)("ant-checkbox-wrapper-in-form-item", !!ctx.nzFormStatusService)("ant-checkbox-wrapper-checked", ctx.nzChecked)("ant-checkbox-wrapper-disabled", ctx.nzDisabled || (ctx.checkboxGroupComponent == null ? null : ctx.checkboxGroupComponent.finalDisabled()))("ant-checkbox-rtl", ctx.dir === "rtl");
        }
      },
      inputs: {
        nzValue: "nzValue",
        nzAutoFocus: [2, "nzAutoFocus", "nzAutoFocus", booleanAttribute],
        nzDisabled: [2, "nzDisabled", "nzDisabled", booleanAttribute],
        nzIndeterminate: [2, "nzIndeterminate", "nzIndeterminate", booleanAttribute],
        nzChecked: [2, "nzChecked", "nzChecked", booleanAttribute],
        nzId: "nzId",
        nzName: "nzName"
      },
      outputs: {
        nzCheckedChange: "nzCheckedChange"
      },
      exportAs: ["nzCheckbox"],
      features: [\u0275\u0275ProvidersFeature([{
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => _NzCheckboxComponent),
        multi: true
      }]), \u0275\u0275InputTransformsFeature],
      attrs: _c211,
      ngContentSelectors: _c023,
      decls: 6,
      vars: 12,
      consts: [["inputElement", ""], [1, "ant-checkbox"], ["type", "checkbox", 1, "ant-checkbox-input", 3, "ngModelChange", "checked", "ngModel", "disabled"], [1, "ant-checkbox-inner"]],
      template: function NzCheckboxComponent_Template(rf, ctx) {
        if (rf & 1) {
          const _r1 = \u0275\u0275getCurrentView();
          \u0275\u0275projectionDef();
          \u0275\u0275elementStart(0, "span", 1)(1, "input", 2, 0);
          \u0275\u0275listener("ngModelChange", function NzCheckboxComponent_Template_input_ngModelChange_1_listener($event) {
            \u0275\u0275restoreView(_r1);
            return \u0275\u0275resetView(ctx.innerCheckedChange($event));
          });
          \u0275\u0275elementEnd();
          \u0275\u0275element(3, "span", 3);
          \u0275\u0275elementEnd();
          \u0275\u0275elementStart(4, "span");
          \u0275\u0275projection(5);
          \u0275\u0275elementEnd();
        }
        if (rf & 2) {
          let tmp_6_0;
          \u0275\u0275classProp("ant-checkbox-checked", ctx.nzChecked && !ctx.nzIndeterminate)("ant-checkbox-disabled", ctx.nzDisabled || (ctx.checkboxGroupComponent == null ? null : ctx.checkboxGroupComponent.finalDisabled()))("ant-checkbox-indeterminate", ctx.nzIndeterminate);
          \u0275\u0275advance();
          \u0275\u0275property("checked", ctx.nzChecked)("ngModel", ctx.nzChecked)("disabled", ctx.nzDisabled || ((tmp_6_0 = ctx.checkboxGroupComponent == null ? null : ctx.checkboxGroupComponent.finalDisabled()) !== null && tmp_6_0 !== void 0 ? tmp_6_0 : false));
          \u0275\u0275attribute("autofocus", ctx.nzAutoFocus ? "autofocus" : null)("id", ctx.nzId)("name", ctx.nzName || (ctx.checkboxGroupComponent == null ? null : ctx.checkboxGroupComponent.nzName()));
        }
      },
      dependencies: [FormsModule, CheckboxControlValueAccessor, NgControlStatus, NgModel],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzCheckboxComponent, [{
    type: Component,
    args: [{
      selector: "[nz-checkbox]",
      exportAs: "nzCheckbox",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      template: `
    <span
      class="ant-checkbox"
      [class.ant-checkbox-checked]="nzChecked && !nzIndeterminate"
      [class.ant-checkbox-disabled]="nzDisabled || checkboxGroupComponent?.finalDisabled()"
      [class.ant-checkbox-indeterminate]="nzIndeterminate"
    >
      <input
        #inputElement
        type="checkbox"
        class="ant-checkbox-input"
        [attr.autofocus]="nzAutoFocus ? 'autofocus' : null"
        [attr.id]="nzId"
        [attr.name]="nzName || checkboxGroupComponent?.nzName()"
        [checked]="nzChecked"
        [ngModel]="nzChecked"
        [disabled]="nzDisabled || (checkboxGroupComponent?.finalDisabled() ?? false)"
        (ngModelChange)="innerCheckedChange($event)"
      />
      <span class="ant-checkbox-inner"></span>
    </span>
    <span><ng-content></ng-content></span>
  `,
      providers: [{
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => NzCheckboxComponent),
        multi: true
      }],
      host: {
        class: "ant-checkbox-wrapper",
        "[class.ant-checkbox-group-item]": "!!checkboxGroupComponent",
        "[class.ant-checkbox-wrapper-in-form-item]": "!!nzFormStatusService",
        "[class.ant-checkbox-wrapper-checked]": "nzChecked",
        "[class.ant-checkbox-wrapper-disabled]": "nzDisabled || checkboxGroupComponent?.finalDisabled()",
        "[class.ant-checkbox-rtl]": `dir === 'rtl'`
      },
      imports: [FormsModule]
    }]
  }], () => [{
    type: NgZone
  }, {
    type: ElementRef
  }, {
    type: ChangeDetectorRef
  }, {
    type: FocusMonitor
  }, {
    type: Directionality
  }], {
    inputElement: [{
      type: ViewChild,
      args: ["inputElement", {
        static: true
      }]
    }],
    nzCheckedChange: [{
      type: Output
    }],
    nzValue: [{
      type: Input
    }],
    nzAutoFocus: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzDisabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzIndeterminate: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzChecked: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzId: [{
      type: Input
    }],
    nzName: [{
      type: Input
    }]
  });
})();
var NzCheckboxGroupComponent = class _NzCheckboxGroupComponent {
  constructor() {
    this.onChange = () => {
    };
    this.onTouched = () => {
    };
    this.isDisabledFirstChange = true;
    this.directionality = inject(Directionality);
    this.nzName = input(null);
    this.nzDisabled = input(false, {
      transform: booleanAttribute
    });
    this.nzOptions = input([]);
    this.value = signal(null);
    this.finalDisabled = linkedSignal(() => this.nzDisabled());
    this.dir = toSignal(this.directionality.change, {
      initialValue: this.directionality.value
    });
    this.normalizedOptions = computed(() => normalizeOptions(this.nzOptions()));
    const elementRef = inject(ElementRef);
    const focusMonitor = inject(FocusMonitor);
    const destroyRef = inject(DestroyRef);
    afterNextRender(() => {
      focusMonitor.monitor(elementRef, true).pipe(takeUntilDestroyed(destroyRef)).subscribe((focusOrigin) => {
        if (!focusOrigin) {
          this.onTouched();
        }
      });
      destroyRef.onDestroy(() => {
        focusMonitor.stopMonitoring(elementRef);
      });
    });
  }
  writeValue(value) {
    this.value.set(value);
  }
  registerOnChange(fn) {
    this.onChange = fn;
  }
  registerOnTouched(fn) {
    this.onTouched = fn;
  }
  setDisabledState(disabled) {
    if (!this.isDisabledFirstChange) {
      this.finalDisabled.set(disabled);
    }
    this.isDisabledFirstChange = false;
  }
  onCheckedChange(optionValue, checked) {
    if (this.finalDisabled()) return;
    this.value.update((value) => {
      if (checked) {
        return value?.concat(optionValue) || [optionValue];
      } else {
        return value?.filter((val) => val !== optionValue) || [];
      }
    });
    this.onChange(this.value());
  }
  static {
    this.\u0275fac = function NzCheckboxGroupComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzCheckboxGroupComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzCheckboxGroupComponent,
      selectors: [["nz-checkbox-group"]],
      hostAttrs: [1, "ant-checkbox-group"],
      hostVars: 2,
      hostBindings: function NzCheckboxGroupComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-checkbox-group-rtl", ctx.dir() === "rtl");
        }
      },
      inputs: {
        nzName: [1, "nzName"],
        nzDisabled: [1, "nzDisabled"],
        nzOptions: [1, "nzOptions"]
      },
      exportAs: ["nzCheckboxGroup"],
      features: [\u0275\u0275ProvidersFeature([{
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => _NzCheckboxGroupComponent),
        multi: true
      }, {
        provide: NZ_CHECKBOX_GROUP,
        useExisting: forwardRef(() => _NzCheckboxGroupComponent)
      }])],
      ngContentSelectors: _c023,
      decls: 2,
      vars: 0,
      consts: [["nz-checkbox", "", 3, "nzValue", "nzName", "nzDisabled"]],
      template: function NzCheckboxGroupComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275projection(0, 0, null, NzCheckboxGroupComponent_ProjectionFallback_0_Template, 2, 0);
        }
      },
      dependencies: [NzCheckboxComponent],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzCheckboxGroupComponent, [{
    type: Component,
    args: [{
      selector: "nz-checkbox-group",
      exportAs: "nzCheckboxGroup",
      imports: [NzCheckboxComponent],
      template: `
    <ng-content>
      @for (option of normalizedOptions(); track option.value) {
        <label
          nz-checkbox
          [nzValue]="option.value"
          [nzName]="nzName()"
          [nzDisabled]="option.disabled || finalDisabled()"
        >
          {{ option.label }}
        </label>
      }
    </ng-content>
  `,
      providers: [{
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => NzCheckboxGroupComponent),
        multi: true
      }, {
        provide: NZ_CHECKBOX_GROUP,
        useExisting: forwardRef(() => NzCheckboxGroupComponent)
      }],
      host: {
        class: "ant-checkbox-group",
        "[class.ant-checkbox-group-rtl]": `dir() === 'rtl'`
      },
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], () => [], null);
})();
function normalizeOptions(value) {
  return value.map((item) => {
    if (typeof item === "string" || typeof item === "number") {
      return {
        label: `${item}`,
        value: item
      };
    }
    return item;
  });
}
var NzCheckboxModule = class _NzCheckboxModule {
  static {
    this.\u0275fac = function NzCheckboxModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzCheckboxModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzCheckboxModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      imports: [NzCheckboxComponent, NzCheckboxGroupComponent]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzCheckboxModule, [{
    type: NgModule,
    args: [{
      imports: [NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxWrapperComponent],
      exports: [NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxWrapperComponent]
    }]
  }], null, null);
})();

// src/app/modules/management/pages/seat-types/component/create-edit-seat-types-dialog/create-seat-type-dialog.component.ts
var _c024 = () => ({ standalone: true });
var _c116 = (a0) => ({ "pointer-events-none opacity-[0.3]": a0 });
var _c212 = (a0) => ({ "border-red-500": a0 });
function CreateEditSeatTypeDialogComponent_ng_template_16_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 26);
    \u0275\u0275listener("click", function CreateEditSeatTypeDialogComponent_ng_template_16_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.seatTypeForm.controls["name"].patchValue(""));
    });
    \u0275\u0275elementEnd();
  }
}
function CreateEditSeatTypeDialogComponent_ng_template_18_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Vui l\xF2ng nh\u1EADp tr\u01B0\u1EDDng n\xE0y ");
  }
}
function CreateEditSeatTypeDialogComponent_ng_template_18_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 27);
    \u0275\u0275template(1, CreateEditSeatTypeDialogComponent_ng_template_18_Conditional_1_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275conditional((ctx_r2.seatTypeForm.controls["name"].errors == null ? null : ctx_r2.seatTypeForm.controls["name"].errors["required"]) ? 1 : -1);
  }
}
function CreateEditSeatTypeDialogComponent_Conditional_28_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 34)(1, "div", 35)(2, "input", 36);
    \u0275\u0275listener("change", function CreateEditSeatTypeDialogComponent_Conditional_28_ng_template_6_Template_input_change_2_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onFileChange($event, "icon"));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 37);
    \u0275\u0275element(4, "svg-icon", 38);
    \u0275\u0275elementStart(5, "p", 39);
    \u0275\u0275text(6, "T\u1EADp tin c\u1EE5c b\u1ED9");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(7, "div", 40);
    \u0275\u0275listener("click", function CreateEditSeatTypeDialogComponent_Conditional_28_ng_template_6_Template_div_click_7_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.openFilesCenterDialog("icon"));
    });
    \u0275\u0275element(8, "svg-icon", 41);
    \u0275\u0275elementStart(9, "p", 39);
    \u0275\u0275text(10, "Trung t\xE2m ph\u01B0\u01A1ng ti\u1EC7n");
    \u0275\u0275elementEnd()()();
  }
}
function CreateEditSeatTypeDialogComponent_Conditional_28_p_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 42);
    \u0275\u0275text(1, " Vui l\xF2ng upload \u1EA3nh cho tr\u01B0\u1EDDng n\xE0y ");
    \u0275\u0275elementEnd();
  }
}
function CreateEditSeatTypeDialogComponent_Conditional_28_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 28)(1, "div", 29)(2, "div", 30);
    \u0275\u0275element(3, "svg-icon", 31);
    \u0275\u0275elementStart(4, "p", 32);
    \u0275\u0275text(5, "T\u1EA3i \u1EA3nh l\xEAn");
    \u0275\u0275elementEnd()()()();
    \u0275\u0275template(6, CreateEditSeatTypeDialogComponent_Conditional_28_ng_template_6_Template, 11, 0, "ng-template", null, 2, \u0275\u0275templateRefExtractor)(8, CreateEditSeatTypeDialogComponent_Conditional_28_p_8_Template, 2, 0, "p", 33);
  }
  if (rf & 2) {
    const contentIconTemplate_r5 = \u0275\u0275reference(7);
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275property("nzPopoverContent", contentIconTemplate_r5)("ngClass", \u0275\u0275pureFunction1(3, _c212, (ctx_r2.seatTypeForm.controls["icon"].errors == null ? null : ctx_r2.seatTypeForm.controls["icon"].errors["required"]) && ctx_r2.seatTypeForm.controls["icon"].touched));
    \u0275\u0275advance(8);
    \u0275\u0275property("ngIf", (ctx_r2.seatTypeForm.controls["icon"].errors == null ? null : ctx_r2.seatTypeForm.controls["icon"].errors["required"]) && ctx_r2.seatTypeForm.controls["icon"].touched);
  }
}
function CreateEditSeatTypeDialogComponent_Conditional_29_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 22)(1, "div", 43);
    \u0275\u0275element(2, "svg-icon", 44);
    \u0275\u0275elementStart(3, "div", 45)(4, "button", 46);
    \u0275\u0275listener("click", function CreateEditSeatTypeDialogComponent_Conditional_29_Template_button_click_4_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.removeFileImage("icon"));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(5, "svg", 47);
    \u0275\u0275element(6, "path", 48);
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("src", ctx_r2.seatTypeIcon);
  }
}
function CreateEditSeatTypeDialogComponent_Conditional_34_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 34)(1, "div", 35)(2, "input", 49);
    \u0275\u0275listener("change", function CreateEditSeatTypeDialogComponent_Conditional_34_ng_template_6_Template_input_change_2_listener($event) {
      \u0275\u0275restoreView(_r7);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onFileChange($event, "blockIcon"));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 37);
    \u0275\u0275element(4, "svg-icon", 38);
    \u0275\u0275elementStart(5, "p", 39);
    \u0275\u0275text(6, "T\u1EADp tin c\u1EE5c b\u1ED9");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(7, "div", 40);
    \u0275\u0275listener("click", function CreateEditSeatTypeDialogComponent_Conditional_34_ng_template_6_Template_div_click_7_listener() {
      \u0275\u0275restoreView(_r7);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.openFilesCenterDialog("blockIcon"));
    });
    \u0275\u0275element(8, "svg-icon", 41);
    \u0275\u0275elementStart(9, "p", 39);
    \u0275\u0275text(10, "Trung t\xE2m ph\u01B0\u01A1ng ti\u1EC7n");
    \u0275\u0275elementEnd()()();
  }
}
function CreateEditSeatTypeDialogComponent_Conditional_34_p_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 42);
    \u0275\u0275text(1, " Vui l\xF2ng upload \u1EA3nh cho tr\u01B0\u1EDDng n\xE0y ");
    \u0275\u0275elementEnd();
  }
}
function CreateEditSeatTypeDialogComponent_Conditional_34_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 28)(1, "div", 29)(2, "div", 30);
    \u0275\u0275element(3, "svg-icon", 31);
    \u0275\u0275elementStart(4, "p", 32);
    \u0275\u0275text(5, "T\u1EA3i \u1EA3nh l\xEAn");
    \u0275\u0275elementEnd()()()();
    \u0275\u0275template(6, CreateEditSeatTypeDialogComponent_Conditional_34_ng_template_6_Template, 11, 0, "ng-template", null, 3, \u0275\u0275templateRefExtractor)(8, CreateEditSeatTypeDialogComponent_Conditional_34_p_8_Template, 2, 0, "p", 33);
  }
  if (rf & 2) {
    const contentBlockIconTemplate_r8 = \u0275\u0275reference(7);
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275property("nzPopoverContent", contentBlockIconTemplate_r8)("ngClass", \u0275\u0275pureFunction1(3, _c212, (ctx_r2.seatTypeForm.controls["blockIcon"].errors == null ? null : ctx_r2.seatTypeForm.controls["blockIcon"].errors["required"]) && ctx_r2.seatTypeForm.controls["blockIcon"].touched));
    \u0275\u0275advance(8);
    \u0275\u0275property("ngIf", (ctx_r2.seatTypeForm.controls["blockIcon"].errors == null ? null : ctx_r2.seatTypeForm.controls["blockIcon"].errors["required"]) && ctx_r2.seatTypeForm.controls["blockIcon"].touched);
  }
}
function CreateEditSeatTypeDialogComponent_Conditional_35_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 22)(1, "div", 43);
    \u0275\u0275element(2, "svg-icon", 44);
    \u0275\u0275elementStart(3, "div", 45)(4, "button", 46);
    \u0275\u0275listener("click", function CreateEditSeatTypeDialogComponent_Conditional_35_Template_button_click_4_listener() {
      \u0275\u0275restoreView(_r9);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.removeFileImage("blockIcon"));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(5, "svg", 47);
    \u0275\u0275element(6, "path", 48);
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("src", ctx_r2.seatTypeBlockIcon);
  }
}
function CreateEditSeatTypeDialogComponent_Conditional_40_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 34)(1, "div", 35)(2, "input", 50);
    \u0275\u0275listener("change", function CreateEditSeatTypeDialogComponent_Conditional_40_ng_template_6_Template_input_change_2_listener($event) {
      \u0275\u0275restoreView(_r10);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onFileChange($event, "selectedIcon"));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 37);
    \u0275\u0275element(4, "svg-icon", 38);
    \u0275\u0275elementStart(5, "p", 39);
    \u0275\u0275text(6, "T\u1EADp tin c\u1EE5c b\u1ED9");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(7, "div", 40);
    \u0275\u0275listener("click", function CreateEditSeatTypeDialogComponent_Conditional_40_ng_template_6_Template_div_click_7_listener() {
      \u0275\u0275restoreView(_r10);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.openFilesCenterDialog("selectedIcon"));
    });
    \u0275\u0275element(8, "svg-icon", 41);
    \u0275\u0275elementStart(9, "p", 39);
    \u0275\u0275text(10, "Trung t\xE2m ph\u01B0\u01A1ng ti\u1EC7n");
    \u0275\u0275elementEnd()()();
  }
}
function CreateEditSeatTypeDialogComponent_Conditional_40_p_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 42);
    \u0275\u0275text(1, " Vui l\xF2ng upload \u1EA3nh cho tr\u01B0\u1EDDng n\xE0y ");
    \u0275\u0275elementEnd();
  }
}
function CreateEditSeatTypeDialogComponent_Conditional_40_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 28)(1, "div", 29)(2, "div", 30);
    \u0275\u0275element(3, "svg-icon", 31);
    \u0275\u0275elementStart(4, "p", 32);
    \u0275\u0275text(5, "T\u1EA3i \u1EA3nh l\xEAn");
    \u0275\u0275elementEnd()()()();
    \u0275\u0275template(6, CreateEditSeatTypeDialogComponent_Conditional_40_ng_template_6_Template, 11, 0, "ng-template", null, 4, \u0275\u0275templateRefExtractor)(8, CreateEditSeatTypeDialogComponent_Conditional_40_p_8_Template, 2, 0, "p", 33);
  }
  if (rf & 2) {
    const contentSelectedIconTemplate_r11 = \u0275\u0275reference(7);
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275property("nzPopoverContent", contentSelectedIconTemplate_r11)("ngClass", \u0275\u0275pureFunction1(3, _c212, (ctx_r2.seatTypeForm.controls["selectedIcon"].errors == null ? null : ctx_r2.seatTypeForm.controls["selectedIcon"].errors["required"]) && ctx_r2.seatTypeForm.controls["selectedIcon"].touched));
    \u0275\u0275advance(8);
    \u0275\u0275property("ngIf", (ctx_r2.seatTypeForm.controls["selectedIcon"].errors == null ? null : ctx_r2.seatTypeForm.controls["selectedIcon"].errors["required"]) && ctx_r2.seatTypeForm.controls["selectedIcon"].touched);
  }
}
function CreateEditSeatTypeDialogComponent_Conditional_41_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 22)(1, "div", 43);
    \u0275\u0275element(2, "svg-icon", 44);
    \u0275\u0275elementStart(3, "div", 45)(4, "button", 46);
    \u0275\u0275listener("click", function CreateEditSeatTypeDialogComponent_Conditional_41_Template_button_click_4_listener() {
      \u0275\u0275restoreView(_r12);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.removeFileImage("selectedIcon"));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(5, "svg", 47);
    \u0275\u0275element(6, "path", 48);
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("src", ctx_r2.seatTypeSelectedIcon);
  }
}
var CreateEditSeatTypeDialogComponent = class _CreateEditSeatTypeDialogComponent {
  constructor(fb, utils, utilsModal) {
    this.fb = fb;
    this.utils = utils;
    this.utilsModal = utilsModal;
    this.dialogRef = inject(MatDialogRef);
    this.data = inject(MAT_DIALOG_DATA);
    this.seatType = this.data.seatType ?? new SeatType2Create();
    this.updateValidators = (controlName, shouldSet) => {
      const control = this.seatTypeForm.get(controlName);
      if (control) {
        shouldSet ? control.setValidators(Validators.required) : control.clearValidators();
        control.updateValueAndValidity();
      }
    };
  }
  ngOnInit() {
    if (this.data) {
      this.seatTypeIcon = this.seatType.icon;
      this.seatTypeBlockIcon = this.seatType.blockIcon;
      this.seatTypeSelectedIcon = this.seatType.selectedIcon;
    }
    this.initForm();
  }
  initForm() {
    return __async(this, null, function* () {
      this.seatTypeForm = this.fb.group({
        name: [this.seatType.name, [Validators.required]],
        icon: [this.seatType.icon, Validators.required],
        blockIcon: [this.seatType.blockIcon],
        selectedIcon: [this.seatType.selectedIcon]
      });
      this.processIsEnv(this.seatType.isEnv);
    });
  }
  processIsEnv(isEnv) {
    if (!isEnv) {
      this.updateValidators("blockIcon", true);
      this.updateValidators("selectedIcon", true);
    } else {
      this.updateValidators("blockIcon", false);
      this.updateValidators("selectedIcon", false);
    }
  }
  onButtonClick() {
  }
  closeDialog() {
    this.dialogRef.close();
  }
  onFileChange(event2, type) {
    const files = event2.target.files;
    if (!files || files.length === 0)
      return;
    const file = files[0];
    switch (type) {
      case "icon":
        this.seatTypeIconFile = file;
        break;
      case "blockIcon":
        this.seatTypeBlockIconFile = file;
        break;
      case "selectedIcon":
        this.seatTypeSelectedIconFile = file;
        break;
      default:
        break;
    }
    if (file) {
      this.readAndSetImage(file, type);
    }
  }
  readAndSetImage(file, type) {
    const reader = new FileReader();
    reader.onload = (event2) => {
      const arrayBuffer = event2.target.result;
      const blob = new Blob([arrayBuffer], { type: file.type });
      const blobUrl = URL.createObjectURL(blob);
      switch (type) {
        case "icon":
          this.seatTypeIcon = blobUrl;
          break;
        case "blockIcon":
          this.seatTypeBlockIcon = blobUrl;
          break;
        case "selectedIcon":
          this.seatTypeSelectedIcon = blobUrl;
          break;
        default:
          break;
      }
    };
    reader.readAsArrayBuffer(file);
  }
  removeFileImage(type) {
    switch (type) {
      case "icon":
        this.seatTypeIcon = "";
        this.seatTypeForm.patchValue({ icon: "" });
        break;
      case "blockIcon":
        this.seatTypeBlockIcon = "";
        this.seatTypeForm.patchValue({ blockIcon: "" });
        break;
      case "selectedIcon":
        this.seatTypeSelectedIcon = "";
        this.seatTypeForm.patchValue({ selectedIcon: "" });
        break;
      default:
        break;
    }
  }
  openFilesCenterDialog(type) {
    this.utilsModal.openModal(FilesCenterDialogComponent, null, "large").subscribe((files) => {
      if (!files || files.length === 0)
        return;
      this.seatTypeIcon = files[0].link;
      this.seatTypeForm.patchValue({ icon: files[0]._id });
    });
  }
  onSubmit() {
    if (!this.seatTypeForm.valid) {
      this.utils.markFormGroupTouched(this.seatTypeForm);
      return;
    }
    const { name: name2 } = this.seatTypeForm.getRawValue();
    let dataTransfer = new DataTransfer();
    if (this.seatTypeIconFile) {
      dataTransfer.items.add(this.seatTypeIconFile);
    }
    if (!this.seatType.isEnv) {
      if (this.seatTypeBlockIconFile) {
        dataTransfer.items.add(this.seatTypeBlockIconFile);
      }
      if (this.seatTypeSelectedIconFile) {
        dataTransfer.items.add(this.seatTypeSelectedIconFile);
      }
    }
    const files = dataTransfer.files;
    const data = {
      name: name2,
      isEnv: this.seatType.isEnv,
      files
    };
    this.dialogRef.close(data);
  }
  static {
    this.\u0275fac = function CreateEditSeatTypeDialogComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _CreateEditSeatTypeDialogComponent)(\u0275\u0275directiveInject(FormBuilder), \u0275\u0275directiveInject(Utils), \u0275\u0275directiveInject(UtilsModal));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _CreateEditSeatTypeDialogComponent, selectors: [["app-create-seat-type-dialog"]], standalone: false, decls: 45, vars: 17, consts: [["seatTypeNameClearTpl", ""], ["seatTypeNameErrorTpl", ""], ["contentIconTemplate", ""], ["contentBlockIconTemplate", ""], ["contentSelectedIconTemplate", ""], [1, "p-3", "text-center"], [1, "text-xl", "font-medium"], [1, "absolute", "right-10", 3, "matDialogClose"], ["xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 24 24", "fill", "currentColor", 1, "size-6"], ["fill-rule", "evenodd", "d", "M5.47 5.47a.75.75 0 0 1 1.06 0L12 10.94l5.47-5.47a.75.75 0 1 1 1.06 1.06L13.06 12l5.47 5.47a.75.75 0 1 1-1.06 1.06L12 13.06l-5.47 5.47a.75.75 0 0 1-1.06-1.06L10.94 12 5.47 6.53a.75.75 0 0 1 0-1.06Z", "clip-rule", "evenodd"], ["nz-form", "", 1, "sm:max-w-36", "md:max-w-96", 3, "ngSubmit", "formGroup"], [1, "mb-5", "flex", "w-full", "flex-row", "items-start", "gap-4"], [1, "flex", "w-7/12", "flex-col"], ["nzFor", "name", 1, "!flex", "!h-[36px]", "!items-center", "!justify-start", 3, "nzSpan"], [1, "!flex", "!h-[56px]", "flex-col", 3, "nzErrorTip"], [1, "custom-nz-input-group", "!mt-0", "!mb-0", "!h-[36px]", 3, "nzSuffix"], ["type", "text", "nz-input", "", "formControlName", "name", "placeholder", "Nh\u1EADp Name"], [1, "flex", "w-5/12"], ["nz-checkbox", "", 3, "ngModelChange", "ngModel", "ngModelOptions"], [1, "flex", "flex-row", "gap-2"], [1, "flex", "w-4/12", "flex-col"], ["for", "base-input", 1, "mb-2", "block", "text-sm", "text-gray-900", "dark:text-white"], [1, "relative", "h-32", "w-32", "select-none", "rounded", "border", "border-gray-200"], [1, "flex", "w-4/12", "flex-col", 3, "ngClass"], [1, "line-block", "space-x-4", "text-center"], [1, "bg-primary", "text-primary-foreground", "flex-none", "cursor-pointer", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold", 3, "click"], ["nz-icon", "", "nzTheme", "fill", "nzType", "close-circle", 1, "ant-input-clear-icon", 3, "click"], [1, "mt-1", "!text-xs", "text-red-500"], ["nz-popover", "", 1, "relative", "h-32", "w-32", "cursor-pointer", "select-none", "rounded", "border", "border-dashed", "border-gray-500", 3, "nzPopoverContent", "ngClass"], [1, "mx-auto-8", "left-0", "m-auto", "block", "flex", "h-full", "w-full", "flex-wrap", "content-center", "items-center", "px-4"], [1, "flex", "w-full", "flex-wrap", "justify-center", "pb-5", "text-center"], ["svgClass", "w-8 h-8", "src", "assets/icons/upload.svg"], [1, "w-full", "pt-1", "text-sm"], ["class", "animate-fade-in-down mt-1 text-xs text-red-500", 4, "ngIf"], [1, "grap-2", "grid", "w-96", "cursor-pointer", "grid-cols-2"], [1, "relative", "flex", "h-12", "cursor-pointer", "flex-wrap", "items-center", "justify-center", "px-2"], ["formControlName", "icon", "type", "file", "accept", ".svg", 1, "z-50", "block", "h-full", "w-full", "cursor-pointer", "opacity-0", 3, "change"], [1, "absolute", "top-0", "right-0", "left-0", "m-auto", "flex", "h-full", "w-full", "cursor-pointer", "flex-wrap", "content-center", "items-center", "justify-center"], ["svgClass", "w-7 h-7", "src", "assets/icons/upload.svg"], [1, "w-full", "pt-1", "text-center", "text-xs"], [1, "flex", "h-12", "cursor-pointer", "flex-wrap", "items-center", "justify-center", "px-2", 3, "click"], ["svgClass", "w-7 h-7", "src", "assets/icons/media.svg"], [1, "animate-fade-in-down", "mt-1", "text-xs", "text-red-500"], [1, "flex", "h-full", "w-full", "cursor-pointer", "items-center", "justify-center"], ["svgClass", "w-10 h-10", 3, "src"], [1, "action-preview-img", "absolute", "top-0", "right-0", "flex", "h-full", "w-full", "items-center", "justify-center", "opacity-0"], [3, "click"], ["xmlns", "http://www.w3.org/2000/svg", "fill", "none", "viewBox", "0 0 24 24", "stroke-width", "1.5", "stroke", "currentColor", 1, "size-4", "text-white"], ["stroke-linecap", "round", "stroke-linejoin", "round", "d", "m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"], ["formControlName", "blockIcon", "type", "file", "accept", ".svg", 1, "z-50", "block", "h-full", "w-full", "cursor-pointer", "opacity-0", 3, "change"], ["formControlName", "selectedIcon", "type", "file", "accept", ".svg", 1, "z-50", "block", "h-full", "w-full", "cursor-pointer", "opacity-0", 3, "change"]], template: function CreateEditSeatTypeDialogComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "mat-dialog-title", 5)(1, "span", 6);
        \u0275\u0275text(2);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(3, "button", 7);
        \u0275\u0275namespaceSVG();
        \u0275\u0275elementStart(4, "svg", 8);
        \u0275\u0275element(5, "path", 9);
        \u0275\u0275elementEnd()()();
        \u0275\u0275namespaceHTML();
        \u0275\u0275elementStart(6, "mat-dialog-content")(7, "form", 10);
        \u0275\u0275listener("ngSubmit", function CreateEditSeatTypeDialogComponent_Template_form_ngSubmit_7_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onSubmit());
        });
        \u0275\u0275elementStart(8, "div", 11)(9, "div", 12)(10, "nz-form-item")(11, "nz-form-label", 13);
        \u0275\u0275text(12, "Name");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(13, "nz-form-control", 14)(14, "nz-input-group", 15);
        \u0275\u0275element(15, "input", 16);
        \u0275\u0275elementEnd();
        \u0275\u0275template(16, CreateEditSeatTypeDialogComponent_ng_template_16_Template, 1, 0, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(18, CreateEditSeatTypeDialogComponent_ng_template_18_Template, 2, 1, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(20, "div", 17)(21, "label", 18);
        \u0275\u0275twoWayListener("ngModelChange", function CreateEditSeatTypeDialogComponent_Template_label_ngModelChange_21_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.seatType.isEnv, $event) || (ctx.seatType.isEnv = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275listener("ngModelChange", function CreateEditSeatTypeDialogComponent_Template_label_ngModelChange_21_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.processIsEnv($event));
        });
        \u0275\u0275text(22, "Is Environment");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(23, "div", 19)(24, "div", 20)(25, "div")(26, "label", 21);
        \u0275\u0275text(27, "Main Icon");
        \u0275\u0275elementEnd()();
        \u0275\u0275template(28, CreateEditSeatTypeDialogComponent_Conditional_28_Template, 9, 5)(29, CreateEditSeatTypeDialogComponent_Conditional_29_Template, 7, 1, "div", 22);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(30, "div", 23)(31, "div")(32, "label", 21);
        \u0275\u0275text(33, "Block Icon");
        \u0275\u0275elementEnd()();
        \u0275\u0275template(34, CreateEditSeatTypeDialogComponent_Conditional_34_Template, 9, 5)(35, CreateEditSeatTypeDialogComponent_Conditional_35_Template, 7, 1, "div", 22);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(36, "div", 23)(37, "div")(38, "label", 21);
        \u0275\u0275text(39, "Selected Icon");
        \u0275\u0275elementEnd()();
        \u0275\u0275template(40, CreateEditSeatTypeDialogComponent_Conditional_40_Template, 9, 5)(41, CreateEditSeatTypeDialogComponent_Conditional_41_Template, 7, 1, "div", 22);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(42, "mat-dialog-actions", 24)(43, "button", 25);
        \u0275\u0275listener("click", function CreateEditSeatTypeDialogComponent_Template_button_click_43_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onSubmit());
        });
        \u0275\u0275text(44, " SAVE ");
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        const seatTypeNameClearTpl_r13 = \u0275\u0275reference(17);
        const seatTypeNameErrorTpl_r14 = \u0275\u0275reference(19);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.data.title);
        \u0275\u0275advance(5);
        \u0275\u0275property("formGroup", ctx.seatTypeForm);
        \u0275\u0275advance(4);
        \u0275\u0275property("nzSpan", 6);
        \u0275\u0275advance(2);
        \u0275\u0275property("nzErrorTip", seatTypeNameErrorTpl_r14);
        \u0275\u0275advance();
        \u0275\u0275property("nzSuffix", seatTypeNameClearTpl_r13);
        \u0275\u0275advance(7);
        \u0275\u0275twoWayProperty("ngModel", ctx.seatType.isEnv);
        \u0275\u0275property("ngModelOptions", \u0275\u0275pureFunction0(12, _c024));
        \u0275\u0275advance(7);
        \u0275\u0275conditional(!ctx.seatTypeIcon ? 28 : 29);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(13, _c116, ctx.seatType.isEnv));
        \u0275\u0275advance(4);
        \u0275\u0275conditional(!ctx.seatTypeBlockIcon ? 34 : 35);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(15, _c116, ctx.seatType.isEnv));
        \u0275\u0275advance(4);
        \u0275\u0275conditional(!ctx.seatTypeSelectedIcon ? 40 : 41);
      }
    }, dependencies: [NgClass, NgIf, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, NgModel, FormGroupDirective, FormControlName, SvgIconComponent, MatDialogClose, MatDialogActions, MatDialogContent, NzCheckboxComponent, NzTransitionPatchDirective, NzInputDirective, NzInputGroupComponent, NzInputGroupWhitSuffixOrPrefixDirective, NzColDirective, NzRowDirective, NzFormDirective, NzFormItemComponent, NzFormLabelComponent, NzFormControlComponent, NzPopoverDirective, NzIconDirective], styles: ["\n\n.action-preview-img[_ngcontent-%COMP%]:hover {\n  opacity: 1;\n  background: rgba(0, 0, 0, 0.5);\n}\n/*# sourceMappingURL=create-seat-type-dialog.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(CreateEditSeatTypeDialogComponent, { className: "CreateEditSeatTypeDialogComponent", filePath: "src/app/modules/management/pages/seat-types/component/create-edit-seat-types-dialog/create-seat-type-dialog.component.ts", lineNumber: 21 });
})();

// src/app/modules/management/pages/seat-types/seat-types.component.ts
var _forTrack010 = ($index, $item) => $item._id;
function SeatTypesComponent_For_22_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr", 13)(1, "td", 15)(2, "input", 16);
    \u0275\u0275twoWayListener("ngModelChange", function SeatTypesComponent_For_22_Template_input_ngModelChange_2_listener($event) {
      const busService_r2 = \u0275\u0275restoreView(_r1).$implicit;
      \u0275\u0275twoWayBindingSet(busService_r2.selected, $event) || (busService_r2.selected = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function SeatTypesComponent_For_22_Template_input_change_2_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.checkSelectAll());
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(3, "td");
    \u0275\u0275element(4, "svg-icon", 17);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "td");
    \u0275\u0275text(6);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "td", 15)(8, "button", 18);
    \u0275\u0275listener("click", function SeatTypesComponent_For_22_Template_button_click_8_listener() {
      const busService_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.editSeatType(busService_r2));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(9, "svg", 19);
    \u0275\u0275element(10, "path", 20);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(11, "button", 21);
    \u0275\u0275listener("click", function SeatTypesComponent_For_22_Template_button_click_11_listener() {
      const busService_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.deleteSeatType(busService_r2._id));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(12, "svg", 19);
    \u0275\u0275element(13, "path", 22);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const busService_r2 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", busService_r2.selected);
    \u0275\u0275attribute("aria-label", "Select " + busService_r2.name);
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate("src", busService_r2.icon);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(busService_r2.name);
  }
}
function SeatTypesComponent_ForEmpty_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr")(1, "td", 23);
    \u0275\u0275text(2, "No seatType found");
    \u0275\u0275elementEnd()();
  }
}
var SeatTypesComponent = class _SeatTypesComponent {
  constructor(seatTypesService, dialog, utils) {
    this.seatTypesService = seatTypesService;
    this.dialog = dialog;
    this.utils = utils;
    this.searchSeatType = new SearchSeatType();
    this.selectAll = false;
    this.pageIdx = 1;
    this.pageSize = 5;
    this.totalPage = 0;
    this.totalItem = 0;
    this.keyword = "";
    this.sortBy = "";
    this.isLoadingSeatType = false;
  }
  ngOnInit() {
    this.loadData();
  }
  loadData() {
    this.isLoadingSeatType = true;
    this.seatTypesService.searchSeatType(this.pageIdx, this.pageSize, this.keyword, this.sortBy).subscribe({
      next: (res) => {
        if (res) {
          this.searchSeatType = res;
          this.totalItem = this.searchSeatType.totalItem;
          this.totalPage = this.searchSeatType.totalPage;
        }
        this.isLoadingSeatType = false;
      },
      error: (error2) => {
        this.utils.handleRequestError(error2);
        this.isLoadingSeatType = false;
      }
    });
  }
  toggleSeatType(event2) {
    const checked = event2.target.checked;
    this.searchSeatType.seatTypes = this.searchSeatType.seatTypes.map((seatType) => __spreadProps(__spreadValues({}, seatType), {
      selected: checked
    }));
  }
  checkSelectAll() {
    this.selectAll = !this.searchSeatType.seatTypes.some((seatType) => !seatType.selected);
  }
  deleteSeatType(id) {
    const dialogRef = this.dialog.open(MaterialDialogComponent, {
      data: {
        icon: {
          type: "dangerous"
        },
        title: "Delete SeatType",
        content: "Are you sure you want to delete this seatType? All of your data will be permanently removed. This action cannot be undone.",
        btn: [
          {
            label: "NO",
            type: "cancel"
          },
          {
            label: "YES",
            type: "submit"
          }
        ]
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        this.seatTypesService.deleteSeatType(id).subscribe({
          next: (res) => {
            if (res) {
              this.searchSeatType.seatTypes = this.searchSeatType.seatTypes.filter((seatType) => seatType._id !== id);
              toast.success("SeatType deleted successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  editSeatType(seatType) {
    const dialogRef = this.dialog.open(CreateEditSeatTypeDialogComponent, {
      data: {
        title: "Edit SeatType",
        seatType: __spreadValues({}, seatType)
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        const seatType2Update = __spreadProps(__spreadValues({}, seatType), {
          name: result.name,
          isEnv: result.isEnv
        });
        this.seatTypesService.processUpdateSeatType(result.files, seatType2Update).subscribe({
          next: (res) => {
            if (res) {
              this.searchSeatType.seatTypes = this.searchSeatType.seatTypes.map((seatType2) => seatType2._id === res._id ? __spreadValues(__spreadValues({}, seatType2), res) : seatType2);
              toast.success("SeatType updated successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  addSeatType() {
    const dialogRef = this.dialog.open(CreateEditSeatTypeDialogComponent, {
      data: {
        title: "Add New SeatType"
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        const seatType2Create = new SeatType2Create();
        seatType2Create.name = result.name;
        seatType2Create.isEnv = result.isEnv;
        this.seatTypesService.createSeatType(result.files, seatType2Create).subscribe({
          next: (res) => {
            if (res) {
              this.loadData();
              toast.success("SeatType added successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  reloadSeatTypePage(data) {
    this.pageIdx = data.pageIdx;
    this.pageSize = data.pageSize;
    this.loadData();
  }
  searchSeatTypePage(keyword) {
    this.pageIdx = 1;
    this.keyword = keyword;
    this.loadData();
  }
  sortSeatTypePage(sortBy) {
    this.sortBy = sortBy;
    this.loadData();
  }
  static {
    this.\u0275fac = function SeatTypesComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _SeatTypesComponent)(\u0275\u0275directiveInject(SeatTypesService), \u0275\u0275directiveInject(MatDialog), \u0275\u0275directiveInject(Utils));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _SeatTypesComponent, selectors: [["app-seat-types"]], standalone: false, decls: 25, vars: 9, consts: [[1, "mb-4", "flex", "justify-end"], [1, "inline-block", "space-x-4"], ["aria-label", "Import CSV", 1, "bg-muted", "text-muted-foreground", "hover:text-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold"], ["aria-label", "Add SeatType", 1, "bg-primary", "text-primary-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold", 3, "click"], [1, "border-muted/20", "bg-background", "flex", "min-w-full", "flex-col", "rounded-xl", "border", "p-2"], [3, "sortDataEvent", "searchDataEvent", "title", "totalItem"], [1, "overflow-x-auto"], [1, "text-muted-foreground", "w-full", "table-auto", "border-collapse", "text-left", "align-middle", "leading-5"], [1, "border-muted/20", "text-muted-foreground", "border", "text-xs"], [1, "w-[50px]"], ["type", "checkbox", "aria-label", "Select all seatType", 1, "checkbox", "checkbox-sm", 3, "change", "ngModelChange", "ngModel"], [1, "min-w-[200px]"], [1, "w-[100px]", "text-center"], [1, "hover:bg-card/50"], [3, "reloadDataAndPageEvent", "pageIdx", "pageSize", "totalItem", "isLoading", "totalPage"], [1, "text-center"], ["type", "checkbox", 1, "checkbox", "checkbox-sm", 3, "ngModelChange", "change", "ngModel"], ["svgClass", "w-6 h-6", 3, "src"], ["aria-label", "Edit busService", 1, "text-muted-foreground", "hover:bg-card", "hover:text-foreground", "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", 3, "click"], ["viewBox", "0 0 20 20", "fill", "currentColor", 1, "size-5"], ["d", "m2.695 14.762-1.262 3.155a.5.5 0 0 0 .65.65l3.155-1.262a4 4 0 0 0 1.343-.886L17.5 5.501a2.121 2.121 0 0 0-3-3L3.58 13.419a4 4 0 0 0-.885 1.343Z"], ["aria-label", "Delete busService", 1, "text-muted-foreground", "hover:bg-card", "hover:text-foreground", "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", 3, "click"], ["fill-rule", "evenodd", "d", "M8.75 1A2.75 2.75 0 0 0 6 3.75v.443c-.795.077-1.584.176-2.365.298a.75.75 0 1 0 .23 1.482l.149-.022.841 10.518A2.75 2.75 0 0 0 7.596 19h4.807a2.75 2.75 0 0 0 2.742-2.53l.841-10.52.149.023a.75.75 0 0 0 .23-1.482A41.03 41.03 0 0 0 14 4.193V3.75A2.75 2.75 0 0 0 11.25 1h-2.5ZM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25v.325C8.327 4.025 9.16 4 10 4ZM8.58 7.72a.75.75 0 0 0-1.5.06l.3 7.5a.75.75 0 1 0 1.5-.06l-.3-7.5Zm4.34.06a.75.75 0 1 0-1.5-.06l-.3 7.5a.75.75 0 1 0 1.5.06l.3-7.5Z", "clip-rule", "evenodd"], ["colspan", "4", 1, "py-4", "text-center", "text-sm"]], template: function SeatTypesComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "button", 2);
        \u0275\u0275text(3, " Import CSV ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(4, "button", 3);
        \u0275\u0275listener("click", function SeatTypesComponent_Template_button_click_4_listener() {
          return ctx.addSeatType();
        });
        \u0275\u0275text(5, " Add SeatType ");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(6, "div", 4)(7, "app-table-action", 5);
        \u0275\u0275listener("sortDataEvent", function SeatTypesComponent_Template_app_table_action_sortDataEvent_7_listener($event) {
          return ctx.sortSeatTypePage($event);
        })("searchDataEvent", function SeatTypesComponent_Template_app_table_action_searchDataEvent_7_listener($event) {
          return ctx.searchSeatTypePage($event);
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "div", 6)(9, "table", 7)(10, "thead", 8)(11, "tr")(12, "th", 9)(13, "input", 10);
        \u0275\u0275listener("change", function SeatTypesComponent_Template_input_change_13_listener($event) {
          return ctx.toggleSeatType($event);
        });
        \u0275\u0275twoWayListener("ngModelChange", function SeatTypesComponent_Template_input_ngModelChange_13_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.selectAll, $event) || (ctx.selectAll = $event);
          return $event;
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(14, "th", 9);
        \u0275\u0275text(15, "Icon");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(16, "th", 11);
        \u0275\u0275text(17, "Name");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(18, "th", 12);
        \u0275\u0275text(19, "Actions");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(20, "tbody");
        \u0275\u0275repeaterCreate(21, SeatTypesComponent_For_22_Template, 14, 4, "tr", 13, _forTrack010, false, SeatTypesComponent_ForEmpty_23_Template, 3, 0, "tr");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(24, "app-table-footer", 14);
        \u0275\u0275listener("reloadDataAndPageEvent", function SeatTypesComponent_Template_app_table_footer_reloadDataAndPageEvent_24_listener($event) {
          return ctx.reloadSeatTypePage($event);
        });
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(7);
        \u0275\u0275property("title", "SeatType")("totalItem", ctx.totalItem);
        \u0275\u0275advance(6);
        \u0275\u0275twoWayProperty("ngModel", ctx.selectAll);
        \u0275\u0275advance(8);
        \u0275\u0275repeater(ctx.searchSeatType.seatTypes);
        \u0275\u0275advance(3);
        \u0275\u0275property("pageIdx", ctx.pageIdx)("pageSize", ctx.pageSize)("totalItem", ctx.totalItem)("isLoading", ctx.isLoadingSeatType)("totalPage", ctx.totalPage);
      }
    }, dependencies: [CheckboxControlValueAccessor, NgControlStatus, NgModel, SvgIconComponent, TableFooterComponent, TableActionComponent], styles: ["\n\ntd[_ngcontent-%COMP%] {\n  padding: 0.75rem 1rem;\n  font-size: 0.85rem;\n}\nth[_ngcontent-%COMP%] {\n  font-weight: 500;\n  padding: 0.625rem 1rem;\n  font-weight: 500;\n  font-size: 0.8125rem;\n  line-height: 1.125rem;\n  vertical-align: middle;\n  @apply border-b border-r;\n}\n/*# sourceMappingURL=seat-types.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(SeatTypesComponent, { className: "SeatTypesComponent", filePath: "src/app/modules/management/pages/seat-types/seat-types.component.ts", lineNumber: 16 });
})();

// src/app/modules/management/pages/buses/model/bus.model.ts
var SearchBus = class {
  constructor() {
    this.buses = [];
    this.pageIdx = 0;
    this.totalItem = 0;
    this.totalPage = 0;
  }
};

// src/app/modules/management/pages/buses/service/buses.servive.ts
var BusesService = class _BusesService {
  constructor(apiGatewayService) {
    this.apiGatewayService = apiGatewayService;
    this.url = "/buses";
  }
  findAll() {
    const url = `${this.url}/findAll`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  searchBus(pageIdx = 0, pageSize = 999, keyword = "", sortBy = "") {
    const url = `${this.url}/search?pageIdx=${pageIdx}&pageSize=${pageSize}&keyword=${keyword}&sortBy=${sortBy}`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  createBus(busService2Create) {
    const url = this.url;
    return this.apiGatewayService.post(url, busService2Create).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  updateBus(bus2Update) {
    const url = this.url;
    return this.apiGatewayService.put(url, bus2Update).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  deleteBus(id) {
    const deleteOptionUrl = this.url + `/${id}`;
    return this.apiGatewayService.delete(deleteOptionUrl).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  static {
    this.\u0275fac = function BusesService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusesService)(\u0275\u0275inject(ApiGatewayService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _BusesService, factory: _BusesService.\u0275fac, providedIn: "root" });
  }
};

// src/app/modules/management/pages/buses/buses.component.ts
var _forTrack011 = ($index, $item) => $item._id;
function BusesComponent_For_22_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr", 13)(1, "td", 15)(2, "input", 16);
    \u0275\u0275twoWayListener("ngModelChange", function BusesComponent_For_22_Template_input_ngModelChange_2_listener($event) {
      const bus_r2 = \u0275\u0275restoreView(_r1).$implicit;
      \u0275\u0275twoWayBindingSet(bus_r2.selected, $event) || (bus_r2.selected = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function BusesComponent_For_22_Template_input_change_2_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.checkSelectAll());
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(3, "td");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "td");
    \u0275\u0275text(6);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "td", 15)(8, "button", 17);
    \u0275\u0275listener("click", function BusesComponent_For_22_Template_button_click_8_listener() {
      const bus_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.editBus(bus_r2));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(9, "svg", 18);
    \u0275\u0275element(10, "path", 19);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(11, "button", 20);
    \u0275\u0275listener("click", function BusesComponent_For_22_Template_button_click_11_listener() {
      const bus_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.deleteBus(bus_r2._id));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(12, "svg", 18);
    \u0275\u0275element(13, "path", 21);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const bus_r2 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", bus_r2.selected);
    \u0275\u0275attribute("aria-label", "Select " + bus_r2.name);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(bus_r2.name);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(bus_r2.licensePlate);
  }
}
function BusesComponent_ForEmpty_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr")(1, "td", 22);
    \u0275\u0275text(2, "No buss found");
    \u0275\u0275elementEnd()();
  }
}
var BusesComponent = class _BusesComponent {
  constructor(busesService, dialog, utils, router) {
    this.busesService = busesService;
    this.dialog = dialog;
    this.utils = utils;
    this.router = router;
    this.searchBus = new SearchBus();
    this.selectAll = false;
    this.pageIdx = 1;
    this.pageSize = 5;
    this.totalPage = 0;
    this.totalItem = 0;
    this.keyword = "";
    this.sortBy = "";
    this.isLoadingBus = false;
  }
  ngOnInit() {
    this.loadData();
  }
  loadData() {
    this.isLoadingBus = true;
    this.busesService.searchBus(this.pageIdx, this.pageSize, this.keyword, this.sortBy).subscribe({
      next: (res) => {
        if (res) {
          this.searchBus = res;
          console.log("\u{1F680} ~ BusesComponent ~ this.busesService.searchBus ~ this.searchBus:", this.searchBus);
          this.totalItem = this.searchBus.totalItem;
          this.totalPage = this.searchBus.totalPage;
        }
        this.isLoadingBus = false;
      },
      error: (error2) => {
        this.utils.handleRequestError(error2);
        this.isLoadingBus = false;
      }
    });
  }
  toggleBus(event2) {
    const checked = event2.target.checked;
    this.searchBus.buses = this.searchBus.buses.map((bus) => __spreadProps(__spreadValues({}, bus), {
      selected: checked
    }));
  }
  checkSelectAll() {
    this.selectAll = !this.searchBus.buses.some((bus) => !bus.selected);
  }
  deleteBus(id) {
    const dialogRef = this.dialog.open(MaterialDialogComponent, {
      data: {
        icon: {
          type: "dangerous"
        },
        title: "Delete Bus",
        content: "Are you sure you want to delete this bus? All of your data will be permanently removed. This action cannot be undone.",
        btn: [
          {
            label: "NO",
            type: "cancel"
          },
          {
            label: "YES",
            type: "submit"
          }
        ]
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        this.busesService.deleteBus(id).subscribe({
          next: (res) => {
            if (res) {
              this.searchBus.buses = this.searchBus.buses.filter((bus) => bus._id !== id);
              toast.success("Bus deleted successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  editBus(bus) {
    const params = { bus: JSON.stringify(bus) };
    this.router.navigateByUrl("/management/buses/bus-detail", { state: params });
  }
  addBus() {
    this.router.navigate(["/management/buses/bus-detail"]);
  }
  reloadBusPage(data) {
    this.pageIdx = data.pageIdx;
    this.pageSize = data.pageSize;
    this.loadData();
  }
  searchBusPage(keyword) {
    this.pageIdx = 1;
    this.keyword = keyword;
    this.loadData();
  }
  sortBusPage(sortBy) {
    this.sortBy = sortBy;
    this.loadData();
  }
  handleRequestError(error2) {
    const msg = "An error occurred while processing your request";
    toast.error(msg, {
      position: "bottom-right",
      description: error2.message || "Please try again later",
      action: {
        label: "Dismiss",
        onClick: () => {
        }
      },
      actionButtonStyle: "background-color:#DC2626; color:white;"
    });
  }
  static {
    this.\u0275fac = function BusesComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusesComponent)(\u0275\u0275directiveInject(BusesService), \u0275\u0275directiveInject(MatDialog), \u0275\u0275directiveInject(Utils), \u0275\u0275directiveInject(Router));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _BusesComponent, selectors: [["app-buses"]], standalone: false, decls: 25, vars: 9, consts: [[1, "mb-4", "flex", "justify-end"], [1, "inline-block", "space-x-4"], ["aria-label", "Import CSV", 1, "bg-muted", "text-muted-foreground", "hover:text-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold"], ["aria-label", "Add Bus", 1, "bg-primary", "text-primary-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold", 3, "click"], [1, "border-muted/20", "bg-background", "flex", "min-w-full", "flex-col", "rounded-xl", "border", "p-2"], [3, "sortDataEvent", "searchDataEvent", "title", "totalItem"], [1, "overflow-x-auto"], [1, "text-muted-foreground", "w-full", "table-auto", "border-collapse", "text-left", "align-middle", "leading-5"], [1, "border-muted/20", "text-muted-foreground", "border", "text-xs"], [1, "w-[50px]"], ["type", "checkbox", "aria-label", "Select all bus", 1, "checkbox", "checkbox-sm", 3, "change", "ngModelChange", "ngModel"], [1, "min-w-[200px]"], [1, "w-[100px]", "text-center"], [1, "hover:bg-card/50"], [3, "reloadDataAndPageEvent", "pageIdx", "pageSize", "totalItem", "isLoading", "totalPage"], [1, "text-center"], ["type", "checkbox", 1, "checkbox", "checkbox-sm", 3, "ngModelChange", "change", "ngModel"], ["aria-label", "Edit bus", 1, "text-muted-foreground", "hover:bg-card", "hover:text-foreground", "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", 3, "click"], ["viewBox", "0 0 20 20", "fill", "currentColor", 1, "size-5"], ["d", "m2.695 14.762-1.262 3.155a.5.5 0 0 0 .65.65l3.155-1.262a4 4 0 0 0 1.343-.886L17.5 5.501a2.121 2.121 0 0 0-3-3L3.58 13.419a4 4 0 0 0-.885 1.343Z"], ["aria-label", "Delete bus", 1, "text-muted-foreground", "hover:bg-card", "hover:text-foreground", "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", 3, "click"], ["fill-rule", "evenodd", "d", "M8.75 1A2.75 2.75 0 0 0 6 3.75v.443c-.795.077-1.584.176-2.365.298a.75.75 0 1 0 .23 1.482l.149-.022.841 10.518A2.75 2.75 0 0 0 7.596 19h4.807a2.75 2.75 0 0 0 2.742-2.53l.841-10.52.149.023a.75.75 0 0 0 .23-1.482A41.03 41.03 0 0 0 14 4.193V3.75A2.75 2.75 0 0 0 11.25 1h-2.5ZM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25v.325C8.327 4.025 9.16 4 10 4ZM8.58 7.72a.75.75 0 0 0-1.5.06l.3 7.5a.75.75 0 1 0 1.5-.06l-.3-7.5Zm4.34.06a.75.75 0 1 0-1.5-.06l-.3 7.5a.75.75 0 1 0 1.5.06l.3-7.5Z", "clip-rule", "evenodd"], ["colspan", "4", 1, "py-4", "text-center", "text-sm"]], template: function BusesComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "button", 2);
        \u0275\u0275text(3, " Import CSV ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(4, "button", 3);
        \u0275\u0275listener("click", function BusesComponent_Template_button_click_4_listener() {
          return ctx.addBus();
        });
        \u0275\u0275text(5, " Add Bus ");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(6, "div", 4)(7, "app-table-action", 5);
        \u0275\u0275listener("sortDataEvent", function BusesComponent_Template_app_table_action_sortDataEvent_7_listener($event) {
          return ctx.sortBusPage($event);
        })("searchDataEvent", function BusesComponent_Template_app_table_action_searchDataEvent_7_listener($event) {
          return ctx.searchBusPage($event);
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "div", 6)(9, "table", 7)(10, "thead", 8)(11, "tr")(12, "th", 9)(13, "input", 10);
        \u0275\u0275listener("change", function BusesComponent_Template_input_change_13_listener($event) {
          return ctx.toggleBus($event);
        });
        \u0275\u0275twoWayListener("ngModelChange", function BusesComponent_Template_input_ngModelChange_13_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.selectAll, $event) || (ctx.selectAll = $event);
          return $event;
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(14, "th", 11);
        \u0275\u0275text(15, "Name");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(16, "th", 11);
        \u0275\u0275text(17, "License Plate");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(18, "th", 12);
        \u0275\u0275text(19, "Actions");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(20, "tbody");
        \u0275\u0275repeaterCreate(21, BusesComponent_For_22_Template, 14, 4, "tr", 13, _forTrack011, false, BusesComponent_ForEmpty_23_Template, 3, 0, "tr");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(24, "app-table-footer", 14);
        \u0275\u0275listener("reloadDataAndPageEvent", function BusesComponent_Template_app_table_footer_reloadDataAndPageEvent_24_listener($event) {
          return ctx.reloadBusPage($event);
        });
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(7);
        \u0275\u0275property("title", "Bus")("totalItem", ctx.totalItem);
        \u0275\u0275advance(6);
        \u0275\u0275twoWayProperty("ngModel", ctx.selectAll);
        \u0275\u0275advance(8);
        \u0275\u0275repeater(ctx.searchBus.buses);
        \u0275\u0275advance(3);
        \u0275\u0275property("pageIdx", ctx.pageIdx)("pageSize", ctx.pageSize)("totalItem", ctx.totalItem)("isLoading", ctx.isLoadingBus)("totalPage", ctx.totalPage);
      }
    }, dependencies: [CheckboxControlValueAccessor, NgControlStatus, NgModel, TableFooterComponent, TableActionComponent], styles: ["\n\ntd[_ngcontent-%COMP%] {\n  padding: 0.75rem 1rem;\n  font-size: 0.85rem;\n}\nth[_ngcontent-%COMP%] {\n  font-weight: 500;\n  padding: 0.625rem 1rem;\n  font-weight: 500;\n  font-size: 0.8125rem;\n  line-height: 1.125rem;\n  vertical-align: middle;\n  @apply border-b border-r;\n}\n/*# sourceMappingURL=buses.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(BusesComponent, { className: "BusesComponent", filePath: "src/app/modules/management/pages/buses/buses.component.ts", lineNumber: 16 });
})();

// src/app/modules/management/pages/buses/pages/bus-detail/bus-detail.component.ts
function BusDetailComponent_form_5_ng_template_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 33);
    \u0275\u0275listener("click", function BusDetailComponent_form_5_ng_template_9_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.busDetailForm.controls["name"].patchValue(""));
    });
    \u0275\u0275elementEnd();
  }
}
function BusDetailComponent_form_5_ng_template_11_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Vui l\xF2ng nh\u1EADp tr\u01B0\u1EDDng n\xE0y ");
  }
}
function BusDetailComponent_form_5_ng_template_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 34);
    \u0275\u0275template(1, BusDetailComponent_form_5_ng_template_11_Conditional_1_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275conditional((ctx_r1.busDetailForm.controls["name"].errors == null ? null : ctx_r1.busDetailForm.controls["name"].errors["required"]) ? 1 : -1);
  }
}
function BusDetailComponent_form_5_ng_template_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 33);
    \u0275\u0275listener("click", function BusDetailComponent_form_5_ng_template_20_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.busDetailForm.controls["licensePlate"].patchValue(""));
    });
    \u0275\u0275elementEnd();
  }
}
function BusDetailComponent_form_5_ng_template_22_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Vui l\xF2ng nh\u1EADp tr\u01B0\u1EDDng n\xE0y ");
  }
}
function BusDetailComponent_form_5_ng_template_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 34);
    \u0275\u0275template(1, BusDetailComponent_form_5_ng_template_22_Conditional_1_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275conditional((ctx_r1.busDetailForm.controls["licensePlate"].errors == null ? null : ctx_r1.busDetailForm.controls["licensePlate"].errors["required"]) ? 1 : -1);
  }
}
function BusDetailComponent_form_5_For_32_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-option", 25)(1, "div", 35);
    \u0275\u0275element(2, "svg-icon", 36);
    \u0275\u0275elementStart(3, "span", 37);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const busService_r5 = ctx.$implicit;
    \u0275\u0275property("nzLabel", busService_r5.name)("nzValue", busService_r5._id);
    \u0275\u0275advance(2);
    \u0275\u0275property("src", busService_r5.icon)("svgClass", "h-5 w-5");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", busService_r5.name, " ");
  }
}
function BusDetailComponent_form_5_ng_template_33_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Vui l\xF2ng ch\u1ECDn Bus Services");
  }
}
function BusDetailComponent_form_5_ng_template_33_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 34);
    \u0275\u0275template(1, BusDetailComponent_form_5_ng_template_33_Conditional_1_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275conditional((ctx_r1.busDetailForm.controls["busServiceIds"].errors == null ? null : ctx_r1.busDetailForm.controls["busServiceIds"].errors["required"]) ? 1 : -1);
  }
}
function BusDetailComponent_form_5_For_42_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-option", 25)(1, "div", 35)(2, "span", 37);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const busTypes_r6 = ctx.$implicit;
    \u0275\u0275property("nzLabel", busTypes_r6.name)("nzValue", busTypes_r6._id);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", busTypes_r6.name, " ");
  }
}
function BusDetailComponent_form_5_ng_template_43_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Vui l\xF2ng ch\u1ECDn Bus Type");
  }
}
function BusDetailComponent_form_5_ng_template_43_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 34);
    \u0275\u0275template(1, BusDetailComponent_form_5_ng_template_43_Conditional_1_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275conditional((ctx_r1.busDetailForm.controls["busTypeId"].errors == null ? null : ctx_r1.busDetailForm.controls["busTypeId"].errors["required"]) ? 1 : -1);
  }
}
function BusDetailComponent_form_5_For_53_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-option", 25)(1, "div", 35)(2, "span", 37);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const busTemplate_r7 = ctx.$implicit;
    \u0275\u0275property("nzLabel", busTemplate_r7.name)("nzValue", busTemplate_r7._id);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", busTemplate_r7.name, " ");
  }
}
function BusDetailComponent_form_5_ng_template_54_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Vui l\xF2ng ch\u1ECDn Bus Tempate");
  }
}
function BusDetailComponent_form_5_ng_template_54_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 34);
    \u0275\u0275template(1, BusDetailComponent_form_5_ng_template_54_Conditional_1_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275conditional((ctx_r1.busDetailForm.controls["busTemplateId"].errors == null ? null : ctx_r1.busDetailForm.controls["busTemplateId"].errors["required"]) ? 1 : -1);
  }
}
function BusDetailComponent_form_5_div_56_ng_container_6_div_2_div_9_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 52);
    \u0275\u0275element(1, "svg-icon", 53);
    \u0275\u0275elementStart(2, "div", 54);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const cell_r9 = ctx.$implicit;
    const j_r10 = ctx.index;
    const layoutForMatrix_r11 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r1 = \u0275\u0275nextContext(4);
    \u0275\u0275styleProp("display", layoutForMatrix_r11.seatVisibleColumns[j_r10] ? "flex" : "none")("visibility", cell_r9.typeId ? "visible" : "hidden");
    \u0275\u0275classProp("status-changed", cell_r9.statusChanged)("status-deselected", cell_r9.statusDeselected);
    \u0275\u0275advance();
    \u0275\u0275property("svgClass", "icon !h-[40px] !w-[40px]")("src", ctx_r1.getIconByType(cell_r9));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(cell_r9.name);
  }
}
function BusDetailComponent_form_5_div_56_ng_container_6_div_2_div_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 50);
    \u0275\u0275template(1, BusDetailComponent_form_5_div_56_ng_container_6_div_2_div_9_div_1_Template, 4, 11, "div", 51);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r12 = ctx.$implicit;
    const i_r13 = ctx.index;
    const layoutForMatrix_r11 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275styleProp("display", layoutForMatrix_r11.seatDisplayRows[i_r13] ? "flex" : "none");
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", row_r12);
  }
}
function BusDetailComponent_form_5_div_56_ng_container_6_div_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div")(1, "div", 44)(2, "div", 45)(3, "label", 46);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(5, "div", 47)(6, "div")(7, "div")(8, "div", 48);
    \u0275\u0275template(9, BusDetailComponent_form_5_div_56_ng_container_6_div_2_div_9_Template, 2, 3, "div", 49);
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const layoutForMatrix_r11 = ctx.$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate(layoutForMatrix_r11.name);
    \u0275\u0275advance(5);
    \u0275\u0275property("ngForOf", layoutForMatrix_r11.seatsLayoutForMatrix);
  }
}
function BusDetailComponent_form_5_div_56_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 42);
    \u0275\u0275template(2, BusDetailComponent_form_5_div_56_ng_container_6_div_2_Template, 10, 2, "div", 43);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", ctx_r1.busTemplateReview.layoutsForMatrix);
  }
}
function BusDetailComponent_form_5_div_56_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 38)(1, "div", 39)(2, "label");
    \u0275\u0275text(3, "Bus Tempalte Review");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "button", 40);
    \u0275\u0275listener("click", function BusDetailComponent_form_5_div_56_Template_button_click_4_listener() {
      \u0275\u0275restoreView(_r8);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.editBusTempate());
    });
    \u0275\u0275text(5, " Edit BusTempate ");
    \u0275\u0275elementEnd()();
    \u0275\u0275template(6, BusDetailComponent_form_5_div_56_ng_container_6_Template, 3, 1, "ng-container", 41);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(6);
    \u0275\u0275property("ngIf", ctx_r1.busTemplateReview == null ? null : ctx_r1.busTemplateReview.layoutsForMatrix);
  }
}
function BusDetailComponent_form_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "form", 12);
    \u0275\u0275listener("ngSubmit", function BusDetailComponent_form_5_Template_form_ngSubmit_0_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit());
    });
    \u0275\u0275elementStart(1, "div", 13)(2, "div", 14)(3, "nz-form-item", 15)(4, "nz-form-label", 16);
    \u0275\u0275text(5, "Name");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "nz-form-control", 17)(7, "nz-input-group", 18);
    \u0275\u0275element(8, "input", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275template(9, BusDetailComponent_form_5_ng_template_9_Template, 1, 0, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(11, BusDetailComponent_form_5_ng_template_11_Template, 2, 1, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(13, "div", 14)(14, "nz-form-item", 15)(15, "nz-form-label", 20);
    \u0275\u0275text(16, "License Plate");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(17, "nz-form-control", 17)(18, "nz-input-group", 18);
    \u0275\u0275element(19, "input", 21);
    \u0275\u0275elementEnd();
    \u0275\u0275template(20, BusDetailComponent_form_5_ng_template_20_Template, 1, 0, "ng-template", null, 2, \u0275\u0275templateRefExtractor)(22, BusDetailComponent_form_5_ng_template_22_Template, 2, 1, "ng-template", null, 3, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(24, "div", 13)(25, "div", 14)(26, "nz-form-item", 15)(27, "nz-form-label", 22);
    \u0275\u0275text(28, "Bus Services");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(29, "nz-form-control", 23)(30, "nz-select", 24);
    \u0275\u0275repeaterCreate(31, BusDetailComponent_form_5_For_32_Template, 5, 5, "nz-option", 25, \u0275\u0275repeaterTrackByIdentity);
    \u0275\u0275elementEnd();
    \u0275\u0275template(33, BusDetailComponent_form_5_ng_template_33_Template, 2, 1, "ng-template", null, 4, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(35, "div", 14)(36, "nz-form-item", 15)(37, "nz-form-label", 26);
    \u0275\u0275text(38, "Bus Types");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(39, "nz-form-control", 23)(40, "nz-select", 27);
    \u0275\u0275repeaterCreate(41, BusDetailComponent_form_5_For_42_Template, 4, 3, "nz-option", 25, \u0275\u0275repeaterTrackByIdentity);
    \u0275\u0275elementEnd();
    \u0275\u0275template(43, BusDetailComponent_form_5_ng_template_43_Template, 2, 1, "ng-template", null, 5, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(45, "div", 13)(46, "div", 14)(47, "nz-form-item", 15)(48, "nz-form-label", 28);
    \u0275\u0275text(49, "Bus Template");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(50, "nz-form-control", 23)(51, "nz-select", 29);
    \u0275\u0275listener("ngModelChange", function BusDetailComponent_form_5_Template_nz_select_ngModelChange_51_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.chooseBusTemplate($event));
    });
    \u0275\u0275repeaterCreate(52, BusDetailComponent_form_5_For_53_Template, 4, 3, "nz-option", 25, \u0275\u0275repeaterTrackByIdentity);
    \u0275\u0275elementEnd();
    \u0275\u0275template(54, BusDetailComponent_form_5_ng_template_54_Template, 2, 1, "ng-template", null, 6, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275template(56, BusDetailComponent_form_5_div_56_Template, 7, 1, "div", 30);
    \u0275\u0275elementStart(57, "div", 31)(58, "button", 32);
    \u0275\u0275text(59, " SAVE ");
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const busTemplateDetailNameClearTpl_r14 = \u0275\u0275reference(10);
    const busTemplateDetailNameErrorTpl_r15 = \u0275\u0275reference(12);
    const busTemplateDetailLicensePlateClearTpl_r16 = \u0275\u0275reference(21);
    const busTemplateDetailLicensePlateErrorTpl_r17 = \u0275\u0275reference(23);
    const busTemplateDetailBusServiceIdsErrorTpl_r18 = \u0275\u0275reference(34);
    const busTemplateDetailBusTypeIdErrorTpl_r19 = \u0275\u0275reference(44);
    const busTemplateDetailBusTemplateIdErrorTpl_r20 = \u0275\u0275reference(55);
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("formGroup", ctx_r1.busDetailForm);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzErrorTip", busTemplateDetailNameErrorTpl_r15);
    \u0275\u0275advance();
    \u0275\u0275property("nzSuffix", busTemplateDetailNameClearTpl_r14);
    \u0275\u0275advance(10);
    \u0275\u0275property("nzErrorTip", busTemplateDetailLicensePlateErrorTpl_r17);
    \u0275\u0275advance();
    \u0275\u0275property("nzSuffix", busTemplateDetailLicensePlateClearTpl_r16);
    \u0275\u0275advance(11);
    \u0275\u0275property("nzErrorTip", busTemplateDetailBusServiceIdsErrorTpl_r18);
    \u0275\u0275advance(2);
    \u0275\u0275repeater(ctx_r1.busServices);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 6);
    \u0275\u0275advance(2);
    \u0275\u0275property("nzErrorTip", busTemplateDetailBusTypeIdErrorTpl_r19);
    \u0275\u0275advance(2);
    \u0275\u0275repeater(ctx_r1.busTypes);
    \u0275\u0275advance(7);
    \u0275\u0275property("nzSpan", 6);
    \u0275\u0275advance(2);
    \u0275\u0275property("nzErrorTip", busTemplateDetailBusTemplateIdErrorTpl_r20);
    \u0275\u0275advance(2);
    \u0275\u0275repeater(ctx_r1.busTemplates);
    \u0275\u0275advance(4);
    \u0275\u0275property("ngIf", ctx_r1.busDetailForm.controls["busTemplateId"].value);
  }
}
var BusDetailComponent = class _BusDetailComponent {
  constructor(fb, utils, location, busServicesService, busTypesService, busTemplatesService, seatTypesService, busesService, router) {
    this.fb = fb;
    this.utils = utils;
    this.location = location;
    this.busServicesService = busServicesService;
    this.busTypesService = busTypesService;
    this.busTemplatesService = busTemplatesService;
    this.seatTypesService = seatTypesService;
    this.busesService = busesService;
    this.router = router;
    this.busServices = [];
    this.busTypes = [];
    this.busTemplates = [];
    this.seatTypes = [];
    this.rows = 11;
    this.cols = 7;
  }
  ngOnInit() {
    this.getQueryParams();
    this.initData();
  }
  getQueryParams() {
    return __async(this, null, function* () {
      const params = history.state;
      if (params) {
        this.bus = params["bus"] ? JSON.parse(params["bus"]) : null;
      }
    });
  }
  initData() {
    let findAllBusService = this.busServicesService.findAll();
    let findAllBusType = this.busTypesService.findAll();
    let findAllBusTemplate = this.busTemplatesService.findAll();
    let findAllSeatType = this.seatTypesService.findAll();
    let request = [findAllBusService, findAllBusType, findAllBusTemplate, findAllSeatType];
    combineLatest(request).subscribe((_0) => __async(this, [_0], function* ([busServices, busTypes, busTemplates, seatTypes]) {
      this.busServices = busServices;
      this.busTypes = busTypes;
      this.busTemplates = busTemplates;
      this.seatTypes = seatTypes;
      this.initForm();
    }));
  }
  initForm() {
    return __async(this, null, function* () {
      this.busDetailForm = this.fb.group({
        name: [this.bus?.name ?? "", [Validators.required]],
        licensePlate: [this.bus?.licensePlate ?? "", [Validators.required]],
        busServiceIds: [this.bus?.busServiceIds ?? [], [Validators.required]],
        busTypeId: [this.bus?.busTypeId ?? "", [Validators.required]],
        busTemplateId: [this.bus?.busTemplateId ?? "", [Validators.required]]
      });
      if (this.busDetailForm.get("busTemplateId")?.value) {
        this.chooseBusTemplate(this.busDetailForm.get("busTemplateId")?.value);
      }
    });
  }
  chooseBusTemplate(busTemplateId) {
    return __async(this, null, function* () {
      this.busTemplateReview = this.busTemplates.find((busTemplate) => busTemplate._id === busTemplateId);
      this.busTemplateReview.layoutsForMatrix = [];
      yield this.initializeMatrix(this.busTemplateReview.seatLayouts, this.busTemplateReview.layoutsForMatrix, (layouts) => {
        this.busTemplateReview.layoutsForMatrix = layouts;
      });
    });
  }
  initializeMatrix(seatLayouts, layoutsForMatrix, out) {
    return __async(this, null, function* () {
      for (const seatLayout of seatLayouts) {
        const layoutForMatrix = {
          name: seatLayout.name,
          seatDisplayRows: [],
          seatVisibleColumns: [],
          seatsLayoutForMatrix: Array.from({ length: this.rows }, (_3, i) => Array.from({ length: this.cols }, (_4, j) => ({
            _id: "",
            index: i * this.cols + j + 1,
            typeId: "",
            name: "",
            status: "available",
            statusChanged: false,
            statusDeselected: false
          })))
        };
        for (const cell of seatLayout.seats) {
          const row = Math.floor((cell.index - 1) / this.cols);
          const col = (cell.index - 1) % this.cols;
          layoutForMatrix.seatsLayoutForMatrix[row][col] = __spreadProps(__spreadValues({}, cell), {
            statusChanged: false,
            statusDeselected: false
          });
        }
        yield this.updateDisplayMatrix(layoutForMatrix.seatsLayoutForMatrix, layoutForMatrix.seatDisplayRows, layoutForMatrix.seatVisibleColumns, (matrix, displayRows, visibleColumns) => {
          layoutForMatrix.seatsLayoutForMatrix = matrix;
          layoutForMatrix.seatDisplayRows = displayRows;
          layoutForMatrix.seatVisibleColumns = visibleColumns;
        });
        layoutsForMatrix.push(layoutForMatrix);
      }
      yield out(layoutsForMatrix);
    });
  }
  updateDisplayMatrix(matrix, displayRows, visibleColumns, out) {
    return __async(this, null, function* () {
      const rows = matrix.length;
      const cols = matrix[0].length;
      displayRows = Array(rows).fill(false);
      visibleColumns = Array(cols).fill(false);
      const selectedColumns = [];
      const selectedRows = /* @__PURE__ */ new Set();
      matrix.forEach((row, i) => {
        row.forEach((cell, j) => {
          if (cell.typeId) {
            displayRows[i] = true;
            selectedColumns.push(j);
            selectedRows.add(i);
          }
        });
      });
      const selectedRowsArray = Array.from(selectedRows).sort((a, b) => a - b);
      selectedRowsArray.forEach((row, index, array) => {
        for (let i = row; i <= array[array.length - 1]; i++) {
          displayRows[i] = true;
        }
      });
      if (selectedColumns.length > 0) {
        selectedColumns.sort((a, b) => a - b);
        const [firstCol, lastCol] = [selectedColumns[0], selectedColumns[selectedColumns.length - 1]];
        for (let j = firstCol; j <= lastCol; j++) {
          visibleColumns[j] = true;
        }
      }
      out(matrix, displayRows, visibleColumns);
    });
  }
  getIconByType(cell) {
    const selectedType = this.seatTypes.find((t) => t._id === cell.typeId);
    if (!selectedType)
      return "";
    if (cell.status === "selected") {
      return selectedType.selectedIcon;
    } else if (cell.status === "block" || cell.status === "booked") {
      return selectedType.blockIcon;
    }
    return selectedType.icon;
  }
  backPage() {
    this.location.back();
  }
  editBusTempate() {
    const allowedKeys = ["_id", "name", "seatLayouts"];
    const combinedBusTemplate = Object.fromEntries(Object.entries(this.busTemplateReview).filter(([key]) => allowedKeys.includes(key)));
    const params = { busTemplate: JSON.stringify(combinedBusTemplate) };
    this.router.navigateByUrl("/management/bus-templates/bus-template-detail", { state: params });
  }
  onSubmit() {
    if (!this.busDetailForm.valid) {
      this.utils.markFormGroupTouched(this.busDetailForm);
      return;
    }
    const data = this.busDetailForm.getRawValue();
    const bus2Create = __spreadValues({}, data);
    if (this.bus) {
      const bus2Update = __spreadProps(__spreadValues({}, bus2Create), {
        _id: this.bus._id
        // Thêm thuộc tính _id
      });
      this.updateBus(bus2Update);
      return;
    }
    this.createBus(bus2Create);
  }
  updateBus(bus2Update) {
    this.busesService.updateBus(bus2Update).subscribe({
      next: (res) => {
        if (res) {
          const updatedState = __spreadProps(__spreadValues({}, history.state), { bus: JSON.stringify(res) });
          window.history.replaceState(updatedState, "", window.location.href);
          toast.success("Bus update successfully");
        }
      },
      error: (error2) => this.utils.handleRequestError(error2)
    });
  }
  createBus(bus2Create) {
    this.busesService.createBus(bus2Create).subscribe({
      next: (res) => {
        if (res) {
          toast.success("Bus added successfully");
        }
      },
      error: (error2) => this.utils.handleRequestError(error2)
    });
  }
  static {
    this.\u0275fac = function BusDetailComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusDetailComponent)(\u0275\u0275directiveInject(FormBuilder), \u0275\u0275directiveInject(Utils), \u0275\u0275directiveInject(Location), \u0275\u0275directiveInject(BusServicesService), \u0275\u0275directiveInject(BusTypesService), \u0275\u0275directiveInject(BusTemplatesService), \u0275\u0275directiveInject(SeatTypesService), \u0275\u0275directiveInject(BusesService), \u0275\u0275directiveInject(Router));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _BusDetailComponent, selectors: [["app-bus-detail"]], standalone: false, decls: 6, vars: 1, consts: [["busTemplateDetailNameClearTpl", ""], ["busTemplateDetailNameErrorTpl", ""], ["busTemplateDetailLicensePlateClearTpl", ""], ["busTemplateDetailLicensePlateErrorTpl", ""], ["busTemplateDetailBusServiceIdsErrorTpl", ""], ["busTemplateDetailBusTypeIdErrorTpl", ""], ["busTemplateDetailBusTemplateIdErrorTpl", ""], [1, "mb-4", "flex", "justify-end"], [1, "inline-block", "space-x-4"], [1, "bg-muted", "text-muted-foreground", "hover:text-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold", 3, "click"], [1, "border-muted/20", "bg-background", "flex", "min-w-full", "flex-col", "rounded-xl", "border", "px-6", "py-2"], ["nz-form", "", 3, "formGroup", "ngSubmit", 4, "ngIf"], ["nz-form", "", 3, "ngSubmit", "formGroup"], [1, "flex", "gap-4"], [1, "flex", "w-6/12"], [1, "!w-full"], ["nzFor", "name", 1, "!flex", "!h-[36px]", "!items-center", "!justify-start"], [1, "!flex", "!h-[56px]", "flex-col", 3, "nzErrorTip"], [1, "custom-nz-input-group", "!mt-0", "!mb-0", "!h-[36px]", 3, "nzSuffix"], ["type", "text", "nz-input", "", "formControlName", "name", "placeholder", "Nh\u1EADp Name"], ["nzFor", "licensePlate", 1, "!flex", "!h-[36px]", "!items-center", "!justify-start"], ["type", "text", "nz-input", "", "formControlName", "licensePlate", "placeholder", "Nh\u1EADp License Plate"], ["nzFor", "busServiceIds", 1, "!flex", "!h-[36px]", "!items-center", "!justify-start"], [3, "nzErrorTip"], ["formControlName", "busServiceIds", "nzMode", "multiple", "nzPlaceHolder", "Ch\u1ECDn Bus Services"], ["nzCustomContent", "", 3, "nzLabel", "nzValue"], ["nzFor", "busTypeId", 1, "!flex", "!h-[36px]", "!items-center", "!justify-start", 3, "nzSpan"], ["formControlName", "busTypeId", "nzPlaceHolder", "Ch\u1ECDn Bus Type"], ["nzFor", "busTemplateId", 1, "!flex", "!h-[36px]", "!items-center", "!justify-start", 3, "nzSpan"], ["formControlName", "busTemplateId", "nzPlaceHolder", "Ch\u1ECDn Bus Tempate", 3, "ngModelChange"], ["class", "flex flex-col gap-4 pt-5", 4, "ngIf"], [1, "my-5", "flex", "w-full", "justify-end"], ["nz-button", "", "nzType", "default", "type", "submit", 1, "!min-w-24", "!bg-primary", "!flex", "!h-max", "!justify-center", "!rounded-lg", "!py-2", "!px-3", "!text-white", "hover:!border-red-500", "hover:!bg-red-200", "hover:!text-red-500"], ["nz-icon", "", "nzTheme", "fill", "nzType", "close-circle", 1, "ant-input-clear-icon", 3, "click"], [1, "mt-1", "!text-xs", "text-red-500"], [1, "flex", "items-center"], [3, "src", "svgClass"], [1, "pl-4", "!font-medium"], [1, "flex", "flex-col", "gap-4", "pt-5"], [1, "flex", "justify-between"], ["nz-button", "", "nzType", "default", 1, "!min-w-24", "!flex", "!h-max", "!justify-center", "!rounded-lg", "!py-2", "!px-3", "hover:!border-red-500", "hover:!bg-red-200", "hover:!text-red-500", 3, "click"], [4, "ngIf"], [1, "flex", "w-full", "justify-center", "gap-10"], [4, "ngFor", "ngForOf"], [1, "p-2"], [1, "text-center"], [1, "text-base"], [1, "px-2", "py-3"], [1, "matrix"], ["class", "row", 3, "display", 4, "ngFor", "ngForOf"], [1, "row"], ["class", "cell", 3, "status-changed", "status-deselected", "display", "visibility", 4, "ngFor", "ngForOf"], [1, "cell"], [3, "svgClass", "src"], [1, "cell-name", "!text-xs"]], template: function BusDetailComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 7)(1, "div", 8)(2, "button", 9);
        \u0275\u0275listener("click", function BusDetailComponent_Template_button_click_2_listener() {
          return ctx.backPage();
        });
        \u0275\u0275text(3, " Back ");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(4, "div", 10);
        \u0275\u0275template(5, BusDetailComponent_form_5_Template, 60, 11, "form", 11);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275advance(5);
        \u0275\u0275property("ngIf", ctx.busDetailForm);
      }
    }, dependencies: [NgForOf, NgIf, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, FormGroupDirective, FormControlName, SvgIconComponent, NzOptionComponent, NzSelectComponent, NzButtonComponent, NzTransitionPatchDirective, NzWaveDirective, NzInputDirective, NzInputGroupComponent, NzInputGroupWhitSuffixOrPrefixDirective, NzColDirective, NzRowDirective, NzFormDirective, NzFormItemComponent, NzFormLabelComponent, NzFormControlComponent, NzIconDirective], styles: ['@charset "UTF-8";\n\n\n\n.matrix[_ngcontent-%COMP%] {\n  display: grid;\n  gap: 15px;\n  justify-items: start;\n}\n.matrix[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%] {\n  width: auto;\n  height: auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  text-align: center;\n}\n.matrix[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   .cell-name[_ngcontent-%COMP%] {\n  position: absolute;\n  font-size: 10px;\n}\n.matrix[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   .hidden[_ngcontent-%COMP%] {\n  visibility: hidden;\n}\n.matrix[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   .icon[_ngcontent-%COMP%] {\n  width: 28px;\n  height: 28px;\n}\n.matrix[_ngcontent-%COMP%]   .cell.status-changed[_ngcontent-%COMP%] {\n  animation: statusChange 0.3s forwards;\n}\n.matrix[_ngcontent-%COMP%]   .cell.status-deselected[_ngcontent-%COMP%] {\n  animation: statusDeselect 0.3s forwards;\n}\n/*# sourceMappingURL=bus-detail.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(BusDetailComponent, { className: "BusDetailComponent", filePath: "src/app/modules/management/pages/buses/pages/bus-detail/bus-detail.component.ts", lineNumber: 28 });
})();

// src/app/modules/management/pages/bus-routes/model/bus-route.model.ts
var SearchBusRoute = class {
  constructor() {
    this.busRoutes = [];
    this.pageIdx = 0;
    this.totalItem = 0;
    this.totalPage = 0;
  }
};

// src/app/modules/management/pages/bus-routes/service/bus-routes.servive.ts
var BusRoutesService = class _BusRoutesService {
  constructor(apiGatewayService) {
    this.apiGatewayService = apiGatewayService;
    this.url = "/bus-routes";
  }
  findAll() {
    const url = `${this.url}/findAll`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  searchBusRoute(pageIdx = 0, pageSize = 999, keyword = "", sortBy = "") {
    const url = `${this.url}/search?pageIdx=${pageIdx}&pageSize=${pageSize}&keyword=${keyword}&sortBy=${sortBy}`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  createBusRoute(busRoute2Create) {
    const url = this.url;
    return this.apiGatewayService.post(url, busRoute2Create).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  updateBusRoute(busRoute2Update) {
    const url = this.url;
    return this.apiGatewayService.put(url, busRoute2Update).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  deleteBusRoute(id) {
    const deleteOptionUrl = this.url + `/${id}`;
    return this.apiGatewayService.delete(deleteOptionUrl).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  static {
    this.\u0275fac = function BusRoutesService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusRoutesService)(\u0275\u0275inject(ApiGatewayService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _BusRoutesService, factory: _BusRoutesService.\u0275fac, providedIn: "root" });
  }
};

// src/app/modules/management/pages/bus-routes/bus-routes.component.ts
var _forTrack012 = ($index, $item) => $item._id;
function BusRoutesComponent_For_24_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr", 13)(1, "td", 15)(2, "input", 16);
    \u0275\u0275twoWayListener("ngModelChange", function BusRoutesComponent_For_24_Template_input_ngModelChange_2_listener($event) {
      const busRoute_r2 = \u0275\u0275restoreView(_r1).$implicit;
      \u0275\u0275twoWayBindingSet(busRoute_r2.selected, $event) || (busRoute_r2.selected = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function BusRoutesComponent_For_24_Template_input_change_2_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.checkSelectAll());
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(3, "td");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "td");
    \u0275\u0275text(6);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "td");
    \u0275\u0275text(8);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "td", 15)(10, "button", 17);
    \u0275\u0275listener("click", function BusRoutesComponent_For_24_Template_button_click_10_listener() {
      const busRoute_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.editBus(busRoute_r2));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(11, "svg", 18);
    \u0275\u0275element(12, "path", 19);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(13, "button", 20);
    \u0275\u0275listener("click", function BusRoutesComponent_For_24_Template_button_click_13_listener() {
      const busRoute_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.deleteBus(busRoute_r2._id));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(14, "svg", 18);
    \u0275\u0275element(15, "path", 21);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const busRoute_r2 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", busRoute_r2.selected);
    \u0275\u0275attribute("aria-label", "Select " + busRoute_r2.name);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(busRoute_r2.name);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1("", busRoute_r2.distance, " Km");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(busRoute_r2.distanceTime);
  }
}
function BusRoutesComponent_ForEmpty_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr")(1, "td", 22);
    \u0275\u0275text(2, "No busRoutes found");
    \u0275\u0275elementEnd()();
  }
}
var BusRoutesComponent = class _BusRoutesComponent {
  constructor(busRoutesService, dialog, utils, router) {
    this.busRoutesService = busRoutesService;
    this.dialog = dialog;
    this.utils = utils;
    this.router = router;
    this.searchBusRoute = new SearchBusRoute();
    this.selectAll = false;
    this.pageIdx = 1;
    this.pageSize = 5;
    this.totalPage = 0;
    this.totalItem = 0;
    this.keyword = "";
    this.sortBy = "";
    this.isLoadingBus = false;
  }
  ngOnInit() {
    this.loadData();
  }
  loadData() {
    this.isLoadingBus = true;
    this.busRoutesService.searchBusRoute(this.pageIdx, this.pageSize, this.keyword, this.sortBy).subscribe({
      next: (res) => {
        if (res) {
          this.searchBusRoute = res;
          console.log("\u{1F680} ~ BusesComponent ~ this.busRoutesService.searchBus ~ this.searchBusRoute:", this.searchBusRoute);
          this.totalItem = this.searchBusRoute.totalItem;
          this.totalPage = this.searchBusRoute.totalPage;
        }
        this.isLoadingBus = false;
      },
      error: (error2) => {
        this.utils.handleRequestError(error2);
        this.isLoadingBus = false;
      }
    });
  }
  toggleBus(event2) {
    const checked = event2.target.checked;
    this.searchBusRoute.busRoutes = this.searchBusRoute.busRoutes.map((busRoute) => __spreadProps(__spreadValues({}, busRoute), {
      selected: checked
    }));
  }
  checkSelectAll() {
    this.selectAll = !this.searchBusRoute.busRoutes.some((busRoute) => !busRoute.selected);
  }
  deleteBus(id) {
    const dialogRef = this.dialog.open(MaterialDialogComponent, {
      data: {
        icon: {
          type: "dangerous"
        },
        title: "Delete Bus",
        content: "Are you sure you want to delete this bus? All of your data will be permanently removed. This action cannot be undone.",
        btn: [
          {
            label: "NO",
            type: "cancel"
          },
          {
            label: "YES",
            type: "submit"
          }
        ]
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        this.busRoutesService.deleteBusRoute(id).subscribe({
          next: (res) => {
            if (res) {
              this.searchBusRoute.busRoutes = this.searchBusRoute.busRoutes.filter((bus) => bus._id !== id);
              toast.success("Bus deleted successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  editBus(busRoute) {
    const params = { busRoute: JSON.stringify(busRoute) };
    this.router.navigateByUrl("/management/bus-routes/bus-route-detail", { state: params });
  }
  addBus() {
    this.router.navigate(["/management/bus-routes/bus-route-detail"]);
  }
  reloadBusPage(data) {
    this.pageIdx = data.pageIdx;
    this.pageSize = data.pageSize;
    this.loadData();
  }
  searchBusPage(keyword) {
    this.pageIdx = 1;
    this.keyword = keyword;
    this.loadData();
  }
  sortBusPage(sortBy) {
    this.sortBy = sortBy;
    this.loadData();
  }
  handleRequestError(error2) {
    const msg = "An error occurred while processing your request";
    toast.error(msg, {
      position: "bottom-right",
      description: error2.message || "Please try again later",
      action: {
        label: "Dismiss",
        onClick: () => {
        }
      },
      actionButtonStyle: "background-color:#DC2626; color:white;"
    });
  }
  static {
    this.\u0275fac = function BusRoutesComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusRoutesComponent)(\u0275\u0275directiveInject(BusRoutesService), \u0275\u0275directiveInject(MatDialog), \u0275\u0275directiveInject(Utils), \u0275\u0275directiveInject(Router));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _BusRoutesComponent, selectors: [["app-bus-routes"]], standalone: false, decls: 27, vars: 9, consts: [[1, "mb-4", "flex", "justify-end"], [1, "inline-block", "space-x-4"], ["aria-label", "Import CSV", 1, "bg-muted", "text-muted-foreground", "hover:text-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold"], ["aria-label", "Add Bus", 1, "bg-primary", "text-primary-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold", 3, "click"], [1, "border-muted/20", "bg-background", "flex", "min-w-full", "flex-col", "rounded-xl", "border", "p-2"], [3, "sortDataEvent", "searchDataEvent", "title", "totalItem"], [1, "overflow-x-auto"], [1, "text-muted-foreground", "w-full", "table-auto", "border-collapse", "text-left", "align-middle", "leading-5"], [1, "border-muted/20", "text-muted-foreground", "border", "text-xs"], [1, "w-[50px]"], ["type", "checkbox", "aria-label", "Select all busRoutes", 1, "checkbox", "checkbox-sm", 3, "change", "ngModelChange", "ngModel"], [1, "min-w-[200px]"], [1, "w-[100px]", "text-center"], [1, "hover:bg-card/50"], [3, "reloadDataAndPageEvent", "pageIdx", "pageSize", "totalItem", "isLoading", "totalPage"], [1, "text-center"], ["type", "checkbox", 1, "checkbox", "checkbox-sm", 3, "ngModelChange", "change", "ngModel"], ["aria-label", "Edit busRoute", 1, "text-muted-foreground", "hover:bg-card", "hover:text-foreground", "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", 3, "click"], ["viewBox", "0 0 20 20", "fill", "currentColor", 1, "size-5"], ["d", "m2.695 14.762-1.262 3.155a.5.5 0 0 0 .65.65l3.155-1.262a4 4 0 0 0 1.343-.886L17.5 5.501a2.121 2.121 0 0 0-3-3L3.58 13.419a4 4 0 0 0-.885 1.343Z"], ["aria-label", "Delete busRoute", 1, "text-muted-foreground", "hover:bg-card", "hover:text-foreground", "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", 3, "click"], ["fill-rule", "evenodd", "d", "M8.75 1A2.75 2.75 0 0 0 6 3.75v.443c-.795.077-1.584.176-2.365.298a.75.75 0 1 0 .23 1.482l.149-.022.841 10.518A2.75 2.75 0 0 0 7.596 19h4.807a2.75 2.75 0 0 0 2.742-2.53l.841-10.52.149.023a.75.75 0 0 0 .23-1.482A41.03 41.03 0 0 0 14 4.193V3.75A2.75 2.75 0 0 0 11.25 1h-2.5ZM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25v.325C8.327 4.025 9.16 4 10 4ZM8.58 7.72a.75.75 0 0 0-1.5.06l.3 7.5a.75.75 0 1 0 1.5-.06l-.3-7.5Zm4.34.06a.75.75 0 1 0-1.5-.06l-.3 7.5a.75.75 0 1 0 1.5.06l.3-7.5Z", "clip-rule", "evenodd"], ["colspan", "4", 1, "py-4", "text-center", "text-sm"]], template: function BusRoutesComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "button", 2);
        \u0275\u0275text(3, " Import CSV ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(4, "button", 3);
        \u0275\u0275listener("click", function BusRoutesComponent_Template_button_click_4_listener() {
          return ctx.addBus();
        });
        \u0275\u0275text(5, " Add Bus Route ");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(6, "div", 4)(7, "app-table-action", 5);
        \u0275\u0275listener("sortDataEvent", function BusRoutesComponent_Template_app_table_action_sortDataEvent_7_listener($event) {
          return ctx.sortBusPage($event);
        })("searchDataEvent", function BusRoutesComponent_Template_app_table_action_searchDataEvent_7_listener($event) {
          return ctx.searchBusPage($event);
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "div", 6)(9, "table", 7)(10, "thead", 8)(11, "tr")(12, "th", 9)(13, "input", 10);
        \u0275\u0275listener("change", function BusRoutesComponent_Template_input_change_13_listener($event) {
          return ctx.toggleBus($event);
        });
        \u0275\u0275twoWayListener("ngModelChange", function BusRoutesComponent_Template_input_ngModelChange_13_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.selectAll, $event) || (ctx.selectAll = $event);
          return $event;
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(14, "th", 11);
        \u0275\u0275text(15, "Name");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(16, "th", 11);
        \u0275\u0275text(17, "Distance");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(18, "th", 11);
        \u0275\u0275text(19, "DistanceTime");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(20, "th", 12);
        \u0275\u0275text(21, "Actions");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(22, "tbody");
        \u0275\u0275repeaterCreate(23, BusRoutesComponent_For_24_Template, 16, 5, "tr", 13, _forTrack012, false, BusRoutesComponent_ForEmpty_25_Template, 3, 0, "tr");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(26, "app-table-footer", 14);
        \u0275\u0275listener("reloadDataAndPageEvent", function BusRoutesComponent_Template_app_table_footer_reloadDataAndPageEvent_26_listener($event) {
          return ctx.reloadBusPage($event);
        });
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(7);
        \u0275\u0275property("title", "Bus Route")("totalItem", ctx.totalItem);
        \u0275\u0275advance(6);
        \u0275\u0275twoWayProperty("ngModel", ctx.selectAll);
        \u0275\u0275advance(10);
        \u0275\u0275repeater(ctx.searchBusRoute.busRoutes);
        \u0275\u0275advance(3);
        \u0275\u0275property("pageIdx", ctx.pageIdx)("pageSize", ctx.pageSize)("totalItem", ctx.totalItem)("isLoading", ctx.isLoadingBus)("totalPage", ctx.totalPage);
      }
    }, dependencies: [CheckboxControlValueAccessor, NgControlStatus, NgModel, TableFooterComponent, TableActionComponent], styles: ["\n\ntd[_ngcontent-%COMP%] {\n  padding: 0.75rem 1rem;\n  font-size: 0.85rem;\n}\nth[_ngcontent-%COMP%] {\n  font-weight: 500;\n  padding: 0.625rem 1rem;\n  font-weight: 500;\n  font-size: 0.8125rem;\n  line-height: 1.125rem;\n  vertical-align: middle;\n  @apply border-b border-r;\n}\n/*# sourceMappingURL=bus-routes.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(BusRoutesComponent, { className: "BusRoutesComponent", filePath: "src/app/modules/management/pages/bus-routes/bus-routes.component.ts", lineNumber: 16 });
})();

// src/app/modules/management/pages/bus-routes/pages/bus-route-detail/bus-route-detail.component.ts
function BusRouteDetailComponent_form_5_ng_template_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 37);
    \u0275\u0275listener("click", function BusRouteDetailComponent_form_5_ng_template_9_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.busRouteDetailForm.controls["name"].patchValue(""));
    });
    \u0275\u0275elementEnd();
  }
}
function BusRouteDetailComponent_form_5_ng_template_11_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Vui l\xF2ng nh\u1EADp tr\u01B0\u1EDDng n\xE0y ");
  }
}
function BusRouteDetailComponent_form_5_ng_template_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 38);
    \u0275\u0275template(1, BusRouteDetailComponent_form_5_ng_template_11_Conditional_1_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275conditional((ctx_r1.busRouteDetailForm.controls["name"].errors == null ? null : ctx_r1.busRouteDetailForm.controls["name"].errors["required"]) ? 1 : -1);
  }
}
function BusRouteDetailComponent_form_5_ng_template_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 37);
    \u0275\u0275listener("click", function BusRouteDetailComponent_form_5_ng_template_20_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.busRouteDetailForm.controls["distance"].patchValue(""));
    });
    \u0275\u0275elementEnd();
  }
}
function BusRouteDetailComponent_form_5_ng_template_22_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Vui l\xF2ng nh\u1EADp tr\u01B0\u1EDDng n\xE0y ");
  }
}
function BusRouteDetailComponent_form_5_ng_template_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 38);
    \u0275\u0275template(1, BusRouteDetailComponent_form_5_ng_template_22_Conditional_1_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275conditional((ctx_r1.busRouteDetailForm.controls["distance"].errors == null ? null : ctx_r1.busRouteDetailForm.controls["distance"].errors["required"]) ? 1 : -1);
  }
}
function BusRouteDetailComponent_form_5_ng_template_32_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 37);
    \u0275\u0275listener("click", function BusRouteDetailComponent_form_5_ng_template_32_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r5);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.busRouteDetailForm.controls["distanceTime"].patchValue(""));
    });
    \u0275\u0275elementEnd();
  }
}
function BusRouteDetailComponent_form_5_ng_template_34_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Vui l\xF2ng nh\u1EADp tr\u01B0\u1EDDng n\xE0y ");
  }
}
function BusRouteDetailComponent_form_5_ng_template_34_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 38);
    \u0275\u0275template(1, BusRouteDetailComponent_form_5_ng_template_34_Conditional_1_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275conditional((ctx_r1.busRouteDetailForm.controls["distanceTime"].errors == null ? null : ctx_r1.busRouteDetailForm.controls["distanceTime"].errors["required"]) ? 1 : -1);
  }
}
function BusRouteDetailComponent_form_5_ng_template_43_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 37);
    \u0275\u0275listener("click", function BusRouteDetailComponent_form_5_ng_template_43_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.busRouteDetailForm.controls["price"].patchValue(""));
    });
    \u0275\u0275elementEnd();
  }
}
function BusRouteDetailComponent_form_5_ng_template_45_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Vui l\xF2ng nh\u1EADp tr\u01B0\u1EDDng n\xE0y ");
  }
}
function BusRouteDetailComponent_form_5_ng_template_45_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 38);
    \u0275\u0275template(1, BusRouteDetailComponent_form_5_ng_template_45_Conditional_1_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275conditional((ctx_r1.busRouteDetailForm.controls["price"].errors == null ? null : ctx_r1.busRouteDetailForm.controls["price"].errors["required"]) ? 1 : -1);
  }
}
function BusRouteDetailComponent_form_5_nz_form_item_53_For_5_For_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-option", 44)(1, "div", 45)(2, "span", 46);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const busStation_r7 = ctx.$implicit;
    \u0275\u0275property("nzLabel", busStation_r7.name)("nzValue", busStation_r7._id);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", busStation_r7.name, " ");
  }
}
function BusRouteDetailComponent_form_5_nz_form_item_53_For_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-option-group", 42);
    \u0275\u0275repeaterCreate(1, BusRouteDetailComponent_form_5_nz_form_item_53_For_5_For_2_Template, 4, 3, "nz-option", 44, \u0275\u0275repeaterTrackByIdentity);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const busProvince_r8 = ctx.$implicit;
    \u0275\u0275propertyInterpolate("nzLabel", busProvince_r8.name);
    \u0275\u0275advance();
    \u0275\u0275repeater(busProvince_r8.busStations);
  }
}
function BusRouteDetailComponent_form_5_nz_form_item_53_svg_icon_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "svg-icon", 47);
    \u0275\u0275listener("click", function BusRouteDetailComponent_form_5_nz_form_item_53_svg_icon_6_Template_svg_icon_click_0_listener() {
      \u0275\u0275restoreView(_r9);
      const i_r10 = \u0275\u0275nextContext().index;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.removeBreakPoint(i_r10));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275property("svgClass", "h-5 w-5 ml-2 cursor-pointer");
  }
}
function BusRouteDetailComponent_form_5_nz_form_item_53_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-form-item", 39)(1, "nz-form-control")(2, "nz-input-group", 40)(3, "nz-select", 41);
    \u0275\u0275repeaterCreate(4, BusRouteDetailComponent_form_5_nz_form_item_53_For_5_Template, 3, 1, "nz-option-group", 42, \u0275\u0275repeaterTrackByIdentity);
    \u0275\u0275elementEnd();
    \u0275\u0275template(6, BusRouteDetailComponent_form_5_nz_form_item_53_svg_icon_6_Template, 1, 1, "svg-icon", 43);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const i_r10 = ctx.index;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("formGroupName", i_r10);
    \u0275\u0275advance(4);
    \u0275\u0275repeater(ctx_r1.filteredProvinces);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", ctx_r1.breakPoints.controls.length > 2);
  }
}
function BusRouteDetailComponent_form_5_div_58_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 48)(1, "span", 49);
    \u0275\u0275text(2, "Vui l\xF2ng ch\u1ECDn \xEDt nh\u1EA5t 2 bus station.");
    \u0275\u0275elementEnd()();
  }
}
function BusRouteDetailComponent_form_5_div_59_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 48)(1, "span", 49);
    \u0275\u0275text(2, "Kh\xF4ng \u0111\u01B0\u1EE3c ch\u1ECDn 2 bus station gi\u1ED1ng nhau.");
    \u0275\u0275elementEnd()();
  }
}
function BusRouteDetailComponent_form_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "form", 13);
    \u0275\u0275listener("ngSubmit", function BusRouteDetailComponent_form_5_Template_form_ngSubmit_0_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit());
    });
    \u0275\u0275elementStart(1, "div", 14)(2, "div", 15)(3, "nz-form-item", 16)(4, "nz-form-label", 17);
    \u0275\u0275text(5, "Name");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "nz-form-control", 18)(7, "nz-input-group", 19);
    \u0275\u0275element(8, "input", 20);
    \u0275\u0275elementEnd();
    \u0275\u0275template(9, BusRouteDetailComponent_form_5_ng_template_9_Template, 1, 0, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(11, BusRouteDetailComponent_form_5_ng_template_11_Template, 2, 1, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(13, "div", 15)(14, "nz-form-item", 16)(15, "nz-form-label", 21);
    \u0275\u0275text(16, "Distance");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(17, "nz-form-control", 18)(18, "nz-input-group", 19);
    \u0275\u0275element(19, "input", 22);
    \u0275\u0275elementEnd();
    \u0275\u0275template(20, BusRouteDetailComponent_form_5_ng_template_20_Template, 1, 0, "ng-template", null, 2, \u0275\u0275templateRefExtractor)(22, BusRouteDetailComponent_form_5_ng_template_22_Template, 2, 1, "ng-template", null, 3, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(24, "div", 14)(25, "div", 15)(26, "nz-form-item", 16)(27, "nz-form-label", 23);
    \u0275\u0275text(28, "DistanceTime");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(29, "nz-form-control", 18)(30, "nz-input-group", 19);
    \u0275\u0275element(31, "input", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275template(32, BusRouteDetailComponent_form_5_ng_template_32_Template, 1, 0, "ng-template", null, 4, \u0275\u0275templateRefExtractor)(34, BusRouteDetailComponent_form_5_ng_template_34_Template, 2, 1, "ng-template", null, 5, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(36, "div", 15)(37, "nz-form-item", 16)(38, "nz-form-label", 25);
    \u0275\u0275text(39, "Price");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(40, "nz-form-control", 18)(41, "nz-input-group", 19);
    \u0275\u0275element(42, "input", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275template(43, BusRouteDetailComponent_form_5_ng_template_43_Template, 1, 0, "ng-template", null, 6, \u0275\u0275templateRefExtractor)(45, BusRouteDetailComponent_form_5_ng_template_45_Template, 2, 1, "ng-template", null, 7, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(47, "div", 14)(48, "div", 27)(49, "div")(50, "label", 28);
    \u0275\u0275text(51, "Bus Station");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(52, "div", 29);
    \u0275\u0275listener("cdkDropListDropped", function BusRouteDetailComponent_form_5_Template_div_cdkDropListDropped_52_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.drop($event));
    });
    \u0275\u0275template(53, BusRouteDetailComponent_form_5_nz_form_item_53_Template, 7, 2, "nz-form-item", 30);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(54, "div", 31)(55, "button", 32);
    \u0275\u0275listener("click", function BusRouteDetailComponent_form_5_Template_button_click_55_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.addBreakPoint());
    });
    \u0275\u0275element(56, "svg-icon", 33);
    \u0275\u0275text(57, " Add Break Point ");
    \u0275\u0275elementEnd()();
    \u0275\u0275template(58, BusRouteDetailComponent_form_5_div_58_Template, 3, 0, "div", 34)(59, BusRouteDetailComponent_form_5_div_59_Template, 3, 0, "div", 34);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(60, "div", 35)(61, "button", 36);
    \u0275\u0275text(62, " SAVE ");
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const busRouteDetailDistanceClearTpl_r11 = \u0275\u0275reference(21);
    const busRouteDetailDistanceErrorTpl_r12 = \u0275\u0275reference(23);
    const busRouteDetailDistanceTimeClearTpl_r13 = \u0275\u0275reference(33);
    const busRouteDetailDistanceTimeErrorTpl_r14 = \u0275\u0275reference(35);
    const busRouteDetailPriceTimeClearTpl_r15 = \u0275\u0275reference(44);
    const busRouteDetailPriceTimeErrorTpl_r16 = \u0275\u0275reference(46);
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("formGroup", ctx_r1.busRouteDetailForm);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzErrorTip", busRouteDetailDistanceTimeErrorTpl_r14);
    \u0275\u0275advance();
    \u0275\u0275property("nzSuffix", busRouteDetailDistanceTimeClearTpl_r13);
    \u0275\u0275advance(10);
    \u0275\u0275property("nzErrorTip", busRouteDetailDistanceErrorTpl_r12);
    \u0275\u0275advance();
    \u0275\u0275property("nzSuffix", busRouteDetailDistanceClearTpl_r11);
    \u0275\u0275advance(11);
    \u0275\u0275property("nzErrorTip", busRouteDetailDistanceTimeErrorTpl_r14);
    \u0275\u0275advance();
    \u0275\u0275property("nzSuffix", busRouteDetailDistanceTimeClearTpl_r13);
    \u0275\u0275advance(10);
    \u0275\u0275property("nzErrorTip", busRouteDetailPriceTimeErrorTpl_r16);
    \u0275\u0275advance();
    \u0275\u0275property("nzSuffix", busRouteDetailPriceTimeClearTpl_r15);
    \u0275\u0275advance(12);
    \u0275\u0275property("ngForOf", ctx_r1.breakPoints.controls);
    \u0275\u0275advance(3);
    \u0275\u0275property("svgClass", "h-5 w-5 mr-2");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", ctx_r1.busRouteDetailForm.controls["breakPoints"].touched && ctx_r1.checkBreakPointsErrors());
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.busRouteDetailForm.controls["breakPoints"].touched && ctx_r1.checkBreakPointsDuplicateErrors());
  }
}
var BusRouteDetailComponent = class _BusRouteDetailComponent {
  constructor(fb, utils, location, busRoutesService, busStationsService, busProvincesService, router) {
    this.fb = fb;
    this.utils = utils;
    this.location = location;
    this.busRoutesService = busRoutesService;
    this.busStationsService = busStationsService;
    this.busProvincesService = busProvincesService;
    this.router = router;
    this.busStations = [];
    this.busProvinces = [];
    this.filteredProvinces = [];
  }
  ngOnInit() {
    this.getQueryParams();
    this.initData();
  }
  getQueryParams() {
    return __async(this, null, function* () {
      const params = history.state;
      if (params) {
        this.busRoute = params["busRoute"] ? JSON.parse(params["busRoute"]) : null;
        console.log("\u{1F680} ~ BusRouteDetailComponent ~ getQueryParams ~ this.busRoute:", this.busRoute);
      }
    });
  }
  initData() {
    let findAllBusStations = this.busStationsService.findAll();
    let findAllBusProvinces = this.busProvincesService.findAll();
    let request = [findAllBusStations, findAllBusProvinces];
    combineLatest(request).subscribe((_0) => __async(this, [_0], function* ([busStations, busProvinces]) {
      this.busStations = busStations;
      this.busProvinces = busProvinces;
      this.filterProvinces();
      this.initForm();
    }));
  }
  initForm() {
    return __async(this, null, function* () {
      const { name: name2 = "", distance = 0, distanceTime = "", price = 0, breakPoints = [] } = this.busRoute || {};
      this.busRouteDetailForm = this.fb.group({
        name: [name2, [Validators.required]],
        distance: [distance, [Validators.required]],
        distanceTime: [distanceTime, [Validators.required]],
        price: [price, [Validators.required]],
        breakPoints: this.fb.array(
          breakPoints.length > 0 ? breakPoints.map((bp) => this.createBreakPoint(bp.busStationId)) : [this.createBreakPoint(), this.createBreakPoint()]
          // Add 2 default breakpoints if none exist
        )
      });
    });
  }
  createBreakPoint(busStationId = "") {
    return this.fb.group({
      busStationId: [busStationId, Validators.required]
    });
  }
  addBreakPoint(busStationId = "") {
    const breakPoints = this.busRouteDetailForm.get("breakPoints");
    breakPoints.push(this.createBreakPoint(busStationId));
  }
  filterProvinces() {
    this.filteredProvinces = this.busProvinces.filter((province) => this.busStations.some((busStation) => busStation.provinceId === province._id)).map((province) => {
      const matchingBusStations = this.busStations.filter((busStation) => busStation.provinceId === province._id);
      return __spreadProps(__spreadValues({}, province), {
        busStations: matchingBusStations
        // Không lặp lại
      });
    });
  }
  removeBreakPoint(index) {
    const breakPoints = this.busRouteDetailForm.get("breakPoints");
    if (index >= 0 && index < breakPoints.length) {
      breakPoints.removeAt(index);
    } else {
      console.warn(`Invalid index ${index}. Cannot remove breakpoint.`);
    }
  }
  get breakPoints() {
    return this.busRouteDetailForm.get("breakPoints");
  }
  checkBreakPointsErrors() {
    const breakPoints = this.busRouteDetailForm?.get("breakPoints");
    return breakPoints?.controls?.some((control) => control?.get("busStationId")?.errors?.["required"] === true);
  }
  checkBreakPointsDuplicateErrors() {
    const breakPoints = this.busRouteDetailForm?.get("breakPoints");
    const busStationIds = breakPoints?.controls.map((control) => control.get("busStationId")?.value).filter((id) => id && id.trim() !== "");
    return busStationIds.some((id, index) => busStationIds.indexOf(id) !== index);
  }
  backPage() {
    this.location.back();
  }
  drop(event2) {
    moveItemInArray(this.breakPoints.controls, event2.previousIndex, event2.currentIndex);
  }
  onSubmit() {
    if (!this.busRouteDetailForm.valid) {
      this.utils.markFormGroupTouched(this.busRouteDetailForm);
      return;
    }
    const data = this.busRouteDetailForm.getRawValue();
    const busRoute2Create = __spreadValues({}, data);
    console.log("\u{1F680} ~ BusRouteDetailComponent ~ onSubmit ~ busRoute2Create:", busRoute2Create);
    if (this.busRoute) {
      const busRoute2Update = __spreadProps(__spreadValues({}, busRoute2Create), {
        _id: this.busRoute._id
        // Thêm thuộc tính _id
      });
      this.updateBus(busRoute2Update);
      return;
    }
    this.createBus(busRoute2Create);
  }
  updateBus(busRoute2Update) {
    this.busRoutesService.updateBusRoute(busRoute2Update).subscribe({
      next: (res) => {
        if (res) {
          const updatedState = __spreadProps(__spreadValues({}, history.state), { busRoute: JSON.stringify(res) });
          window.history.replaceState(updatedState, "", window.location.href);
          toast.success("Bus Route update successfully");
        }
      },
      error: (error2) => this.utils.handleRequestError(error2)
    });
  }
  createBus(busRoute2Create) {
    this.busRoutesService.createBusRoute(busRoute2Create).subscribe({
      next: (res) => {
        if (res) {
          toast.success("Bus Route added successfully");
        }
      },
      error: (error2) => this.utils.handleRequestError(error2)
    });
  }
  static {
    this.\u0275fac = function BusRouteDetailComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusRouteDetailComponent)(\u0275\u0275directiveInject(FormBuilder), \u0275\u0275directiveInject(Utils), \u0275\u0275directiveInject(Location), \u0275\u0275directiveInject(BusRoutesService), \u0275\u0275directiveInject(BusStationsService), \u0275\u0275directiveInject(BusProvincesService), \u0275\u0275directiveInject(Router));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _BusRouteDetailComponent, selectors: [["app-bus-route-detail"]], standalone: false, decls: 6, vars: 1, consts: [["busRouteDetailNameClearTpl", ""], ["busRouteDetailNameErrorTpl", ""], ["busRouteDetailDistanceClearTpl", ""], ["busRouteDetailDistanceErrorTpl", ""], ["busRouteDetailDistanceTimeClearTpl", ""], ["busRouteDetailDistanceTimeErrorTpl", ""], ["busRouteDetailPriceTimeClearTpl", ""], ["busRouteDetailPriceTimeErrorTpl", ""], [1, "mb-4", "flex", "justify-end"], [1, "inline-block", "space-x-4"], [1, "bg-muted", "text-muted-foreground", "hover:text-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold", 3, "click"], [1, "border-muted/20", "bg-background", "flex", "min-w-full", "flex-col", "rounded-xl", "border", "px-6", "py-2"], ["nz-form", "", 3, "formGroup", "ngSubmit", 4, "ngIf"], ["nz-form", "", 3, "ngSubmit", "formGroup"], [1, "flex", "gap-4"], [1, "flex", "w-6/12"], [1, "!w-full"], ["nzFor", "name", 1, "!flex", "!h-[36px]", "!items-center", "!justify-start"], [1, "!flex", "!h-[56px]", "flex-col", 3, "nzErrorTip"], [1, "custom-nz-input-group", "!mt-0", "!mb-0", "!h-[36px]", 3, "nzSuffix"], ["type", "text", "nz-input", "", "formControlName", "name", "placeholder", "Nh\u1EADp Name"], ["nzFor", "distance", 1, "!flex", "!h-[36px]", "!items-center", "!justify-start"], ["type", "number", "nz-input", "", "formControlName", "distance", "placeholder", "Nh\u1EADp Distance"], ["nzFor", "distanceTime", 1, "!flex", "!h-[36px]", "!items-center", "!justify-start"], ["type", "text", "nz-input", "", "formControlName", "distanceTime", "placeholder", "Nh\u1EADp Distance"], ["nzFor", "price", 1, "!flex", "!h-[36px]", "!items-center", "!justify-start"], ["type", "text", "nz-input", "", "formControlName", "price", "placeholder", "Nh\u1EADp Price"], [1, "flex", "w-6/12", "flex-col"], [1, "ant-form-item-label", "ant-col", "!flex", "!h-[36px]", "!items-center", "!justify-start"], ["formArrayName", "breakPoints", "cdkDropList", "", 1, "drag-drop-list", "flex", "flex-col", "gap-4", 3, "cdkDropListDropped"], ["cdkDrag", "", 3, "formGroupName", 4, "ngFor", "ngForOf"], [1, "mt-4", "flex", "justify-end", "gap-4"], ["nz-button", "", "nzType", "default", 1, "!min-w-24", "!flex", "!h-max", "!justify-center", "!rounded-lg", "!py-2", "!px-3", "hover:!border-red-500", "hover:!bg-red-200", "hover:!text-red-500", 3, "click"], ["src", "assets/icons/add-square.svg", 3, "svgClass"], ["class", "animate-fade-down", 4, "ngIf"], [1, "my-5", "flex", "w-full", "justify-end"], ["nz-button", "", "nzType", "default", "type", "submit", 1, "!min-w-24", "!bg-primary", "!flex", "!h-max", "!justify-center", "!rounded-lg", "!py-2", "!px-3", "!text-white", "hover:!border-red-500", "hover:!bg-red-200", "hover:!text-red-500"], ["nz-icon", "", "nzTheme", "fill", "nzType", "close-circle", 1, "ant-input-clear-icon", 3, "click"], [1, "mt-1", "!text-xs", "text-red-500"], ["cdkDrag", "", 3, "formGroupName"], [1, "!flex", "!items-center"], ["nzShowSearch", "", "nzAllowClear", "", "formControlName", "busStationId", "nzPlaceHolder", "Ch\u1ECDn Bus Station"], [3, "nzLabel"], ["src", "assets/icons/trash-red-outline.svg", 3, "svgClass", "click", 4, "ngIf"], ["nzCustomContent", "", 3, "nzLabel", "nzValue"], [1, "flex", "items-center"], [1, "pl-4", "!font-medium"], ["src", "assets/icons/trash-red-outline.svg", 3, "click", "svgClass"], [1, "animate-fade-down"], [1, "pt-1", "text-xs", "text-red-500"]], template: function BusRouteDetailComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 8)(1, "div", 9)(2, "button", 10);
        \u0275\u0275listener("click", function BusRouteDetailComponent_Template_button_click_2_listener() {
          return ctx.backPage();
        });
        \u0275\u0275text(3, " Back ");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(4, "div", 11);
        \u0275\u0275template(5, BusRouteDetailComponent_form_5_Template, 63, 13, "form", 12);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275advance(5);
        \u0275\u0275property("ngIf", ctx.busRouteDetailForm);
      }
    }, dependencies: [NgForOf, NgIf, \u0275NgNoValidate, DefaultValueAccessor, NumberValueAccessor, NgControlStatus, NgControlStatusGroup, FormGroupDirective, FormControlName, FormGroupName, FormArrayName, SvgIconComponent, CdkDropList, CdkDrag, NzOptionComponent, NzSelectComponent, NzOptionGroupComponent, NzButtonComponent, NzTransitionPatchDirective, NzWaveDirective, NzInputDirective, NzInputGroupComponent, NzInputGroupWhitSuffixOrPrefixDirective, NzColDirective, NzRowDirective, NzFormDirective, NzFormItemComponent, NzFormLabelComponent, NzFormControlComponent, NzIconDirective], styles: ["\n\n.drag-drop-list[_ngcontent-%COMP%] {\n  width: 500px;\n  max-width: 100%;\n  overflow: hidden;\n}\n.drag-drop-box[_ngcontent-%COMP%] {\n  align-items: center;\n  justify-content: space-between;\n  cursor: move;\n}\n.cdk-drag-preview[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow:\n    0 5px 5px -3px rgba(0, 0, 0, 0.2),\n    0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.cdk-drag-animating[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  opacity: 0;\n}\n.drag-drop-list.cdk-drop-list-dragging[_ngcontent-%COMP%]   .drag-drop-box[_ngcontent-%COMP%]:not(.cdk-drag-placeholder) {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n.ant-form-item-control-input-content[_ngcontent-%COMP%] {\n  display: flex !important;\n}\n/*# sourceMappingURL=bus-route-detail.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(BusRouteDetailComponent, { className: "BusRouteDetailComponent", filePath: "src/app/modules/management/pages/bus-routes/pages/bus-route-detail/bus-route-detail.component.ts", lineNumber: 27 });
})();

// src/app/modules/management/pages/bus-schedules/model/bus-schedule.model.ts
var SearchBusSchedule = class {
  constructor() {
    this.busSchedules = [];
    this.pageIdx = 0;
    this.totalItem = 0;
    this.totalPage = 0;
  }
};

// src/app/modules/management/pages/bus-schedules/service/bus-schedules.servive.ts
var BusSchedulesService = class _BusSchedulesService {
  constructor(apiGatewayService) {
    this.apiGatewayService = apiGatewayService;
    this.url = "/bus-schedules";
  }
  findAll() {
    const url = `${this.url}/findAll`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  searchBusSchedule(pageIdx = 0, pageSize = 999, keyword = "", sortBy = "") {
    const url = `${this.url}/search-paging?pageIdx=${pageIdx}&pageSize=${pageSize}&keyword=${keyword}&sortBy=${sortBy}`;
    return this.apiGatewayService.get(url).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  createBusSchedule(busSchedule2Create) {
    const url = this.url;
    return this.apiGatewayService.post(url, busSchedule2Create).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  updateBusSchedule(busSchedule2Update) {
    const url = this.url;
    return this.apiGatewayService.put(url, busSchedule2Update).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  deleteBusSchedule(id) {
    const deleteOptionUrl = this.url + `/${id}`;
    return this.apiGatewayService.delete(deleteOptionUrl).pipe(tap((res) => {
    }), catchError((error2) => {
      return of([]);
    }));
  }
  static {
    this.\u0275fac = function BusSchedulesService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusSchedulesService)(\u0275\u0275inject(ApiGatewayService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _BusSchedulesService, factory: _BusSchedulesService.\u0275fac, providedIn: "root" });
  }
};

// src/app/modules/management/pages/bus-schedules/bus-schedules.component.ts
var _forTrack013 = ($index, $item) => $item._id;
function BusSchedulesComponent_For_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr", 13)(1, "td", 15)(2, "input", 16);
    \u0275\u0275twoWayListener("ngModelChange", function BusSchedulesComponent_For_20_Template_input_ngModelChange_2_listener($event) {
      const busSchedule_r2 = \u0275\u0275restoreView(_r1).$implicit;
      \u0275\u0275twoWayBindingSet(busSchedule_r2.selected, $event) || (busSchedule_r2.selected = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function BusSchedulesComponent_For_20_Template_input_change_2_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.checkSelectAll());
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(3, "td");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "td", 15)(6, "button", 17);
    \u0275\u0275listener("click", function BusSchedulesComponent_For_20_Template_button_click_6_listener() {
      const busSchedule_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.editBus(busSchedule_r2));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(7, "svg", 18);
    \u0275\u0275element(8, "path", 19);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(9, "button", 20);
    \u0275\u0275listener("click", function BusSchedulesComponent_For_20_Template_button_click_9_listener() {
      const busSchedule_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.deleteBus(busSchedule_r2._id));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(10, "svg", 18);
    \u0275\u0275element(11, "path", 21);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const busSchedule_r2 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", busSchedule_r2.selected);
    \u0275\u0275attribute("aria-label", "Select " + busSchedule_r2.name);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(busSchedule_r2.name);
  }
}
function BusSchedulesComponent_ForEmpty_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr")(1, "td", 22);
    \u0275\u0275text(2, "No busSchedules found");
    \u0275\u0275elementEnd()();
  }
}
var BusSchedulesComponent = class _BusSchedulesComponent {
  constructor(busSchedulesService, dialog, utils, router) {
    this.busSchedulesService = busSchedulesService;
    this.dialog = dialog;
    this.utils = utils;
    this.router = router;
    this.searchBusSchedule = new SearchBusSchedule();
    this.selectAll = false;
    this.pageIdx = 1;
    this.pageSize = 5;
    this.totalPage = 0;
    this.totalItem = 0;
    this.keyword = "";
    this.sortBy = "";
    this.isLoadingBus = false;
  }
  ngOnInit() {
    this.loadData();
  }
  loadData() {
    this.isLoadingBus = true;
    this.busSchedulesService.searchBusSchedule(this.pageIdx, this.pageSize, this.keyword, this.sortBy).subscribe({
      next: (res) => {
        if (res) {
          this.searchBusSchedule = res;
          console.log("\u{1F680} ~ BusesComponent ~ this.busSchedulesService.searchBus ~ this.searchBusSchedule:", this.searchBusSchedule);
          this.totalItem = this.searchBusSchedule.totalItem;
          this.totalPage = this.searchBusSchedule.totalPage;
        }
        this.isLoadingBus = false;
      },
      error: (error2) => {
        this.utils.handleRequestError(error2);
        this.isLoadingBus = false;
      }
    });
  }
  toggleBus(event2) {
    const checked = event2.target.checked;
    this.searchBusSchedule.busSchedules = this.searchBusSchedule.busSchedules.map((busSchedule) => __spreadProps(__spreadValues({}, busSchedule), {
      selected: checked
    }));
  }
  checkSelectAll() {
    this.selectAll = !this.searchBusSchedule.busSchedules.some((busSchedule) => !busSchedule.selected);
  }
  deleteBus(id) {
    const dialogRef = this.dialog.open(MaterialDialogComponent, {
      data: {
        icon: {
          type: "dangerous"
        },
        title: "Delete Bus",
        content: "Are you sure you want to delete this bus? All of your data will be permanently removed. This action cannot be undone.",
        btn: [
          {
            label: "NO",
            type: "cancel"
          },
          {
            label: "YES",
            type: "submit"
          }
        ]
      }
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        this.busSchedulesService.deleteBusSchedule(id).subscribe({
          next: (res) => {
            if (res) {
              this.searchBusSchedule.busSchedules = this.searchBusSchedule.busSchedules.filter((bus) => bus._id !== id);
              toast.success("Bus deleted successfully");
            }
          },
          error: (error2) => this.utils.handleRequestError(error2)
        });
      }
    });
  }
  editBus(busSchedule) {
    const params = { busSchedule: JSON.stringify(busSchedule) };
    this.router.navigateByUrl("/management/bus-routes/bus-route-detail", { state: params });
  }
  addBus() {
    this.router.navigate(["/management/bus-routes/bus-route-detail"]);
  }
  reloadBusPage(data) {
    this.pageIdx = data.pageIdx;
    this.pageSize = data.pageSize;
    this.loadData();
  }
  searchBusPage(keyword) {
    this.pageIdx = 1;
    this.keyword = keyword;
    this.loadData();
  }
  sortBusPage(sortBy) {
    this.sortBy = sortBy;
    this.loadData();
  }
  handleRequestError(error2) {
    const msg = "An error occurred while processing your request";
    toast.error(msg, {
      position: "bottom-right",
      description: error2.message || "Please try again later",
      action: {
        label: "Dismiss",
        onClick: () => {
        }
      },
      actionButtonStyle: "background-color:#DC2626; color:white;"
    });
  }
  static {
    this.\u0275fac = function BusSchedulesComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusSchedulesComponent)(\u0275\u0275directiveInject(BusSchedulesService), \u0275\u0275directiveInject(MatDialog), \u0275\u0275directiveInject(Utils), \u0275\u0275directiveInject(Router));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _BusSchedulesComponent, selectors: [["app-bus-schedules"]], standalone: false, decls: 23, vars: 9, consts: [[1, "mb-4", "flex", "justify-end"], [1, "inline-block", "space-x-4"], ["aria-label", "Import CSV", 1, "bg-muted", "text-muted-foreground", "hover:text-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold"], ["aria-label", "Add Bus", 1, "bg-primary", "text-primary-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold", 3, "click"], [1, "border-muted/20", "bg-background", "flex", "min-w-full", "flex-col", "rounded-xl", "border", "p-2"], [3, "sortDataEvent", "searchDataEvent", "title", "totalItem"], [1, "overflow-x-auto"], [1, "text-muted-foreground", "w-full", "table-auto", "border-collapse", "text-left", "align-middle", "leading-5"], [1, "border-muted/20", "text-muted-foreground", "border", "text-xs"], [1, "w-[50px]"], ["type", "checkbox", "aria-label", "Select all busSchedules", 1, "checkbox", "checkbox-sm", 3, "change", "ngModelChange", "ngModel"], [1, "min-w-[200px]"], [1, "w-[100px]", "text-center"], [1, "hover:bg-card/50"], [3, "reloadDataAndPageEvent", "pageIdx", "pageSize", "totalItem", "isLoading", "totalPage"], [1, "text-center"], ["type", "checkbox", 1, "checkbox", "checkbox-sm", 3, "ngModelChange", "change", "ngModel"], ["aria-label", "Edit busSchedule", 1, "text-muted-foreground", "hover:bg-card", "hover:text-foreground", "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", 3, "click"], ["viewBox", "0 0 20 20", "fill", "currentColor", 1, "size-5"], ["d", "m2.695 14.762-1.262 3.155a.5.5 0 0 0 .65.65l3.155-1.262a4 4 0 0 0 1.343-.886L17.5 5.501a2.121 2.121 0 0 0-3-3L3.58 13.419a4 4 0 0 0-.885 1.343Z"], ["aria-label", "Delete busSchedule", 1, "text-muted-foreground", "hover:bg-card", "hover:text-foreground", "inline-flex", "h-7", "w-7", "items-center", "justify-center", "rounded-md", 3, "click"], ["fill-rule", "evenodd", "d", "M8.75 1A2.75 2.75 0 0 0 6 3.75v.443c-.795.077-1.584.176-2.365.298a.75.75 0 1 0 .23 1.482l.149-.022.841 10.518A2.75 2.75 0 0 0 7.596 19h4.807a2.75 2.75 0 0 0 2.742-2.53l.841-10.52.149.023a.75.75 0 0 0 .23-1.482A41.03 41.03 0 0 0 14 4.193V3.75A2.75 2.75 0 0 0 11.25 1h-2.5ZM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25v.325C8.327 4.025 9.16 4 10 4ZM8.58 7.72a.75.75 0 0 0-1.5.06l.3 7.5a.75.75 0 1 0 1.5-.06l-.3-7.5Zm4.34.06a.75.75 0 1 0-1.5-.06l-.3 7.5a.75.75 0 1 0 1.5.06l.3-7.5Z", "clip-rule", "evenodd"], ["colspan", "4", 1, "py-4", "text-center", "text-sm"]], template: function BusSchedulesComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "button", 2);
        \u0275\u0275text(3, " Import CSV ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(4, "button", 3);
        \u0275\u0275listener("click", function BusSchedulesComponent_Template_button_click_4_listener() {
          return ctx.addBus();
        });
        \u0275\u0275text(5, " Add Bus Schedule ");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(6, "div", 4)(7, "app-table-action", 5);
        \u0275\u0275listener("sortDataEvent", function BusSchedulesComponent_Template_app_table_action_sortDataEvent_7_listener($event) {
          return ctx.sortBusPage($event);
        })("searchDataEvent", function BusSchedulesComponent_Template_app_table_action_searchDataEvent_7_listener($event) {
          return ctx.searchBusPage($event);
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "div", 6)(9, "table", 7)(10, "thead", 8)(11, "tr")(12, "th", 9)(13, "input", 10);
        \u0275\u0275listener("change", function BusSchedulesComponent_Template_input_change_13_listener($event) {
          return ctx.toggleBus($event);
        });
        \u0275\u0275twoWayListener("ngModelChange", function BusSchedulesComponent_Template_input_ngModelChange_13_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.selectAll, $event) || (ctx.selectAll = $event);
          return $event;
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(14, "th", 11);
        \u0275\u0275text(15, "Name");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(16, "th", 12);
        \u0275\u0275text(17, "Actions");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(18, "tbody");
        \u0275\u0275repeaterCreate(19, BusSchedulesComponent_For_20_Template, 12, 3, "tr", 13, _forTrack013, false, BusSchedulesComponent_ForEmpty_21_Template, 3, 0, "tr");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(22, "app-table-footer", 14);
        \u0275\u0275listener("reloadDataAndPageEvent", function BusSchedulesComponent_Template_app_table_footer_reloadDataAndPageEvent_22_listener($event) {
          return ctx.reloadBusPage($event);
        });
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(7);
        \u0275\u0275property("title", "Bus Schedule")("totalItem", ctx.totalItem);
        \u0275\u0275advance(6);
        \u0275\u0275twoWayProperty("ngModel", ctx.selectAll);
        \u0275\u0275advance(6);
        \u0275\u0275repeater(ctx.searchBusSchedule.busSchedules);
        \u0275\u0275advance(3);
        \u0275\u0275property("pageIdx", ctx.pageIdx)("pageSize", ctx.pageSize)("totalItem", ctx.totalItem)("isLoading", ctx.isLoadingBus)("totalPage", ctx.totalPage);
      }
    }, dependencies: [CheckboxControlValueAccessor, NgControlStatus, NgModel, TableFooterComponent, TableActionComponent], styles: ["\n\ntd[_ngcontent-%COMP%] {\n  padding: 0.75rem 1rem;\n  font-size: 0.85rem;\n}\nth[_ngcontent-%COMP%] {\n  font-weight: 500;\n  padding: 0.625rem 1rem;\n  font-weight: 500;\n  font-size: 0.8125rem;\n  line-height: 1.125rem;\n  vertical-align: middle;\n  @apply border-b border-r;\n}\n/*# sourceMappingURL=bus-schedules.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(BusSchedulesComponent, { className: "BusSchedulesComponent", filePath: "src/app/modules/management/pages/bus-schedules/bus-schedules.component.ts", lineNumber: 16 });
})();

// src/app/modules/management/pages/bus-schedules/pages/bus-schedule-detail/bus-schedule-detail.component.ts
function BusScheduleDetailComponent_form_5_ng_template_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 37);
    \u0275\u0275listener("click", function BusScheduleDetailComponent_form_5_ng_template_9_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.busScheduleDetailForm.controls["name"].patchValue(""));
    });
    \u0275\u0275elementEnd();
  }
}
function BusScheduleDetailComponent_form_5_ng_template_11_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Vui l\xF2ng nh\u1EADp tr\u01B0\u1EDDng n\xE0y ");
  }
}
function BusScheduleDetailComponent_form_5_ng_template_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 38);
    \u0275\u0275template(1, BusScheduleDetailComponent_form_5_ng_template_11_Conditional_1_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275conditional((ctx_r1.busScheduleDetailForm.controls["name"].errors == null ? null : ctx_r1.busScheduleDetailForm.controls["name"].errors["required"]) ? 1 : -1);
  }
}
function BusScheduleDetailComponent_form_5_ng_template_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 37);
    \u0275\u0275listener("click", function BusScheduleDetailComponent_form_5_ng_template_20_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.busScheduleDetailForm.controls["distance"].patchValue(""));
    });
    \u0275\u0275elementEnd();
  }
}
function BusScheduleDetailComponent_form_5_ng_template_22_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Vui l\xF2ng nh\u1EADp tr\u01B0\u1EDDng n\xE0y ");
  }
}
function BusScheduleDetailComponent_form_5_ng_template_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 38);
    \u0275\u0275template(1, BusScheduleDetailComponent_form_5_ng_template_22_Conditional_1_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275conditional((ctx_r1.busScheduleDetailForm.controls["distance"].errors == null ? null : ctx_r1.busScheduleDetailForm.controls["distance"].errors["required"]) ? 1 : -1);
  }
}
function BusScheduleDetailComponent_form_5_ng_template_32_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 37);
    \u0275\u0275listener("click", function BusScheduleDetailComponent_form_5_ng_template_32_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r5);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.busScheduleDetailForm.controls["distanceTime"].patchValue(""));
    });
    \u0275\u0275elementEnd();
  }
}
function BusScheduleDetailComponent_form_5_ng_template_34_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Vui l\xF2ng nh\u1EADp tr\u01B0\u1EDDng n\xE0y ");
  }
}
function BusScheduleDetailComponent_form_5_ng_template_34_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 38);
    \u0275\u0275template(1, BusScheduleDetailComponent_form_5_ng_template_34_Conditional_1_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275conditional((ctx_r1.busScheduleDetailForm.controls["distanceTime"].errors == null ? null : ctx_r1.busScheduleDetailForm.controls["distanceTime"].errors["required"]) ? 1 : -1);
  }
}
function BusScheduleDetailComponent_form_5_ng_template_43_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 37);
    \u0275\u0275listener("click", function BusScheduleDetailComponent_form_5_ng_template_43_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.busScheduleDetailForm.controls["price"].patchValue(""));
    });
    \u0275\u0275elementEnd();
  }
}
function BusScheduleDetailComponent_form_5_ng_template_45_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Vui l\xF2ng nh\u1EADp tr\u01B0\u1EDDng n\xE0y ");
  }
}
function BusScheduleDetailComponent_form_5_ng_template_45_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 38);
    \u0275\u0275template(1, BusScheduleDetailComponent_form_5_ng_template_45_Conditional_1_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275conditional((ctx_r1.busScheduleDetailForm.controls["price"].errors == null ? null : ctx_r1.busScheduleDetailForm.controls["price"].errors["required"]) ? 1 : -1);
  }
}
function BusScheduleDetailComponent_form_5_nz_form_item_53_For_5_For_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-option", 44)(1, "div", 45)(2, "span", 46);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const busStation_r7 = ctx.$implicit;
    \u0275\u0275property("nzLabel", busStation_r7.name)("nzValue", busStation_r7._id);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", busStation_r7.name, " ");
  }
}
function BusScheduleDetailComponent_form_5_nz_form_item_53_For_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-option-group", 42);
    \u0275\u0275repeaterCreate(1, BusScheduleDetailComponent_form_5_nz_form_item_53_For_5_For_2_Template, 4, 3, "nz-option", 44, \u0275\u0275repeaterTrackByIdentity);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const busProvince_r8 = ctx.$implicit;
    \u0275\u0275propertyInterpolate("nzLabel", busProvince_r8.name);
    \u0275\u0275advance();
    \u0275\u0275repeater(busProvince_r8.busStations);
  }
}
function BusScheduleDetailComponent_form_5_nz_form_item_53_svg_icon_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "svg-icon", 47);
    \u0275\u0275listener("click", function BusScheduleDetailComponent_form_5_nz_form_item_53_svg_icon_6_Template_svg_icon_click_0_listener() {
      \u0275\u0275restoreView(_r9);
      const i_r10 = \u0275\u0275nextContext().index;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.removeBreakPoint(i_r10));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275property("svgClass", "h-5 w-5 ml-2 cursor-pointer");
  }
}
function BusScheduleDetailComponent_form_5_nz_form_item_53_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-form-item", 39)(1, "nz-form-control")(2, "nz-input-group", 40)(3, "nz-select", 41);
    \u0275\u0275repeaterCreate(4, BusScheduleDetailComponent_form_5_nz_form_item_53_For_5_Template, 3, 1, "nz-option-group", 42, \u0275\u0275repeaterTrackByIdentity);
    \u0275\u0275elementEnd();
    \u0275\u0275template(6, BusScheduleDetailComponent_form_5_nz_form_item_53_svg_icon_6_Template, 1, 1, "svg-icon", 43);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const i_r10 = ctx.index;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("formGroupName", i_r10);
    \u0275\u0275advance(4);
    \u0275\u0275repeater(ctx_r1.filteredProvinces);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", ctx_r1.breakPoints.controls.length > 2);
  }
}
function BusScheduleDetailComponent_form_5_div_58_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 48)(1, "span", 49);
    \u0275\u0275text(2, "Vui l\xF2ng ch\u1ECDn \xEDt nh\u1EA5t 2 bus station.");
    \u0275\u0275elementEnd()();
  }
}
function BusScheduleDetailComponent_form_5_div_59_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 48)(1, "span", 49);
    \u0275\u0275text(2, "Kh\xF4ng \u0111\u01B0\u1EE3c ch\u1ECDn 2 bus station gi\u1ED1ng nhau.");
    \u0275\u0275elementEnd()();
  }
}
function BusScheduleDetailComponent_form_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "form", 13);
    \u0275\u0275listener("ngSubmit", function BusScheduleDetailComponent_form_5_Template_form_ngSubmit_0_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSubmit());
    });
    \u0275\u0275elementStart(1, "div", 14)(2, "div", 15)(3, "nz-form-item", 16)(4, "nz-form-label", 17);
    \u0275\u0275text(5, "Name");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "nz-form-control", 18)(7, "nz-input-group", 19);
    \u0275\u0275element(8, "input", 20);
    \u0275\u0275elementEnd();
    \u0275\u0275template(9, BusScheduleDetailComponent_form_5_ng_template_9_Template, 1, 0, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(11, BusScheduleDetailComponent_form_5_ng_template_11_Template, 2, 1, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(13, "div", 15)(14, "nz-form-item", 16)(15, "nz-form-label", 21);
    \u0275\u0275text(16, "Distance");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(17, "nz-form-control", 18)(18, "nz-input-group", 19);
    \u0275\u0275element(19, "input", 22);
    \u0275\u0275elementEnd();
    \u0275\u0275template(20, BusScheduleDetailComponent_form_5_ng_template_20_Template, 1, 0, "ng-template", null, 2, \u0275\u0275templateRefExtractor)(22, BusScheduleDetailComponent_form_5_ng_template_22_Template, 2, 1, "ng-template", null, 3, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(24, "div", 14)(25, "div", 15)(26, "nz-form-item", 16)(27, "nz-form-label", 23);
    \u0275\u0275text(28, "DistanceTime");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(29, "nz-form-control", 18)(30, "nz-input-group", 19);
    \u0275\u0275element(31, "input", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275template(32, BusScheduleDetailComponent_form_5_ng_template_32_Template, 1, 0, "ng-template", null, 4, \u0275\u0275templateRefExtractor)(34, BusScheduleDetailComponent_form_5_ng_template_34_Template, 2, 1, "ng-template", null, 5, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(36, "div", 15)(37, "nz-form-item", 16)(38, "nz-form-label", 25);
    \u0275\u0275text(39, "Price");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(40, "nz-form-control", 18)(41, "nz-input-group", 19);
    \u0275\u0275element(42, "input", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275template(43, BusScheduleDetailComponent_form_5_ng_template_43_Template, 1, 0, "ng-template", null, 6, \u0275\u0275templateRefExtractor)(45, BusScheduleDetailComponent_form_5_ng_template_45_Template, 2, 1, "ng-template", null, 7, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(47, "div", 14)(48, "div", 27)(49, "div")(50, "label", 28);
    \u0275\u0275text(51, "Bus Station");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(52, "div", 29);
    \u0275\u0275listener("cdkDropListDropped", function BusScheduleDetailComponent_form_5_Template_div_cdkDropListDropped_52_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.drop($event));
    });
    \u0275\u0275template(53, BusScheduleDetailComponent_form_5_nz_form_item_53_Template, 7, 2, "nz-form-item", 30);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(54, "div", 31)(55, "button", 32);
    \u0275\u0275listener("click", function BusScheduleDetailComponent_form_5_Template_button_click_55_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.addBreakPoint());
    });
    \u0275\u0275element(56, "svg-icon", 33);
    \u0275\u0275text(57, " Add Break Point ");
    \u0275\u0275elementEnd()();
    \u0275\u0275template(58, BusScheduleDetailComponent_form_5_div_58_Template, 3, 0, "div", 34)(59, BusScheduleDetailComponent_form_5_div_59_Template, 3, 0, "div", 34);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(60, "div", 35)(61, "button", 36);
    \u0275\u0275text(62, " SAVE ");
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const busScheduleDetailDistanceClearTpl_r11 = \u0275\u0275reference(21);
    const busScheduleDetailDistanceErrorTpl_r12 = \u0275\u0275reference(23);
    const busScheduleDetailDistanceTimeClearTpl_r13 = \u0275\u0275reference(33);
    const busScheduleDetailDistanceTimeErrorTpl_r14 = \u0275\u0275reference(35);
    const busScheduleDetailPriceTimeClearTpl_r15 = \u0275\u0275reference(44);
    const busScheduleDetailPriceTimeErrorTpl_r16 = \u0275\u0275reference(46);
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("formGroup", ctx_r1.busScheduleDetailForm);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzErrorTip", busScheduleDetailDistanceTimeErrorTpl_r14);
    \u0275\u0275advance();
    \u0275\u0275property("nzSuffix", busScheduleDetailDistanceTimeClearTpl_r13);
    \u0275\u0275advance(10);
    \u0275\u0275property("nzErrorTip", busScheduleDetailDistanceErrorTpl_r12);
    \u0275\u0275advance();
    \u0275\u0275property("nzSuffix", busScheduleDetailDistanceClearTpl_r11);
    \u0275\u0275advance(11);
    \u0275\u0275property("nzErrorTip", busScheduleDetailDistanceTimeErrorTpl_r14);
    \u0275\u0275advance();
    \u0275\u0275property("nzSuffix", busScheduleDetailDistanceTimeClearTpl_r13);
    \u0275\u0275advance(10);
    \u0275\u0275property("nzErrorTip", busScheduleDetailPriceTimeErrorTpl_r16);
    \u0275\u0275advance();
    \u0275\u0275property("nzSuffix", busScheduleDetailPriceTimeClearTpl_r15);
    \u0275\u0275advance(12);
    \u0275\u0275property("ngForOf", ctx_r1.breakPoints.controls);
    \u0275\u0275advance(3);
    \u0275\u0275property("svgClass", "h-5 w-5 mr-2");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", ctx_r1.busScheduleDetailForm.controls["breakPoints"].touched && ctx_r1.checkBreakPointsErrors());
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.busScheduleDetailForm.controls["breakPoints"].touched && ctx_r1.checkBreakPointsDuplicateErrors());
  }
}
var BusScheduleDetailComponent = class _BusScheduleDetailComponent {
  constructor(fb, utils, location, busSchedulesService, busStationsService, busProvincesService, router) {
    this.fb = fb;
    this.utils = utils;
    this.location = location;
    this.busSchedulesService = busSchedulesService;
    this.busStationsService = busStationsService;
    this.busProvincesService = busProvincesService;
    this.router = router;
    this.busStations = [];
    this.busProvinces = [];
    this.filteredProvinces = [];
  }
  ngOnInit() {
    this.getQueryParams();
    this.initData();
  }
  getQueryParams() {
    return __async(this, null, function* () {
      const params = history.state;
      if (params) {
        this.busSchedule = params["busSchedule"] ? JSON.parse(params["busSchedule"]) : null;
        console.log("\u{1F680} ~ BusScheduleDetailComponent ~ getQueryParams ~ this.busSchedule:", this.busSchedule);
      }
    });
  }
  initData() {
    let findAllBusStations = this.busStationsService.findAll();
    let findAllBusProvinces = this.busProvincesService.findAll();
    let request = [findAllBusStations, findAllBusProvinces];
    combineLatest(request).subscribe((_0) => __async(this, [_0], function* ([busStations, busProvinces]) {
      this.busStations = busStations;
      this.busProvinces = busProvinces;
      this.filterProvinces();
      this.initForm();
    }));
  }
  initForm() {
    return __async(this, null, function* () {
      const { name: name2 = "" } = this.busSchedule || {};
      this.busScheduleDetailForm = this.fb.group({
        name: [name2, [Validators.required]]
      });
    });
  }
  createBreakPoint(busStationId = "") {
    return this.fb.group({
      busStationId: [busStationId, Validators.required]
    });
  }
  addBreakPoint(busStationId = "") {
    const breakPoints = this.busScheduleDetailForm.get("breakPoints");
    breakPoints.push(this.createBreakPoint(busStationId));
  }
  filterProvinces() {
    this.filteredProvinces = this.busProvinces.filter((province) => this.busStations.some((busStation) => busStation.provinceId === province._id)).map((province) => {
      const matchingBusStations = this.busStations.filter((busStation) => busStation.provinceId === province._id);
      return __spreadProps(__spreadValues({}, province), {
        busStations: matchingBusStations
        // Không lặp lại
      });
    });
  }
  removeBreakPoint(index) {
    const breakPoints = this.busScheduleDetailForm.get("breakPoints");
    if (index >= 0 && index < breakPoints.length) {
      breakPoints.removeAt(index);
    } else {
      console.warn(`Invalid index ${index}. Cannot remove breakpoint.`);
    }
  }
  get breakPoints() {
    return this.busScheduleDetailForm.get("breakPoints");
  }
  checkBreakPointsErrors() {
    const breakPoints = this.busScheduleDetailForm?.get("breakPoints");
    return breakPoints?.controls?.some((control) => control?.get("busStationId")?.errors?.["required"] === true);
  }
  checkBreakPointsDuplicateErrors() {
    const breakPoints = this.busScheduleDetailForm?.get("breakPoints");
    const busStationIds = breakPoints?.controls.map((control) => control.get("busStationId")?.value).filter((id) => id && id.trim() !== "");
    return busStationIds.some((id, index) => busStationIds.indexOf(id) !== index);
  }
  backPage() {
    this.location.back();
  }
  drop(event2) {
    moveItemInArray(this.busStations, event2.previousIndex, event2.currentIndex);
  }
  onSubmit() {
    if (!this.busScheduleDetailForm.valid) {
      this.utils.markFormGroupTouched(this.busScheduleDetailForm);
      return;
    }
    const data = this.busScheduleDetailForm.getRawValue();
    const busSchedule2Create = __spreadValues({}, data);
    console.log("\u{1F680} ~ BusScheduleDetailComponent ~ onSubmit ~ busSchedule2Create:", busSchedule2Create);
    if (this.busSchedule) {
      const busSchedule2Update = __spreadProps(__spreadValues({}, busSchedule2Create), {
        _id: this.busSchedule._id
        // Thêm thuộc tính _id
      });
      this.updateBus(busSchedule2Update);
      return;
    }
    this.createBus(busSchedule2Create);
  }
  updateBus(busSchedule2Update) {
    this.busSchedulesService.updateBusSchedule(busSchedule2Update).subscribe({
      next: (res) => {
        if (res) {
          const updatedState = __spreadProps(__spreadValues({}, history.state), { busSchedule: JSON.stringify(res) });
          window.history.replaceState(updatedState, "", window.location.href);
          toast.success("Bus Route update successfully");
        }
      },
      error: (error2) => this.utils.handleRequestError(error2)
    });
  }
  createBus(busSchedule2Create) {
    this.busSchedulesService.createBusSchedule(busSchedule2Create).subscribe({
      next: (res) => {
        if (res) {
          toast.success("Bus Route added successfully");
        }
      },
      error: (error2) => this.utils.handleRequestError(error2)
    });
  }
  static {
    this.\u0275fac = function BusScheduleDetailComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BusScheduleDetailComponent)(\u0275\u0275directiveInject(FormBuilder), \u0275\u0275directiveInject(Utils), \u0275\u0275directiveInject(Location), \u0275\u0275directiveInject(BusSchedulesService), \u0275\u0275directiveInject(BusStationsService), \u0275\u0275directiveInject(BusProvincesService), \u0275\u0275directiveInject(Router));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _BusScheduleDetailComponent, selectors: [["app-bus-schedule-detail"]], standalone: false, decls: 6, vars: 1, consts: [["busScheduleDetailNameClearTpl", ""], ["busScheduleDetailNameErrorTpl", ""], ["busScheduleDetailDistanceClearTpl", ""], ["busScheduleDetailDistanceErrorTpl", ""], ["busScheduleDetailDistanceTimeClearTpl", ""], ["busScheduleDetailDistanceTimeErrorTpl", ""], ["busScheduleDetailPriceTimeClearTpl", ""], ["busScheduleDetailPriceTimeErrorTpl", ""], [1, "mb-4", "flex", "justify-end"], [1, "inline-block", "space-x-4"], [1, "bg-muted", "text-muted-foreground", "hover:text-foreground", "rounded-md", "px-4", "py-2.5", "text-xs", "font-semibold", 3, "click"], [1, "border-muted/20", "bg-background", "flex", "min-w-full", "flex-col", "rounded-xl", "border", "px-6", "py-2"], ["nz-form", "", 3, "formGroup", "ngSubmit", 4, "ngIf"], ["nz-form", "", 3, "ngSubmit", "formGroup"], [1, "flex", "gap-4"], [1, "flex", "w-6/12"], [1, "!w-full"], ["nzFor", "name", 1, "!flex", "!h-[36px]", "!items-center", "!justify-start"], [1, "!flex", "!h-[56px]", "flex-col", 3, "nzErrorTip"], [1, "custom-nz-input-group", "!mt-0", "!mb-0", "!h-[36px]", 3, "nzSuffix"], ["type", "text", "nz-input", "", "formControlName", "name", "placeholder", "Nh\u1EADp Name"], ["nzFor", "distance", 1, "!flex", "!h-[36px]", "!items-center", "!justify-start"], ["type", "number", "nz-input", "", "formControlName", "distance", "placeholder", "Nh\u1EADp Distance"], ["nzFor", "distanceTime", 1, "!flex", "!h-[36px]", "!items-center", "!justify-start"], ["type", "text", "nz-input", "", "formControlName", "distanceTime", "placeholder", "Nh\u1EADp Distance"], ["nzFor", "price", 1, "!flex", "!h-[36px]", "!items-center", "!justify-start"], ["type", "text", "nz-input", "", "formControlName", "price", "placeholder", "Nh\u1EADp Price"], [1, "flex", "w-6/12", "flex-col"], [1, "ant-form-item-label", "ant-col", "!flex", "!h-[36px]", "!items-center", "!justify-start"], ["formArrayName", "breakPoints", "cdkDropList", "", 1, "drag-drop-list", "flex", "flex-col", "gap-4", 3, "cdkDropListDropped"], ["cdkDrag", "", 3, "formGroupName", 4, "ngFor", "ngForOf"], [1, "mt-4", "flex", "justify-end", "gap-4"], ["nz-button", "", "nzType", "default", 1, "!min-w-24", "!flex", "!h-max", "!justify-center", "!rounded-lg", "!py-2", "!px-3", "hover:!border-red-500", "hover:!bg-red-200", "hover:!text-red-500", 3, "click"], ["src", "assets/icons/add-square.svg", 3, "svgClass"], ["class", "animate-fade-down", 4, "ngIf"], [1, "my-5", "flex", "w-full", "justify-end"], ["nz-button", "", "nzType", "default", "type", "submit", 1, "!min-w-24", "!bg-primary", "!flex", "!h-max", "!justify-center", "!rounded-lg", "!py-2", "!px-3", "!text-white", "hover:!border-red-500", "hover:!bg-red-200", "hover:!text-red-500"], ["nz-icon", "", "nzTheme", "fill", "nzType", "close-circle", 1, "ant-input-clear-icon", 3, "click"], [1, "mt-1", "!text-xs", "text-red-500"], ["cdkDrag", "", 3, "formGroupName"], [1, "!flex", "!items-center"], ["nzShowSearch", "", "nzAllowClear", "", "formControlName", "busStationId", "nzPlaceHolder", "Ch\u1ECDn Bus Station"], [3, "nzLabel"], ["src", "assets/icons/trash-red-outline.svg", 3, "svgClass", "click", 4, "ngIf"], ["nzCustomContent", "", 3, "nzLabel", "nzValue"], [1, "flex", "items-center"], [1, "pl-4", "!font-medium"], ["src", "assets/icons/trash-red-outline.svg", 3, "click", "svgClass"], [1, "animate-fade-down"], [1, "pt-1", "text-xs", "text-red-500"]], template: function BusScheduleDetailComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 8)(1, "div", 9)(2, "button", 10);
        \u0275\u0275listener("click", function BusScheduleDetailComponent_Template_button_click_2_listener() {
          return ctx.backPage();
        });
        \u0275\u0275text(3, " Back ");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(4, "div", 11);
        \u0275\u0275template(5, BusScheduleDetailComponent_form_5_Template, 63, 13, "form", 12);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275advance(5);
        \u0275\u0275property("ngIf", ctx.busScheduleDetailForm);
      }
    }, dependencies: [NgForOf, NgIf, \u0275NgNoValidate, DefaultValueAccessor, NumberValueAccessor, NgControlStatus, NgControlStatusGroup, FormGroupDirective, FormControlName, FormGroupName, FormArrayName, SvgIconComponent, CdkDropList, CdkDrag, NzOptionComponent, NzSelectComponent, NzOptionGroupComponent, NzButtonComponent, NzTransitionPatchDirective, NzWaveDirective, NzInputDirective, NzInputGroupComponent, NzInputGroupWhitSuffixOrPrefixDirective, NzColDirective, NzRowDirective, NzFormDirective, NzFormItemComponent, NzFormLabelComponent, NzFormControlComponent, NzIconDirective], styles: ["\n\n.drag-drop-list[_ngcontent-%COMP%] {\n  width: 500px;\n  max-width: 100%;\n  overflow: hidden;\n}\n.drag-drop-box[_ngcontent-%COMP%] {\n  align-items: center;\n  justify-content: space-between;\n  cursor: move;\n}\n.cdk-drag-preview[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow:\n    0 5px 5px -3px rgba(0, 0, 0, 0.2),\n    0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.cdk-drag-animating[_ngcontent-%COMP%] {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\n  opacity: 0;\n}\n.drag-drop-list.cdk-drop-list-dragging[_ngcontent-%COMP%]   .drag-drop-box[_ngcontent-%COMP%]:not(.cdk-drag-placeholder) {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n.ant-form-item-control-input-content[_ngcontent-%COMP%] {\n  display: flex !important;\n}\n/*# sourceMappingURL=bus-schedule-detail..component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(BusScheduleDetailComponent, { className: "BusScheduleDetailComponent", filePath: "src/app/modules/management/pages/bus-schedules/pages/bus-schedule-detail/bus-schedule-detail.component.ts", lineNumber: 22 });
})();

// src/app/modules/management/management-routing.module.ts
var routes = [
  {
    path: "",
    component: ManagementComponent,
    children: [
      { path: "", redirectTo: "options", pathMatch: "full" },
      {
        path: "buses",
        component: BusesComponent
      },
      {
        path: "buses/bus-detail",
        component: BusDetailComponent
      },
      {
        path: "bus-routes",
        component: BusRoutesComponent
      },
      {
        path: "bus-routes/bus-route-detail",
        component: BusRouteDetailComponent
      },
      {
        path: "bus-schedules",
        component: BusSchedulesComponent
      },
      {
        path: "bus-schedules/bus-schedule-detail",
        component: BusScheduleDetailComponent
      },
      {
        path: "bus-provinves",
        component: BusProvincesComponent
      },
      {
        path: "bus-stations",
        component: BusStationsComponent
      },
      {
        path: "bus-types",
        component: BusTypesComponent
      },
      {
        path: "bus-services",
        component: BusServicesComponent
      },
      {
        path: "seat-type",
        component: SeatTypesComponent
      },
      {
        path: "bus-templates",
        component: BusTemplatesComponent
      },
      {
        path: "bus-templates/bus-tempalte-detail",
        component: BusTemplateDetailComponent
      },
      {
        path: "media-center",
        component: FilesComponent
      },
      {
        path: "options",
        component: OptionsComponent
      },
      {
        path: "options-value",
        component: OptionsValueComponent
      },
      { path: "**", redirectTo: "errors/404" }
    ]
  }
];
var ManagementRoutingModule = class _ManagementRoutingModule {
  static {
    this.\u0275fac = function ManagementRoutingModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ManagementRoutingModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _ManagementRoutingModule });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({ imports: [RouterModule.forChild(routes), RouterModule] });
  }
};

// src/app/modules/management/components/tooltip/tooltip.component.ts
var _c025 = ["*", [["", "tooltipContent", ""]]];
var _c117 = ["*", "[tooltipContent]"];
var _c213 = (a0) => ({ "cursor-pointer": a0 });
function TooltipComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 3)(1, "div", 4)(2, "div", 5);
    \u0275\u0275projection(3, 1);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275styleProp("top", ctx_r0.position.top)("left", ctx_r0.position.left);
  }
}
var TooltipComponent = class _TooltipComponent {
  constructor() {
    this.disable = false;
    this.isVisible = false;
    this.position = { top: "-5.3rem", left: "0%" };
  }
  show() {
    this.isVisible = true;
  }
  hide() {
    this.isVisible = false;
  }
  static {
    this.\u0275fac = function TooltipComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _TooltipComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _TooltipComponent, selectors: [["app-tooltip"]], inputs: { disable: "disable" }, standalone: false, ngContentSelectors: _c117, decls: 4, vars: 4, consts: [[1, "relative", "inline-block", 3, "mouseenter", "mouseleave"], [3, "ngClass"], ["class", " animate-fade-in-up absolute z-10 h-32 w-full", 3, "top", "left", 4, "ngIf"], [1, "animate-fade-in-up", "absolute", "z-10", "h-32", "w-full"], [1, "tooltip-content", "h-max", "w-96", "rounded-lg", "bg-white", "shadow-2xl"], [1, "p-4"]], template: function TooltipComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275projectionDef(_c025);
        \u0275\u0275elementStart(0, "div", 0);
        \u0275\u0275listener("mouseenter", function TooltipComponent_Template_div_mouseenter_0_listener() {
          return ctx.show();
        })("mouseleave", function TooltipComponent_Template_div_mouseleave_0_listener() {
          return ctx.hide();
        });
        \u0275\u0275elementStart(1, "span", 1);
        \u0275\u0275projection(2);
        \u0275\u0275elementEnd();
        \u0275\u0275template(3, TooltipComponent_div_3_Template, 4, 4, "div", 2);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275advance();
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(2, _c213, !ctx.disable));
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.isVisible && !ctx.disable);
      }
    }, dependencies: [NgClass, NgIf], styles: ['\n\n[_nghost-%COMP%] {\n  display: flex;\n  width: max-content;\n  height: max-content;\n}\n.tooltip-content[_ngcontent-%COMP%]::after {\n  content: "";\n  position: absolute;\n  left: 15%;\n  margin-left: -5px;\n  border-width: 8px;\n  border-style: solid;\n  border-color: white transparent transparent transparent;\n}\n/*# sourceMappingURL=tooltip.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(TooltipComponent, { className: "TooltipComponent", filePath: "src/app/modules/management/components/tooltip/tooltip.component.ts", lineNumber: 9 });
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-switch.mjs
var _c026 = ["switchElement"];
function NzSwitchComponent_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-icon", 3);
  }
}
function NzSwitchComponent_Conditional_5_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.nzCheckedChildren);
  }
}
function NzSwitchComponent_Conditional_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzSwitchComponent_Conditional_5_ng_container_0_Template, 2, 1, "ng-container", 6);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r0.nzCheckedChildren);
  }
}
function NzSwitchComponent_Conditional_6_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.nzUnCheckedChildren);
  }
}
function NzSwitchComponent_Conditional_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzSwitchComponent_Conditional_6_ng_container_0_Template, 2, 1, "ng-container", 6);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r0.nzUnCheckedChildren);
  }
}
var NZ_CONFIG_MODULE_NAME8 = "switch";
var NzSwitchComponent = (() => {
  let _nzSize_decorators;
  let _nzSize_initializers = [];
  let _nzSize_extraInitializers = [];
  return class NzSwitchComponent2 {
    static {
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
      _nzSize_decorators = [WithConfig()];
      __esDecorate(null, null, _nzSize_decorators, {
        kind: "field",
        name: "nzSize",
        static: false,
        private: false,
        access: {
          has: (obj) => "nzSize" in obj,
          get: (obj) => obj.nzSize,
          set: (obj, value) => {
            obj.nzSize = value;
          }
        },
        metadata: _metadata
      }, _nzSize_initializers, _nzSize_extraInitializers);
      if (_metadata) Object.defineProperty(this, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    }
    updateValue(value) {
      if (this.isChecked !== value) {
        this.isChecked = value;
        this.onChange(this.isChecked);
      }
    }
    focus() {
      this.focusMonitor.focusVia(this.switchElement.nativeElement, "keyboard");
    }
    blur() {
      this.switchElement.nativeElement.blur();
    }
    constructor(nzConfigService, host, ngZone, cdr, focusMonitor, directionality) {
      this.nzConfigService = nzConfigService;
      this.host = host;
      this.ngZone = ngZone;
      this.cdr = cdr;
      this.focusMonitor = focusMonitor;
      this.directionality = directionality;
      this._nzModuleName = NZ_CONFIG_MODULE_NAME8;
      this.isChecked = false;
      this.onChange = () => {
      };
      this.onTouched = () => {
      };
      this.nzLoading = false;
      this.nzDisabled = false;
      this.nzControl = false;
      this.nzCheckedChildren = null;
      this.nzUnCheckedChildren = null;
      this.nzSize = __runInitializers(this, _nzSize_initializers, "default");
      this.nzId = (__runInitializers(this, _nzSize_extraInitializers), null);
      this.dir = "ltr";
      this.destroy$ = new Subject();
      this.isNzDisableFirstChange = true;
    }
    ngOnInit() {
      this.directionality.change.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
        this.dir = direction;
        this.cdr.detectChanges();
      });
      this.dir = this.directionality.value;
      fromEventOutsideAngular(this.host.nativeElement, "click").pipe(takeUntil(this.destroy$)).subscribe((event2) => {
        event2.preventDefault();
        if (this.nzControl || this.nzDisabled || this.nzLoading) {
          return;
        }
        this.ngZone.run(() => {
          this.updateValue(!this.isChecked);
          this.cdr.markForCheck();
        });
      });
      fromEventOutsideAngular(this.switchElement.nativeElement, "keydown").pipe(takeUntil(this.destroy$)).subscribe((event2) => {
        if (this.nzControl || this.nzDisabled || this.nzLoading) {
          return;
        }
        const {
          keyCode
        } = event2;
        if (keyCode !== LEFT_ARROW && keyCode !== RIGHT_ARROW && keyCode !== SPACE && keyCode !== ENTER) {
          return;
        }
        event2.preventDefault();
        this.ngZone.run(() => {
          if (keyCode === LEFT_ARROW) {
            this.updateValue(false);
          } else if (keyCode === RIGHT_ARROW) {
            this.updateValue(true);
          } else if (keyCode === SPACE || keyCode === ENTER) {
            this.updateValue(!this.isChecked);
          }
          this.cdr.markForCheck();
        });
      });
    }
    ngAfterViewInit() {
      this.focusMonitor.monitor(this.switchElement.nativeElement, true).pipe(takeUntil(this.destroy$)).subscribe((focusOrigin) => {
        if (!focusOrigin) {
          Promise.resolve().then(() => this.onTouched());
        }
      });
    }
    ngOnDestroy() {
      this.focusMonitor.stopMonitoring(this.switchElement.nativeElement);
      this.destroy$.next();
      this.destroy$.complete();
    }
    writeValue(value) {
      this.isChecked = value;
      this.cdr.markForCheck();
    }
    registerOnChange(fn) {
      this.onChange = fn;
    }
    registerOnTouched(fn) {
      this.onTouched = fn;
    }
    setDisabledState(disabled) {
      this.nzDisabled = this.isNzDisableFirstChange && this.nzDisabled || disabled;
      this.isNzDisableFirstChange = false;
      this.cdr.markForCheck();
    }
    static {
      this.\u0275fac = function NzSwitchComponent_Factory(__ngFactoryType__) {
        return new (__ngFactoryType__ || NzSwitchComponent2)(\u0275\u0275directiveInject(NzConfigService), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(FocusMonitor), \u0275\u0275directiveInject(Directionality));
      };
    }
    static {
      this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
        type: NzSwitchComponent2,
        selectors: [["nz-switch"]],
        viewQuery: function NzSwitchComponent_Query(rf, ctx) {
          if (rf & 1) {
            \u0275\u0275viewQuery(_c026, 7);
          }
          if (rf & 2) {
            let _t;
            \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.switchElement = _t.first);
          }
        },
        inputs: {
          nzLoading: [2, "nzLoading", "nzLoading", booleanAttribute],
          nzDisabled: [2, "nzDisabled", "nzDisabled", booleanAttribute],
          nzControl: [2, "nzControl", "nzControl", booleanAttribute],
          nzCheckedChildren: "nzCheckedChildren",
          nzUnCheckedChildren: "nzUnCheckedChildren",
          nzSize: "nzSize",
          nzId: "nzId"
        },
        exportAs: ["nzSwitch"],
        features: [\u0275\u0275ProvidersFeature([{
          provide: NG_VALUE_ACCESSOR,
          useExisting: forwardRef(() => NzSwitchComponent2),
          multi: true
        }]), \u0275\u0275InputTransformsFeature],
        decls: 8,
        vars: 15,
        consts: [["switchElement", ""], ["nz-wave", "", "type", "button", 1, "ant-switch", 3, "disabled", "nzWaveExtraNode"], [1, "ant-switch-handle"], ["nzType", "loading", 1, "ant-switch-loading-icon"], [1, "ant-switch-inner"], [1, "ant-click-animating-node"], [4, "nzStringTemplateOutlet"]],
        template: function NzSwitchComponent_Template(rf, ctx) {
          if (rf & 1) {
            \u0275\u0275elementStart(0, "button", 1, 0)(2, "span", 2);
            \u0275\u0275template(3, NzSwitchComponent_Conditional_3_Template, 1, 0, "nz-icon", 3);
            \u0275\u0275elementEnd();
            \u0275\u0275elementStart(4, "span", 4);
            \u0275\u0275template(5, NzSwitchComponent_Conditional_5_Template, 1, 1, "ng-container")(6, NzSwitchComponent_Conditional_6_Template, 1, 1, "ng-container");
            \u0275\u0275elementEnd();
            \u0275\u0275element(7, "div", 5);
            \u0275\u0275elementEnd();
          }
          if (rf & 2) {
            \u0275\u0275classProp("ant-switch-checked", ctx.isChecked)("ant-switch-loading", ctx.nzLoading)("ant-switch-disabled", ctx.nzDisabled)("ant-switch-small", ctx.nzSize === "small")("ant-switch-rtl", ctx.dir === "rtl");
            \u0275\u0275property("disabled", ctx.nzDisabled)("nzWaveExtraNode", true);
            \u0275\u0275attribute("id", ctx.nzId);
            \u0275\u0275advance(3);
            \u0275\u0275conditional(ctx.nzLoading ? 3 : -1);
            \u0275\u0275advance(2);
            \u0275\u0275conditional(ctx.isChecked ? 5 : 6);
          }
        },
        dependencies: [NzWaveModule, NzWaveDirective, NzIconModule, NzIconDirective, NzOutletModule, NzStringTemplateOutletDirective],
        encapsulation: 2,
        changeDetection: 0
      });
    }
  };
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSwitchComponent, [{
    type: Component,
    args: [{
      selector: "nz-switch",
      exportAs: "nzSwitch",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      providers: [{
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => NzSwitchComponent),
        multi: true
      }],
      template: `
    <button
      nz-wave
      type="button"
      class="ant-switch"
      #switchElement
      [attr.id]="nzId"
      [disabled]="nzDisabled"
      [class.ant-switch-checked]="isChecked"
      [class.ant-switch-loading]="nzLoading"
      [class.ant-switch-disabled]="nzDisabled"
      [class.ant-switch-small]="nzSize === 'small'"
      [class.ant-switch-rtl]="dir === 'rtl'"
      [nzWaveExtraNode]="true"
    >
      <span class="ant-switch-handle">
        @if (nzLoading) {
          <nz-icon nzType="loading" class="ant-switch-loading-icon" />
        }
      </span>
      <span class="ant-switch-inner">
        @if (isChecked) {
          <ng-container *nzStringTemplateOutlet="nzCheckedChildren">{{ nzCheckedChildren }}</ng-container>
        } @else {
          <ng-container *nzStringTemplateOutlet="nzUnCheckedChildren">{{ nzUnCheckedChildren }}</ng-container>
        }
      </span>
      <div class="ant-click-animating-node"></div>
    </button>
  `,
      imports: [NzWaveModule, NzIconModule, NzOutletModule]
    }]
  }], () => [{
    type: NzConfigService
  }, {
    type: ElementRef
  }, {
    type: NgZone
  }, {
    type: ChangeDetectorRef
  }, {
    type: FocusMonitor
  }, {
    type: Directionality
  }], {
    switchElement: [{
      type: ViewChild,
      args: ["switchElement", {
        static: true
      }]
    }],
    nzLoading: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzDisabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzControl: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzCheckedChildren: [{
      type: Input
    }],
    nzUnCheckedChildren: [{
      type: Input
    }],
    nzSize: [{
      type: Input
    }],
    nzId: [{
      type: Input
    }]
  });
})();
var NzSwitchModule = class _NzSwitchModule {
  static {
    this.\u0275fac = function NzSwitchModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSwitchModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzSwitchModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      imports: [NzSwitchComponent]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSwitchModule, [{
    type: NgModule,
    args: [{
      imports: [NzSwitchComponent],
      exports: [NzSwitchComponent]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-tree-view.mjs
function NzTreeNodeIndentsComponent_For_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 1);
  }
  if (rf & 2) {
    const isEnd_r1 = ctx.$implicit;
    \u0275\u0275classProp("ant-tree-indent-unit-end", !isEnd_r1);
  }
}
var _c027 = [[["nz-tree-node-toggle"], ["", "nz-tree-node-toggle", ""]], [["nz-tree-node-checkbox"]], [["nz-tree-node-option"]], "*"];
var _c118 = ["nz-tree-node-toggle, [nz-tree-node-toggle]", "nz-tree-node-checkbox", "nz-tree-node-option", "*"];
function NzTreeNodeComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-tree-node-indents", 0);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("indents", ctx_r0.indents);
  }
}
function NzTreeNodeComponent_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-tree-node-toggle", 1);
    \u0275\u0275element(1, "span", 2);
    \u0275\u0275elementEnd();
  }
}
var _c214 = ["*"];
function NzTreeVirtualScrollViewComponent_ng_container_2_ng_template_1_Template(rf, ctx) {
}
function NzTreeVirtualScrollViewComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzTreeVirtualScrollViewComponent_ng_container_2_ng_template_1_Template, 0, 0, "ng-template", 4);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("data", item_r1)("compareBy", ctx_r1.compareBy);
  }
}
var NzTreeNodeCheckboxComponent = class _NzTreeNodeCheckboxComponent {
  constructor(ngZone, ref, host, destroy$) {
    this.ngZone = ngZone;
    this.ref = ref;
    this.host = host;
    this.destroy$ = destroy$;
    this.nzClick = new EventEmitter();
  }
  ngOnInit() {
    fromEventOutsideAngular(this.host.nativeElement, "click").pipe(takeUntil(this.destroy$)).subscribe((event2) => {
      if (!this.nzDisabled && this.nzClick.observers.length) {
        this.ngZone.run(() => {
          this.nzClick.emit(event2);
          this.ref.markForCheck();
        });
      }
    });
  }
  static {
    this.\u0275fac = function NzTreeNodeCheckboxComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTreeNodeCheckboxComponent)(\u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(NzDestroyService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzTreeNodeCheckboxComponent,
      selectors: [["nz-tree-node-checkbox", 3, "builtin", ""]],
      hostAttrs: [1, "ant-tree-checkbox"],
      hostVars: 6,
      hostBindings: function NzTreeNodeCheckboxComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-tree-checkbox-checked", ctx.nzChecked)("ant-tree-checkbox-indeterminate", ctx.nzIndeterminate)("ant-tree-checkbox-disabled", ctx.nzDisabled);
        }
      },
      inputs: {
        nzChecked: [2, "nzChecked", "nzChecked", booleanAttribute],
        nzIndeterminate: [2, "nzIndeterminate", "nzIndeterminate", booleanAttribute],
        nzDisabled: [2, "nzDisabled", "nzDisabled", booleanAttribute]
      },
      outputs: {
        nzClick: "nzClick"
      },
      features: [\u0275\u0275ProvidersFeature([NzDestroyService]), \u0275\u0275InputTransformsFeature],
      decls: 1,
      vars: 0,
      consts: [[1, "ant-tree-checkbox-inner"]],
      template: function NzTreeNodeCheckboxComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275element(0, "span", 0);
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTreeNodeCheckboxComponent, [{
    type: Component,
    args: [{
      selector: "nz-tree-node-checkbox:not([builtin])",
      template: ` <span class="ant-tree-checkbox-inner"></span> `,
      changeDetection: ChangeDetectionStrategy.OnPush,
      preserveWhitespaces: false,
      host: {
        class: "ant-tree-checkbox",
        "[class.ant-tree-checkbox-checked]": `nzChecked`,
        "[class.ant-tree-checkbox-indeterminate]": `nzIndeterminate`,
        "[class.ant-tree-checkbox-disabled]": `nzDisabled`
      },
      providers: [NzDestroyService]
    }]
  }], () => [{
    type: NgZone
  }, {
    type: ChangeDetectorRef
  }, {
    type: ElementRef
  }, {
    type: NzDestroyService
  }], {
    nzChecked: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzIndeterminate: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzDisabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzClick: [{
      type: Output
    }]
  });
})();
var getParent = (nodes, node, getLevel) => {
  let index = nodes.indexOf(node);
  if (index < 0) {
    return null;
  }
  const level = getLevel(node);
  for (index--; index >= 0; index--) {
    const preLevel = getLevel(nodes[index]);
    if (preLevel + 1 === level) {
      return nodes[index];
    }
    if (preLevel + 1 < level) {
      return null;
    }
  }
  return null;
};
var getNextSibling = (nodes, node, getLevel, _index) => {
  let index = typeof _index !== "undefined" ? _index : nodes.indexOf(node);
  if (index < 0) {
    return null;
  }
  const level = getLevel(node);
  for (index++; index < nodes.length; index++) {
    const nextLevel = getLevel(nodes[index]);
    if (nextLevel < level) {
      return null;
    }
    if (nextLevel === level) {
      return nodes[index];
    }
  }
  return null;
};
var NzNodeBase = class extends CdkTreeNode {
};
var NzTreeView = class _NzTreeView extends CdkTree {
  get dataSource() {
    return super.dataSource;
  }
  set dataSource(dataSource) {
    super.dataSource = dataSource;
  }
  constructor(differs, changeDetectorRef, directionality) {
    super(differs, changeDetectorRef, directionality);
    this.differs = differs;
    this.changeDetectorRef = changeDetectorRef;
    this.directionality = directionality;
    this.destroy$ = new Subject();
    this.dir = "ltr";
    this._dataSourceChanged = new Subject();
    this.nzDirectoryTree = false;
    this.nzBlockNode = false;
    this.noAnimation = inject(NzNoAnimationDirective, {
      host: true,
      optional: true
    });
  }
  ngOnInit() {
    super.ngOnInit();
    this.dir = this.directionality.value;
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.changeDetectorRef.detectChanges();
    });
  }
  ngOnDestroy() {
    super.ngOnDestroy();
    this.destroy$.next(true);
    this.destroy$.complete();
  }
  renderNodeChanges(data, dataDiffer, viewContainer, parentData) {
    super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);
    this._dataSourceChanged.next();
  }
  static {
    this.\u0275fac = function NzTreeView_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTreeView)(\u0275\u0275directiveInject(IterableDiffers), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(Directionality));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzTreeView,
      selectors: [["ng-component"]],
      inputs: {
        treeControl: [0, "nzTreeControl", "treeControl"],
        dataSource: [0, "nzDataSource", "dataSource"],
        nzDirectoryTree: [2, "nzDirectoryTree", "nzDirectoryTree", booleanAttribute],
        nzBlockNode: [2, "nzBlockNode", "nzBlockNode", booleanAttribute]
      },
      features: [\u0275\u0275InputTransformsFeature, \u0275\u0275InheritDefinitionFeature],
      decls: 0,
      vars: 0,
      template: function NzTreeView_Template(rf, ctx) {
      },
      encapsulation: 2
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTreeView, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], () => [{
    type: IterableDiffers
  }, {
    type: ChangeDetectorRef
  }, {
    type: Directionality
  }], {
    treeControl: [{
      type: Input,
      args: ["nzTreeControl"]
    }],
    dataSource: [{
      type: Input,
      args: ["nzDataSource"]
    }],
    nzDirectoryTree: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzBlockNode: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
function booleanArrayToString(arr) {
  return arr.map((i) => i ? 1 : 0).join("");
}
var BUILD_INDENTS_SCHEDULER = typeof requestAnimationFrame !== "undefined" ? animationFrameScheduler : asapScheduler;
var NzTreeNodeIndentsComponent = class _NzTreeNodeIndentsComponent {
  constructor() {
    this.indents = [];
  }
  static {
    this.\u0275fac = function NzTreeNodeIndentsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTreeNodeIndentsComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzTreeNodeIndentsComponent,
      selectors: [["nz-tree-node-indents"]],
      hostAttrs: [1, "ant-tree-indent"],
      inputs: {
        indents: "indents"
      },
      decls: 2,
      vars: 0,
      consts: [[1, "ant-tree-indent-unit", 3, "ant-tree-indent-unit-end"], [1, "ant-tree-indent-unit"]],
      template: function NzTreeNodeIndentsComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275repeaterCreate(0, NzTreeNodeIndentsComponent_For_1_Template, 1, 2, "span", 0, \u0275\u0275repeaterTrackByIdentity);
        }
        if (rf & 2) {
          \u0275\u0275repeater(ctx.indents);
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTreeNodeIndentsComponent, [{
    type: Component,
    args: [{
      selector: "nz-tree-node-indents",
      template: `
    @for (isEnd of indents; track isEnd) {
      <span class="ant-tree-indent-unit" [class.ant-tree-indent-unit-end]="!isEnd"></span>
    }
  `,
      changeDetection: ChangeDetectionStrategy.OnPush,
      host: {
        class: "ant-tree-indent"
      }
    }]
  }], null, {
    indents: [{
      type: Input
    }]
  });
})();
var NzTreeNodeIndentLineDirective = class _NzTreeNodeIndentLineDirective {
  constructor(treeNode, tree, cdr) {
    this.treeNode = treeNode;
    this.tree = tree;
    this.cdr = cdr;
    this.isLast = "unset";
    this.isLeaf = false;
    this.preNodeRef = null;
    this.nextNodeRef = null;
    this.currentIndents = "";
    this.buildIndents();
    this.checkLast();
    this.changeSubscription = merge(this.treeNode._dataChanges, tree._dataSourceChanged).pipe(auditTime(0, BUILD_INDENTS_SCHEDULER)).subscribe(() => {
      this.buildIndents();
      this.checkAdjacent();
      this.cdr.markForCheck();
    });
  }
  getIndents() {
    const indents = [];
    const nodes = this.tree.treeControl.dataNodes;
    const getLevel = this.tree.treeControl.getLevel;
    let parent = getParent(nodes, this.treeNode.data, getLevel);
    while (parent) {
      const parentNextSibling = getNextSibling(nodes, parent, getLevel);
      if (parentNextSibling) {
        indents.unshift(true);
      } else {
        indents.unshift(false);
      }
      parent = getParent(nodes, parent, getLevel);
    }
    return indents;
  }
  buildIndents() {
    if (this.treeNode.data) {
      const indents = this.getIndents();
      const diffString = booleanArrayToString(indents);
      if (diffString !== this.currentIndents) {
        this.treeNode.setIndents(this.getIndents());
        this.currentIndents = diffString;
      }
    }
  }
  /**
   * We need to add an class name for the last child node,
   * this result can also be affected when the adjacent nodes are changed.
   */
  checkAdjacent() {
    const nodes = this.tree.treeControl.dataNodes;
    const index = nodes.indexOf(this.treeNode.data);
    const preNode = nodes[index - 1] || null;
    const nextNode = nodes[index + 1] || null;
    if (this.nextNodeRef !== nextNode || this.preNodeRef !== preNode) {
      this.checkLast(index);
    }
    this.preNodeRef = preNode;
    this.nextNodeRef = nextNode;
  }
  checkLast(index) {
    const nodes = this.tree.treeControl.dataNodes;
    this.isLeaf = this.treeNode.isLeaf;
    this.isLast = !getNextSibling(nodes, this.treeNode.data, this.tree.treeControl.getLevel, index);
  }
  ngOnDestroy() {
    this.preNodeRef = null;
    this.nextNodeRef = null;
    this.changeSubscription.unsubscribe();
  }
  static {
    this.\u0275fac = function NzTreeNodeIndentLineDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTreeNodeIndentLineDirective)(\u0275\u0275directiveInject(NzNodeBase), \u0275\u0275directiveInject(NzTreeView), \u0275\u0275directiveInject(ChangeDetectorRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTreeNodeIndentLineDirective,
      selectors: [["nz-tree-node", "nzTreeNodeIndentLine", ""]],
      hostAttrs: [1, "ant-tree-show-line"],
      hostVars: 2,
      hostBindings: function NzTreeNodeIndentLineDirective_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-tree-treenode-leaf-last", ctx.isLast && ctx.isLeaf);
        }
      }
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTreeNodeIndentLineDirective, [{
    type: Directive,
    args: [{
      selector: "nz-tree-node[nzTreeNodeIndentLine]",
      host: {
        class: "ant-tree-show-line",
        "[class.ant-tree-treenode-leaf-last]": "isLast && isLeaf"
      }
    }]
  }], () => [{
    type: NzNodeBase
  }, {
    type: NzTreeView
  }, {
    type: ChangeDetectorRef
  }], null);
})();
var NzTreeNodeNoopToggleDirective = class _NzTreeNodeNoopToggleDirective {
  static {
    this.\u0275fac = function NzTreeNodeNoopToggleDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTreeNodeNoopToggleDirective)();
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTreeNodeNoopToggleDirective,
      selectors: [["nz-tree-node-toggle", "nzTreeNodeNoopToggle", ""], ["", "nzTreeNodeNoopToggle", ""]],
      hostAttrs: [1, "ant-tree-switcher", "ant-tree-switcher-noop"]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTreeNodeNoopToggleDirective, [{
    type: Directive,
    args: [{
      selector: "nz-tree-node-toggle[nzTreeNodeNoopToggle], [nzTreeNodeNoopToggle]",
      host: {
        class: "ant-tree-switcher ant-tree-switcher-noop"
      }
    }]
  }], null, null);
})();
var NzTreeNodeToggleDirective = class _NzTreeNodeToggleDirective extends CdkTreeNodeToggle {
  constructor() {
    super(...arguments);
    this.recursive = false;
  }
  get isExpanded() {
    return this._treeNode.isExpanded;
  }
  static {
    this.\u0275fac = /* @__PURE__ */ (() => {
      let \u0275NzTreeNodeToggleDirective_BaseFactory;
      return function NzTreeNodeToggleDirective_Factory(__ngFactoryType__) {
        return (\u0275NzTreeNodeToggleDirective_BaseFactory || (\u0275NzTreeNodeToggleDirective_BaseFactory = \u0275\u0275getInheritedFactory(_NzTreeNodeToggleDirective)))(__ngFactoryType__ || _NzTreeNodeToggleDirective);
      };
    })();
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTreeNodeToggleDirective,
      selectors: [["nz-tree-node-toggle", 3, "nzTreeNodeNoopToggle", ""], ["", "nzTreeNodeToggle", ""]],
      hostAttrs: [1, "ant-tree-switcher"],
      hostVars: 4,
      hostBindings: function NzTreeNodeToggleDirective_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-tree-switcher_open", ctx.isExpanded)("ant-tree-switcher_close", !ctx.isExpanded);
        }
      },
      inputs: {
        recursive: [2, "nzTreeNodeToggleRecursive", "recursive", booleanAttribute]
      },
      features: [\u0275\u0275ProvidersFeature([{
        provide: CdkTreeNodeToggle,
        useExisting: forwardRef(() => _NzTreeNodeToggleDirective)
      }]), \u0275\u0275InputTransformsFeature, \u0275\u0275InheritDefinitionFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTreeNodeToggleDirective, [{
    type: Directive,
    args: [{
      selector: "nz-tree-node-toggle:not([nzTreeNodeNoopToggle]), [nzTreeNodeToggle]",
      providers: [{
        provide: CdkTreeNodeToggle,
        useExisting: forwardRef(() => NzTreeNodeToggleDirective)
      }],
      host: {
        class: "ant-tree-switcher",
        "[class.ant-tree-switcher_open]": "isExpanded",
        "[class.ant-tree-switcher_close]": "!isExpanded"
      }
    }]
  }], null, {
    recursive: [{
      type: Input,
      args: [{
        alias: "nzTreeNodeToggleRecursive",
        transform: booleanAttribute
      }]
    }]
  });
})();
var NzTreeNodeToggleRotateIconDirective = class _NzTreeNodeToggleRotateIconDirective {
  static {
    this.\u0275fac = function NzTreeNodeToggleRotateIconDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTreeNodeToggleRotateIconDirective)();
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTreeNodeToggleRotateIconDirective,
      selectors: [["", "nzTreeNodeToggleRotateIcon", ""]],
      hostAttrs: [1, "ant-tree-switcher-icon"]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTreeNodeToggleRotateIconDirective, [{
    type: Directive,
    args: [{
      selector: "[nzTreeNodeToggleRotateIcon]",
      host: {
        class: "ant-tree-switcher-icon"
      }
    }]
  }], null, null);
})();
var NzTreeNodeToggleActiveIconDirective = class _NzTreeNodeToggleActiveIconDirective {
  static {
    this.\u0275fac = function NzTreeNodeToggleActiveIconDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTreeNodeToggleActiveIconDirective)();
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTreeNodeToggleActiveIconDirective,
      selectors: [["", "nzTreeNodeToggleActiveIcon", ""]],
      hostAttrs: [1, "ant-tree-switcher-loading-icon"]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTreeNodeToggleActiveIconDirective, [{
    type: Directive,
    args: [{
      selector: "[nzTreeNodeToggleActiveIcon]",
      host: {
        class: "ant-tree-switcher-loading-icon"
      }
    }]
  }], null, null);
})();
var NzTreeNodeComponent = class _NzTreeNodeComponent extends NzNodeBase {
  constructor(elementRef, tree, renderer, cdr) {
    super(elementRef, tree);
    this.elementRef = elementRef;
    this.tree = tree;
    this.renderer = renderer;
    this.cdr = cdr;
    this.indents = [];
    this.disabled = false;
    this.selected = false;
    this.isLeaf = false;
    this._elementRef.nativeElement.classList.add("ant-tree-treenode");
  }
  ngOnInit() {
    this.isLeaf = !this.tree.treeControl.isExpandable(this.data);
  }
  disable() {
    this.disabled = true;
    this.updateDisabledClass();
  }
  enable() {
    this.disabled = false;
    this.updateDisabledClass();
  }
  select() {
    this.selected = true;
    this.updateSelectedClass();
  }
  deselect() {
    this.selected = false;
    this.updateSelectedClass();
  }
  setIndents(indents) {
    this.indents = indents;
    this.cdr.markForCheck();
  }
  updateSelectedClass() {
    if (this.selected) {
      this.renderer.addClass(this.elementRef.nativeElement, "ant-tree-treenode-selected");
    } else {
      this.renderer.removeClass(this.elementRef.nativeElement, "ant-tree-treenode-selected");
    }
  }
  updateDisabledClass() {
    if (this.disabled) {
      this.renderer.addClass(this.elementRef.nativeElement, "ant-tree-treenode-disabled");
    } else {
      this.renderer.removeClass(this.elementRef.nativeElement, "ant-tree-treenode-disabled");
    }
  }
  static {
    this.\u0275fac = function NzTreeNodeComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTreeNodeComponent)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(NzTreeView), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ChangeDetectorRef));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzTreeNodeComponent,
      selectors: [["nz-tree-node", 3, "builtin", ""]],
      hostVars: 4,
      hostBindings: function NzTreeNodeComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-tree-treenode-switcher-open", ctx.isExpanded)("ant-tree-treenode-switcher-close", !ctx.isExpanded);
        }
      },
      exportAs: ["nzTreeNode"],
      features: [\u0275\u0275ProvidersFeature([{
        provide: CdkTreeNode,
        useExisting: forwardRef(() => _NzTreeNodeComponent)
      }, {
        provide: NzNodeBase,
        useExisting: forwardRef(() => _NzTreeNodeComponent)
      }]), \u0275\u0275InheritDefinitionFeature],
      ngContentSelectors: _c118,
      decls: 6,
      vars: 2,
      consts: [[3, "indents"], ["nzTreeNodeNoopToggle", "", 1, "nz-tree-leaf-line-icon"], [1, "ant-tree-switcher-leaf-line"]],
      template: function NzTreeNodeComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef(_c027);
          \u0275\u0275template(0, NzTreeNodeComponent_Conditional_0_Template, 1, 1, "nz-tree-node-indents", 0);
          \u0275\u0275projection(1);
          \u0275\u0275template(2, NzTreeNodeComponent_Conditional_2_Template, 2, 0, "nz-tree-node-toggle", 1);
          \u0275\u0275projection(3, 1);
          \u0275\u0275projection(4, 2);
          \u0275\u0275projection(5, 3);
        }
        if (rf & 2) {
          \u0275\u0275conditional(ctx.indents.length ? 0 : -1);
          \u0275\u0275advance(2);
          \u0275\u0275conditional(ctx.indents.length && ctx.isLeaf ? 2 : -1);
        }
      },
      dependencies: [NzTreeNodeIndentsComponent, NzTreeNodeNoopToggleDirective],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTreeNodeComponent, [{
    type: Component,
    args: [{
      selector: "nz-tree-node:not([builtin])",
      exportAs: "nzTreeNode",
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [{
        provide: CdkTreeNode,
        useExisting: forwardRef(() => NzTreeNodeComponent)
      }, {
        provide: NzNodeBase,
        useExisting: forwardRef(() => NzTreeNodeComponent)
      }],
      template: `
    @if (indents.length) {
      <nz-tree-node-indents [indents]="indents"></nz-tree-node-indents>
    }
    <ng-content select="nz-tree-node-toggle, [nz-tree-node-toggle]"></ng-content>
    @if (indents.length && isLeaf) {
      <nz-tree-node-toggle class="nz-tree-leaf-line-icon" nzTreeNodeNoopToggle>
        <span class="ant-tree-switcher-leaf-line"></span>
      </nz-tree-node-toggle>
    }
    <ng-content select="nz-tree-node-checkbox"></ng-content>
    <ng-content select="nz-tree-node-option"></ng-content>
    <ng-content></ng-content>
  `,
      host: {
        "[class.ant-tree-treenode-switcher-open]": "isExpanded",
        "[class.ant-tree-treenode-switcher-close]": "!isExpanded"
      },
      imports: [NzTreeNodeIndentsComponent, NzTreeNodeNoopToggleDirective]
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: NzTreeView
  }, {
    type: Renderer2
  }, {
    type: ChangeDetectorRef
  }], null);
})();
var NzTreeNodeDefDirective = class _NzTreeNodeDefDirective extends CdkTreeNodeDef {
  static {
    this.\u0275fac = /* @__PURE__ */ (() => {
      let \u0275NzTreeNodeDefDirective_BaseFactory;
      return function NzTreeNodeDefDirective_Factory(__ngFactoryType__) {
        return (\u0275NzTreeNodeDefDirective_BaseFactory || (\u0275NzTreeNodeDefDirective_BaseFactory = \u0275\u0275getInheritedFactory(_NzTreeNodeDefDirective)))(__ngFactoryType__ || _NzTreeNodeDefDirective);
      };
    })();
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTreeNodeDefDirective,
      selectors: [["", "nzTreeNodeDef", ""]],
      inputs: {
        when: [0, "nzTreeNodeDefWhen", "when"]
      },
      features: [\u0275\u0275ProvidersFeature([{
        provide: CdkTreeNodeDef,
        useExisting: forwardRef(() => _NzTreeNodeDefDirective)
      }]), \u0275\u0275InheritDefinitionFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTreeNodeDefDirective, [{
    type: Directive,
    args: [{
      selector: "[nzTreeNodeDef]",
      providers: [{
        provide: CdkTreeNodeDef,
        useExisting: forwardRef(() => NzTreeNodeDefDirective)
      }]
    }]
  }], null, {
    when: [{
      type: Input,
      args: ["nzTreeNodeDefWhen"]
    }]
  });
})();
var NzTreeVirtualScrollNodeOutletDirective = class _NzTreeVirtualScrollNodeOutletDirective {
  constructor(_viewContainerRef) {
    this._viewContainerRef = _viewContainerRef;
    this._viewRef = null;
  }
  ngOnChanges(changes) {
    const recreateView = this.shouldRecreateView(changes);
    if (recreateView) {
      const viewContainerRef = this._viewContainerRef;
      if (this._viewRef) {
        viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));
      }
      this._viewRef = this.data ? viewContainerRef.createEmbeddedView(this.data.nodeDef.template, this.data.context) : null;
      if (CdkTreeNode.mostRecentTreeNode && this._viewRef) {
        CdkTreeNode.mostRecentTreeNode.data = this.data.data;
      }
    } else if (this._viewRef && this.data.context) {
      this.updateExistingContext(this.data.context);
    }
  }
  shouldRecreateView(changes) {
    const ctxChange = changes.data;
    return ctxChange && this.hasContextShapeChanged(ctxChange);
  }
  hasContextShapeChanged(ctxChange) {
    const prevCtxKeys = Object.keys(ctxChange.previousValue || {});
    const currCtxKeys = Object.keys(ctxChange.currentValue || {});
    if (prevCtxKeys.length === currCtxKeys.length) {
      for (const propName of currCtxKeys) {
        if (prevCtxKeys.indexOf(propName) === -1) {
          return true;
        }
      }
      return this.innerCompareBy(ctxChange.previousValue?.data ?? null) !== this.innerCompareBy(ctxChange.currentValue?.data ?? null);
    }
    return true;
  }
  get innerCompareBy() {
    return (value) => {
      if (value === null) return value;
      if (this.compareBy) return this.compareBy(value);
      return value;
    };
  }
  updateExistingContext(ctx) {
    for (const propName of Object.keys(ctx)) {
      this._viewRef.context[propName] = this.data.context[propName];
    }
  }
  static {
    this.\u0275fac = function NzTreeVirtualScrollNodeOutletDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTreeVirtualScrollNodeOutletDirective)(\u0275\u0275directiveInject(ViewContainerRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTreeVirtualScrollNodeOutletDirective,
      selectors: [["", "nzTreeVirtualScrollNodeOutlet", ""]],
      inputs: {
        data: "data",
        compareBy: "compareBy"
      },
      features: [\u0275\u0275NgOnChangesFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTreeVirtualScrollNodeOutletDirective, [{
    type: Directive,
    args: [{
      selector: "[nzTreeVirtualScrollNodeOutlet]"
    }]
  }], () => [{
    type: ViewContainerRef
  }], {
    data: [{
      type: Input
    }],
    compareBy: [{
      type: Input
    }]
  });
})();
var NzTreeNodeOptionComponent = class _NzTreeNodeOptionComponent {
  constructor(ngZone, host, destroy$, treeNode) {
    this.ngZone = ngZone;
    this.host = host;
    this.destroy$ = destroy$;
    this.treeNode = treeNode;
    this.nzSelected = false;
    this.nzDisabled = false;
    this.nzClick = new EventEmitter();
  }
  get isExpanded() {
    return this.treeNode.isExpanded;
  }
  ngOnChanges(changes) {
    const {
      nzDisabled,
      nzSelected
    } = changes;
    if (nzDisabled) {
      if (nzDisabled.currentValue) {
        this.treeNode.disable();
      } else {
        this.treeNode.enable();
      }
    }
    if (nzSelected) {
      if (nzSelected.currentValue) {
        this.treeNode.select();
      } else {
        this.treeNode.deselect();
      }
    }
  }
  ngOnInit() {
    fromEventOutsideAngular(this.host.nativeElement, "click").pipe(filter(() => !this.nzDisabled && this.nzClick.observers.length > 0), takeUntil(this.destroy$)).subscribe((event2) => {
      this.ngZone.run(() => this.nzClick.emit(event2));
    });
  }
  static {
    this.\u0275fac = function NzTreeNodeOptionComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTreeNodeOptionComponent)(\u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(NzDestroyService), \u0275\u0275directiveInject(NzTreeNodeComponent));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzTreeNodeOptionComponent,
      selectors: [["nz-tree-node-option"]],
      hostAttrs: [1, "ant-tree-node-content-wrapper"],
      hostVars: 4,
      hostBindings: function NzTreeNodeOptionComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-tree-node-content-wrapper-open", ctx.isExpanded)("ant-tree-node-selected", ctx.nzSelected);
        }
      },
      inputs: {
        nzSelected: [2, "nzSelected", "nzSelected", booleanAttribute],
        nzDisabled: [2, "nzDisabled", "nzDisabled", booleanAttribute]
      },
      outputs: {
        nzClick: "nzClick"
      },
      features: [\u0275\u0275ProvidersFeature([NzDestroyService]), \u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature],
      ngContentSelectors: _c214,
      decls: 2,
      vars: 0,
      consts: [[1, "ant-tree-title"]],
      template: function NzTreeNodeOptionComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275elementStart(0, "span", 0);
          \u0275\u0275projection(1);
          \u0275\u0275elementEnd();
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTreeNodeOptionComponent, [{
    type: Component,
    args: [{
      selector: "nz-tree-node-option",
      template: ` <span class="ant-tree-title"><ng-content></ng-content></span> `,
      changeDetection: ChangeDetectionStrategy.OnPush,
      host: {
        class: "ant-tree-node-content-wrapper",
        "[class.ant-tree-node-content-wrapper-open]": "isExpanded",
        "[class.ant-tree-node-selected]": "nzSelected"
      },
      providers: [NzDestroyService]
    }]
  }], () => [{
    type: NgZone
  }, {
    type: ElementRef
  }, {
    type: NzDestroyService
  }, {
    type: NzTreeNodeComponent
  }], {
    nzSelected: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzDisabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzClick: [{
      type: Output
    }]
  });
})();
var NzTreeNodeOutletDirective = class _NzTreeNodeOutletDirective {
  constructor(viewContainer) {
    this.viewContainer = viewContainer;
    this._node = inject(CDK_TREE_NODE_OUTLET_NODE, {
      optional: true
    });
  }
  static {
    this.\u0275fac = function NzTreeNodeOutletDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTreeNodeOutletDirective)(\u0275\u0275directiveInject(ViewContainerRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTreeNodeOutletDirective,
      selectors: [["", "nzTreeNodeOutlet", ""]],
      features: [\u0275\u0275ProvidersFeature([{
        provide: CdkTreeNodeOutlet,
        useExisting: forwardRef(() => _NzTreeNodeOutletDirective)
      }])]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTreeNodeOutletDirective, [{
    type: Directive,
    args: [{
      selector: "[nzTreeNodeOutlet]",
      providers: [{
        provide: CdkTreeNodeOutlet,
        useExisting: forwardRef(() => NzTreeNodeOutletDirective)
      }]
    }]
  }], () => [{
    type: ViewContainerRef
  }], null);
})();
var NzTreeNodePaddingDirective = class _NzTreeNodePaddingDirective extends CdkTreeNodePadding {
  constructor() {
    super(...arguments);
    this._indent = 24;
  }
  get level() {
    return this._level;
  }
  set level(value) {
    this._setLevelInput(value);
  }
  get indent() {
    return this._indent;
  }
  set indent(indent) {
    this._setIndentInput(indent);
  }
  static {
    this.\u0275fac = /* @__PURE__ */ (() => {
      let \u0275NzTreeNodePaddingDirective_BaseFactory;
      return function NzTreeNodePaddingDirective_Factory(__ngFactoryType__) {
        return (\u0275NzTreeNodePaddingDirective_BaseFactory || (\u0275NzTreeNodePaddingDirective_BaseFactory = \u0275\u0275getInheritedFactory(_NzTreeNodePaddingDirective)))(__ngFactoryType__ || _NzTreeNodePaddingDirective);
      };
    })();
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzTreeNodePaddingDirective,
      selectors: [["", "nzTreeNodePadding", ""]],
      inputs: {
        level: [2, "nzTreeNodePadding", "level", numberAttribute],
        indent: [0, "nzTreeNodePaddingIndent", "indent"]
      },
      features: [\u0275\u0275ProvidersFeature([{
        provide: CdkTreeNodePadding,
        useExisting: forwardRef(() => _NzTreeNodePaddingDirective)
      }]), \u0275\u0275InputTransformsFeature, \u0275\u0275InheritDefinitionFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTreeNodePaddingDirective, [{
    type: Directive,
    args: [{
      selector: "[nzTreeNodePadding]",
      providers: [{
        provide: CdkTreeNodePadding,
        useExisting: forwardRef(() => NzTreeNodePaddingDirective)
      }]
    }]
  }], null, {
    level: [{
      type: Input,
      args: [{
        alias: "nzTreeNodePadding",
        transform: numberAttribute
      }]
    }],
    indent: [{
      type: Input,
      args: ["nzTreeNodePaddingIndent"]
    }]
  });
})();
var NzTreeViewComponent = class _NzTreeViewComponent extends NzTreeView {
  constructor() {
    super(...arguments);
    this._afterViewInit = false;
  }
  ngAfterViewInit() {
    Promise.resolve().then(() => {
      this._afterViewInit = true;
      this.changeDetectorRef.markForCheck();
    });
  }
  static {
    this.\u0275fac = /* @__PURE__ */ (() => {
      let \u0275NzTreeViewComponent_BaseFactory;
      return function NzTreeViewComponent_Factory(__ngFactoryType__) {
        return (\u0275NzTreeViewComponent_BaseFactory || (\u0275NzTreeViewComponent_BaseFactory = \u0275\u0275getInheritedFactory(_NzTreeViewComponent)))(__ngFactoryType__ || _NzTreeViewComponent);
      };
    })();
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzTreeViewComponent,
      selectors: [["nz-tree-view"]],
      viewQuery: function NzTreeViewComponent_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(NzTreeNodeOutletDirective, 7);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.nodeOutlet = _t.first);
        }
      },
      hostAttrs: [1, "ant-tree"],
      hostVars: 6,
      hostBindings: function NzTreeViewComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-tree-block-node", ctx.nzDirectoryTree || ctx.nzBlockNode)("ant-tree-directory", ctx.nzDirectoryTree)("ant-tree-rtl", ctx.dir === "rtl");
        }
      },
      exportAs: ["nzTreeView"],
      features: [\u0275\u0275ProvidersFeature([{
        provide: CdkTree,
        useExisting: forwardRef(() => _NzTreeViewComponent)
      }, {
        provide: NzTreeView,
        useExisting: forwardRef(() => _NzTreeViewComponent)
      }]), \u0275\u0275InheritDefinitionFeature],
      decls: 3,
      vars: 2,
      consts: [[1, "ant-tree-list-holder"], [1, "ant-tree-list-holder-inner"], ["nzTreeNodeOutlet", ""]],
      template: function NzTreeViewComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
          \u0275\u0275elementContainer(2, 2);
          \u0275\u0275elementEnd()();
        }
        if (rf & 2) {
          \u0275\u0275advance();
          \u0275\u0275property("@.disabled", !ctx._afterViewInit || !!(ctx.noAnimation == null ? null : ctx.noAnimation.nzNoAnimation))("@treeCollapseMotion", ctx._nodeOutlet.viewContainer.length);
        }
      },
      dependencies: [NzTreeNodeOutletDirective],
      encapsulation: 2,
      data: {
        animation: [treeCollapseMotion]
      },
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTreeViewComponent, [{
    type: Component,
    args: [{
      selector: "nz-tree-view",
      exportAs: "nzTreeView",
      template: `
    <div class="ant-tree-list-holder">
      <div
        [@.disabled]="!_afterViewInit || !!noAnimation?.nzNoAnimation"
        [@treeCollapseMotion]="_nodeOutlet.viewContainer.length"
        class="ant-tree-list-holder-inner"
      >
        <ng-container nzTreeNodeOutlet></ng-container>
      </div>
    </div>
  `,
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [{
        provide: CdkTree,
        useExisting: forwardRef(() => NzTreeViewComponent)
      }, {
        provide: NzTreeView,
        useExisting: forwardRef(() => NzTreeViewComponent)
      }],
      host: {
        class: "ant-tree",
        "[class.ant-tree-block-node]": "nzDirectoryTree || nzBlockNode",
        "[class.ant-tree-directory]": "nzDirectoryTree",
        "[class.ant-tree-rtl]": `dir === 'rtl'`
      },
      animations: [treeCollapseMotion],
      imports: [NzTreeNodeOutletDirective]
    }]
  }], null, {
    nodeOutlet: [{
      type: ViewChild,
      args: [NzTreeNodeOutletDirective, {
        static: true
      }]
    }]
  });
})();
var DEFAULT_SIZE = 28;
var NzTreeVirtualScrollViewComponent = class _NzTreeVirtualScrollViewComponent extends NzTreeView {
  constructor() {
    super(...arguments);
    this.nzItemSize = DEFAULT_SIZE;
    this.nzMinBufferPx = DEFAULT_SIZE * 5;
    this.nzMaxBufferPx = DEFAULT_SIZE * 10;
    this.nodes = [];
    this.innerTrackBy = (i) => i;
  }
  ngOnChanges(changes) {
    if (changes.trackBy) {
      if (typeof changes.trackBy.currentValue === "function") {
        this.innerTrackBy = (index, n) => this.trackBy(index, n.data);
      } else {
        this.innerTrackBy = (i) => i;
      }
    }
  }
  get compareBy() {
    const baseTreeControl = this.treeControl;
    if (baseTreeControl.trackBy) {
      return baseTreeControl.trackBy;
    }
    return null;
  }
  renderNodeChanges(data) {
    this.nodes = new Array(...data).map((n, i) => this.createNode(n, i));
    this._dataSourceChanged.next();
    this.changeDetectorRef.markForCheck();
  }
  /**
   * @note
   * angular/cdk v18.2.0 breaking changes: https://github.com/angular/components/pull/29062
   * Temporary workaround: revert to old method of getting level
   * TODO: refactor tree-view, remove #treeControl and adopt #levelAccessor and #childrenAccessor
   * */
  _getLevel(nodeData) {
    if (this.treeControl.getLevel) {
      return this.treeControl.getLevel(nodeData);
    }
    return;
  }
  createNode(nodeData, index) {
    const node = this._getNodeDef(nodeData, index);
    const context = new CdkTreeNodeOutletContext(nodeData);
    if (this.treeControl.getLevel) {
      context.level = this.treeControl.getLevel(nodeData);
    } else {
      context.level = 0;
    }
    return {
      data: nodeData,
      context,
      nodeDef: node
    };
  }
  static {
    this.\u0275fac = /* @__PURE__ */ (() => {
      let \u0275NzTreeVirtualScrollViewComponent_BaseFactory;
      return function NzTreeVirtualScrollViewComponent_Factory(__ngFactoryType__) {
        return (\u0275NzTreeVirtualScrollViewComponent_BaseFactory || (\u0275NzTreeVirtualScrollViewComponent_BaseFactory = \u0275\u0275getInheritedFactory(_NzTreeVirtualScrollViewComponent)))(__ngFactoryType__ || _NzTreeVirtualScrollViewComponent);
      };
    })();
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzTreeVirtualScrollViewComponent,
      selectors: [["nz-tree-virtual-scroll-view"]],
      viewQuery: function NzTreeVirtualScrollViewComponent_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(NzTreeNodeOutletDirective, 7);
          \u0275\u0275viewQuery(CdkVirtualScrollViewport, 7);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.nodeOutlet = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.virtualScrollViewport = _t.first);
        }
      },
      hostAttrs: [1, "ant-tree"],
      hostVars: 6,
      hostBindings: function NzTreeVirtualScrollViewComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-tree-block-node", ctx.nzDirectoryTree || ctx.nzBlockNode)("ant-tree-directory", ctx.nzDirectoryTree)("ant-tree-rtl", ctx.dir === "rtl");
        }
      },
      inputs: {
        nzItemSize: "nzItemSize",
        nzMinBufferPx: "nzMinBufferPx",
        nzMaxBufferPx: "nzMaxBufferPx",
        trackBy: "trackBy"
      },
      exportAs: ["nzTreeVirtualScrollView"],
      features: [\u0275\u0275ProvidersFeature([{
        provide: NzTreeView,
        useExisting: forwardRef(() => _NzTreeVirtualScrollViewComponent)
      }, {
        provide: CdkTree,
        useExisting: forwardRef(() => _NzTreeVirtualScrollViewComponent)
      }]), \u0275\u0275InheritDefinitionFeature, \u0275\u0275NgOnChangesFeature],
      decls: 4,
      vars: 5,
      consts: [[1, "ant-tree-list"], [1, "ant-tree-list-holder", 3, "itemSize", "minBufferPx", "maxBufferPx"], [4, "cdkVirtualFor", "cdkVirtualForOf", "cdkVirtualForTrackBy"], ["nzTreeNodeOutlet", ""], ["nzTreeVirtualScrollNodeOutlet", "", 3, "data", "compareBy"]],
      template: function NzTreeVirtualScrollViewComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275elementStart(0, "div", 0)(1, "cdk-virtual-scroll-viewport", 1);
          \u0275\u0275template(2, NzTreeVirtualScrollViewComponent_ng_container_2_Template, 2, 2, "ng-container", 2);
          \u0275\u0275elementEnd()();
          \u0275\u0275elementContainer(3, 3);
        }
        if (rf & 2) {
          \u0275\u0275advance();
          \u0275\u0275property("itemSize", ctx.nzItemSize)("minBufferPx", ctx.nzMinBufferPx)("maxBufferPx", ctx.nzMaxBufferPx);
          \u0275\u0275advance();
          \u0275\u0275property("cdkVirtualForOf", ctx.nodes)("cdkVirtualForTrackBy", ctx.innerTrackBy);
        }
      },
      dependencies: [NzTreeVirtualScrollNodeOutletDirective, CdkVirtualForOf, NzTreeNodeOutletDirective, CdkVirtualScrollViewport, CdkFixedSizeVirtualScroll],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTreeVirtualScrollViewComponent, [{
    type: Component,
    args: [{
      selector: "nz-tree-virtual-scroll-view",
      exportAs: "nzTreeVirtualScrollView",
      template: `
    <div class="ant-tree-list">
      <cdk-virtual-scroll-viewport
        class="ant-tree-list-holder"
        [itemSize]="nzItemSize"
        [minBufferPx]="nzMinBufferPx"
        [maxBufferPx]="nzMaxBufferPx"
      >
        <ng-container *cdkVirtualFor="let item of nodes; let i = index; trackBy: innerTrackBy">
          <ng-template nzTreeVirtualScrollNodeOutlet [data]="item" [compareBy]="compareBy"></ng-template>
        </ng-container>
      </cdk-virtual-scroll-viewport>
    </div>
    <ng-container nzTreeNodeOutlet></ng-container>
  `,
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [{
        provide: NzTreeView,
        useExisting: forwardRef(() => NzTreeVirtualScrollViewComponent)
      }, {
        provide: CdkTree,
        useExisting: forwardRef(() => NzTreeVirtualScrollViewComponent)
      }],
      host: {
        class: "ant-tree",
        "[class.ant-tree-block-node]": "nzDirectoryTree || nzBlockNode",
        "[class.ant-tree-directory]": "nzDirectoryTree",
        "[class.ant-tree-rtl]": `dir === 'rtl'`
      },
      imports: [NzTreeVirtualScrollNodeOutletDirective, CdkVirtualForOf, NzTreeNodeOutletDirective, CdkVirtualScrollViewport, CdkFixedSizeVirtualScroll]
    }]
  }], null, {
    nodeOutlet: [{
      type: ViewChild,
      args: [NzTreeNodeOutletDirective, {
        static: true
      }]
    }],
    virtualScrollViewport: [{
      type: ViewChild,
      args: [CdkVirtualScrollViewport, {
        static: true
      }]
    }],
    nzItemSize: [{
      type: Input
    }],
    nzMinBufferPx: [{
      type: Input
    }],
    nzMaxBufferPx: [{
      type: Input
    }],
    trackBy: [{
      type: Input
    }]
  });
})();
var treeWithControlComponents = [NzTreeView, NzTreeNodeOutletDirective, NzTreeViewComponent, NzTreeNodeDefDirective, NzTreeNodeComponent, NzTreeNodeToggleDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleRotateIconDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeOptionComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeCheckboxComponent, NzTreeNodeIndentsComponent, NzTreeVirtualScrollViewComponent, NzTreeVirtualScrollNodeOutletDirective, NzTreeNodeIndentLineDirective];
var NzTreeViewModule = class _NzTreeViewModule {
  static {
    this.\u0275fac = function NzTreeViewModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTreeViewModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzTreeViewModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      imports: [NzTreeVirtualScrollViewComponent]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTreeViewModule, [{
    type: NgModule,
    args: [{
      imports: [treeWithControlComponents],
      exports: [treeWithControlComponents]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-pipes.mjs
var NzAggregatePipe = class _NzAggregatePipe {
  transform(value, method) {
    if (!Array.isArray(value)) {
      return value;
    }
    if (value.length === 0) {
      return void 0;
    }
    switch (method) {
      case "sum":
        return sum(value);
      case "avg":
        return sum(value) / value.length;
      case "max":
        return Math.max(...value);
      case "min":
        return Math.min(...value);
      default:
        throw Error(`Invalid Pipe Arguments: Aggregate pipe doesn't support this type`);
    }
  }
  static {
    this.\u0275fac = function NzAggregatePipe_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzAggregatePipe)();
    };
  }
  static {
    this.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
      name: "nzAggregate",
      type: _NzAggregatePipe,
      pure: true
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzAggregatePipe, [{
    type: Pipe,
    args: [{
      name: "nzAggregate"
    }]
  }], null, null);
})();
var NzBytesPipe = class _NzBytesPipe {
  static {
    this.formats = {
      B: {
        max: 1024
      },
      kB: {
        max: Math.pow(1024, 2),
        prev: "B"
      },
      KB: {
        max: Math.pow(1024, 2),
        prev: "B"
      },
      MB: {
        max: Math.pow(1024, 3),
        prev: "kB"
      },
      GB: {
        max: Math.pow(1024, 4),
        prev: "MB"
      },
      TB: {
        max: Number.MAX_SAFE_INTEGER,
        prev: "GB"
      }
    };
  }
  transform(input2, decimal = 0, from2 = "B", to) {
    if (!(isNumberFinite(input2) && isNumberFinite(decimal) && decimal % 1 === 0 && decimal >= 0)) {
      return input2;
    }
    let bytes = input2;
    let unit = from2;
    while (unit !== "B") {
      bytes *= 1024;
      unit = _NzBytesPipe.formats[unit].prev;
    }
    if (to) {
      const format = _NzBytesPipe.formats[to];
      const result = toDecimal(_NzBytesPipe.calculateResult(format, bytes), decimal);
      return _NzBytesPipe.formatResult(result, to);
    }
    for (const key in _NzBytesPipe.formats) {
      if (_NzBytesPipe.formats.hasOwnProperty(key)) {
        const format = _NzBytesPipe.formats[key];
        if (bytes < format.max) {
          const result = toDecimal(_NzBytesPipe.calculateResult(format, bytes), decimal);
          return _NzBytesPipe.formatResult(result, key);
        }
      }
    }
  }
  static formatResult(result, unit) {
    return `${result} ${unit}`;
  }
  static calculateResult(format, bytes) {
    const prev = format.prev ? _NzBytesPipe.formats[format.prev] : void 0;
    return prev ? bytes / prev.max : bytes;
  }
  static {
    this.\u0275fac = function NzBytesPipe_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzBytesPipe)();
    };
  }
  static {
    this.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
      name: "nzBytes",
      type: _NzBytesPipe,
      pure: true
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzBytesPipe, [{
    type: Pipe,
    args: [{
      name: "nzBytes"
    }]
  }], null, null);
})();
var NzToCssUnitPipe = class _NzToCssUnitPipe {
  transform(value, defaultUnit = "px") {
    return typeof value === "number" ? `${value}${defaultUnit}` : value;
  }
  static {
    this.\u0275fac = function NzToCssUnitPipe_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzToCssUnitPipe)();
    };
  }
  static {
    this.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
      name: "nzToCssUnit",
      type: _NzToCssUnitPipe,
      pure: true
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzToCssUnitPipe, [{
    type: Pipe,
    args: [{
      name: "nzToCssUnit"
    }]
  }], null, null);
})();
var NzEllipsisPipe = class _NzEllipsisPipe {
  transform(value, length, suffix = "") {
    if (typeof value !== "string") {
      return value;
    }
    const len = typeof length === "undefined" ? value.length : length;
    if (value.length <= len) {
      return value;
    }
    return value.substring(0, len) + suffix;
  }
  static {
    this.\u0275fac = function NzEllipsisPipe_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzEllipsisPipe)();
    };
  }
  static {
    this.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
      name: "nzEllipsis",
      type: _NzEllipsisPipe,
      pure: true
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzEllipsisPipe, [{
    type: Pipe,
    args: [{
      name: "nzEllipsis"
    }]
  }], null, null);
})();
var NzSanitizerPipe = class _NzSanitizerPipe {
  constructor(sanitizer) {
    this.sanitizer = sanitizer;
  }
  transform(value, type = "html") {
    switch (type) {
      case "html":
        return this.sanitizer.bypassSecurityTrustHtml(value);
      case "style":
        return this.sanitizer.bypassSecurityTrustStyle(value);
      case "url":
        return this.sanitizer.bypassSecurityTrustUrl(value);
      case "resourceUrl":
        return this.sanitizer.bypassSecurityTrustResourceUrl(value);
      default:
        throw new Error(`Invalid safe type specified`);
    }
  }
  static {
    this.\u0275fac = function NzSanitizerPipe_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzSanitizerPipe)(\u0275\u0275directiveInject(DomSanitizer, 16));
    };
  }
  static {
    this.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
      name: "nzSanitizer",
      type: _NzSanitizerPipe,
      pure: true
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSanitizerPipe, [{
    type: Pipe,
    args: [{
      name: "nzSanitizer"
    }]
  }], () => [{
    type: DomSanitizer
  }], null);
})();
var NzTrimPipe = class _NzTrimPipe {
  // TODO(chensimeng) trimEnd, trimStart
  transform(text) {
    return text.trim();
  }
  static {
    this.\u0275fac = function NzTrimPipe_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzTrimPipe)();
    };
  }
  static {
    this.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
      name: "nzTrim",
      type: _NzTrimPipe,
      pure: true
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTrimPipe, [{
    type: Pipe,
    args: [{
      name: "nzTrim"
    }]
  }], null, null);
})();
var pipes = [NzToCssUnitPipe, NzSanitizerPipe, NzTrimPipe, NzBytesPipe, NzAggregatePipe, NzEllipsisPipe];
var NzPipesModule = class _NzPipesModule {
  static {
    this.\u0275fac = function NzPipesModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzPipesModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzPipesModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzPipesModule, [{
    type: NgModule,
    args: [{
      imports: [pipes],
      exports: [pipes]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-core-render.mjs
var NZ_AFTER_NEXT_RENDER$ = new InjectionToken("nz-after-next-render", {
  providedIn: "root",
  factory: () => {
    const injector = inject(Injector);
    return new Observable((subscriber) => {
      const ref = afterNextRender(() => {
        subscriber.next();
        subscriber.complete();
      }, {
        injector
      });
      return () => ref.destroy();
    });
  }
});

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-auto-complete.mjs
var _c028 = [[["nz-auto-option"]]];
var _c119 = ["nz-auto-option"];
function NzAutocompleteOptgroupComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.nzLabel);
  }
}
var _c215 = ["*"];
var _c37 = ["panel"];
var _c45 = ["content"];
var _forTrack014 = ($index, $item) => $item.value;
function NzAutocompleteComponent_ng_template_0_4_ng_template_0_Template(rf, ctx) {
}
function NzAutocompleteComponent_ng_template_0_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzAutocompleteComponent_ng_template_0_4_ng_template_0_Template, 0, 0, "ng-template");
  }
}
function NzAutocompleteComponent_ng_template_0_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275projection(0);
  }
}
function NzAutocompleteComponent_ng_template_0_ng_template_7_For_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-auto-option", 7);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const option_r3 = ctx.$implicit;
    \u0275\u0275property("nzValue", option_r3.value)("nzLabel", option_r3.label);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", option_r3.label, " ");
  }
}
function NzAutocompleteComponent_ng_template_0_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275repeaterCreate(0, NzAutocompleteComponent_ng_template_0_ng_template_7_For_1_Template, 2, 3, "nz-auto-option", 7, _forTrack014);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275repeater(ctx_r1.normalizedDataSource);
  }
}
function NzAutocompleteComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 3, 0);
    \u0275\u0275listener("@slideMotion.done", function NzAutocompleteComponent_ng_template_0_Template_div_animation_slideMotion_done_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onAnimationEvent($event));
    });
    \u0275\u0275elementStart(2, "div", 4)(3, "div", 5);
    \u0275\u0275template(4, NzAutocompleteComponent_ng_template_0_4_Template, 1, 0, null, 6);
    \u0275\u0275elementEnd()()();
    \u0275\u0275template(5, NzAutocompleteComponent_ng_template_0_ng_template_5_Template, 1, 0, "ng-template", null, 1, \u0275\u0275templateRefExtractor)(7, NzAutocompleteComponent_ng_template_0_ng_template_7_Template, 2, 0, "ng-template", null, 2, \u0275\u0275templateRefExtractor);
  }
  if (rf & 2) {
    const contentTemplate_r4 = \u0275\u0275reference(6);
    const optionsTemplate_r5 = \u0275\u0275reference(8);
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275styleMap(ctx_r1.nzOverlayStyle);
    \u0275\u0275classMap(ctx_r1.nzOverlayClassName);
    \u0275\u0275classProp("ant-select-dropdown-hidden", !ctx_r1.showPanel)("ant-select-dropdown-rtl", ctx_r1.dir === "rtl");
    \u0275\u0275property("nzNoAnimation", ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation)("@slideMotion", void 0)("@.disabled", !!(ctx_r1.noAnimation == null ? null : ctx_r1.noAnimation.nzNoAnimation));
    \u0275\u0275advance(4);
    \u0275\u0275property("ngTemplateOutlet", ctx_r1.nzDataSource ? optionsTemplate_r5 : contentTemplate_r4);
  }
}
var NzAutocompleteOptgroupComponent = class _NzAutocompleteOptgroupComponent {
  static {
    this.\u0275fac = function NzAutocompleteOptgroupComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzAutocompleteOptgroupComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzAutocompleteOptgroupComponent,
      selectors: [["nz-auto-optgroup"]],
      inputs: {
        nzLabel: "nzLabel"
      },
      exportAs: ["nzAutoOptgroup"],
      ngContentSelectors: _c119,
      decls: 3,
      vars: 1,
      consts: [[1, "ant-select-item", "ant-select-item-group"], [4, "nzStringTemplateOutlet"]],
      template: function NzAutocompleteOptgroupComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef(_c028);
          \u0275\u0275elementStart(0, "div", 0);
          \u0275\u0275template(1, NzAutocompleteOptgroupComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
          \u0275\u0275elementEnd();
          \u0275\u0275projection(2);
        }
        if (rf & 2) {
          \u0275\u0275advance();
          \u0275\u0275property("nzStringTemplateOutlet", ctx.nzLabel);
        }
      },
      dependencies: [NzOutletModule, NzStringTemplateOutletDirective],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzAutocompleteOptgroupComponent, [{
    type: Component,
    args: [{
      selector: "nz-auto-optgroup",
      exportAs: "nzAutoOptgroup",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      imports: [NzOutletModule],
      template: `
    <div class="ant-select-item ant-select-item-group">
      <ng-container *nzStringTemplateOutlet="nzLabel">{{ nzLabel }}</ng-container>
    </div>
    <ng-content select="nz-auto-option"></ng-content>
  `
    }]
  }], null, {
    nzLabel: [{
      type: Input
    }]
  });
})();
var NzOptionSelectionChange = class {
  constructor(source, isUserInput = false) {
    this.source = source;
    this.isUserInput = isUserInput;
  }
};
var NzAutocompleteOptionComponent = class _NzAutocompleteOptionComponent {
  constructor(ngZone, changeDetectorRef, element) {
    this.ngZone = ngZone;
    this.changeDetectorRef = changeDetectorRef;
    this.element = element;
    this.nzDisabled = false;
    this.selectionChange = new EventEmitter();
    this.mouseEntered = new EventEmitter();
    this.active = false;
    this.selected = false;
    this.nzAutocompleteOptgroupComponent = inject(NzAutocompleteOptgroupComponent, {
      optional: true
    });
    this.destroy$ = new Subject();
  }
  ngOnInit() {
    fromEventOutsideAngular(this.element.nativeElement, "mouseenter").pipe(filter(() => this.mouseEntered.observers.length > 0), takeUntil(this.destroy$)).subscribe(() => {
      this.ngZone.run(() => this.mouseEntered.emit(this));
    });
    fromEventOutsideAngular(this.element.nativeElement, "mousedown").pipe(takeUntil(this.destroy$)).subscribe((event2) => event2.preventDefault());
  }
  ngOnDestroy() {
    this.destroy$.next();
  }
  select(emit = true) {
    this.selected = true;
    this.changeDetectorRef.markForCheck();
    if (emit) {
      this.emitSelectionChangeEvent();
    }
  }
  deselect() {
    this.selected = false;
    this.changeDetectorRef.markForCheck();
    this.emitSelectionChangeEvent();
  }
  /** Git display label */
  getLabel() {
    return this.nzLabel || this.nzValue.toString();
  }
  /** Set active (only styles) */
  setActiveStyles() {
    if (!this.active) {
      this.active = true;
      this.changeDetectorRef.markForCheck();
    }
  }
  /** Unset active (only styles) */
  setInactiveStyles() {
    if (this.active) {
      this.active = false;
      this.changeDetectorRef.markForCheck();
    }
  }
  scrollIntoViewIfNeeded() {
    scrollIntoView(this.element.nativeElement);
  }
  selectViaInteraction() {
    if (!this.nzDisabled) {
      this.selected = !this.selected;
      if (this.selected) {
        this.setActiveStyles();
      } else {
        this.setInactiveStyles();
      }
      this.emitSelectionChangeEvent(true);
      this.changeDetectorRef.markForCheck();
    }
  }
  emitSelectionChangeEvent(isUserInput = false) {
    this.selectionChange.emit(new NzOptionSelectionChange(this, isUserInput));
  }
  static {
    this.\u0275fac = function NzAutocompleteOptionComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzAutocompleteOptionComponent)(\u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(ElementRef));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzAutocompleteOptionComponent,
      selectors: [["nz-auto-option"]],
      hostAttrs: ["role", "menuitem", 1, "ant-select-item", "ant-select-item-option"],
      hostVars: 10,
      hostBindings: function NzAutocompleteOptionComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275listener("click", function NzAutocompleteOptionComponent_click_HostBindingHandler() {
            return ctx.selectViaInteraction();
          });
        }
        if (rf & 2) {
          \u0275\u0275attribute("aria-selected", ctx.selected.toString())("aria-disabled", ctx.nzDisabled.toString());
          \u0275\u0275classProp("ant-select-item-option-grouped", ctx.nzAutocompleteOptgroupComponent)("ant-select-item-option-selected", ctx.selected)("ant-select-item-option-active", ctx.active)("ant-select-item-option-disabled", ctx.nzDisabled);
        }
      },
      inputs: {
        nzValue: "nzValue",
        nzLabel: "nzLabel",
        nzDisabled: [2, "nzDisabled", "nzDisabled", booleanAttribute]
      },
      outputs: {
        selectionChange: "selectionChange",
        mouseEntered: "mouseEntered"
      },
      exportAs: ["nzAutoOption"],
      features: [\u0275\u0275InputTransformsFeature],
      ngContentSelectors: _c215,
      decls: 2,
      vars: 0,
      consts: [[1, "ant-select-item-option-content"]],
      template: function NzAutocompleteOptionComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275elementStart(0, "div", 0);
          \u0275\u0275projection(1);
          \u0275\u0275elementEnd();
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzAutocompleteOptionComponent, [{
    type: Component,
    args: [{
      selector: "nz-auto-option",
      exportAs: "nzAutoOption",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      template: `
    <div class="ant-select-item-option-content">
      <ng-content></ng-content>
    </div>
  `,
      host: {
        role: "menuitem",
        class: "ant-select-item ant-select-item-option",
        "[class.ant-select-item-option-grouped]": "nzAutocompleteOptgroupComponent",
        "[class.ant-select-item-option-selected]": "selected",
        "[class.ant-select-item-option-active]": "active",
        "[class.ant-select-item-option-disabled]": "nzDisabled",
        "[attr.aria-selected]": "selected.toString()",
        "[attr.aria-disabled]": "nzDisabled.toString()",
        "(click)": "selectViaInteraction()"
      }
    }]
  }], () => [{
    type: NgZone
  }, {
    type: ChangeDetectorRef
  }, {
    type: ElementRef
  }], {
    nzValue: [{
      type: Input
    }],
    nzLabel: [{
      type: Input
    }],
    nzDisabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    selectionChange: [{
      type: Output
    }],
    mouseEntered: [{
      type: Output
    }]
  });
})();
var NZ_AUTOCOMPLETE_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: forwardRef(() => NzAutocompleteTriggerDirective),
  multi: true
};
function getNzAutocompleteMissingPanelError() {
  return Error("Attempting to open an undefined instance of `nz-autocomplete`. Make sure that the id passed to the `nzAutocomplete` is correct and that you're attempting to open it after the ngAfterContentInit hook.");
}
var NzAutocompleteTriggerDirective = class _NzAutocompleteTriggerDirective {
  /** Current active option */
  get activeOption() {
    if (this.nzAutocomplete && this.nzAutocomplete.options.length) {
      return this.nzAutocomplete.activeItem;
    } else {
      return null;
    }
  }
  constructor(ngZone, elementRef, overlay, viewContainerRef) {
    this.ngZone = ngZone;
    this.elementRef = elementRef;
    this.overlay = overlay;
    this.viewContainerRef = viewContainerRef;
    this.onChange = () => {
    };
    this.onTouched = () => {
    };
    this.panelOpen = false;
    this.destroy$ = new Subject();
    this.overlayRef = null;
    this.portal = null;
    this.previousValue = null;
    this.document = inject(DOCUMENT);
    this.nzInputGroupWhitSuffixOrPrefixDirective = inject(NzInputGroupWhitSuffixOrPrefixDirective, {
      optional: true
    });
  }
  ngAfterViewInit() {
    if (this.nzAutocomplete) {
      this.nzAutocomplete.animationStateChange.pipe(takeUntil(this.destroy$)).subscribe((event2) => {
        if (event2.toState === "void") {
          if (this.overlayRef) {
            this.overlayRef.dispose();
            this.overlayRef = null;
          }
        }
      });
    }
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
    this.destroyPanel();
  }
  writeValue(value) {
    this.ngZone.runOutsideAngular(() => Promise.resolve(null).then(() => this.setTriggerValue(value)));
  }
  registerOnChange(fn) {
    this.onChange = fn;
  }
  registerOnTouched(fn) {
    this.onTouched = fn;
  }
  setDisabledState(isDisabled) {
    const element = this.elementRef.nativeElement;
    element.disabled = isDisabled;
    this.closePanel();
  }
  openPanel() {
    this.previousValue = this.elementRef.nativeElement.value;
    this.attachOverlay();
    this.updateStatus();
  }
  closePanel() {
    if (this.panelOpen) {
      this.nzAutocomplete.isOpen = this.panelOpen = false;
      if (this.overlayRef && this.overlayRef.hasAttached()) {
        this.overlayRef.detach();
        this.selectionChangeSubscription.unsubscribe();
        this.overlayOutsideClickSubscription.unsubscribe();
        this.optionsChangeSubscription.unsubscribe();
        this.portal = null;
      }
    }
  }
  handleKeydown(event2) {
    const keyCode = event2.keyCode;
    const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;
    if (keyCode === ESCAPE) {
      event2.preventDefault();
    }
    if (this.panelOpen && (keyCode === ESCAPE || keyCode === TAB)) {
      if (this.activeOption && this.activeOption.getLabel() !== this.previousValue) {
        this.setTriggerValue(this.previousValue);
      }
      this.closePanel();
    } else if (this.panelOpen && keyCode === ENTER) {
      if (this.nzAutocomplete.showPanel) {
        event2.preventDefault();
        if (this.activeOption) {
          this.activeOption.selectViaInteraction();
        } else {
          this.closePanel();
        }
      }
    } else if (this.panelOpen && isArrowKey && this.nzAutocomplete.showPanel) {
      event2.stopPropagation();
      event2.preventDefault();
      if (keyCode === UP_ARROW) {
        this.nzAutocomplete.setPreviousItemActive();
      } else {
        this.nzAutocomplete.setNextItemActive();
      }
      if (this.activeOption) {
        this.activeOption.scrollIntoViewIfNeeded();
      }
      this.doBackfill();
    }
  }
  handleInput(event2) {
    const target = event2.target;
    const document2 = this.document;
    let value = target.value;
    if (target.type === "number") {
      value = value === "" ? null : parseFloat(value);
    }
    if (this.previousValue !== value) {
      this.previousValue = value;
      this.onChange(value);
      if (this.canOpen() && document2.activeElement === event2.target) {
        this.openPanel();
      }
    }
  }
  handleFocus() {
    if (this.canOpen()) {
      this.openPanel();
    }
  }
  handleClick() {
    if (this.canOpen() && !this.panelOpen) {
      this.openPanel();
    }
  }
  handleBlur() {
    this.onTouched();
  }
  /**
   * Subscription data source changes event
   */
  subscribeOptionsChange() {
    const optionChanges = this.nzAutocomplete.options.changes.pipe(tap(() => this.positionStrategy.reapplyLastPosition()), delay(0));
    return optionChanges.subscribe(() => {
      this.resetActiveItem();
      if (this.panelOpen) {
        this.overlayRef.updatePosition();
      }
    });
  }
  /**
   * Subscription option changes event and set the value
   */
  subscribeSelectionChange() {
    return this.nzAutocomplete.selectionChange.subscribe((option) => {
      this.setValueAndClose(option);
    });
  }
  subscribeOverlayOutsideClick() {
    return this.overlayRef.outsidePointerEvents().pipe(filter((e) => !this.elementRef.nativeElement.contains(e.target))).subscribe(() => {
      this.closePanel();
    });
  }
  attachOverlay() {
    if (!this.nzAutocomplete) {
      throw getNzAutocompleteMissingPanelError();
    }
    if (!this.portal && this.nzAutocomplete.template) {
      this.portal = new TemplatePortal(this.nzAutocomplete.template, this.viewContainerRef);
    }
    if (!this.overlayRef) {
      this.overlayRef = this.overlay.create(this.getOverlayConfig());
    }
    if (this.overlayRef && !this.overlayRef.hasAttached()) {
      this.overlayRef.attach(this.portal);
      this.selectionChangeSubscription = this.subscribeSelectionChange();
      this.optionsChangeSubscription = this.subscribeOptionsChange();
      this.overlayOutsideClickSubscription = this.subscribeOverlayOutsideClick();
      this.overlayRef.detachments().pipe(takeUntil(this.destroy$)).subscribe(() => {
        this.closePanel();
      });
    }
    this.nzAutocomplete.isOpen = this.panelOpen = true;
  }
  updateStatus() {
    if (this.overlayRef) {
      this.overlayRef.updateSize({
        width: this.nzAutocomplete.nzWidth || this.getHostWidth()
      });
    }
    this.nzAutocomplete.setVisibility();
    this.resetActiveItem();
    if (this.activeOption) {
      this.activeOption.scrollIntoViewIfNeeded();
    }
  }
  destroyPanel() {
    if (this.overlayRef) {
      this.closePanel();
    }
  }
  getOverlayConfig() {
    return new OverlayConfig({
      positionStrategy: this.getOverlayPosition(),
      disposeOnNavigation: true,
      scrollStrategy: this.overlay.scrollStrategies.reposition(),
      // default host element width
      width: this.nzAutocomplete.nzWidth || this.getHostWidth()
    });
  }
  getConnectedElement() {
    return this.nzInputGroupWhitSuffixOrPrefixDirective ? this.nzInputGroupWhitSuffixOrPrefixDirective.elementRef : this.elementRef;
  }
  getHostWidth() {
    return this.getConnectedElement().nativeElement.getBoundingClientRect().width;
  }
  getOverlayPosition() {
    const positions = [new ConnectionPositionPair({
      originX: "start",
      originY: "bottom"
    }, {
      overlayX: "start",
      overlayY: "top"
    }), new ConnectionPositionPair({
      originX: "start",
      originY: "top"
    }, {
      overlayX: "start",
      overlayY: "bottom"
    })];
    this.positionStrategy = this.overlay.position().flexibleConnectedTo(this.getConnectedElement()).withFlexibleDimensions(false).withPush(false).withPositions(positions).withTransformOriginOn(".ant-select-dropdown");
    return this.positionStrategy;
  }
  resetActiveItem() {
    const index = this.nzAutocomplete.getOptionIndex(this.previousValue);
    this.nzAutocomplete.clearSelectedOptions(null, true);
    if (index !== -1) {
      this.nzAutocomplete.setActiveItem(index);
      this.nzAutocomplete.activeItem.select(false);
    } else {
      this.nzAutocomplete.setActiveItem(this.nzAutocomplete.nzDefaultActiveFirstOption ? 0 : -1);
    }
  }
  setValueAndClose(option) {
    const value = option.nzValue;
    this.setTriggerValue(option.getLabel());
    this.onChange(value);
    this.elementRef.nativeElement.focus();
    this.closePanel();
  }
  setTriggerValue(value) {
    const option = this.nzAutocomplete.getOption(value);
    const displayValue = option ? option.getLabel() : value;
    this.elementRef.nativeElement.value = displayValue != null ? displayValue : "";
    if (!this.nzAutocomplete.nzBackfill) {
      this.previousValue = displayValue;
    }
  }
  doBackfill() {
    if (this.nzAutocomplete.nzBackfill && this.nzAutocomplete.activeItem) {
      this.setTriggerValue(this.nzAutocomplete.activeItem.getLabel());
    }
  }
  canOpen() {
    const element = this.elementRef.nativeElement;
    return !element.readOnly && !element.disabled;
  }
  static {
    this.\u0275fac = function NzAutocompleteTriggerDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzAutocompleteTriggerDirective)(\u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Overlay), \u0275\u0275directiveInject(ViewContainerRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzAutocompleteTriggerDirective,
      selectors: [["input", "nzAutocomplete", ""], ["textarea", "nzAutocomplete", ""]],
      hostAttrs: ["autocomplete", "off", "aria-autocomplete", "list"],
      hostBindings: function NzAutocompleteTriggerDirective_HostBindings(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275listener("focusin", function NzAutocompleteTriggerDirective_focusin_HostBindingHandler() {
            return ctx.handleFocus();
          })("blur", function NzAutocompleteTriggerDirective_blur_HostBindingHandler() {
            return ctx.handleBlur();
          })("input", function NzAutocompleteTriggerDirective_input_HostBindingHandler($event) {
            return ctx.handleInput($event);
          })("keydown", function NzAutocompleteTriggerDirective_keydown_HostBindingHandler($event) {
            return ctx.handleKeydown($event);
          })("click", function NzAutocompleteTriggerDirective_click_HostBindingHandler($event) {
            return ctx.handleClick($event);
          });
        }
      },
      inputs: {
        nzAutocomplete: "nzAutocomplete"
      },
      exportAs: ["nzAutocompleteTrigger"],
      features: [\u0275\u0275ProvidersFeature([NZ_AUTOCOMPLETE_VALUE_ACCESSOR])]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzAutocompleteTriggerDirective, [{
    type: Directive,
    args: [{
      selector: `input[nzAutocomplete], textarea[nzAutocomplete]`,
      exportAs: "nzAutocompleteTrigger",
      providers: [NZ_AUTOCOMPLETE_VALUE_ACCESSOR],
      host: {
        autocomplete: "off",
        "aria-autocomplete": "list",
        "(focusin)": "handleFocus()",
        "(blur)": "handleBlur()",
        "(input)": "handleInput($event)",
        "(keydown)": "handleKeydown($event)",
        "(click)": "handleClick($event)"
      }
    }]
  }], () => [{
    type: NgZone
  }, {
    type: ElementRef
  }, {
    type: Overlay
  }, {
    type: ViewContainerRef
  }], {
    nzAutocomplete: [{
      type: Input
    }]
  });
})();
function normalizeDataSource(value) {
  return value?.map((item) => {
    if (typeof item === "number" || typeof item === "string") {
      return {
        label: item.toString(),
        value: item.toString()
      };
    }
    return item;
  });
}
var NzAutocompleteComponent = class _NzAutocompleteComponent {
  /**
   * Options accessor, its source may be content or dataSource
   */
  get options() {
    if (this.nzDataSource) {
      return this.fromDataSourceOptions;
    } else {
      return this.fromContentOptions;
    }
  }
  constructor(changeDetectorRef, directionality) {
    this.changeDetectorRef = changeDetectorRef;
    this.directionality = directionality;
    this.nzOverlayClassName = "";
    this.nzOverlayStyle = {};
    this.nzDefaultActiveFirstOption = true;
    this.nzBackfill = false;
    this.compareWith = (o1, o2) => o1 === o2;
    this.selectionChange = new EventEmitter();
    this.showPanel = true;
    this.isOpen = false;
    this.activeItem = null;
    this.dir = "ltr";
    this.normalizedDataSource = [];
    this.destroy$ = new Subject();
    this.animationStateChange = new EventEmitter();
    this.activeItemIndex = -1;
    this.selectionChangeSubscription = Subscription.EMPTY;
    this.optionMouseEnterSubscription = Subscription.EMPTY;
    this.dataSourceChangeSubscription = Subscription.EMPTY;
    this.optionSelectionChanges = defer(() => {
      if (this.options) {
        return merge(...this.options.map((option) => option.selectionChange));
      }
      return this.afterNextRender$.pipe(switchMap(() => this.optionSelectionChanges));
    });
    this.optionMouseEnter = defer(() => {
      if (this.options) {
        return merge(...this.options.map((option) => option.mouseEntered));
      }
      return this.afterNextRender$.pipe(switchMap(() => this.optionMouseEnter));
    });
    this.afterNextRender$ = inject(NZ_AFTER_NEXT_RENDER$);
    this.noAnimation = inject(NzNoAnimationDirective, {
      host: true,
      optional: true
    });
  }
  ngOnInit() {
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.changeDetectorRef.detectChanges();
    });
    this.dir = this.directionality.value;
  }
  ngOnChanges(changes) {
    const {
      nzDataSource
    } = changes;
    if (nzDataSource) {
      this.normalizedDataSource = normalizeDataSource(nzDataSource.currentValue);
    }
  }
  onAnimationEvent(event2) {
    this.animationStateChange.emit(event2);
  }
  ngAfterContentInit() {
    if (!this.nzDataSource) {
      this.optionsInit();
    }
  }
  ngAfterViewInit() {
    if (this.nzDataSource) {
      this.optionsInit();
    }
  }
  ngOnDestroy() {
    this.dataSourceChangeSubscription.unsubscribe();
    this.selectionChangeSubscription.unsubscribe();
    this.optionMouseEnterSubscription.unsubscribe();
    this.dataSourceChangeSubscription = this.selectionChangeSubscription = this.optionMouseEnterSubscription = null;
    this.destroy$.next();
    this.destroy$.complete();
  }
  setVisibility() {
    this.showPanel = !!this.options.length;
    this.changeDetectorRef.markForCheck();
  }
  setActiveItem(index) {
    const activeItem = this.options.get(index);
    if (activeItem && !activeItem.active) {
      this.activeItem = activeItem;
      this.activeItemIndex = index;
      this.clearSelectedOptions(this.activeItem);
      this.activeItem.setActiveStyles();
    } else {
      this.activeItem = null;
      this.activeItemIndex = -1;
      this.clearSelectedOptions();
    }
    this.changeDetectorRef.markForCheck();
  }
  setNextItemActive() {
    const nextIndex = this.activeItemIndex + 1 <= this.options.length - 1 ? this.activeItemIndex + 1 : 0;
    this.setActiveItem(nextIndex);
  }
  setPreviousItemActive() {
    const previousIndex = this.activeItemIndex - 1 < 0 ? this.options.length - 1 : this.activeItemIndex - 1;
    this.setActiveItem(previousIndex);
  }
  getOptionIndex(value) {
    return this.options.reduce((result, current, index) => result === -1 ? this.compareWith(value, current.nzValue) ? index : -1 : result, -1);
  }
  getOption(value) {
    return this.options.find((item) => this.compareWith(value, item.nzValue)) || null;
  }
  optionsInit() {
    this.setVisibility();
    this.subscribeOptionChanges();
    const changes = this.nzDataSource ? this.fromDataSourceOptions.changes : this.fromContentOptions.changes;
    this.dataSourceChangeSubscription = changes.subscribe((e) => {
      if (!e.dirty && this.isOpen) {
        setTimeout(() => this.setVisibility());
      }
      this.subscribeOptionChanges();
    });
  }
  /**
   * Clear the status of options
   */
  clearSelectedOptions(skip, deselect = false) {
    this.options.forEach((option) => {
      if (option !== skip) {
        if (deselect) {
          option.deselect();
        }
        option.setInactiveStyles();
      }
    });
  }
  subscribeOptionChanges() {
    this.selectionChangeSubscription.unsubscribe();
    this.selectionChangeSubscription = this.optionSelectionChanges.pipe(filter((event2) => event2.isUserInput)).subscribe((event2) => {
      event2.source.select();
      event2.source.setActiveStyles();
      this.activeItem = event2.source;
      this.activeItemIndex = this.getOptionIndex(this.activeItem.nzValue);
      this.clearSelectedOptions(event2.source, true);
      this.selectionChange.emit(event2.source);
    });
    this.optionMouseEnterSubscription.unsubscribe();
    this.optionMouseEnterSubscription = this.optionMouseEnter.subscribe((event2) => {
      event2.setActiveStyles();
      this.activeItem = event2;
      this.activeItemIndex = this.getOptionIndex(this.activeItem.nzValue);
      this.clearSelectedOptions(event2);
    });
  }
  static {
    this.\u0275fac = function NzAutocompleteComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzAutocompleteComponent)(\u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(Directionality));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzAutocompleteComponent,
      selectors: [["nz-autocomplete"]],
      contentQueries: function NzAutocompleteComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          \u0275\u0275contentQuery(dirIndex, NzAutocompleteOptionComponent, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.fromContentOptions = _t);
        }
      },
      viewQuery: function NzAutocompleteComponent_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(TemplateRef, 5);
          \u0275\u0275viewQuery(_c37, 5);
          \u0275\u0275viewQuery(_c45, 5);
          \u0275\u0275viewQuery(NzAutocompleteOptionComponent, 5);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.template = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.panel = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.content = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.fromDataSourceOptions = _t);
        }
      },
      inputs: {
        nzWidth: [2, "nzWidth", "nzWidth", numberAttributeWithZeroFallback],
        nzOverlayClassName: "nzOverlayClassName",
        nzOverlayStyle: "nzOverlayStyle",
        nzDefaultActiveFirstOption: [2, "nzDefaultActiveFirstOption", "nzDefaultActiveFirstOption", booleanAttribute],
        nzBackfill: [2, "nzBackfill", "nzBackfill", booleanAttribute],
        compareWith: "compareWith",
        nzDataSource: "nzDataSource"
      },
      outputs: {
        selectionChange: "selectionChange"
      },
      exportAs: ["nzAutocomplete"],
      features: [\u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature],
      ngContentSelectors: _c215,
      decls: 1,
      vars: 0,
      consts: [["panel", ""], ["contentTemplate", ""], ["optionsTemplate", ""], [1, "ant-select-dropdown", "ant-select-dropdown-placement-bottomLeft", 3, "nzNoAnimation"], [1, "ant-select-dropdown-content-wrapper"], [1, "ant-select-dropdown-content"], [4, "ngTemplateOutlet"], [3, "nzValue", "nzLabel"]],
      template: function NzAutocompleteComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275template(0, NzAutocompleteComponent_ng_template_0_Template, 9, 12, "ng-template");
        }
      },
      dependencies: [NgTemplateOutlet, NzAutocompleteOptionComponent, NzNoAnimationDirective],
      encapsulation: 2,
      data: {
        animation: [slideMotion]
      },
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzAutocompleteComponent, [{
    type: Component,
    args: [{
      selector: "nz-autocomplete",
      exportAs: "nzAutocomplete",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation.None,
      imports: [NgTemplateOutlet, NzAutocompleteOptionComponent, NzNoAnimationDirective],
      template: `
    <ng-template>
      <div
        #panel
        class="ant-select-dropdown ant-select-dropdown-placement-bottomLeft"
        [class.ant-select-dropdown-hidden]="!showPanel"
        [class.ant-select-dropdown-rtl]="dir === 'rtl'"
        [class]="nzOverlayClassName"
        [style]="nzOverlayStyle"
        [nzNoAnimation]="noAnimation?.nzNoAnimation"
        @slideMotion
        (@slideMotion.done)="onAnimationEvent($event)"
        [@.disabled]="!!noAnimation?.nzNoAnimation"
      >
        <div class="ant-select-dropdown-content-wrapper">
          <div class="ant-select-dropdown-content">
            <ng-template *ngTemplateOutlet="nzDataSource ? optionsTemplate : contentTemplate"></ng-template>
          </div>
        </div>
      </div>
      <ng-template #contentTemplate>
        <ng-content></ng-content>
      </ng-template>
      <ng-template #optionsTemplate>
        @for (option of normalizedDataSource; track option.value) {
          <nz-auto-option [nzValue]="option.value" [nzLabel]="option.label">
            {{ option.label }}
          </nz-auto-option>
        }
      </ng-template>
    </ng-template>
  `,
      animations: [slideMotion]
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: Directionality
  }], {
    nzWidth: [{
      type: Input,
      args: [{
        transform: numberAttributeWithZeroFallback
      }]
    }],
    nzOverlayClassName: [{
      type: Input
    }],
    nzOverlayStyle: [{
      type: Input
    }],
    nzDefaultActiveFirstOption: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzBackfill: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    compareWith: [{
      type: Input
    }],
    nzDataSource: [{
      type: Input
    }],
    selectionChange: [{
      type: Output
    }],
    fromContentOptions: [{
      type: ContentChildren,
      args: [NzAutocompleteOptionComponent, {
        descendants: true
      }]
    }],
    fromDataSourceOptions: [{
      type: ViewChildren,
      args: [NzAutocompleteOptionComponent]
    }],
    template: [{
      type: ViewChild,
      args: [TemplateRef, {
        static: false
      }]
    }],
    panel: [{
      type: ViewChild,
      args: ["panel", {
        static: false
      }]
    }],
    content: [{
      type: ViewChild,
      args: ["content", {
        static: false
      }]
    }]
  });
})();
var NzAutocompleteModule = class _NzAutocompleteModule {
  static {
    this.\u0275fac = function NzAutocompleteModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzAutocompleteModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzAutocompleteModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      imports: [NzAutocompleteOptgroupComponent]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzAutocompleteModule, [{
    type: NgModule,
    args: [{
      exports: [NzAutocompleteComponent, NzAutocompleteOptionComponent, NzAutocompleteTriggerDirective, NzAutocompleteOptgroupComponent],
      imports: [NzAutocompleteComponent, NzAutocompleteOptionComponent, NzAutocompleteTriggerDirective, NzAutocompleteOptgroupComponent]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-radio.mjs
var _c029 = ["*"];
var _c120 = ["inputElement"];
var _c216 = ["nz-radio", ""];
var NzRadioService = class _NzRadioService {
  constructor() {
    this.selected$ = new ReplaySubject(1);
    this.touched$ = new Subject();
    this.disabled$ = new ReplaySubject(1);
    this.name$ = new ReplaySubject(1);
  }
  touch() {
    this.touched$.next();
  }
  select(value) {
    this.selected$.next(value);
  }
  setDisabled(value) {
    this.disabled$.next(value);
  }
  setName(value) {
    this.name$.next(value);
  }
  static {
    this.\u0275fac = function NzRadioService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzRadioService)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _NzRadioService,
      factory: _NzRadioService.\u0275fac
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzRadioService, [{
    type: Injectable
  }], null, null);
})();
var NzRadioGroupComponent = class _NzRadioGroupComponent {
  constructor(cdr, nzRadioService, directionality) {
    this.cdr = cdr;
    this.nzRadioService = nzRadioService;
    this.directionality = directionality;
    this.value = null;
    this.destroy$ = new Subject();
    this.isNzDisableFirstChange = true;
    this.onChange = () => {
    };
    this.onTouched = () => {
    };
    this.nzDisabled = false;
    this.nzButtonStyle = "outline";
    this.nzSize = "default";
    this.nzName = null;
    this.dir = "ltr";
  }
  ngOnInit() {
    this.nzRadioService.selected$.pipe(takeUntil(this.destroy$)).subscribe((value) => {
      if (this.value !== value) {
        this.value = value;
        this.onChange(this.value);
      }
    });
    this.nzRadioService.touched$.pipe(takeUntil(this.destroy$)).subscribe(() => {
      Promise.resolve().then(() => this.onTouched());
    });
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.cdr.detectChanges();
    });
    this.dir = this.directionality.value;
  }
  ngOnChanges(changes) {
    const {
      nzDisabled,
      nzName
    } = changes;
    if (nzDisabled) {
      this.nzRadioService.setDisabled(this.nzDisabled);
    }
    if (nzName) {
      this.nzRadioService.setName(this.nzName);
    }
  }
  ngOnDestroy() {
    this.destroy$.next(true);
    this.destroy$.complete();
  }
  writeValue(value) {
    this.value = value;
    this.nzRadioService.select(value);
    this.cdr.markForCheck();
  }
  registerOnChange(fn) {
    this.onChange = fn;
  }
  registerOnTouched(fn) {
    this.onTouched = fn;
  }
  setDisabledState(isDisabled) {
    this.nzDisabled = this.isNzDisableFirstChange && this.nzDisabled || isDisabled;
    this.isNzDisableFirstChange = false;
    this.nzRadioService.setDisabled(this.nzDisabled);
    this.cdr.markForCheck();
  }
  static {
    this.\u0275fac = function NzRadioGroupComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzRadioGroupComponent)(\u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(NzRadioService), \u0275\u0275directiveInject(Directionality));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzRadioGroupComponent,
      selectors: [["nz-radio-group"]],
      hostAttrs: [1, "ant-radio-group"],
      hostVars: 8,
      hostBindings: function NzRadioGroupComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-radio-group-large", ctx.nzSize === "large")("ant-radio-group-small", ctx.nzSize === "small")("ant-radio-group-solid", ctx.nzButtonStyle === "solid")("ant-radio-group-rtl", ctx.dir === "rtl");
        }
      },
      inputs: {
        nzDisabled: [2, "nzDisabled", "nzDisabled", booleanAttribute],
        nzButtonStyle: "nzButtonStyle",
        nzSize: "nzSize",
        nzName: "nzName"
      },
      exportAs: ["nzRadioGroup"],
      features: [\u0275\u0275ProvidersFeature([NzRadioService, {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => _NzRadioGroupComponent),
        multi: true
      }]), \u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature],
      ngContentSelectors: _c029,
      decls: 1,
      vars: 0,
      template: function NzRadioGroupComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275projection(0);
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzRadioGroupComponent, [{
    type: Component,
    args: [{
      selector: "nz-radio-group",
      exportAs: "nzRadioGroup",
      preserveWhitespaces: false,
      template: ` <ng-content></ng-content> `,
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [NzRadioService, {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => NzRadioGroupComponent),
        multi: true
      }],
      host: {
        class: "ant-radio-group",
        "[class.ant-radio-group-large]": `nzSize === 'large'`,
        "[class.ant-radio-group-small]": `nzSize === 'small'`,
        "[class.ant-radio-group-solid]": `nzButtonStyle === 'solid'`,
        "[class.ant-radio-group-rtl]": `dir === 'rtl'`
      }
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: NzRadioService
  }, {
    type: Directionality
  }], {
    nzDisabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzButtonStyle: [{
      type: Input
    }],
    nzSize: [{
      type: Input
    }],
    nzName: [{
      type: Input
    }]
  });
})();
var NzRadioComponent = class _NzRadioComponent {
  focus() {
    this.focusMonitor.focusVia(this.inputElement, "keyboard");
  }
  blur() {
    this.inputElement.nativeElement.blur();
  }
  constructor(ngZone, elementRef, cdr, focusMonitor) {
    this.ngZone = ngZone;
    this.elementRef = elementRef;
    this.cdr = cdr;
    this.focusMonitor = focusMonitor;
    this.isNgModel = false;
    this.destroy$ = new Subject();
    this.isNzDisableFirstChange = true;
    this.directionality = inject(Directionality);
    this.nzRadioService = inject(NzRadioService, {
      optional: true
    });
    this.nzFormStatusService = inject(NzFormStatusService, {
      optional: true
    });
    this.isChecked = false;
    this.name = null;
    this.onChange = () => {
    };
    this.onTouched = () => {
    };
    this.nzValue = null;
    this.nzDisabled = false;
    this.nzAutoFocus = false;
    this.isRadioButton = false;
    this.dir = "ltr";
  }
  setDisabledState(disabled) {
    this.nzDisabled = this.isNzDisableFirstChange && this.nzDisabled || disabled;
    this.isNzDisableFirstChange = false;
    this.cdr.markForCheck();
  }
  writeValue(value) {
    this.isChecked = value;
    this.cdr.markForCheck();
  }
  registerOnChange(fn) {
    this.isNgModel = true;
    this.onChange = fn;
  }
  registerOnTouched(fn) {
    this.onTouched = fn;
  }
  ngOnInit() {
    if (this.nzRadioService) {
      this.nzRadioService.name$.pipe(takeUntil(this.destroy$)).subscribe((name2) => {
        this.name = name2;
        this.cdr.markForCheck();
      });
      this.nzRadioService.disabled$.pipe(takeUntil(this.destroy$)).subscribe((disabled) => {
        this.nzDisabled = this.isNzDisableFirstChange && this.nzDisabled || disabled;
        this.isNzDisableFirstChange = false;
        this.cdr.markForCheck();
      });
      this.nzRadioService.selected$.pipe(takeUntil(this.destroy$)).subscribe((value) => {
        const isChecked = this.isChecked;
        this.isChecked = this.nzValue === value;
        if (this.isNgModel && isChecked !== this.isChecked && // We're only intereted if `isChecked` has been changed to `false` value to emit `false` to the ascendant form,
        // since we already emit `true` within the `setupClickListener`.
        this.isChecked === false) {
          this.onChange(false);
        }
        this.cdr.markForCheck();
      });
    }
    this.focusMonitor.monitor(this.elementRef, true).pipe(takeUntil(this.destroy$)).subscribe((focusOrigin) => {
      if (!focusOrigin) {
        Promise.resolve().then(() => this.onTouched());
        if (this.nzRadioService) {
          this.nzRadioService.touch();
        }
      }
    });
    this.directionality.change.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.cdr.detectChanges();
    });
    this.dir = this.directionality.value;
    this.setupClickListener();
  }
  ngAfterViewInit() {
    if (this.nzAutoFocus) {
      this.focus();
    }
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
    this.focusMonitor.stopMonitoring(this.elementRef);
  }
  setupClickListener() {
    fromEventOutsideAngular(this.elementRef.nativeElement, "click").pipe(takeUntil(this.destroy$)).subscribe((event2) => {
      event2.stopPropagation();
      event2.preventDefault();
      if (this.nzDisabled || this.isChecked) {
        return;
      }
      this.ngZone.run(() => {
        this.focus();
        this.nzRadioService?.select(this.nzValue);
        if (this.isNgModel) {
          this.isChecked = true;
          this.onChange(true);
        }
        this.cdr.markForCheck();
      });
    });
  }
  static {
    this.\u0275fac = function NzRadioComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzRadioComponent)(\u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(FocusMonitor));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzRadioComponent,
      selectors: [["", "nz-radio", ""], ["", "nz-radio-button", ""]],
      viewQuery: function NzRadioComponent_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(_c120, 7);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.inputElement = _t.first);
        }
      },
      hostVars: 18,
      hostBindings: function NzRadioComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          \u0275\u0275classProp("ant-radio-wrapper-in-form-item", !!ctx.nzFormStatusService)("ant-radio-wrapper", !ctx.isRadioButton)("ant-radio-button-wrapper", ctx.isRadioButton)("ant-radio-wrapper-checked", ctx.isChecked && !ctx.isRadioButton)("ant-radio-button-wrapper-checked", ctx.isChecked && ctx.isRadioButton)("ant-radio-wrapper-disabled", ctx.nzDisabled && !ctx.isRadioButton)("ant-radio-button-wrapper-disabled", ctx.nzDisabled && ctx.isRadioButton)("ant-radio-wrapper-rtl", !ctx.isRadioButton && ctx.dir === "rtl")("ant-radio-button-wrapper-rtl", ctx.isRadioButton && ctx.dir === "rtl");
        }
      },
      inputs: {
        nzValue: "nzValue",
        nzDisabled: [2, "nzDisabled", "nzDisabled", booleanAttribute],
        nzAutoFocus: [2, "nzAutoFocus", "nzAutoFocus", booleanAttribute],
        isRadioButton: [2, "nz-radio-button", "isRadioButton", booleanAttribute]
      },
      exportAs: ["nzRadio"],
      features: [\u0275\u0275ProvidersFeature([{
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => _NzRadioComponent),
        multi: true
      }]), \u0275\u0275InputTransformsFeature],
      attrs: _c216,
      ngContentSelectors: _c029,
      decls: 6,
      vars: 24,
      consts: [["inputElement", ""], ["type", "radio", 3, "disabled", "checked"]],
      template: function NzRadioComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275projectionDef();
          \u0275\u0275elementStart(0, "span");
          \u0275\u0275element(1, "input", 1, 0)(3, "span");
          \u0275\u0275elementEnd();
          \u0275\u0275elementStart(4, "span");
          \u0275\u0275projection(5);
          \u0275\u0275elementEnd();
        }
        if (rf & 2) {
          \u0275\u0275classProp("ant-radio", !ctx.isRadioButton)("ant-radio-checked", ctx.isChecked && !ctx.isRadioButton)("ant-radio-disabled", ctx.nzDisabled && !ctx.isRadioButton)("ant-radio-button", ctx.isRadioButton)("ant-radio-button-checked", ctx.isChecked && ctx.isRadioButton)("ant-radio-button-disabled", ctx.nzDisabled && ctx.isRadioButton);
          \u0275\u0275advance();
          \u0275\u0275classProp("ant-radio-input", !ctx.isRadioButton)("ant-radio-button-input", ctx.isRadioButton);
          \u0275\u0275property("disabled", ctx.nzDisabled)("checked", ctx.isChecked);
          \u0275\u0275attribute("autofocus", ctx.nzAutoFocus ? "autofocus" : null)("name", ctx.name);
          \u0275\u0275advance(2);
          \u0275\u0275classProp("ant-radio-inner", !ctx.isRadioButton)("ant-radio-button-inner", ctx.isRadioButton);
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzRadioComponent, [{
    type: Component,
    args: [{
      selector: "[nz-radio],[nz-radio-button]",
      exportAs: "nzRadio",
      preserveWhitespaces: false,
      template: `
    <span
      [class.ant-radio]="!isRadioButton"
      [class.ant-radio-checked]="isChecked && !isRadioButton"
      [class.ant-radio-disabled]="nzDisabled && !isRadioButton"
      [class.ant-radio-button]="isRadioButton"
      [class.ant-radio-button-checked]="isChecked && isRadioButton"
      [class.ant-radio-button-disabled]="nzDisabled && isRadioButton"
    >
      <input
        #inputElement
        type="radio"
        [attr.autofocus]="nzAutoFocus ? 'autofocus' : null"
        [class.ant-radio-input]="!isRadioButton"
        [class.ant-radio-button-input]="isRadioButton"
        [disabled]="nzDisabled"
        [checked]="isChecked"
        [attr.name]="name"
      />
      <span [class.ant-radio-inner]="!isRadioButton" [class.ant-radio-button-inner]="isRadioButton"></span>
    </span>
    <span><ng-content></ng-content></span>
  `,
      encapsulation: ViewEncapsulation.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [{
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => NzRadioComponent),
        multi: true
      }],
      host: {
        "[class.ant-radio-wrapper-in-form-item]": "!!nzFormStatusService",
        "[class.ant-radio-wrapper]": "!isRadioButton",
        "[class.ant-radio-button-wrapper]": "isRadioButton",
        "[class.ant-radio-wrapper-checked]": "isChecked && !isRadioButton",
        "[class.ant-radio-button-wrapper-checked]": "isChecked && isRadioButton",
        "[class.ant-radio-wrapper-disabled]": "nzDisabled && !isRadioButton",
        "[class.ant-radio-button-wrapper-disabled]": "nzDisabled && isRadioButton",
        "[class.ant-radio-wrapper-rtl]": `!isRadioButton && dir === 'rtl'`,
        "[class.ant-radio-button-wrapper-rtl]": `isRadioButton && dir === 'rtl'`
      }
    }]
  }], () => [{
    type: NgZone
  }, {
    type: ElementRef
  }, {
    type: ChangeDetectorRef
  }, {
    type: FocusMonitor
  }], {
    inputElement: [{
      type: ViewChild,
      args: ["inputElement", {
        static: true
      }]
    }],
    nzValue: [{
      type: Input
    }],
    nzDisabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzAutoFocus: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    isRadioButton: [{
      type: Input,
      args: [{
        alias: "nz-radio-button",
        transform: booleanAttribute
      }]
    }]
  });
})();
var NzRadioModule = class _NzRadioModule {
  static {
    this.\u0275fac = function NzRadioModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzRadioModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzRadioModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzRadioModule, [{
    type: NgModule,
    args: [{
      imports: [NzRadioComponent, NzRadioGroupComponent],
      exports: [NzRadioComponent, NzRadioGroupComponent]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-modal.mjs
var _c030 = ["nz-modal-close", ""];
function NzModalCloseComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "nz-icon", 2);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const closeIcon_r1 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("nzType", closeIcon_r1);
  }
}
var _c121 = ["modalElement"];
function NzModalConfirmContainerComponent_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 16);
    \u0275\u0275listener("click", function NzModalConfirmContainerComponent_Conditional_4_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onCloseClick());
    });
    \u0275\u0275elementEnd();
  }
}
function NzModalConfirmContainerComponent_ng_container_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "span", 12);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("innerHTML", ctx_r1.config.nzTitle, \u0275\u0275sanitizeHtml);
  }
}
function NzModalConfirmContainerComponent_ng_template_12_Template(rf, ctx) {
}
function NzModalConfirmContainerComponent_Conditional_13_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "div", 12);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("innerHTML", ctx_r1.config.nzContent, \u0275\u0275sanitizeHtml);
  }
}
function NzModalConfirmContainerComponent_Conditional_15_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 17);
    \u0275\u0275listener("click", function NzModalConfirmContainerComponent_Conditional_15_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onCancel());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("nzLoading", ctx_r1.config.nzCancelLoading)("disabled", ctx_r1.config.nzCancelDisabled);
    \u0275\u0275attribute("cdkFocusInitial", ctx_r1.config.nzAutofocus === "cancel" || null);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.config.nzCancelText || ctx_r1.locale.cancelText, " ");
  }
}
function NzModalConfirmContainerComponent_Conditional_16_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 18);
    \u0275\u0275listener("click", function NzModalConfirmContainerComponent_Conditional_16_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onOk());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("nzType", ctx_r1.config.nzOkType)("nzLoading", ctx_r1.config.nzOkLoading)("disabled", ctx_r1.config.nzOkDisabled)("nzDanger", ctx_r1.config.nzOkDanger);
    \u0275\u0275attribute("cdkFocusInitial", ctx_r1.config.nzAutofocus === "ok" || null);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.config.nzOkText || ctx_r1.locale.okText, " ");
  }
}
var _c217 = ["nz-modal-footer", ""];
var _c38 = (a0, a1) => ({
  $implicit: a0,
  modalRef: a1
});
function NzModalFooterComponent_Conditional_0_ng_container_0_Conditional_1_For_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 3);
    \u0275\u0275listener("click", function NzModalFooterComponent_Conditional_0_ng_container_0_Conditional_1_For_1_Template_button_click_0_listener() {
      const button_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r2.onButtonClick(button_r2));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const button_r2 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext(4);
    \u0275\u0275property("hidden", !ctx_r2.getButtonCallableProp(button_r2, "show"))("nzLoading", ctx_r2.getButtonCallableProp(button_r2, "loading"))("disabled", ctx_r2.getButtonCallableProp(button_r2, "disabled"))("nzType", button_r2.type)("nzDanger", button_r2.danger)("nzShape", button_r2.shape)("nzSize", button_r2.size)("nzGhost", button_r2.ghost);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", button_r2.label, " ");
  }
}
function NzModalFooterComponent_Conditional_0_ng_container_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275repeaterCreate(0, NzModalFooterComponent_Conditional_0_ng_container_0_Conditional_1_For_1_Template, 2, 9, "button", 2, \u0275\u0275repeaterTrackByIdentity);
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(3);
    \u0275\u0275repeater(ctx_r2.buttons);
  }
}
function NzModalFooterComponent_Conditional_0_ng_container_0_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "div", 1);
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(3);
    \u0275\u0275property("innerHTML", ctx_r2.config.nzFooter, \u0275\u0275sanitizeHtml);
  }
}
function NzModalFooterComponent_Conditional_0_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzModalFooterComponent_Conditional_0_ng_container_0_Conditional_1_Template, 2, 0)(2, NzModalFooterComponent_Conditional_0_ng_container_0_Conditional_2_Template, 1, 1, "div", 1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r2.buttonsFooter ? 1 : 2);
  }
}
function NzModalFooterComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzModalFooterComponent_Conditional_0_ng_container_0_Template, 3, 1, "ng-container", 0);
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r2.config.nzFooter)("nzStringTemplateOutletContext", \u0275\u0275pureFunction2(2, _c38, ctx_r2.config.nzData, ctx_r2.modalRef));
  }
}
function NzModalFooterComponent_Conditional_1_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 6);
    \u0275\u0275listener("click", function NzModalFooterComponent_Conditional_1_Conditional_0_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onCancel());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275property("nzLoading", ctx_r2.config.nzCancelLoading)("disabled", ctx_r2.config.nzCancelDisabled);
    \u0275\u0275attribute("cdkFocusInitial", ctx_r2.config.nzAutofocus === "cancel" || null);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.config.nzCancelText || ctx_r2.locale.cancelText, " ");
  }
}
function NzModalFooterComponent_Conditional_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 7);
    \u0275\u0275listener("click", function NzModalFooterComponent_Conditional_1_Conditional_1_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r5);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onOk());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275property("nzType", ctx_r2.config.nzOkType)("nzDanger", ctx_r2.config.nzOkDanger)("nzLoading", ctx_r2.config.nzOkLoading)("disabled", ctx_r2.config.nzOkDisabled);
    \u0275\u0275attribute("cdkFocusInitial", ctx_r2.config.nzAutofocus === "ok" || null);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.config.nzOkText || ctx_r2.locale.okText, " ");
  }
}
function NzModalFooterComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzModalFooterComponent_Conditional_1_Conditional_0_Template, 2, 4, "button", 4)(1, NzModalFooterComponent_Conditional_1_Conditional_1_Template, 2, 6, "button", 5);
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275conditional(ctx_r2.config.nzCancelText !== null ? 0 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(ctx_r2.config.nzOkText !== null ? 1 : -1);
  }
}
var _c46 = ["nz-modal-title", ""];
function NzModalTitleComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "div", 2);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("innerHTML", ctx_r0.config.nzTitle, \u0275\u0275sanitizeHtml);
  }
}
function NzModalContainerComponent_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 9);
    \u0275\u0275listener("click", function NzModalContainerComponent_Conditional_4_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onCloseClick());
    });
    \u0275\u0275elementEnd();
  }
}
function NzModalContainerComponent_Conditional_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "div", 10);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275styleProp("cursor", ctx_r1.config.nzDraggable ? "move" : "auto");
  }
}
function NzModalContainerComponent_ng_template_7_Template(rf, ctx) {
}
function NzModalContainerComponent_Conditional_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "div", 7);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("innerHTML", ctx_r1.config.nzContent, \u0275\u0275sanitizeHtml);
  }
}
function NzModalContainerComponent_Conditional_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 11);
    \u0275\u0275listener("cancelTriggered", function NzModalContainerComponent_Conditional_9_Template_div_cancelTriggered_0_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onCloseClick());
    })("okTriggered", function NzModalContainerComponent_Conditional_9_Template_div_okTriggered_0_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onOkClick());
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("modalRef", ctx_r1.modalRef);
  }
}
var noopFun = () => void 0;
var ModalOptions = class {
  constructor() {
    this.nzCentered = false;
    this.nzClosable = true;
    this.nzOkLoading = false;
    this.nzOkDisabled = false;
    this.nzCancelDisabled = false;
    this.nzCancelLoading = false;
    this.nzDraggable = false;
    this.nzNoAnimation = false;
    this.nzAutofocus = "auto";
    this.nzKeyboard = true;
    this.nzZIndex = 1e3;
    this.nzWidth = 520;
    this.nzCloseIcon = "close";
    this.nzOkType = "primary";
    this.nzOkDanger = false;
    this.nzModalType = "default";
    this.nzOnCancel = noopFun;
    this.nzOnOk = noopFun;
    this.nzIconType = "question-circle";
  }
};
var ZOOM_CLASS_NAME_MAP = {
  enter: "ant-zoom-enter",
  enterActive: "ant-zoom-enter-active",
  leave: "ant-zoom-leave",
  leaveActive: "ant-zoom-leave-active"
};
var FADE_CLASS_NAME_MAP = {
  enter: "ant-fade-enter",
  enterActive: "ant-fade-enter-active",
  leave: "ant-fade-leave",
  leaveActive: "ant-fade-leave-active"
};
var MODAL_MASK_CLASS_NAME = "ant-modal-mask";
var NZ_CONFIG_MODULE_NAME9 = "modal";
var NZ_MODAL_DATA = new InjectionToken("NZ_MODAL_DATA");
var nzModalAnimations = {
  modalContainer: trigger("modalContainer", [state("void, exit", style({})), state("enter", style({})), transition("* => enter", animate(".24s", style({}))), transition("* => void, * => exit", animate(".2s", style({})))])
};
var NzModalCloseComponent = class _NzModalCloseComponent {
  constructor(config) {
    this.config = config;
  }
  static {
    this.\u0275fac = function NzModalCloseComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzModalCloseComponent)(\u0275\u0275directiveInject(ModalOptions));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzModalCloseComponent,
      selectors: [["button", "nz-modal-close", ""]],
      hostAttrs: ["aria-label", "Close", 1, "ant-modal-close"],
      exportAs: ["NzModalCloseBuiltin"],
      attrs: _c030,
      decls: 2,
      vars: 1,
      consts: [[1, "ant-modal-close-x"], [4, "nzStringTemplateOutlet"], [1, "ant-modal-close-icon", 3, "nzType"]],
      template: function NzModalCloseComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275elementStart(0, "span", 0);
          \u0275\u0275template(1, NzModalCloseComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
          \u0275\u0275elementEnd();
        }
        if (rf & 2) {
          \u0275\u0275advance();
          \u0275\u0275property("nzStringTemplateOutlet", ctx.config.nzCloseIcon);
        }
      },
      dependencies: [NzIconModule, NzIconDirective, NzOutletModule, NzStringTemplateOutletDirective],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzModalCloseComponent, [{
    type: Component,
    args: [{
      selector: "button[nz-modal-close]",
      exportAs: "NzModalCloseBuiltin",
      template: `
    <span class="ant-modal-close-x">
      <ng-container *nzStringTemplateOutlet="config.nzCloseIcon; let closeIcon">
        <nz-icon [nzType]="closeIcon" class="ant-modal-close-icon" />
      </ng-container>
    </span>
  `,
      host: {
        class: "ant-modal-close",
        "aria-label": "Close"
      },
      changeDetection: ChangeDetectionStrategy.OnPush,
      imports: [NzIconModule, NzOutletModule]
    }]
  }], () => [{
    type: ModalOptions
  }], null);
})();
function applyConfigDefaults(config, defaultOptions) {
  return __spreadValues(__spreadValues({}, defaultOptions), config);
}
function getValueWithConfig(userValue, configValue, defaultValue) {
  return typeof userValue === "undefined" ? typeof configValue === "undefined" ? defaultValue : configValue : userValue;
}
function getConfigFromComponent(component) {
  const {
    nzCentered,
    nzMask,
    nzMaskClosable,
    nzClosable,
    nzOkLoading,
    nzOkDisabled,
    nzCancelDisabled,
    nzCancelLoading,
    nzKeyboard,
    nzNoAnimation,
    nzDraggable,
    nzContent,
    nzFooter,
    nzZIndex,
    nzWidth,
    nzWrapClassName,
    nzClassName,
    nzStyle,
    nzTitle,
    nzCloseIcon,
    nzMaskStyle,
    nzBodyStyle,
    nzOkText,
    nzCancelText,
    nzOkType,
    nzOkDanger,
    nzIconType,
    nzModalType,
    nzOnOk,
    nzOnCancel,
    nzAfterOpen,
    nzAfterClose,
    nzCloseOnNavigation,
    nzAutofocus
  } = component;
  return {
    nzCentered,
    nzMask,
    nzMaskClosable,
    nzDraggable,
    nzClosable,
    nzOkLoading,
    nzOkDisabled,
    nzCancelDisabled,
    nzCancelLoading,
    nzKeyboard,
    nzNoAnimation,
    nzContent,
    nzFooter,
    nzZIndex,
    nzWidth,
    nzWrapClassName,
    nzClassName,
    nzStyle,
    nzTitle,
    nzCloseIcon,
    nzMaskStyle,
    nzBodyStyle,
    nzOkText,
    nzCancelText,
    nzOkType,
    nzOkDanger,
    nzIconType,
    nzModalType,
    nzOnOk,
    nzOnCancel,
    nzAfterOpen,
    nzAfterClose,
    nzCloseOnNavigation,
    nzAutofocus
  };
}
function throwNzModalContentAlreadyAttachedError() {
  throw Error("Attempting to attach modal content after content is already attached");
}
var BaseModalContainerComponent = class _BaseModalContainerComponent extends BasePortalOutlet {
  get showMask() {
    const defaultConfig = this.nzConfigService.getConfigForComponent(NZ_CONFIG_MODULE_NAME9) || {};
    return !!getValueWithConfig(this.config.nzMask, defaultConfig.nzMask, true);
  }
  get maskClosable() {
    const defaultConfig = this.nzConfigService.getConfigForComponent(NZ_CONFIG_MODULE_NAME9) || {};
    return !!getValueWithConfig(this.config.nzMaskClosable, defaultConfig.nzMaskClosable, true);
  }
  constructor() {
    super();
    this.animationStateChanged = new EventEmitter();
    this.containerClick = new EventEmitter();
    this.cancelTriggered = new EventEmitter();
    this.okTriggered = new EventEmitter();
    this.state = "enter";
    this.document = inject(DOCUMENT);
    this.isStringContent = false;
    this.dir = "ltr";
    this.elementFocusedBeforeModalWasOpened = null;
    this.mouseDown = false;
    this.oldMaskStyle = null;
    this.cdr = inject(ChangeDetectorRef);
    this.config = inject(ModalOptions);
    this.destroy$ = new Subject();
    this.ngZone = inject(NgZone);
    this.host = inject(ElementRef);
    this.focusTrapFactory = inject(FocusTrapFactory);
    this.render = inject(Renderer2);
    this.overlayRef = inject(OverlayRef);
    this.nzConfigService = inject(NzConfigService);
    this.animationType = inject(ANIMATION_MODULE_TYPE, {
      optional: true
    });
    this.dir = this.overlayRef.getDirection();
    this.isStringContent = typeof this.config.nzContent === "string";
    this.nzConfigService.getConfigChangeEventForComponent(NZ_CONFIG_MODULE_NAME9).pipe(takeUntil(this.destroy$)).subscribe(() => {
      this.updateMaskClassname();
    });
  }
  onContainerClick(e) {
    if (e.target === e.currentTarget && !this.mouseDown && this.showMask && this.maskClosable) {
      this.containerClick.emit();
    }
  }
  onCloseClick() {
    this.cancelTriggered.emit();
  }
  onOkClick() {
    this.okTriggered.emit();
  }
  attachComponentPortal(portal) {
    if (this.portalOutlet.hasAttached()) {
      throwNzModalContentAlreadyAttachedError();
    }
    this.savePreviouslyFocusedElement();
    this.setZIndexForBackdrop();
    return this.portalOutlet.attachComponentPortal(portal);
  }
  attachTemplatePortal(portal) {
    if (this.portalOutlet.hasAttached()) {
      throwNzModalContentAlreadyAttachedError();
    }
    this.savePreviouslyFocusedElement();
    this.setZIndexForBackdrop();
    return this.portalOutlet.attachTemplatePortal(portal);
  }
  attachStringContent() {
    this.savePreviouslyFocusedElement();
    this.setZIndexForBackdrop();
  }
  getNativeElement() {
    return this.host.nativeElement;
  }
  animationDisabled() {
    return this.config.nzNoAnimation || this.animationType === "NoopAnimations";
  }
  setModalTransformOrigin() {
    const modalElement = this.modalElementRef.nativeElement;
    if (this.elementFocusedBeforeModalWasOpened) {
      const previouslyDOMRect = this.elementFocusedBeforeModalWasOpened.getBoundingClientRect();
      const lastPosition = getElementOffset(this.elementFocusedBeforeModalWasOpened);
      const x = lastPosition.left + previouslyDOMRect.width / 2;
      const y = lastPosition.top + previouslyDOMRect.height / 2;
      const transformOrigin = `${x - modalElement.offsetLeft}px ${y - modalElement.offsetTop}px 0px`;
      this.render.setStyle(modalElement, "transform-origin", transformOrigin);
    }
  }
  savePreviouslyFocusedElement() {
    if (!this.focusTrap) {
      this.focusTrap = this.focusTrapFactory.create(this.host.nativeElement);
    }
    if (this.document) {
      this.elementFocusedBeforeModalWasOpened = this.document.activeElement;
      if (this.host.nativeElement.focus) {
        this.ngZone.runOutsideAngular(() => reqAnimFrame(() => this.host.nativeElement.focus()));
      }
    }
  }
  trapFocus() {
    const element = this.host.nativeElement;
    if (this.config.nzAutofocus) {
      this.focusTrap.focusInitialElementWhenReady();
    } else {
      const activeElement = this.document.activeElement;
      if (activeElement !== element && !element.contains(activeElement)) {
        element.focus();
      }
    }
  }
  restoreFocus() {
    const toFocus = this.elementFocusedBeforeModalWasOpened;
    if (toFocus && typeof toFocus.focus === "function") {
      const activeElement = this.document.activeElement;
      const element = this.host.nativeElement;
      if (!activeElement || activeElement === this.document.body || activeElement === element || element.contains(activeElement)) {
        toFocus.focus();
      }
    }
    if (this.focusTrap) {
      this.focusTrap.destroy();
    }
  }
  setEnterAnimationClass() {
    if (this.animationDisabled()) {
      return;
    }
    this.setModalTransformOrigin();
    const modalElement = this.modalElementRef.nativeElement;
    const backdropElement = this.overlayRef.backdropElement;
    modalElement.classList.add(ZOOM_CLASS_NAME_MAP.enter);
    modalElement.classList.add(ZOOM_CLASS_NAME_MAP.enterActive);
    if (backdropElement) {
      backdropElement.classList.add(FADE_CLASS_NAME_MAP.enter);
      backdropElement.classList.add(FADE_CLASS_NAME_MAP.enterActive);
    }
  }
  setExitAnimationClass() {
    const modalElement = this.modalElementRef.nativeElement;
    modalElement.classList.add(ZOOM_CLASS_NAME_MAP.leave);
    modalElement.classList.add(ZOOM_CLASS_NAME_MAP.leaveActive);
    this.setMaskExitAnimationClass();
  }
  setMaskExitAnimationClass(force = false) {
    const backdropElement = this.overlayRef.backdropElement;
    if (backdropElement) {
      if (this.animationDisabled() || force) {
        backdropElement.classList.remove(MODAL_MASK_CLASS_NAME);
        return;
      }
      backdropElement.classList.add(FADE_CLASS_NAME_MAP.leave);
      backdropElement.classList.add(FADE_CLASS_NAME_MAP.leaveActive);
    }
  }
  cleanAnimationClass() {
    if (this.animationDisabled()) {
      return;
    }
    const backdropElement = this.overlayRef.backdropElement;
    const modalElement = this.modalElementRef.nativeElement;
    if (backdropElement) {
      backdropElement.classList.remove(FADE_CLASS_NAME_MAP.enter);
      backdropElement.classList.remove(FADE_CLASS_NAME_MAP.enterActive);
    }
    modalElement.classList.remove(ZOOM_CLASS_NAME_MAP.enter);
    modalElement.classList.remove(ZOOM_CLASS_NAME_MAP.enterActive);
    modalElement.classList.remove(ZOOM_CLASS_NAME_MAP.leave);
    modalElement.classList.remove(ZOOM_CLASS_NAME_MAP.leaveActive);
  }
  setZIndexForBackdrop() {
    const backdropElement = this.overlayRef.backdropElement;
    if (backdropElement) {
      if (isNotNil(this.config.nzZIndex)) {
        this.render.setStyle(backdropElement, "z-index", this.config.nzZIndex);
      }
    }
  }
  bindBackdropStyle() {
    const backdropElement = this.overlayRef.backdropElement;
    if (backdropElement) {
      if (this.oldMaskStyle) {
        const styles = this.oldMaskStyle;
        Object.keys(styles).forEach((key) => {
          this.render.removeStyle(backdropElement, key);
        });
        this.oldMaskStyle = null;
      }
      this.setZIndexForBackdrop();
      if (typeof this.config.nzMaskStyle === "object" && Object.keys(this.config.nzMaskStyle).length) {
        const styles = __spreadValues({}, this.config.nzMaskStyle);
        Object.keys(styles).forEach((key) => {
          this.render.setStyle(backdropElement, key, styles[key]);
        });
        this.oldMaskStyle = styles;
      }
    }
  }
  updateMaskClassname() {
    const backdropElement = this.overlayRef.backdropElement;
    if (backdropElement) {
      if (this.showMask) {
        backdropElement.classList.add(MODAL_MASK_CLASS_NAME);
      } else {
        backdropElement.classList.remove(MODAL_MASK_CLASS_NAME);
      }
    }
  }
  onAnimationDone(event2) {
    if (event2.toState === "enter") {
      this.trapFocus();
    } else if (event2.toState === "exit") {
      this.restoreFocus();
    }
    this.cleanAnimationClass();
    this.animationStateChanged.emit(event2);
  }
  onAnimationStart(event2) {
    if (event2.toState === "enter") {
      this.setEnterAnimationClass();
      this.bindBackdropStyle();
    } else if (event2.toState === "exit") {
      this.setExitAnimationClass();
    }
    this.animationStateChanged.emit(event2);
  }
  startExitAnimation() {
    this.state = "exit";
    this.cdr.markForCheck();
  }
  ngOnDestroy() {
    this.setMaskExitAnimationClass(true);
    this.destroy$.next(true);
    this.destroy$.complete();
  }
  setupMouseListeners(modalContainer) {
    fromEventOutsideAngular(this.host.nativeElement, "mouseup").pipe(takeUntil(this.destroy$)).subscribe(() => {
      if (this.mouseDown) {
        setTimeout(() => {
          this.mouseDown = false;
        });
      }
    });
    fromEventOutsideAngular(modalContainer.nativeElement, "mousedown").pipe(takeUntil(this.destroy$)).subscribe(() => {
      this.mouseDown = true;
    });
  }
  static {
    this.\u0275fac = function BaseModalContainerComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _BaseModalContainerComponent)();
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _BaseModalContainerComponent,
      features: [\u0275\u0275InheritDefinitionFeature]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BaseModalContainerComponent, [{
    type: Directive
  }], () => [], null);
})();
var NzModalConfirmContainerComponent = class _NzModalConfirmContainerComponent extends BaseModalContainerComponent {
  constructor() {
    super();
    this.cancelTriggered = new EventEmitter();
    this.okTriggered = new EventEmitter();
    this.i18n = inject(NzI18nService);
    this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
      this.locale = this.i18n.getLocaleData("Modal");
    });
  }
  ngOnInit() {
    this.setupMouseListeners(this.modalElementRef);
  }
  onCancel() {
    this.cancelTriggered.emit();
  }
  onOk() {
    this.okTriggered.emit();
  }
  static {
    this.\u0275fac = function NzModalConfirmContainerComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzModalConfirmContainerComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzModalConfirmContainerComponent,
      selectors: [["nz-modal-confirm-container"]],
      viewQuery: function NzModalConfirmContainerComponent_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(CdkPortalOutlet, 7);
          \u0275\u0275viewQuery(_c121, 7);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.portalOutlet = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.modalElementRef = _t.first);
        }
      },
      hostAttrs: ["tabindex", "-1", "role", "dialog"],
      hostVars: 10,
      hostBindings: function NzModalConfirmContainerComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275syntheticHostListener("@modalContainer.start", function NzModalConfirmContainerComponent_animation_modalContainer_start_HostBindingHandler($event) {
            return ctx.onAnimationStart($event);
          })("@modalContainer.done", function NzModalConfirmContainerComponent_animation_modalContainer_done_HostBindingHandler($event) {
            return ctx.onAnimationDone($event);
          });
          \u0275\u0275listener("click", function NzModalConfirmContainerComponent_click_HostBindingHandler($event) {
            return ctx.onContainerClick($event);
          });
        }
        if (rf & 2) {
          \u0275\u0275syntheticHostProperty("@.disabled", ctx.config.nzNoAnimation)("@modalContainer", ctx.state);
          \u0275\u0275classMap(ctx.config.nzWrapClassName ? "ant-modal-wrap " + ctx.config.nzWrapClassName : "ant-modal-wrap");
          \u0275\u0275styleProp("z-index", ctx.config.nzZIndex);
          \u0275\u0275classProp("ant-modal-wrap-rtl", ctx.dir === "rtl")("ant-modal-centered", ctx.config.nzCentered);
        }
      },
      outputs: {
        cancelTriggered: "cancelTriggered",
        okTriggered: "okTriggered"
      },
      exportAs: ["nzModalConfirmContainer"],
      features: [\u0275\u0275HostDirectivesFeature([CdkScrollable]), \u0275\u0275InheritDefinitionFeature],
      decls: 17,
      vars: 16,
      consts: [["modalElement", ""], ["role", "document", 1, "ant-modal"], [1, "ant-modal-content"], ["nz-modal-close", ""], [1, "ant-modal-body"], [1, "ant-modal-confirm-body-wrapper"], [1, "ant-modal-confirm-body"], [3, "nzType"], [1, "ant-modal-confirm-title"], [4, "nzStringTemplateOutlet"], [1, "ant-modal-confirm-content"], ["cdkPortalOutlet", ""], [3, "innerHTML"], [1, "ant-modal-confirm-btns"], ["nz-button", "", 3, "nzLoading", "disabled"], ["nz-button", "", 3, "nzType", "nzLoading", "disabled", "nzDanger"], ["nz-modal-close", "", 3, "click"], ["nz-button", "", 3, "click", "nzLoading", "disabled"], ["nz-button", "", 3, "click", "nzType", "nzLoading", "disabled", "nzDanger"]],
      template: function NzModalConfirmContainerComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275elementStart(0, "div", 1, 0);
          \u0275\u0275pipe(2, "nzToCssUnit");
          \u0275\u0275elementStart(3, "div", 2);
          \u0275\u0275template(4, NzModalConfirmContainerComponent_Conditional_4_Template, 1, 0, "button", 3);
          \u0275\u0275elementStart(5, "div", 4)(6, "div", 5)(7, "div", 6);
          \u0275\u0275element(8, "nz-icon", 7);
          \u0275\u0275elementStart(9, "span", 8);
          \u0275\u0275template(10, NzModalConfirmContainerComponent_ng_container_10_Template, 2, 1, "ng-container", 9);
          \u0275\u0275elementEnd();
          \u0275\u0275elementStart(11, "div", 10);
          \u0275\u0275template(12, NzModalConfirmContainerComponent_ng_template_12_Template, 0, 0, "ng-template", 11)(13, NzModalConfirmContainerComponent_Conditional_13_Template, 1, 1, "div", 12);
          \u0275\u0275elementEnd()();
          \u0275\u0275elementStart(14, "div", 13);
          \u0275\u0275template(15, NzModalConfirmContainerComponent_Conditional_15_Template, 2, 4, "button", 14)(16, NzModalConfirmContainerComponent_Conditional_16_Template, 2, 6, "button", 15);
          \u0275\u0275elementEnd()()()()();
        }
        if (rf & 2) {
          \u0275\u0275styleMap(ctx.config.nzStyle);
          \u0275\u0275classMap(ctx.config.nzClassName);
          \u0275\u0275styleProp("width", \u0275\u0275pipeBind1(2, 14, ctx.config == null ? null : ctx.config.nzWidth));
          \u0275\u0275advance(4);
          \u0275\u0275conditional(ctx.config.nzClosable ? 4 : -1);
          \u0275\u0275advance();
          \u0275\u0275styleMap(ctx.config.nzBodyStyle);
          \u0275\u0275advance(3);
          \u0275\u0275property("nzType", ctx.config.nzIconType);
          \u0275\u0275advance(2);
          \u0275\u0275property("nzStringTemplateOutlet", ctx.config.nzTitle);
          \u0275\u0275advance(3);
          \u0275\u0275conditional(ctx.isStringContent ? 13 : -1);
          \u0275\u0275advance(2);
          \u0275\u0275conditional(ctx.config.nzCancelText !== null ? 15 : -1);
          \u0275\u0275advance();
          \u0275\u0275conditional(ctx.config.nzOkText !== null ? 16 : -1);
        }
      },
      dependencies: [NzPipesModule, NzToCssUnitPipe, NzIconModule, NzIconDirective, NzModalCloseComponent, NzOutletModule, NzStringTemplateOutletDirective, PortalModule, CdkPortalOutlet, NzButtonModule, NzButtonComponent, NzTransitionPatchDirective, NzWaveDirective],
      encapsulation: 2,
      data: {
        animation: [nzModalAnimations.modalContainer]
      }
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzModalConfirmContainerComponent, [{
    type: Component,
    args: [{
      selector: "nz-modal-confirm-container",
      exportAs: "nzModalConfirmContainer",
      template: `
    <div
      #modalElement
      role="document"
      class="ant-modal"
      [class]="config.nzClassName!"
      [style]="config.nzStyle!"
      [style.width]="config?.nzWidth! | nzToCssUnit"
    >
      <div class="ant-modal-content">
        @if (config.nzClosable) {
          <button nz-modal-close (click)="onCloseClick()"></button>
        }

        <div class="ant-modal-body" [style]="config.nzBodyStyle!">
          <div class="ant-modal-confirm-body-wrapper">
            <div class="ant-modal-confirm-body">
              <nz-icon [nzType]="config.nzIconType!" />
              <span class="ant-modal-confirm-title">
                <ng-container *nzStringTemplateOutlet="config.nzTitle">
                  <span [innerHTML]="config.nzTitle"></span>
                </ng-container>
              </span>
              <div class="ant-modal-confirm-content">
                <ng-template cdkPortalOutlet></ng-template>
                @if (isStringContent) {
                  <div [innerHTML]="config.nzContent"></div>
                }
              </div>
            </div>
            <div class="ant-modal-confirm-btns">
              @if (config.nzCancelText !== null) {
                <button
                  [attr.cdkFocusInitial]="config.nzAutofocus === 'cancel' || null"
                  nz-button
                  (click)="onCancel()"
                  [nzLoading]="config.nzCancelLoading"
                  [disabled]="config.nzCancelDisabled"
                >
                  {{ config.nzCancelText || locale.cancelText }}
                </button>
              }
              @if (config.nzOkText !== null) {
                <button
                  [attr.cdkFocusInitial]="config.nzAutofocus === 'ok' || null"
                  nz-button
                  [nzType]="config.nzOkType!"
                  (click)="onOk()"
                  [nzLoading]="config.nzOkLoading"
                  [disabled]="config.nzOkDisabled"
                  [nzDanger]="config.nzOkDanger"
                >
                  {{ config.nzOkText || locale.okText }}
                </button>
              }
            </div>
          </div>
        </div>
      </div>
    </div>
  `,
      hostDirectives: [CdkScrollable],
      animations: [nzModalAnimations.modalContainer],
      // Using OnPush for modal caused footer can not to detect changes. we can fix it when 8.x.
      changeDetection: ChangeDetectionStrategy.Default,
      host: {
        tabindex: "-1",
        role: "dialog",
        "[class]": 'config.nzWrapClassName ? "ant-modal-wrap " + config.nzWrapClassName : "ant-modal-wrap"',
        "[class.ant-modal-wrap-rtl]": `dir === 'rtl'`,
        "[class.ant-modal-centered]": "config.nzCentered",
        "[style.zIndex]": "config.nzZIndex",
        "[@.disabled]": "config.nzNoAnimation",
        "[@modalContainer]": "state",
        "(@modalContainer.start)": "onAnimationStart($event)",
        "(@modalContainer.done)": "onAnimationDone($event)",
        "(click)": "onContainerClick($event)"
      },
      imports: [NzPipesModule, NzIconModule, NzModalCloseComponent, NzOutletModule, PortalModule, NzButtonModule]
    }]
  }], () => [], {
    portalOutlet: [{
      type: ViewChild,
      args: [CdkPortalOutlet, {
        static: true
      }]
    }],
    modalElementRef: [{
      type: ViewChild,
      args: ["modalElement", {
        static: true
      }]
    }],
    cancelTriggered: [{
      type: Output
    }],
    okTriggered: [{
      type: Output
    }]
  });
})();
var NzModalFooterComponent = class _NzModalFooterComponent {
  constructor(i18n, config) {
    this.i18n = i18n;
    this.config = config;
    this.buttonsFooter = false;
    this.buttons = [];
    this.cancelTriggered = new EventEmitter();
    this.okTriggered = new EventEmitter();
    this.destroy$ = new Subject();
    if (Array.isArray(config.nzFooter)) {
      this.buttonsFooter = true;
      this.buttons = config.nzFooter.map(mergeDefaultOption);
    }
    this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
      this.locale = this.i18n.getLocaleData("Modal");
    });
  }
  onCancel() {
    this.cancelTriggered.emit();
  }
  onOk() {
    this.okTriggered.emit();
  }
  /**
   * Returns the value of the specified key.
   * If it is a function, run and return the return value of the function.
   */
  getButtonCallableProp(options, prop) {
    const value = options[prop];
    const componentInstance = this.modalRef.getContentComponent();
    return typeof value === "function" ? value.apply(options, componentInstance && [componentInstance]) : value;
  }
  /**
   * Run function based on the type and set its `loading` prop if needed.
   */
  onButtonClick(options) {
    const loading = this.getButtonCallableProp(options, "loading");
    if (!loading) {
      const result = this.getButtonCallableProp(options, "onClick");
      if (options.autoLoading && isPromise(result)) {
        options.loading = true;
        result.then(() => options.loading = false).catch((e) => {
          options.loading = false;
          throw e;
        });
      }
    }
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  static {
    this.\u0275fac = function NzModalFooterComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzModalFooterComponent)(\u0275\u0275directiveInject(NzI18nService), \u0275\u0275directiveInject(ModalOptions));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzModalFooterComponent,
      selectors: [["div", "nz-modal-footer", ""]],
      hostAttrs: [1, "ant-modal-footer"],
      inputs: {
        modalRef: "modalRef"
      },
      outputs: {
        cancelTriggered: "cancelTriggered",
        okTriggered: "okTriggered"
      },
      exportAs: ["NzModalFooterBuiltin"],
      attrs: _c217,
      decls: 2,
      vars: 1,
      consts: [[4, "nzStringTemplateOutlet", "nzStringTemplateOutletContext"], [3, "innerHTML"], ["nz-button", "", 3, "hidden", "nzLoading", "disabled", "nzType", "nzDanger", "nzShape", "nzSize", "nzGhost"], ["nz-button", "", 3, "click", "hidden", "nzLoading", "disabled", "nzType", "nzDanger", "nzShape", "nzSize", "nzGhost"], ["nz-button", "", 3, "nzLoading", "disabled"], ["nz-button", "", 3, "nzType", "nzDanger", "nzLoading", "disabled"], ["nz-button", "", 3, "click", "nzLoading", "disabled"], ["nz-button", "", 3, "click", "nzType", "nzDanger", "nzLoading", "disabled"]],
      template: function NzModalFooterComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275template(0, NzModalFooterComponent_Conditional_0_Template, 1, 5, "ng-container")(1, NzModalFooterComponent_Conditional_1_Template, 2, 2);
        }
        if (rf & 2) {
          \u0275\u0275conditional(ctx.config.nzFooter ? 0 : 1);
        }
      },
      dependencies: [NzOutletModule, NzStringTemplateOutletDirective, NzButtonModule, NzButtonComponent, NzTransitionPatchDirective, NzWaveDirective],
      encapsulation: 2
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzModalFooterComponent, [{
    type: Component,
    args: [{
      selector: "div[nz-modal-footer]",
      exportAs: "NzModalFooterBuiltin",
      template: `
    @if (config.nzFooter) {
      <ng-container
        *nzStringTemplateOutlet="config.nzFooter; context: { $implicit: config.nzData, modalRef: modalRef }"
      >
        @if (buttonsFooter) {
          @for (button of buttons; track button) {
            <button
              nz-button
              (click)="onButtonClick(button)"
              [hidden]="!getButtonCallableProp(button, 'show')"
              [nzLoading]="getButtonCallableProp(button, 'loading')"
              [disabled]="getButtonCallableProp(button, 'disabled')"
              [nzType]="button.type!"
              [nzDanger]="button.danger"
              [nzShape]="button.shape!"
              [nzSize]="button.size!"
              [nzGhost]="button.ghost!"
            >
              {{ button.label }}
            </button>
          }
        } @else {
          <div [innerHTML]="config.nzFooter"></div>
        }
      </ng-container>
    } @else {
      @if (config.nzCancelText !== null) {
        <button
          [attr.cdkFocusInitial]="config.nzAutofocus === 'cancel' || null"
          nz-button
          (click)="onCancel()"
          [nzLoading]="config.nzCancelLoading"
          [disabled]="config.nzCancelDisabled"
        >
          {{ config.nzCancelText || locale.cancelText }}
        </button>
      }
      @if (config.nzOkText !== null) {
        <button
          [attr.cdkFocusInitial]="config.nzAutofocus === 'ok' || null"
          nz-button
          [nzType]="config.nzOkType!"
          [nzDanger]="config.nzOkDanger"
          (click)="onOk()"
          [nzLoading]="config.nzOkLoading"
          [disabled]="config.nzOkDisabled"
        >
          {{ config.nzOkText || locale.okText }}
        </button>
      }
    }
  `,
      host: {
        class: "ant-modal-footer"
      },
      changeDetection: ChangeDetectionStrategy.Default,
      imports: [NzOutletModule, NzButtonModule]
    }]
  }], () => [{
    type: NzI18nService
  }, {
    type: ModalOptions
  }], {
    cancelTriggered: [{
      type: Output
    }],
    okTriggered: [{
      type: Output
    }],
    modalRef: [{
      type: Input
    }]
  });
})();
function mergeDefaultOption(options) {
  return __spreadValues({
    type: null,
    size: "default",
    autoLoading: true,
    show: true,
    loading: false,
    disabled: false
  }, options);
}
var NzModalTitleComponent = class _NzModalTitleComponent {
  constructor(config) {
    this.config = config;
  }
  static {
    this.\u0275fac = function NzModalTitleComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzModalTitleComponent)(\u0275\u0275directiveInject(ModalOptions));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzModalTitleComponent,
      selectors: [["div", "nz-modal-title", ""]],
      hostAttrs: [1, "ant-modal-header"],
      exportAs: ["NzModalTitleBuiltin"],
      attrs: _c46,
      decls: 2,
      vars: 1,
      consts: [[1, "ant-modal-title"], [4, "nzStringTemplateOutlet"], [3, "innerHTML"]],
      template: function NzModalTitleComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275elementStart(0, "div", 0);
          \u0275\u0275template(1, NzModalTitleComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
          \u0275\u0275elementEnd();
        }
        if (rf & 2) {
          \u0275\u0275advance();
          \u0275\u0275property("nzStringTemplateOutlet", ctx.config.nzTitle);
        }
      },
      dependencies: [NzOutletModule, NzStringTemplateOutletDirective],
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzModalTitleComponent, [{
    type: Component,
    args: [{
      selector: "div[nz-modal-title]",
      exportAs: "NzModalTitleBuiltin",
      template: `
    <div class="ant-modal-title">
      <ng-container *nzStringTemplateOutlet="config.nzTitle">
        <div [innerHTML]="config.nzTitle"></div>
      </ng-container>
    </div>
  `,
      host: {
        class: "ant-modal-header"
      },
      changeDetection: ChangeDetectionStrategy.OnPush,
      imports: [NzOutletModule]
    }]
  }], () => [{
    type: ModalOptions
  }], null);
})();
var NzModalContainerComponent = class _NzModalContainerComponent extends BaseModalContainerComponent {
  ngOnInit() {
    this.setupMouseListeners(this.modalElementRef);
  }
  static {
    this.\u0275fac = /* @__PURE__ */ (() => {
      let \u0275NzModalContainerComponent_BaseFactory;
      return function NzModalContainerComponent_Factory(__ngFactoryType__) {
        return (\u0275NzModalContainerComponent_BaseFactory || (\u0275NzModalContainerComponent_BaseFactory = \u0275\u0275getInheritedFactory(_NzModalContainerComponent)))(__ngFactoryType__ || _NzModalContainerComponent);
      };
    })();
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzModalContainerComponent,
      selectors: [["nz-modal-container"]],
      viewQuery: function NzModalContainerComponent_Query(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275viewQuery(CdkPortalOutlet, 7);
          \u0275\u0275viewQuery(_c121, 7);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.portalOutlet = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.modalElementRef = _t.first);
        }
      },
      hostAttrs: ["tabindex", "-1", "role", "dialog"],
      hostVars: 10,
      hostBindings: function NzModalContainerComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275syntheticHostListener("@modalContainer.start", function NzModalContainerComponent_animation_modalContainer_start_HostBindingHandler($event) {
            return ctx.onAnimationStart($event);
          })("@modalContainer.done", function NzModalContainerComponent_animation_modalContainer_done_HostBindingHandler($event) {
            return ctx.onAnimationDone($event);
          });
          \u0275\u0275listener("click", function NzModalContainerComponent_click_HostBindingHandler($event) {
            return ctx.onContainerClick($event);
          });
        }
        if (rf & 2) {
          \u0275\u0275syntheticHostProperty("@.disabled", ctx.config.nzNoAnimation)("@modalContainer", ctx.state);
          \u0275\u0275classMap(ctx.config.nzWrapClassName ? "ant-modal-wrap " + ctx.config.nzWrapClassName : "ant-modal-wrap");
          \u0275\u0275styleProp("z-index", ctx.config.nzZIndex);
          \u0275\u0275classProp("ant-modal-wrap-rtl", ctx.dir === "rtl")("ant-modal-centered", ctx.config.nzCentered);
        }
      },
      exportAs: ["nzModalContainer"],
      features: [\u0275\u0275HostDirectivesFeature([CdkScrollable]), \u0275\u0275InheritDefinitionFeature],
      decls: 10,
      vars: 15,
      consts: [["modalElement", ""], ["cdkDrag", "", "cdkDragBoundary", ".cdk-overlay-container", "role", "document", 1, "ant-modal", 3, "cdkDragDisabled"], [1, "ant-modal-content"], ["nz-modal-close", ""], ["nz-modal-title", "", "cdkDragHandle", "", 3, "cursor"], [1, "ant-modal-body"], ["cdkPortalOutlet", ""], [3, "innerHTML"], ["nz-modal-footer", "", 3, "modalRef"], ["nz-modal-close", "", 3, "click"], ["nz-modal-title", "", "cdkDragHandle", ""], ["nz-modal-footer", "", 3, "cancelTriggered", "okTriggered", "modalRef"]],
      template: function NzModalContainerComponent_Template(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275elementStart(0, "div", 1, 0);
          \u0275\u0275pipe(2, "nzToCssUnit");
          \u0275\u0275elementStart(3, "div", 2);
          \u0275\u0275template(4, NzModalContainerComponent_Conditional_4_Template, 1, 0, "button", 3)(5, NzModalContainerComponent_Conditional_5_Template, 1, 2, "div", 4);
          \u0275\u0275elementStart(6, "div", 5);
          \u0275\u0275template(7, NzModalContainerComponent_ng_template_7_Template, 0, 0, "ng-template", 6)(8, NzModalContainerComponent_Conditional_8_Template, 1, 1, "div", 7);
          \u0275\u0275elementEnd();
          \u0275\u0275template(9, NzModalContainerComponent_Conditional_9_Template, 1, 1, "div", 8);
          \u0275\u0275elementEnd()();
        }
        if (rf & 2) {
          \u0275\u0275styleMap(ctx.config.nzStyle);
          \u0275\u0275classMap(ctx.config.nzClassName);
          \u0275\u0275styleProp("width", \u0275\u0275pipeBind1(2, 13, ctx.config == null ? null : ctx.config.nzWidth));
          \u0275\u0275property("cdkDragDisabled", !ctx.config.nzDraggable);
          \u0275\u0275advance(4);
          \u0275\u0275conditional(ctx.config.nzClosable ? 4 : -1);
          \u0275\u0275advance();
          \u0275\u0275conditional(ctx.config.nzTitle ? 5 : -1);
          \u0275\u0275advance();
          \u0275\u0275styleMap(ctx.config.nzBodyStyle);
          \u0275\u0275advance(2);
          \u0275\u0275conditional(ctx.isStringContent ? 8 : -1);
          \u0275\u0275advance();
          \u0275\u0275conditional(ctx.config.nzFooter !== null ? 9 : -1);
        }
      },
      dependencies: [NzModalCloseComponent, NzModalTitleComponent, PortalModule, CdkPortalOutlet, NzModalFooterComponent, NzPipesModule, NzToCssUnitPipe, CdkDrag, CdkDragHandle],
      encapsulation: 2,
      data: {
        animation: [nzModalAnimations.modalContainer]
      }
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzModalContainerComponent, [{
    type: Component,
    args: [{
      selector: "nz-modal-container",
      exportAs: "nzModalContainer",
      hostDirectives: [CdkScrollable],
      template: `
    <div
      #modalElement
      cdkDrag
      cdkDragBoundary=".cdk-overlay-container"
      [cdkDragDisabled]="!config.nzDraggable"
      role="document"
      class="ant-modal"
      [class]="config.nzClassName!"
      [style]="config.nzStyle!"
      [style.width]="config?.nzWidth! | nzToCssUnit"
    >
      <div class="ant-modal-content">
        @if (config.nzClosable) {
          <button nz-modal-close (click)="onCloseClick()"></button>
        }
        @if (config.nzTitle) {
          <div nz-modal-title cdkDragHandle [style.cursor]="config.nzDraggable ? 'move' : 'auto'"></div>
        }

        <div class="ant-modal-body" [style]="config.nzBodyStyle!">
          <ng-template cdkPortalOutlet />
          @if (isStringContent) {
            <div [innerHTML]="config.nzContent"></div>
          }
        </div>
        @if (config.nzFooter !== null) {
          <div
            nz-modal-footer
            [modalRef]="modalRef"
            (cancelTriggered)="onCloseClick()"
            (okTriggered)="onOkClick()"
          ></div>
        }
      </div>
    </div>
  `,
      animations: [nzModalAnimations.modalContainer],
      // Using OnPush for modal caused footer can not to detect changes. we can fix it when 8.x.
      changeDetection: ChangeDetectionStrategy.Default,
      host: {
        tabindex: "-1",
        role: "dialog",
        "[class]": 'config.nzWrapClassName ? "ant-modal-wrap " + config.nzWrapClassName : "ant-modal-wrap"',
        "[class.ant-modal-wrap-rtl]": `dir === 'rtl'`,
        "[class.ant-modal-centered]": "config.nzCentered",
        "[style.zIndex]": "config.nzZIndex",
        "[@.disabled]": "config.nzNoAnimation",
        "[@modalContainer]": "state",
        "(@modalContainer.start)": "onAnimationStart($event)",
        "(@modalContainer.done)": "onAnimationDone($event)",
        "(click)": "onContainerClick($event)"
      },
      imports: [NzModalCloseComponent, NzModalTitleComponent, PortalModule, NzModalFooterComponent, NzPipesModule, CdkDrag, CdkDragHandle]
    }]
  }], null, {
    portalOutlet: [{
      type: ViewChild,
      args: [CdkPortalOutlet, {
        static: true
      }]
    }],
    modalElementRef: [{
      type: ViewChild,
      args: ["modalElement", {
        static: true
      }]
    }]
  });
})();
var NzModalRef = class {
  constructor(overlayRef, config, containerInstance) {
    this.overlayRef = overlayRef;
    this.config = config;
    this.containerInstance = containerInstance;
    this.componentInstance = null;
    this.componentRef = null;
    this.state = 0;
    this.afterClose = new Subject();
    this.afterOpen = new Subject();
    this.destroy$ = new Subject();
    containerInstance.animationStateChanged.pipe(filter((event2) => event2.phaseName === "done" && event2.toState === "enter"), take(1)).subscribe(() => {
      this.afterOpen.next();
      this.afterOpen.complete();
      if (config.nzAfterOpen instanceof EventEmitter) {
        config.nzAfterOpen.emit();
      }
    });
    containerInstance.animationStateChanged.pipe(filter((event2) => event2.phaseName === "done" && event2.toState === "exit"), take(1)).subscribe(() => {
      clearTimeout(this.closeTimeout);
      this._finishDialogClose();
    });
    containerInstance.containerClick.pipe(takeUntil(this.destroy$)).subscribe(() => {
      const cancelable = !this.config.nzCancelLoading && !this.config.nzOkLoading;
      if (cancelable) {
        this.trigger(
          "cancel"
          /* NzTriggerAction.CANCEL */
        );
      }
    });
    overlayRef.keydownEvents().pipe(filter((event2) => this.config.nzKeyboard && !this.config.nzCancelLoading && !this.config.nzOkLoading && event2.keyCode === ESCAPE && !hasModifierKey(event2))).subscribe((event2) => {
      event2.preventDefault();
      this.trigger(
        "cancel"
        /* NzTriggerAction.CANCEL */
      );
    });
    containerInstance.cancelTriggered.pipe(takeUntil(this.destroy$)).subscribe(() => this.trigger(
      "cancel"
      /* NzTriggerAction.CANCEL */
    ));
    containerInstance.okTriggered.pipe(takeUntil(this.destroy$)).subscribe(() => this.trigger(
      "ok"
      /* NzTriggerAction.OK */
    ));
    overlayRef.detachments().subscribe(() => {
      this.afterClose.next(this.result);
      this.afterClose.complete();
      if (config.nzAfterClose instanceof EventEmitter) {
        config.nzAfterClose.emit(this.result);
      }
      this.componentInstance = null;
      this.componentRef = null;
      this.overlayRef.dispose();
    });
  }
  getContentComponent() {
    return this.componentInstance;
  }
  getContentComponentRef() {
    return this.componentRef;
  }
  getElement() {
    return this.containerInstance.getNativeElement();
  }
  destroy(result) {
    this.close(result);
  }
  triggerOk() {
    return this.trigger(
      "ok"
      /* NzTriggerAction.OK */
    );
  }
  triggerCancel() {
    return this.trigger(
      "cancel"
      /* NzTriggerAction.CANCEL */
    );
  }
  close(result) {
    if (this.state !== 0) {
      return;
    }
    this.result = result;
    this.containerInstance.animationStateChanged.pipe(filter((event2) => event2.phaseName === "start"), take(1)).subscribe((event2) => {
      this.overlayRef.detachBackdrop();
      this.closeTimeout = setTimeout(() => {
        this._finishDialogClose();
      }, event2.totalTime + 100);
    });
    this.containerInstance.startExitAnimation();
    this.state = 1;
  }
  updateConfig(config) {
    Object.assign(this.config, config);
    this.containerInstance.bindBackdropStyle();
    this.containerInstance.cdr.markForCheck();
  }
  getState() {
    return this.state;
  }
  getConfig() {
    return this.config;
  }
  getBackdropElement() {
    return this.overlayRef.backdropElement;
  }
  trigger(action) {
    return __async(this, null, function* () {
      if (this.state === 1) {
        return;
      }
      const trigger2 = {
        ok: this.config.nzOnOk,
        cancel: this.config.nzOnCancel
      }[action];
      const loadingKey = {
        ok: "nzOkLoading",
        cancel: "nzCancelLoading"
      }[action];
      const loading = this.config[loadingKey];
      if (loading) {
        return;
      }
      if (trigger2 instanceof EventEmitter) {
        trigger2.emit(this.getContentComponent());
      } else if (typeof trigger2 === "function") {
        const result = trigger2(this.getContentComponent());
        if (isPromise(result)) {
          this.config[loadingKey] = true;
          let doClose = false;
          try {
            doClose = yield result;
          } finally {
            this.config[loadingKey] = false;
            this.closeWhitResult(doClose);
          }
        } else {
          this.closeWhitResult(result);
        }
      }
    });
  }
  closeWhitResult(result) {
    if (result !== false) {
      this.close(result);
    }
  }
  _finishDialogClose() {
    this.state = 2;
    this.overlayRef.dispose();
    this.destroy$.next();
  }
};
var NzModalService = class _NzModalService {
  get openModals() {
    return this.parentModal ? this.parentModal.openModals : this.openModalsAtThisLevel;
  }
  get _afterAllClosed() {
    const parent = this.parentModal;
    return parent ? parent._afterAllClosed : this.afterAllClosedAtThisLevel;
  }
  constructor(overlay, injector, nzConfigService, directionality) {
    this.overlay = overlay;
    this.injector = injector;
    this.nzConfigService = nzConfigService;
    this.directionality = directionality;
    this.openModalsAtThisLevel = [];
    this.afterAllClosedAtThisLevel = new Subject();
    this.afterAllClose = defer(() => this.openModals.length ? this._afterAllClosed : this._afterAllClosed.pipe(startWith(void 0)));
    this.parentModal = inject(_NzModalService, {
      skipSelf: true,
      optional: true
    });
  }
  create(config) {
    return this.open(config.nzContent, config);
  }
  closeAll() {
    this.closeModals(this.openModals);
  }
  confirm(options = {}, confirmType = "confirm") {
    if ("nzFooter" in options) {
      warn(`The Confirm-Modal doesn't support "nzFooter", this property will be ignored.`);
    }
    if (!("nzWidth" in options)) {
      options.nzWidth = 416;
    }
    if (!("nzMaskClosable" in options)) {
      options.nzMaskClosable = false;
    }
    options.nzModalType = "confirm";
    options.nzClassName = `ant-modal-confirm ant-modal-confirm-${confirmType} ${options.nzClassName || ""}`;
    return this.create(options);
  }
  info(options = {}) {
    return this.confirmFactory(options, "info");
  }
  success(options = {}) {
    return this.confirmFactory(options, "success");
  }
  error(options = {}) {
    return this.confirmFactory(options, "error");
  }
  warning(options = {}) {
    return this.confirmFactory(options, "warning");
  }
  open(componentOrTemplateRef, config) {
    const configMerged = applyConfigDefaults(config || {}, new ModalOptions());
    const overlayRef = this.createOverlay(configMerged);
    const modalContainer = this.attachModalContainer(overlayRef, configMerged);
    const modalRef = this.attachModalContent(componentOrTemplateRef, modalContainer, overlayRef, configMerged);
    modalContainer.modalRef = modalRef;
    overlayZIndexSetter(overlayRef, config?.nzZIndex);
    this.openModals.push(modalRef);
    modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));
    return modalRef;
  }
  removeOpenModal(modalRef) {
    const index = this.openModals.indexOf(modalRef);
    if (index > -1) {
      this.openModals.splice(index, 1);
      if (!this.openModals.length) {
        this._afterAllClosed.next();
      }
    }
  }
  closeModals(dialogs) {
    let i = dialogs.length;
    while (i--) {
      dialogs[i].close();
      if (!this.openModals.length) {
        this._afterAllClosed.next();
      }
    }
  }
  createOverlay(config) {
    const globalConfig = this.nzConfigService.getConfigForComponent(NZ_CONFIG_MODULE_NAME9) || {};
    const overlayConfig = new OverlayConfig({
      hasBackdrop: true,
      scrollStrategy: this.overlay.scrollStrategies.block(),
      backdropClass: getValueWithConfig(config.nzMask, globalConfig.nzMask, true) ? MODAL_MASK_CLASS_NAME : "",
      positionStrategy: this.overlay.position().global(),
      disposeOnNavigation: getValueWithConfig(config.nzCloseOnNavigation, globalConfig.nzCloseOnNavigation, true),
      direction: getValueWithConfig(config.nzDirection, globalConfig.nzDirection, this.directionality.value)
    });
    return this.overlay.create(overlayConfig);
  }
  attachModalContainer(overlayRef, config) {
    const userInjector = config && config.nzViewContainerRef && config.nzViewContainerRef.injector;
    const injector = Injector.create({
      parent: userInjector || this.injector,
      providers: [{
        provide: OverlayRef,
        useValue: overlayRef
      }, {
        provide: ModalOptions,
        useValue: config
      }]
    });
    const ContainerComponent = config.nzModalType === "confirm" ? (
      // If the mode is `confirm`, use `NzModalConfirmContainerComponent`
      NzModalConfirmContainerComponent
    ) : (
      // If the mode is not `confirm`, use `NzModalContainerComponent`
      NzModalContainerComponent
    );
    const containerPortal = new ComponentPortal(ContainerComponent, config.nzViewContainerRef, injector);
    const containerRef = overlayRef.attach(containerPortal);
    return containerRef.instance;
  }
  attachModalContent(componentOrTemplateRef, modalContainer, overlayRef, config) {
    const modalRef = new NzModalRef(overlayRef, config, modalContainer);
    if (componentOrTemplateRef instanceof TemplateRef) {
      modalContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, {
        $implicit: config.nzData,
        modalRef
      }));
    } else if (isNotNil(componentOrTemplateRef) && typeof componentOrTemplateRef !== "string") {
      const injector = this.createInjector(modalRef, config);
      const contentRef = modalContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.nzViewContainerRef, injector));
      modalRef.componentRef = contentRef;
      modalRef.componentInstance = contentRef.instance;
    } else {
      modalContainer.attachStringContent();
    }
    return modalRef;
  }
  createInjector(modalRef, config) {
    const userInjector = config && config.nzViewContainerRef && config.nzViewContainerRef.injector;
    return Injector.create({
      parent: userInjector || this.injector,
      providers: [{
        provide: NzModalRef,
        useValue: modalRef
      }, {
        provide: NZ_MODAL_DATA,
        useValue: config.nzData
      }]
    });
  }
  confirmFactory(options = {}, confirmType) {
    const iconMap = {
      info: "info-circle",
      success: "check-circle",
      error: "close-circle",
      warning: "exclamation-circle"
    };
    if (!("nzIconType" in options)) {
      options.nzIconType = iconMap[confirmType];
    }
    if (!("nzCancelText" in options)) {
      options.nzCancelText = null;
    }
    return this.confirm(options, confirmType);
  }
  ngOnDestroy() {
    this.closeModals(this.openModalsAtThisLevel);
    this.afterAllClosedAtThisLevel.complete();
  }
  static {
    this.\u0275fac = function NzModalService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzModalService)(\u0275\u0275inject(Overlay), \u0275\u0275inject(Injector), \u0275\u0275inject(NzConfigService), \u0275\u0275inject(Directionality));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _NzModalService,
      factory: _NzModalService.\u0275fac
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzModalService, [{
    type: Injectable
  }], () => [{
    type: Overlay
  }, {
    type: Injector
  }, {
    type: NzConfigService
  }, {
    type: Directionality
  }], null);
})();
var NzModalContentDirective = class _NzModalContentDirective {
  constructor(templateRef) {
    this.templateRef = templateRef;
  }
  static {
    this.\u0275fac = function NzModalContentDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzModalContentDirective)(\u0275\u0275directiveInject(TemplateRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzModalContentDirective,
      selectors: [["", "nzModalContent", ""]],
      exportAs: ["nzModalContent"]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzModalContentDirective, [{
    type: Directive,
    args: [{
      selector: "[nzModalContent]",
      exportAs: "nzModalContent"
    }]
  }], () => [{
    type: TemplateRef
  }], null);
})();
var NzModalFooterDirective = class _NzModalFooterDirective {
  constructor(templateRef) {
    this.templateRef = templateRef;
    this.nzModalRef = inject(NzModalRef, {
      optional: true
    });
    if (this.nzModalRef) {
      this.nzModalRef.updateConfig({
        nzFooter: this.templateRef
      });
    }
  }
  static {
    this.\u0275fac = function NzModalFooterDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzModalFooterDirective)(\u0275\u0275directiveInject(TemplateRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzModalFooterDirective,
      selectors: [["", "nzModalFooter", ""]],
      exportAs: ["nzModalFooter"]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzModalFooterDirective, [{
    type: Directive,
    args: [{
      selector: "[nzModalFooter]",
      exportAs: "nzModalFooter"
    }]
  }], () => [{
    type: TemplateRef
  }], null);
})();
var NzModalTitleDirective = class _NzModalTitleDirective {
  constructor(templateRef) {
    this.templateRef = templateRef;
    this.nzModalRef = inject(NzModalRef, {
      optional: true
    });
    if (this.nzModalRef) {
      this.nzModalRef.updateConfig({
        nzTitle: this.templateRef
      });
    }
  }
  static {
    this.\u0275fac = function NzModalTitleDirective_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzModalTitleDirective)(\u0275\u0275directiveInject(TemplateRef));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _NzModalTitleDirective,
      selectors: [["", "nzModalTitle", ""]],
      exportAs: ["nzModalTitle"]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzModalTitleDirective, [{
    type: Directive,
    args: [{
      selector: "[nzModalTitle]",
      exportAs: "nzModalTitle"
    }]
  }], () => [{
    type: TemplateRef
  }], null);
})();
var NzModalComponent = class _NzModalComponent {
  set modalTitle(value) {
    if (value) {
      this.setTitleWithTemplate(value);
    }
  }
  set modalFooter(value) {
    if (value) {
      this.setFooterWithTemplate(value);
    }
  }
  get afterOpen() {
    return this.nzAfterOpen.asObservable();
  }
  get afterClose() {
    return this.nzAfterClose.asObservable();
  }
  constructor(cdr, modal, viewContainerRef) {
    this.cdr = cdr;
    this.modal = modal;
    this.viewContainerRef = viewContainerRef;
    this.nzVisible = false;
    this.nzClosable = true;
    this.nzOkLoading = false;
    this.nzOkDisabled = false;
    this.nzCancelDisabled = false;
    this.nzCancelLoading = false;
    this.nzKeyboard = true;
    this.nzNoAnimation = false;
    this.nzCentered = false;
    this.nzDraggable = false;
    this.nzZIndex = 1e3;
    this.nzWidth = 520;
    this.nzCloseIcon = "close";
    this.nzOkType = "primary";
    this.nzOkDanger = false;
    this.nzIconType = "question-circle";
    this.nzModalType = "default";
    this.nzAutofocus = "auto";
    this.nzOnOk = new EventEmitter();
    this.nzOnCancel = new EventEmitter();
    this.nzAfterOpen = new EventEmitter();
    this.nzAfterClose = new EventEmitter();
    this.nzVisibleChange = new EventEmitter();
    this.modalRef = null;
    this.destroy$ = new Subject();
  }
  open() {
    if (!this.nzVisible) {
      this.nzVisible = true;
      this.nzVisibleChange.emit(true);
    }
    if (!this.modalRef) {
      const config = this.getConfig();
      this.modalRef = this.modal.create(config);
      this.modalRef.afterClose.asObservable().pipe(takeUntil(this.destroy$)).subscribe(() => {
        this.close();
      });
    }
  }
  close(result) {
    if (this.nzVisible) {
      this.nzVisible = false;
      this.nzVisibleChange.emit(false);
    }
    if (this.modalRef) {
      this.modalRef.close(result);
      this.modalRef = null;
    }
  }
  destroy(result) {
    this.close(result);
  }
  triggerOk() {
    this.modalRef?.triggerOk();
  }
  triggerCancel() {
    this.modalRef?.triggerCancel();
  }
  getContentComponent() {
    return this.modalRef?.getContentComponent();
  }
  getElement() {
    return this.modalRef?.getElement();
  }
  getModalRef() {
    return this.modalRef;
  }
  setTitleWithTemplate(templateRef) {
    this.nzTitle = templateRef;
    if (this.modalRef) {
      Promise.resolve().then(() => {
        this.modalRef.updateConfig({
          nzTitle: this.nzTitle
        });
      });
    }
  }
  setFooterWithTemplate(templateRef) {
    this.nzFooter = templateRef;
    if (this.modalRef) {
      Promise.resolve().then(() => {
        this.modalRef.updateConfig({
          nzFooter: this.nzFooter
        });
      });
    }
    this.cdr.markForCheck();
  }
  getConfig() {
    const componentConfig = getConfigFromComponent(this);
    componentConfig.nzViewContainerRef = this.viewContainerRef;
    componentConfig.nzContent = this.nzContent || this.contentFromContentChild;
    return componentConfig;
  }
  ngOnChanges(changes) {
    const _a = changes, {
      nzVisible
    } = _a, otherChanges = __objRest(_a, [
      "nzVisible"
    ]);
    if (Object.keys(otherChanges).length && this.modalRef) {
      this.modalRef.updateConfig(getConfigFromComponent(this));
    }
    if (nzVisible) {
      if (this.nzVisible) {
        this.open();
      } else {
        this.close();
      }
    }
  }
  ngOnDestroy() {
    this.modalRef?._finishDialogClose();
    this.destroy$.next();
    this.destroy$.complete();
  }
  static {
    this.\u0275fac = function NzModalComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzModalComponent)(\u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(NzModalService), \u0275\u0275directiveInject(ViewContainerRef));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
      type: _NzModalComponent,
      selectors: [["nz-modal"]],
      contentQueries: function NzModalComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          \u0275\u0275contentQuery(dirIndex, NzModalTitleDirective, 7, TemplateRef);
          \u0275\u0275contentQuery(dirIndex, NzModalContentDirective, 7, TemplateRef);
          \u0275\u0275contentQuery(dirIndex, NzModalFooterDirective, 7, TemplateRef);
        }
        if (rf & 2) {
          let _t;
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.modalTitle = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.contentFromContentChild = _t.first);
          \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.modalFooter = _t.first);
        }
      },
      inputs: {
        nzMask: [2, "nzMask", "nzMask", booleanAttribute],
        nzMaskClosable: [2, "nzMaskClosable", "nzMaskClosable", booleanAttribute],
        nzCloseOnNavigation: [2, "nzCloseOnNavigation", "nzCloseOnNavigation", booleanAttribute],
        nzVisible: [2, "nzVisible", "nzVisible", booleanAttribute],
        nzClosable: [2, "nzClosable", "nzClosable", booleanAttribute],
        nzOkLoading: [2, "nzOkLoading", "nzOkLoading", booleanAttribute],
        nzOkDisabled: [2, "nzOkDisabled", "nzOkDisabled", booleanAttribute],
        nzCancelDisabled: [2, "nzCancelDisabled", "nzCancelDisabled", booleanAttribute],
        nzCancelLoading: [2, "nzCancelLoading", "nzCancelLoading", booleanAttribute],
        nzKeyboard: [2, "nzKeyboard", "nzKeyboard", booleanAttribute],
        nzNoAnimation: [2, "nzNoAnimation", "nzNoAnimation", booleanAttribute],
        nzCentered: [2, "nzCentered", "nzCentered", booleanAttribute],
        nzDraggable: [2, "nzDraggable", "nzDraggable", booleanAttribute],
        nzContent: "nzContent",
        nzFooter: "nzFooter",
        nzZIndex: [2, "nzZIndex", "nzZIndex", numberAttribute],
        nzWidth: "nzWidth",
        nzWrapClassName: "nzWrapClassName",
        nzClassName: "nzClassName",
        nzStyle: "nzStyle",
        nzTitle: "nzTitle",
        nzCloseIcon: "nzCloseIcon",
        nzMaskStyle: "nzMaskStyle",
        nzBodyStyle: "nzBodyStyle",
        nzOkText: "nzOkText",
        nzCancelText: "nzCancelText",
        nzOkType: "nzOkType",
        nzOkDanger: [2, "nzOkDanger", "nzOkDanger", booleanAttribute],
        nzIconType: "nzIconType",
        nzModalType: "nzModalType",
        nzAutofocus: "nzAutofocus",
        nzOnOk: "nzOnOk",
        nzOnCancel: "nzOnCancel"
      },
      outputs: {
        nzOnOk: "nzOnOk",
        nzOnCancel: "nzOnCancel",
        nzAfterOpen: "nzAfterOpen",
        nzAfterClose: "nzAfterClose",
        nzVisibleChange: "nzVisibleChange"
      },
      exportAs: ["nzModal"],
      features: [\u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature],
      decls: 0,
      vars: 0,
      template: function NzModalComponent_Template(rf, ctx) {
      },
      encapsulation: 2,
      changeDetection: 0
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzModalComponent, [{
    type: Component,
    args: [{
      selector: "nz-modal",
      exportAs: "nzModal",
      template: ``,
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: NzModalService
  }, {
    type: ViewContainerRef
  }], {
    nzMask: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzMaskClosable: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzCloseOnNavigation: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzVisible: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzClosable: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzOkLoading: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzOkDisabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzCancelDisabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzCancelLoading: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzKeyboard: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzNoAnimation: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzCentered: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzDraggable: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzContent: [{
      type: Input
    }],
    nzFooter: [{
      type: Input
    }],
    nzZIndex: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    nzWidth: [{
      type: Input
    }],
    nzWrapClassName: [{
      type: Input
    }],
    nzClassName: [{
      type: Input
    }],
    nzStyle: [{
      type: Input
    }],
    nzTitle: [{
      type: Input
    }],
    nzCloseIcon: [{
      type: Input
    }],
    nzMaskStyle: [{
      type: Input
    }],
    nzBodyStyle: [{
      type: Input
    }],
    nzOkText: [{
      type: Input
    }],
    nzCancelText: [{
      type: Input
    }],
    nzOkType: [{
      type: Input
    }],
    nzOkDanger: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    nzIconType: [{
      type: Input
    }],
    nzModalType: [{
      type: Input
    }],
    nzAutofocus: [{
      type: Input
    }],
    nzOnOk: [{
      type: Input
    }, {
      type: Output
    }],
    nzOnCancel: [{
      type: Input
    }, {
      type: Output
    }],
    nzAfterOpen: [{
      type: Output
    }],
    nzAfterClose: [{
      type: Output
    }],
    nzVisibleChange: [{
      type: Output
    }],
    modalTitle: [{
      type: ContentChild,
      args: [NzModalTitleDirective, {
        static: true,
        read: TemplateRef
      }]
    }],
    contentFromContentChild: [{
      type: ContentChild,
      args: [NzModalContentDirective, {
        static: true,
        read: TemplateRef
      }]
    }],
    modalFooter: [{
      type: ContentChild,
      args: [NzModalFooterDirective, {
        static: true,
        read: TemplateRef
      }]
    }]
  });
})();
var NzModalModule = class _NzModalModule {
  static {
    this.\u0275fac = function NzModalModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NzModalModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _NzModalModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
      providers: [NzModalService],
      imports: [NzModalCloseComponent, NzModalFooterComponent, NzModalTitleComponent, NzModalContainerComponent, NzModalConfirmContainerComponent]
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzModalModule, [{
    type: NgModule,
    args: [{
      imports: [NzModalComponent, NzModalFooterDirective, NzModalContentDirective, NzModalCloseComponent, NzModalFooterComponent, NzModalTitleComponent, NzModalTitleDirective, NzModalContainerComponent, NzModalConfirmContainerComponent],
      exports: [NzModalComponent, NzModalFooterDirective, NzModalContentDirective, NzModalTitleDirective],
      providers: [NzModalService]
    }]
  }], null, null);
})();

// src/app/library-modules/nz-module.ts
var NZModule = class _NZModule {
  static {
    this.\u0275fac = function NZModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NZModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _NZModule });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({ imports: [
      NzIconModule,
      NzSelectModule,
      NzSwitchModule,
      NzCheckboxModule,
      NzTreeViewModule,
      NzPipesModule,
      NzAutocompleteModule,
      NzDropDownModule,
      NzTabsModule,
      NzButtonModule,
      NzToolTipModule,
      NzInputModule,
      NzFormModule,
      NzPopoverModule,
      NzRadioModule,
      NzModalModule,
      NzIconModule
    ] });
  }
};

// src/app/modules/material/material-module.ts
var MaterialModule = class _MaterialModule {
  static {
    this.\u0275fac = function MaterialModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MaterialModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _MaterialModule });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({ imports: [
      A11yModule,
      CdkStepperModule,
      CdkTableModule,
      CdkTreeModule,
      DragDropModule,
      MatAutocompleteModule,
      MatBadgeModule,
      MatBottomSheetModule,
      MatButtonModule,
      MatButtonToggleModule,
      MatCardModule,
      MatCheckboxModule,
      MatChipsModule,
      MatStepperModule,
      MatDatepickerModule,
      MatDialogModule,
      MatDividerModule,
      MatExpansionModule,
      MatGridListModule,
      MatIconModule,
      MatInputModule,
      MatListModule,
      MatMenuModule,
      MatNativeDateModule,
      MatPaginatorModule,
      MatProgressBarModule,
      MatProgressSpinnerModule,
      MatRadioModule,
      MatRippleModule,
      MatSelectModule,
      MatSidenavModule,
      MatSliderModule,
      MatSlideToggleModule,
      MatSnackBarModule,
      MatSortModule,
      MatTableModule,
      MatTabsModule,
      MatToolbarModule,
      MatTooltipModule,
      MatTreeModule,
      PortalModule,
      ScrollingModule
    ] });
  }
};

// src/app/modules/management/management.module.ts
var MangementModule = class _MangementModule {
  static {
    this.\u0275fac = function MangementModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MangementModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _MangementModule });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({ imports: [
      CommonModule,
      FormsModule,
      ReactiveFormsModule,
      ManagementRoutingModule,
      AngularSvgIconModule,
      DragDropModule,
      MaterialModule,
      NZModule,
      AngularSvgIconModule,
      FormsModule,
      ReactiveFormsModule,
      DragDropModule,
      NZModule
    ] });
  }
};
export {
  MangementModule
};
/*! Bundled license information:

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)

@angular/core/fesm2022/rxjs-interop.mjs:
  (**
   * @license Angular v19.1.4
   * (c) 2010-2024 Google LLC. https://angular.io/
   * License: MIT
   *)
*/
//# sourceMappingURL=management.module-VEZHJJ4L.js.map
