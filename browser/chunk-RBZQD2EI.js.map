{
  "version": 3,
  "sources": ["src/app/shared/services/loading.service.ts", "src/app/shared/Interceptor/loading-interceptor.ts", "src/environments/environment.model.ts"],
  "sourcesContent": ["import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs\";\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class LoadingService {\n    private loadingSubject =\n        new BehaviorSubject<boolean>(false);\n\n    loading$ = this.loadingSubject.asObservable();\n\n    loadingOn() {\n        this.loadingSubject.next(true);\n    }\n\n    loadingOff() {\n        this.loadingSubject.next(false);\n    }\n}", "import { HttpContextToken, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { finalize, Observable } from \"rxjs\";\nimport { LoadingService } from \"../services/loading.service\";\n\nexport const SkipLoading =\n    new HttpContextToken<boolean>(() => false);\n\n@Injectable()\nexport class LoadingInterceptor\n    implements HttpInterceptor {\n    constructor(private loadingService: LoadingService) {\n    }\n\n    intercept(\n        req: HttpRequest<any>,\n        next: HttpHandler\n    ): Observable<HttpEvent<any>> {\n        // Check for a custom attribute \n        // to avoid showing loading spinner\n        if (req.context.get(SkipLoading)) {\n            // Pass the request directly to the next handler\n            return next.handle(req);\n        }\n\n        // Turn on the loading spinner\n        this.loadingService.loadingOn();\n\n        return next.handle(req).pipe(\n            finalize(() => {\n                // Turn off the loading spinner\n                this.loadingService.loadingOff();\n            })\n        );\n    }\n}", "export abstract class Environment {\n  // public apiUrl: string = 'http://localhost:8080';\n  public apiUrl: string = 'http://192.168.1.164:8080';\n  public production: boolean = false;\n  public isWebApp: boolean = false;\n  public firebase: any;\n}\n"],
  "mappings": ";;;;;;;;;;;AAMM,IAAO,iBAAP,MAAO,gBAAc;EAH3B,cAAA;AAIY,SAAA,iBACJ,IAAI,gBAAyB,KAAK;AAEtC,SAAA,WAAW,KAAK,eAAe,aAAY;;EAE3C,YAAS;AACL,SAAK,eAAe,KAAK,IAAI;EACjC;EAEA,aAAU;AACN,SAAK,eAAe,KAAK,KAAK;EAClC;;;uCAZS,iBAAc;IAAA;EAAA;;4EAAd,iBAAc,SAAd,gBAAc,WAAA,YAFX,OAAM,CAAA;EAAA;;;;ACCf,IAAM,cACT,IAAI,iBAA0B,MAAM,KAAK;AAGvC,IAAO,qBAAP,MAAO,oBAAkB;EAE3B,YAAoB,gBAA8B;AAA9B,SAAA,iBAAA;EACpB;EAEA,UACI,KACA,MAAiB;AAIjB,QAAI,IAAI,QAAQ,IAAI,WAAW,GAAG;AAE9B,aAAO,KAAK,OAAO,GAAG;IAC1B;AAGA,SAAK,eAAe,UAAS;AAE7B,WAAO,KAAK,OAAO,GAAG,EAAE,KACpB,SAAS,MAAK;AAEV,WAAK,eAAe,WAAU;IAClC,CAAC,CAAC;EAEV;;;uCAzBS,qBAAkB,mBAAA,cAAA,CAAA;IAAA;EAAA;;4EAAlB,qBAAkB,SAAlB,oBAAkB,UAAA,CAAA;EAAA;;;;ACTzB,IAAgB,cAAhB,MAA2B;EAAjC,cAAA;AAES,SAAA,SAAiB;AACjB,SAAA,aAAsB;AACtB,SAAA,WAAoB;EAE7B;;",
  "names": []
}
